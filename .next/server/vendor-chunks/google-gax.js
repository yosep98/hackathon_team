/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/google-gax";
exports.ids = ["vendor-chunks/google-gax"];
exports.modules = {

/***/ "(rsc)/./node_modules/google-gax/build/protos/iam_service.js":
/*!*************************************************************!*\
  !*** ./node_modules/google-gax/build/protos/iam_service.js ***!
  \*************************************************************/
/***/ ((module, exports, __webpack_require__) => {

eval("var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;(e=>{ true?!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(/*! protobufjs/minimal */ \"(rsc)/./node_modules/protobufjs/minimal.js\")], __WEBPACK_AMD_DEFINE_FACTORY__ = (e),\n\t\t__WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ?\n\t\t(__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__),\n\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__)):0})(function(o){var e,t,n,r,F,a=o.Reader,i=o.Writer,p=o.util,l=o.roots.iam_protos||(o.roots.iam_protos={});function B(e,t,n){o.rpc.Service.call(this,e,t,n)}function s(e){if(e)for(var t=Object.keys(e),n=0;n<t.length;++n)null!=e[t[n]]&&(this[t[n]]=e[t[n]])}function u(e){if(e)for(var t=Object.keys(e),n=0;n<t.length;++n)null!=e[t[n]]&&(this[t[n]]=e[t[n]])}function c(e){if(this.permissions=[],e)for(var t=Object.keys(e),n=0;n<t.length;++n)null!=e[t[n]]&&(this[t[n]]=e[t[n]])}function G(e){if(this.permissions=[],e)for(var t=Object.keys(e),n=0;n<t.length;++n)null!=e[t[n]]&&(this[t[n]]=e[t[n]])}function U(e){if(e)for(var t=Object.keys(e),n=0;n<t.length;++n)null!=e[t[n]]&&(this[t[n]]=e[t[n]])}function d(e){if(this.bindings=[],e)for(var t=Object.keys(e),n=0;n<t.length;++n)null!=e[t[n]]&&(this[t[n]]=e[t[n]])}function g(e){if(this.members=[],e)for(var t=Object.keys(e),n=0;n<t.length;++n)null!=e[t[n]]&&(this[t[n]]=e[t[n]])}function M(e){if(this.bindingDeltas=[],this.auditConfigDeltas=[],e)for(var t=Object.keys(e),n=0;n<t.length;++n)null!=e[t[n]]&&(this[t[n]]=e[t[n]])}function f(e){if(e)for(var t=Object.keys(e),n=0;n<t.length;++n)null!=e[t[n]]&&(this[t[n]]=e[t[n]])}function y(e){if(e)for(var t=Object.keys(e),n=0;n<t.length;++n)null!=e[t[n]]&&(this[t[n]]=e[t[n]])}function L(e){if(e)for(var t=Object.keys(e),n=0;n<t.length;++n)null!=e[t[n]]&&(this[t[n]]=e[t[n]])}function J(e){if(this.rules=[],e)for(var t=Object.keys(e),n=0;n<t.length;++n)null!=e[t[n]]&&(this[t[n]]=e[t[n]])}function h(e){if(this.additionalBindings=[],e)for(var t=Object.keys(e),n=0;n<t.length;++n)null!=e[t[n]]&&(this[t[n]]=e[t[n]])}function _(e){if(e)for(var t=Object.keys(e),n=0;n<t.length;++n)null!=e[t[n]]&&(this[t[n]]=e[t[n]])}function b(e){if(this.pattern=[],e)for(var t=Object.keys(e),n=0;n<t.length;++n)null!=e[t[n]]&&(this[t[n]]=e[t[n]])}function H(e){if(e)for(var t=Object.keys(e),n=0;n<t.length;++n)null!=e[t[n]]&&(this[t[n]]=e[t[n]])}function q(e){if(this.file=[],e)for(var t=Object.keys(e),n=0;n<t.length;++n)null!=e[t[n]]&&(this[t[n]]=e[t[n]])}function m(e){if(this.dependency=[],this.publicDependency=[],this.weakDependency=[],this.messageType=[],this.enumType=[],this.service=[],this.extension=[],e)for(var t=Object.keys(e),n=0;n<t.length;++n)null!=e[t[n]]&&(this[t[n]]=e[t[n]])}function O(e){if(this.field=[],this.extension=[],this.nestedType=[],this.enumType=[],this.extensionRange=[],this.oneofDecl=[],this.reservedRange=[],this.reservedName=[],e)for(var t=Object.keys(e),n=0;n<t.length;++n)null!=e[t[n]]&&(this[t[n]]=e[t[n]])}function v(e){if(e)for(var t=Object.keys(e),n=0;n<t.length;++n)null!=e[t[n]]&&(this[t[n]]=e[t[n]])}function Y(e){if(e)for(var t=Object.keys(e),n=0;n<t.length;++n)null!=e[t[n]]&&(this[t[n]]=e[t[n]])}function z(e){if(this.uninterpretedOption=[],e)for(var t=Object.keys(e),n=0;n<t.length;++n)null!=e[t[n]]&&(this[t[n]]=e[t[n]])}function P(e){if(e)for(var t=Object.keys(e),n=0;n<t.length;++n)null!=e[t[n]]&&(this[t[n]]=e[t[n]])}function W(e){if(e)for(var t=Object.keys(e),n=0;n<t.length;++n)null!=e[t[n]]&&(this[t[n]]=e[t[n]])}function w(e){if(this.value=[],this.reservedRange=[],this.reservedName=[],e)for(var t=Object.keys(e),n=0;n<t.length;++n)null!=e[t[n]]&&(this[t[n]]=e[t[n]])}function X(e){if(e)for(var t=Object.keys(e),n=0;n<t.length;++n)null!=e[t[n]]&&(this[t[n]]=e[t[n]])}function j(e){if(e)for(var t=Object.keys(e),n=0;n<t.length;++n)null!=e[t[n]]&&(this[t[n]]=e[t[n]])}function D(e){if(this.method=[],e)for(var t=Object.keys(e),n=0;n<t.length;++n)null!=e[t[n]]&&(this[t[n]]=e[t[n]])}function x(e){if(e)for(var t=Object.keys(e),n=0;n<t.length;++n)null!=e[t[n]]&&(this[t[n]]=e[t[n]])}function S(e){if(this.uninterpretedOption=[],this[\".google.api.resourceDefinition\"]=[],e)for(var t=Object.keys(e),n=0;n<t.length;++n)null!=e[t[n]]&&(this[t[n]]=e[t[n]])}function k(e){if(this.uninterpretedOption=[],e)for(var t=Object.keys(e),n=0;n<t.length;++n)null!=e[t[n]]&&(this[t[n]]=e[t[n]])}function T(e){if(this.uninterpretedOption=[],this[\".google.api.fieldBehavior\"]=[],e)for(var t=Object.keys(e),n=0;n<t.length;++n)null!=e[t[n]]&&(this[t[n]]=e[t[n]])}function Q(e){if(this.uninterpretedOption=[],e)for(var t=Object.keys(e),n=0;n<t.length;++n)null!=e[t[n]]&&(this[t[n]]=e[t[n]])}function E(e){if(this.uninterpretedOption=[],e)for(var t=Object.keys(e),n=0;n<t.length;++n)null!=e[t[n]]&&(this[t[n]]=e[t[n]])}function K(e){if(this.uninterpretedOption=[],e)for(var t=Object.keys(e),n=0;n<t.length;++n)null!=e[t[n]]&&(this[t[n]]=e[t[n]])}function A(e){if(this.uninterpretedOption=[],e)for(var t=Object.keys(e),n=0;n<t.length;++n)null!=e[t[n]]&&(this[t[n]]=e[t[n]])}function N(e){if(this.uninterpretedOption=[],this[\".google.api.methodSignature\"]=[],e)for(var t=Object.keys(e),n=0;n<t.length;++n)null!=e[t[n]]&&(this[t[n]]=e[t[n]])}function R(e){if(this.name=[],e)for(var t=Object.keys(e),n=0;n<t.length;++n)null!=e[t[n]]&&(this[t[n]]=e[t[n]])}function Z(e){if(e)for(var t=Object.keys(e),n=0;n<t.length;++n)null!=e[t[n]]&&(this[t[n]]=e[t[n]])}function $(e){if(this.location=[],e)for(var t=Object.keys(e),n=0;n<t.length;++n)null!=e[t[n]]&&(this[t[n]]=e[t[n]])}function I(e){if(this.path=[],this.span=[],this.leadingDetachedComments=[],e)for(var t=Object.keys(e),n=0;n<t.length;++n)null!=e[t[n]]&&(this[t[n]]=e[t[n]])}function ee(e){if(this.annotation=[],e)for(var t=Object.keys(e),n=0;n<t.length;++n)null!=e[t[n]]&&(this[t[n]]=e[t[n]])}function C(e){if(this.path=[],e)for(var t=Object.keys(e),n=0;n<t.length;++n)null!=e[t[n]]&&(this[t[n]]=e[t[n]])}function V(e){if(e)for(var t=Object.keys(e),n=0;n<t.length;++n)null!=e[t[n]]&&(this[t[n]]=e[t[n]])}return l.google=((F={}).iam=((n={}).v1=((t={}).IAMPolicy=(((B.prototype=Object.create(o.rpc.Service.prototype)).constructor=B).create=function(e,t,n){return new this(e,t,n)},Object.defineProperty(B.prototype.setIamPolicy=function e(t,n){return this.rpcCall(e,l.google.iam.v1.SetIamPolicyRequest,l.google.iam.v1.Policy,t,n)},\"name\",{value:\"SetIamPolicy\"}),Object.defineProperty(B.prototype.getIamPolicy=function e(t,n){return this.rpcCall(e,l.google.iam.v1.GetIamPolicyRequest,l.google.iam.v1.Policy,t,n)},\"name\",{value:\"GetIamPolicy\"}),Object.defineProperty(B.prototype.testIamPermissions=function e(t,n){return this.rpcCall(e,l.google.iam.v1.TestIamPermissionsRequest,l.google.iam.v1.TestIamPermissionsResponse,t,n)},\"name\",{value:\"TestIamPermissions\"}),B),t.SetIamPolicyRequest=(s.prototype.resource=\"\",s.prototype.policy=null,s.create=function(e){return new s(e)},s.encode=function(e,t){return t=t||i.create(),null!=e.resource&&Object.hasOwnProperty.call(e,\"resource\")&&t.uint32(10).string(e.resource),null!=e.policy&&Object.hasOwnProperty.call(e,\"policy\")&&l.google.iam.v1.Policy.encode(e.policy,t.uint32(18).fork()).ldelim(),t},s.encodeDelimited=function(e,t){return this.encode(e,t).ldelim()},s.decode=function(e,t){e instanceof a||(e=a.create(e));for(var n=void 0===t?e.len:e.pos+t,o=new l.google.iam.v1.SetIamPolicyRequest;e.pos<n;){var r=e.uint32();switch(r>>>3){case 1:o.resource=e.string();break;case 2:o.policy=l.google.iam.v1.Policy.decode(e,e.uint32());break;default:e.skipType(7&r)}}return o},s.decodeDelimited=function(e){return e instanceof a||(e=new a(e)),this.decode(e,e.uint32())},s.verify=function(e){if(\"object\"!=typeof e||null===e)return\"object expected\";if(null!=e.resource&&e.hasOwnProperty(\"resource\")&&!p.isString(e.resource))return\"resource: string expected\";if(null!=e.policy&&e.hasOwnProperty(\"policy\")){e=l.google.iam.v1.Policy.verify(e.policy);if(e)return\"policy.\"+e}return null},s.fromObject=function(e){if(e instanceof l.google.iam.v1.SetIamPolicyRequest)return e;var t=new l.google.iam.v1.SetIamPolicyRequest;if(null!=e.resource&&(t.resource=String(e.resource)),null!=e.policy){if(\"object\"!=typeof e.policy)throw TypeError(\".google.iam.v1.SetIamPolicyRequest.policy: object expected\");t.policy=l.google.iam.v1.Policy.fromObject(e.policy)}return t},s.toObject=function(e,t){var n={};return(t=t||{}).defaults&&(n.resource=\"\",n.policy=null),null!=e.resource&&e.hasOwnProperty(\"resource\")&&(n.resource=e.resource),null!=e.policy&&e.hasOwnProperty(\"policy\")&&(n.policy=l.google.iam.v1.Policy.toObject(e.policy,t)),n},s.prototype.toJSON=function(){return this.constructor.toObject(this,o.util.toJSONOptions)},s),t.GetIamPolicyRequest=(u.prototype.resource=\"\",u.prototype.options=null,u.create=function(e){return new u(e)},u.encode=function(e,t){return t=t||i.create(),null!=e.resource&&Object.hasOwnProperty.call(e,\"resource\")&&t.uint32(10).string(e.resource),null!=e.options&&Object.hasOwnProperty.call(e,\"options\")&&l.google.iam.v1.GetPolicyOptions.encode(e.options,t.uint32(18).fork()).ldelim(),t},u.encodeDelimited=function(e,t){return this.encode(e,t).ldelim()},u.decode=function(e,t){e instanceof a||(e=a.create(e));for(var n=void 0===t?e.len:e.pos+t,o=new l.google.iam.v1.GetIamPolicyRequest;e.pos<n;){var r=e.uint32();switch(r>>>3){case 1:o.resource=e.string();break;case 2:o.options=l.google.iam.v1.GetPolicyOptions.decode(e,e.uint32());break;default:e.skipType(7&r)}}return o},u.decodeDelimited=function(e){return e instanceof a||(e=new a(e)),this.decode(e,e.uint32())},u.verify=function(e){if(\"object\"!=typeof e||null===e)return\"object expected\";if(null!=e.resource&&e.hasOwnProperty(\"resource\")&&!p.isString(e.resource))return\"resource: string expected\";if(null!=e.options&&e.hasOwnProperty(\"options\")){e=l.google.iam.v1.GetPolicyOptions.verify(e.options);if(e)return\"options.\"+e}return null},u.fromObject=function(e){if(e instanceof l.google.iam.v1.GetIamPolicyRequest)return e;var t=new l.google.iam.v1.GetIamPolicyRequest;if(null!=e.resource&&(t.resource=String(e.resource)),null!=e.options){if(\"object\"!=typeof e.options)throw TypeError(\".google.iam.v1.GetIamPolicyRequest.options: object expected\");t.options=l.google.iam.v1.GetPolicyOptions.fromObject(e.options)}return t},u.toObject=function(e,t){var n={};return(t=t||{}).defaults&&(n.resource=\"\",n.options=null),null!=e.resource&&e.hasOwnProperty(\"resource\")&&(n.resource=e.resource),null!=e.options&&e.hasOwnProperty(\"options\")&&(n.options=l.google.iam.v1.GetPolicyOptions.toObject(e.options,t)),n},u.prototype.toJSON=function(){return this.constructor.toObject(this,o.util.toJSONOptions)},u),t.TestIamPermissionsRequest=(c.prototype.resource=\"\",c.prototype.permissions=p.emptyArray,c.create=function(e){return new c(e)},c.encode=function(e,t){if(t=t||i.create(),null!=e.resource&&Object.hasOwnProperty.call(e,\"resource\")&&t.uint32(10).string(e.resource),null!=e.permissions&&e.permissions.length)for(var n=0;n<e.permissions.length;++n)t.uint32(18).string(e.permissions[n]);return t},c.encodeDelimited=function(e,t){return this.encode(e,t).ldelim()},c.decode=function(e,t){e instanceof a||(e=a.create(e));for(var n=void 0===t?e.len:e.pos+t,o=new l.google.iam.v1.TestIamPermissionsRequest;e.pos<n;){var r=e.uint32();switch(r>>>3){case 1:o.resource=e.string();break;case 2:o.permissions&&o.permissions.length||(o.permissions=[]),o.permissions.push(e.string());break;default:e.skipType(7&r)}}return o},c.decodeDelimited=function(e){return e instanceof a||(e=new a(e)),this.decode(e,e.uint32())},c.verify=function(e){if(\"object\"!=typeof e||null===e)return\"object expected\";if(null!=e.resource&&e.hasOwnProperty(\"resource\")&&!p.isString(e.resource))return\"resource: string expected\";if(null!=e.permissions&&e.hasOwnProperty(\"permissions\")){if(!Array.isArray(e.permissions))return\"permissions: array expected\";for(var t=0;t<e.permissions.length;++t)if(!p.isString(e.permissions[t]))return\"permissions: string[] expected\"}return null},c.fromObject=function(e){if(e instanceof l.google.iam.v1.TestIamPermissionsRequest)return e;var t=new l.google.iam.v1.TestIamPermissionsRequest;if(null!=e.resource&&(t.resource=String(e.resource)),e.permissions){if(!Array.isArray(e.permissions))throw TypeError(\".google.iam.v1.TestIamPermissionsRequest.permissions: array expected\");t.permissions=[];for(var n=0;n<e.permissions.length;++n)t.permissions[n]=String(e.permissions[n])}return t},c.toObject=function(e,t){var n={};if(((t=t||{}).arrays||t.defaults)&&(n.permissions=[]),t.defaults&&(n.resource=\"\"),null!=e.resource&&e.hasOwnProperty(\"resource\")&&(n.resource=e.resource),e.permissions&&e.permissions.length){n.permissions=[];for(var o=0;o<e.permissions.length;++o)n.permissions[o]=e.permissions[o]}return n},c.prototype.toJSON=function(){return this.constructor.toObject(this,o.util.toJSONOptions)},c),t.TestIamPermissionsResponse=(G.prototype.permissions=p.emptyArray,G.create=function(e){return new G(e)},G.encode=function(e,t){if(t=t||i.create(),null!=e.permissions&&e.permissions.length)for(var n=0;n<e.permissions.length;++n)t.uint32(10).string(e.permissions[n]);return t},G.encodeDelimited=function(e,t){return this.encode(e,t).ldelim()},G.decode=function(e,t){e instanceof a||(e=a.create(e));for(var n=void 0===t?e.len:e.pos+t,o=new l.google.iam.v1.TestIamPermissionsResponse;e.pos<n;){var r=e.uint32();r>>>3==1?(o.permissions&&o.permissions.length||(o.permissions=[]),o.permissions.push(e.string())):e.skipType(7&r)}return o},G.decodeDelimited=function(e){return e instanceof a||(e=new a(e)),this.decode(e,e.uint32())},G.verify=function(e){if(\"object\"!=typeof e||null===e)return\"object expected\";if(null!=e.permissions&&e.hasOwnProperty(\"permissions\")){if(!Array.isArray(e.permissions))return\"permissions: array expected\";for(var t=0;t<e.permissions.length;++t)if(!p.isString(e.permissions[t]))return\"permissions: string[] expected\"}return null},G.fromObject=function(e){if(e instanceof l.google.iam.v1.TestIamPermissionsResponse)return e;var t=new l.google.iam.v1.TestIamPermissionsResponse;if(e.permissions){if(!Array.isArray(e.permissions))throw TypeError(\".google.iam.v1.TestIamPermissionsResponse.permissions: array expected\");t.permissions=[];for(var n=0;n<e.permissions.length;++n)t.permissions[n]=String(e.permissions[n])}return t},G.toObject=function(e,t){var n={};if(((t=t||{}).arrays||t.defaults)&&(n.permissions=[]),e.permissions&&e.permissions.length){n.permissions=[];for(var o=0;o<e.permissions.length;++o)n.permissions[o]=e.permissions[o]}return n},G.prototype.toJSON=function(){return this.constructor.toObject(this,o.util.toJSONOptions)},G),t.GetPolicyOptions=(U.prototype.requestedPolicyVersion=0,U.create=function(e){return new U(e)},U.encode=function(e,t){return t=t||i.create(),null!=e.requestedPolicyVersion&&Object.hasOwnProperty.call(e,\"requestedPolicyVersion\")&&t.uint32(8).int32(e.requestedPolicyVersion),t},U.encodeDelimited=function(e,t){return this.encode(e,t).ldelim()},U.decode=function(e,t){e instanceof a||(e=a.create(e));for(var n=void 0===t?e.len:e.pos+t,o=new l.google.iam.v1.GetPolicyOptions;e.pos<n;){var r=e.uint32();r>>>3==1?o.requestedPolicyVersion=e.int32():e.skipType(7&r)}return o},U.decodeDelimited=function(e){return e instanceof a||(e=new a(e)),this.decode(e,e.uint32())},U.verify=function(e){return\"object\"!=typeof e||null===e?\"object expected\":null!=e.requestedPolicyVersion&&e.hasOwnProperty(\"requestedPolicyVersion\")&&!p.isInteger(e.requestedPolicyVersion)?\"requestedPolicyVersion: integer expected\":null},U.fromObject=function(e){var t;return e instanceof l.google.iam.v1.GetPolicyOptions?e:(t=new l.google.iam.v1.GetPolicyOptions,null!=e.requestedPolicyVersion&&(t.requestedPolicyVersion=0|e.requestedPolicyVersion),t)},U.toObject=function(e,t){var n={};return(t=t||{}).defaults&&(n.requestedPolicyVersion=0),null!=e.requestedPolicyVersion&&e.hasOwnProperty(\"requestedPolicyVersion\")&&(n.requestedPolicyVersion=e.requestedPolicyVersion),n},U.prototype.toJSON=function(){return this.constructor.toObject(this,o.util.toJSONOptions)},U),t.Policy=(d.prototype.version=0,d.prototype.bindings=p.emptyArray,d.prototype.etag=p.newBuffer([]),d.create=function(e){return new d(e)},d.encode=function(e,t){if(t=t||i.create(),null!=e.version&&Object.hasOwnProperty.call(e,\"version\")&&t.uint32(8).int32(e.version),null!=e.etag&&Object.hasOwnProperty.call(e,\"etag\")&&t.uint32(26).bytes(e.etag),null!=e.bindings&&e.bindings.length)for(var n=0;n<e.bindings.length;++n)l.google.iam.v1.Binding.encode(e.bindings[n],t.uint32(34).fork()).ldelim();return t},d.encodeDelimited=function(e,t){return this.encode(e,t).ldelim()},d.decode=function(e,t){e instanceof a||(e=a.create(e));for(var n=void 0===t?e.len:e.pos+t,o=new l.google.iam.v1.Policy;e.pos<n;){var r=e.uint32();switch(r>>>3){case 1:o.version=e.int32();break;case 4:o.bindings&&o.bindings.length||(o.bindings=[]),o.bindings.push(l.google.iam.v1.Binding.decode(e,e.uint32()));break;case 3:o.etag=e.bytes();break;default:e.skipType(7&r)}}return o},d.decodeDelimited=function(e){return e instanceof a||(e=new a(e)),this.decode(e,e.uint32())},d.verify=function(e){if(\"object\"!=typeof e||null===e)return\"object expected\";if(null!=e.version&&e.hasOwnProperty(\"version\")&&!p.isInteger(e.version))return\"version: integer expected\";if(null!=e.bindings&&e.hasOwnProperty(\"bindings\")){if(!Array.isArray(e.bindings))return\"bindings: array expected\";for(var t=0;t<e.bindings.length;++t){var n=l.google.iam.v1.Binding.verify(e.bindings[t]);if(n)return\"bindings.\"+n}}return null!=e.etag&&e.hasOwnProperty(\"etag\")&&!(e.etag&&\"number\"==typeof e.etag.length||p.isString(e.etag))?\"etag: buffer expected\":null},d.fromObject=function(e){if(e instanceof l.google.iam.v1.Policy)return e;var t=new l.google.iam.v1.Policy;if(null!=e.version&&(t.version=0|e.version),e.bindings){if(!Array.isArray(e.bindings))throw TypeError(\".google.iam.v1.Policy.bindings: array expected\");t.bindings=[];for(var n=0;n<e.bindings.length;++n){if(\"object\"!=typeof e.bindings[n])throw TypeError(\".google.iam.v1.Policy.bindings: object expected\");t.bindings[n]=l.google.iam.v1.Binding.fromObject(e.bindings[n])}}return null!=e.etag&&(\"string\"==typeof e.etag?p.base64.decode(e.etag,t.etag=p.newBuffer(p.base64.length(e.etag)),0):e.etag.length&&(t.etag=e.etag)),t},d.toObject=function(e,t){var n={};if(((t=t||{}).arrays||t.defaults)&&(n.bindings=[]),t.defaults&&(n.version=0,t.bytes===String?n.etag=\"\":(n.etag=[],t.bytes!==Array&&(n.etag=p.newBuffer(n.etag)))),null!=e.version&&e.hasOwnProperty(\"version\")&&(n.version=e.version),null!=e.etag&&e.hasOwnProperty(\"etag\")&&(n.etag=t.bytes===String?p.base64.encode(e.etag,0,e.etag.length):t.bytes===Array?Array.prototype.slice.call(e.etag):e.etag),e.bindings&&e.bindings.length){n.bindings=[];for(var o=0;o<e.bindings.length;++o)n.bindings[o]=l.google.iam.v1.Binding.toObject(e.bindings[o],t)}return n},d.prototype.toJSON=function(){return this.constructor.toObject(this,o.util.toJSONOptions)},d),t.Binding=(g.prototype.role=\"\",g.prototype.members=p.emptyArray,g.prototype.condition=null,g.create=function(e){return new g(e)},g.encode=function(e,t){if(t=t||i.create(),null!=e.role&&Object.hasOwnProperty.call(e,\"role\")&&t.uint32(10).string(e.role),null!=e.members&&e.members.length)for(var n=0;n<e.members.length;++n)t.uint32(18).string(e.members[n]);return null!=e.condition&&Object.hasOwnProperty.call(e,\"condition\")&&l.google.type.Expr.encode(e.condition,t.uint32(26).fork()).ldelim(),t},g.encodeDelimited=function(e,t){return this.encode(e,t).ldelim()},g.decode=function(e,t){e instanceof a||(e=a.create(e));for(var n=void 0===t?e.len:e.pos+t,o=new l.google.iam.v1.Binding;e.pos<n;){var r=e.uint32();switch(r>>>3){case 1:o.role=e.string();break;case 2:o.members&&o.members.length||(o.members=[]),o.members.push(e.string());break;case 3:o.condition=l.google.type.Expr.decode(e,e.uint32());break;default:e.skipType(7&r)}}return o},g.decodeDelimited=function(e){return e instanceof a||(e=new a(e)),this.decode(e,e.uint32())},g.verify=function(e){if(\"object\"!=typeof e||null===e)return\"object expected\";if(null!=e.role&&e.hasOwnProperty(\"role\")&&!p.isString(e.role))return\"role: string expected\";if(null!=e.members&&e.hasOwnProperty(\"members\")){if(!Array.isArray(e.members))return\"members: array expected\";for(var t=0;t<e.members.length;++t)if(!p.isString(e.members[t]))return\"members: string[] expected\"}if(null!=e.condition&&e.hasOwnProperty(\"condition\")){var n=l.google.type.Expr.verify(e.condition);if(n)return\"condition.\"+n}return null},g.fromObject=function(e){if(e instanceof l.google.iam.v1.Binding)return e;var t=new l.google.iam.v1.Binding;if(null!=e.role&&(t.role=String(e.role)),e.members){if(!Array.isArray(e.members))throw TypeError(\".google.iam.v1.Binding.members: array expected\");t.members=[];for(var n=0;n<e.members.length;++n)t.members[n]=String(e.members[n])}if(null!=e.condition){if(\"object\"!=typeof e.condition)throw TypeError(\".google.iam.v1.Binding.condition: object expected\");t.condition=l.google.type.Expr.fromObject(e.condition)}return t},g.toObject=function(e,t){var n={};if(((t=t||{}).arrays||t.defaults)&&(n.members=[]),t.defaults&&(n.role=\"\",n.condition=null),null!=e.role&&e.hasOwnProperty(\"role\")&&(n.role=e.role),e.members&&e.members.length){n.members=[];for(var o=0;o<e.members.length;++o)n.members[o]=e.members[o]}return null!=e.condition&&e.hasOwnProperty(\"condition\")&&(n.condition=l.google.type.Expr.toObject(e.condition,t)),n},g.prototype.toJSON=function(){return this.constructor.toObject(this,o.util.toJSONOptions)},g),t.PolicyDelta=(M.prototype.bindingDeltas=p.emptyArray,M.prototype.auditConfigDeltas=p.emptyArray,M.create=function(e){return new M(e)},M.encode=function(e,t){if(t=t||i.create(),null!=e.bindingDeltas&&e.bindingDeltas.length)for(var n=0;n<e.bindingDeltas.length;++n)l.google.iam.v1.BindingDelta.encode(e.bindingDeltas[n],t.uint32(10).fork()).ldelim();if(null!=e.auditConfigDeltas&&e.auditConfigDeltas.length)for(n=0;n<e.auditConfigDeltas.length;++n)l.google.iam.v1.AuditConfigDelta.encode(e.auditConfigDeltas[n],t.uint32(18).fork()).ldelim();return t},M.encodeDelimited=function(e,t){return this.encode(e,t).ldelim()},M.decode=function(e,t){e instanceof a||(e=a.create(e));for(var n=void 0===t?e.len:e.pos+t,o=new l.google.iam.v1.PolicyDelta;e.pos<n;){var r=e.uint32();switch(r>>>3){case 1:o.bindingDeltas&&o.bindingDeltas.length||(o.bindingDeltas=[]),o.bindingDeltas.push(l.google.iam.v1.BindingDelta.decode(e,e.uint32()));break;case 2:o.auditConfigDeltas&&o.auditConfigDeltas.length||(o.auditConfigDeltas=[]),o.auditConfigDeltas.push(l.google.iam.v1.AuditConfigDelta.decode(e,e.uint32()));break;default:e.skipType(7&r)}}return o},M.decodeDelimited=function(e){return e instanceof a||(e=new a(e)),this.decode(e,e.uint32())},M.verify=function(e){if(\"object\"!=typeof e||null===e)return\"object expected\";if(null!=e.bindingDeltas&&e.hasOwnProperty(\"bindingDeltas\")){if(!Array.isArray(e.bindingDeltas))return\"bindingDeltas: array expected\";for(var t=0;t<e.bindingDeltas.length;++t)if(n=l.google.iam.v1.BindingDelta.verify(e.bindingDeltas[t]))return\"bindingDeltas.\"+n}if(null!=e.auditConfigDeltas&&e.hasOwnProperty(\"auditConfigDeltas\")){if(!Array.isArray(e.auditConfigDeltas))return\"auditConfigDeltas: array expected\";for(var n,t=0;t<e.auditConfigDeltas.length;++t)if(n=l.google.iam.v1.AuditConfigDelta.verify(e.auditConfigDeltas[t]))return\"auditConfigDeltas.\"+n}return null},M.fromObject=function(e){if(e instanceof l.google.iam.v1.PolicyDelta)return e;var t=new l.google.iam.v1.PolicyDelta;if(e.bindingDeltas){if(!Array.isArray(e.bindingDeltas))throw TypeError(\".google.iam.v1.PolicyDelta.bindingDeltas: array expected\");t.bindingDeltas=[];for(var n=0;n<e.bindingDeltas.length;++n){if(\"object\"!=typeof e.bindingDeltas[n])throw TypeError(\".google.iam.v1.PolicyDelta.bindingDeltas: object expected\");t.bindingDeltas[n]=l.google.iam.v1.BindingDelta.fromObject(e.bindingDeltas[n])}}if(e.auditConfigDeltas){if(!Array.isArray(e.auditConfigDeltas))throw TypeError(\".google.iam.v1.PolicyDelta.auditConfigDeltas: array expected\");t.auditConfigDeltas=[];for(n=0;n<e.auditConfigDeltas.length;++n){if(\"object\"!=typeof e.auditConfigDeltas[n])throw TypeError(\".google.iam.v1.PolicyDelta.auditConfigDeltas: object expected\");t.auditConfigDeltas[n]=l.google.iam.v1.AuditConfigDelta.fromObject(e.auditConfigDeltas[n])}}return t},M.toObject=function(e,t){var n={};if(((t=t||{}).arrays||t.defaults)&&(n.bindingDeltas=[],n.auditConfigDeltas=[]),e.bindingDeltas&&e.bindingDeltas.length){n.bindingDeltas=[];for(var o=0;o<e.bindingDeltas.length;++o)n.bindingDeltas[o]=l.google.iam.v1.BindingDelta.toObject(e.bindingDeltas[o],t)}if(e.auditConfigDeltas&&e.auditConfigDeltas.length){n.auditConfigDeltas=[];for(o=0;o<e.auditConfigDeltas.length;++o)n.auditConfigDeltas[o]=l.google.iam.v1.AuditConfigDelta.toObject(e.auditConfigDeltas[o],t)}return n},M.prototype.toJSON=function(){return this.constructor.toObject(this,o.util.toJSONOptions)},M),t.BindingDelta=(f.prototype.action=0,f.prototype.role=\"\",f.prototype.member=\"\",f.prototype.condition=null,f.create=function(e){return new f(e)},f.encode=function(e,t){return t=t||i.create(),null!=e.action&&Object.hasOwnProperty.call(e,\"action\")&&t.uint32(8).int32(e.action),null!=e.role&&Object.hasOwnProperty.call(e,\"role\")&&t.uint32(18).string(e.role),null!=e.member&&Object.hasOwnProperty.call(e,\"member\")&&t.uint32(26).string(e.member),null!=e.condition&&Object.hasOwnProperty.call(e,\"condition\")&&l.google.type.Expr.encode(e.condition,t.uint32(34).fork()).ldelim(),t},f.encodeDelimited=function(e,t){return this.encode(e,t).ldelim()},f.decode=function(e,t){e instanceof a||(e=a.create(e));for(var n=void 0===t?e.len:e.pos+t,o=new l.google.iam.v1.BindingDelta;e.pos<n;){var r=e.uint32();switch(r>>>3){case 1:o.action=e.int32();break;case 2:o.role=e.string();break;case 3:o.member=e.string();break;case 4:o.condition=l.google.type.Expr.decode(e,e.uint32());break;default:e.skipType(7&r)}}return o},f.decodeDelimited=function(e){return e instanceof a||(e=new a(e)),this.decode(e,e.uint32())},f.verify=function(e){if(\"object\"!=typeof e||null===e)return\"object expected\";if(null!=e.action&&e.hasOwnProperty(\"action\"))switch(e.action){default:return\"action: enum value expected\";case 0:case 1:case 2:}if(null!=e.role&&e.hasOwnProperty(\"role\")&&!p.isString(e.role))return\"role: string expected\";if(null!=e.member&&e.hasOwnProperty(\"member\")&&!p.isString(e.member))return\"member: string expected\";if(null!=e.condition&&e.hasOwnProperty(\"condition\")){e=l.google.type.Expr.verify(e.condition);if(e)return\"condition.\"+e}return null},f.fromObject=function(e){if(e instanceof l.google.iam.v1.BindingDelta)return e;var t=new l.google.iam.v1.BindingDelta;switch(e.action){case\"ACTION_UNSPECIFIED\":case 0:t.action=0;break;case\"ADD\":case 1:t.action=1;break;case\"REMOVE\":case 2:t.action=2}if(null!=e.role&&(t.role=String(e.role)),null!=e.member&&(t.member=String(e.member)),null!=e.condition){if(\"object\"!=typeof e.condition)throw TypeError(\".google.iam.v1.BindingDelta.condition: object expected\");t.condition=l.google.type.Expr.fromObject(e.condition)}return t},f.toObject=function(e,t){var n={};return(t=t||{}).defaults&&(n.action=t.enums===String?\"ACTION_UNSPECIFIED\":0,n.role=\"\",n.member=\"\",n.condition=null),null!=e.action&&e.hasOwnProperty(\"action\")&&(n.action=t.enums===String?l.google.iam.v1.BindingDelta.Action[e.action]:e.action),null!=e.role&&e.hasOwnProperty(\"role\")&&(n.role=e.role),null!=e.member&&e.hasOwnProperty(\"member\")&&(n.member=e.member),null!=e.condition&&e.hasOwnProperty(\"condition\")&&(n.condition=l.google.type.Expr.toObject(e.condition,t)),n},f.prototype.toJSON=function(){return this.constructor.toObject(this,o.util.toJSONOptions)},f.Action=(e={},(r=Object.create(e))[e[0]=\"ACTION_UNSPECIFIED\"]=0,r[e[1]=\"ADD\"]=1,r[e[2]=\"REMOVE\"]=2,r),f),t.AuditConfigDelta=(y.prototype.action=0,y.prototype.service=\"\",y.prototype.exemptedMember=\"\",y.prototype.logType=\"\",y.create=function(e){return new y(e)},y.encode=function(e,t){return t=t||i.create(),null!=e.action&&Object.hasOwnProperty.call(e,\"action\")&&t.uint32(8).int32(e.action),null!=e.service&&Object.hasOwnProperty.call(e,\"service\")&&t.uint32(18).string(e.service),null!=e.exemptedMember&&Object.hasOwnProperty.call(e,\"exemptedMember\")&&t.uint32(26).string(e.exemptedMember),null!=e.logType&&Object.hasOwnProperty.call(e,\"logType\")&&t.uint32(34).string(e.logType),t},y.encodeDelimited=function(e,t){return this.encode(e,t).ldelim()},y.decode=function(e,t){e instanceof a||(e=a.create(e));for(var n=void 0===t?e.len:e.pos+t,o=new l.google.iam.v1.AuditConfigDelta;e.pos<n;){var r=e.uint32();switch(r>>>3){case 1:o.action=e.int32();break;case 2:o.service=e.string();break;case 3:o.exemptedMember=e.string();break;case 4:o.logType=e.string();break;default:e.skipType(7&r)}}return o},y.decodeDelimited=function(e){return e instanceof a||(e=new a(e)),this.decode(e,e.uint32())},y.verify=function(e){if(\"object\"!=typeof e||null===e)return\"object expected\";if(null!=e.action&&e.hasOwnProperty(\"action\"))switch(e.action){default:return\"action: enum value expected\";case 0:case 1:case 2:}return null!=e.service&&e.hasOwnProperty(\"service\")&&!p.isString(e.service)?\"service: string expected\":null!=e.exemptedMember&&e.hasOwnProperty(\"exemptedMember\")&&!p.isString(e.exemptedMember)?\"exemptedMember: string expected\":null!=e.logType&&e.hasOwnProperty(\"logType\")&&!p.isString(e.logType)?\"logType: string expected\":null},y.fromObject=function(e){if(e instanceof l.google.iam.v1.AuditConfigDelta)return e;var t=new l.google.iam.v1.AuditConfigDelta;switch(e.action){case\"ACTION_UNSPECIFIED\":case 0:t.action=0;break;case\"ADD\":case 1:t.action=1;break;case\"REMOVE\":case 2:t.action=2}return null!=e.service&&(t.service=String(e.service)),null!=e.exemptedMember&&(t.exemptedMember=String(e.exemptedMember)),null!=e.logType&&(t.logType=String(e.logType)),t},y.toObject=function(e,t){var n={};return(t=t||{}).defaults&&(n.action=t.enums===String?\"ACTION_UNSPECIFIED\":0,n.service=\"\",n.exemptedMember=\"\",n.logType=\"\"),null!=e.action&&e.hasOwnProperty(\"action\")&&(n.action=t.enums===String?l.google.iam.v1.AuditConfigDelta.Action[e.action]:e.action),null!=e.service&&e.hasOwnProperty(\"service\")&&(n.service=e.service),null!=e.exemptedMember&&e.hasOwnProperty(\"exemptedMember\")&&(n.exemptedMember=e.exemptedMember),null!=e.logType&&e.hasOwnProperty(\"logType\")&&(n.logType=e.logType),n},y.prototype.toJSON=function(){return this.constructor.toObject(this,o.util.toJSONOptions)},y.Action=(e={},(r=Object.create(e))[e[0]=\"ACTION_UNSPECIFIED\"]=0,r[e[1]=\"ADD\"]=1,r[e[2]=\"REMOVE\"]=2,r),y),t.logging=((e={}).AuditData=(L.prototype.policyDelta=null,L.create=function(e){return new L(e)},L.encode=function(e,t){return t=t||i.create(),null!=e.policyDelta&&Object.hasOwnProperty.call(e,\"policyDelta\")&&l.google.iam.v1.PolicyDelta.encode(e.policyDelta,t.uint32(18).fork()).ldelim(),t},L.encodeDelimited=function(e,t){return this.encode(e,t).ldelim()},L.decode=function(e,t){e instanceof a||(e=a.create(e));for(var n=void 0===t?e.len:e.pos+t,o=new l.google.iam.v1.logging.AuditData;e.pos<n;){var r=e.uint32();r>>>3==2?o.policyDelta=l.google.iam.v1.PolicyDelta.decode(e,e.uint32()):e.skipType(7&r)}return o},L.decodeDelimited=function(e){return e instanceof a||(e=new a(e)),this.decode(e,e.uint32())},L.verify=function(e){if(\"object\"!=typeof e||null===e)return\"object expected\";if(null!=e.policyDelta&&e.hasOwnProperty(\"policyDelta\")){e=l.google.iam.v1.PolicyDelta.verify(e.policyDelta);if(e)return\"policyDelta.\"+e}return null},L.fromObject=function(e){if(e instanceof l.google.iam.v1.logging.AuditData)return e;var t=new l.google.iam.v1.logging.AuditData;if(null!=e.policyDelta){if(\"object\"!=typeof e.policyDelta)throw TypeError(\".google.iam.v1.logging.AuditData.policyDelta: object expected\");t.policyDelta=l.google.iam.v1.PolicyDelta.fromObject(e.policyDelta)}return t},L.toObject=function(e,t){var n={};return(t=t||{}).defaults&&(n.policyDelta=null),null!=e.policyDelta&&e.hasOwnProperty(\"policyDelta\")&&(n.policyDelta=l.google.iam.v1.PolicyDelta.toObject(e.policyDelta,t)),n},L.prototype.toJSON=function(){return this.constructor.toObject(this,o.util.toJSONOptions)},L),e),t),n),F.api=((r={}).Http=(J.prototype.rules=p.emptyArray,J.prototype.fullyDecodeReservedExpansion=!1,J.create=function(e){return new J(e)},J.encode=function(e,t){if(t=t||i.create(),null!=e.rules&&e.rules.length)for(var n=0;n<e.rules.length;++n)l.google.api.HttpRule.encode(e.rules[n],t.uint32(10).fork()).ldelim();return null!=e.fullyDecodeReservedExpansion&&Object.hasOwnProperty.call(e,\"fullyDecodeReservedExpansion\")&&t.uint32(16).bool(e.fullyDecodeReservedExpansion),t},J.encodeDelimited=function(e,t){return this.encode(e,t).ldelim()},J.decode=function(e,t){e instanceof a||(e=a.create(e));for(var n=void 0===t?e.len:e.pos+t,o=new l.google.api.Http;e.pos<n;){var r=e.uint32();switch(r>>>3){case 1:o.rules&&o.rules.length||(o.rules=[]),o.rules.push(l.google.api.HttpRule.decode(e,e.uint32()));break;case 2:o.fullyDecodeReservedExpansion=e.bool();break;default:e.skipType(7&r)}}return o},J.decodeDelimited=function(e){return e instanceof a||(e=new a(e)),this.decode(e,e.uint32())},J.verify=function(e){if(\"object\"!=typeof e||null===e)return\"object expected\";if(null!=e.rules&&e.hasOwnProperty(\"rules\")){if(!Array.isArray(e.rules))return\"rules: array expected\";for(var t=0;t<e.rules.length;++t){var n=l.google.api.HttpRule.verify(e.rules[t]);if(n)return\"rules.\"+n}}return null!=e.fullyDecodeReservedExpansion&&e.hasOwnProperty(\"fullyDecodeReservedExpansion\")&&\"boolean\"!=typeof e.fullyDecodeReservedExpansion?\"fullyDecodeReservedExpansion: boolean expected\":null},J.fromObject=function(e){if(e instanceof l.google.api.Http)return e;var t=new l.google.api.Http;if(e.rules){if(!Array.isArray(e.rules))throw TypeError(\".google.api.Http.rules: array expected\");t.rules=[];for(var n=0;n<e.rules.length;++n){if(\"object\"!=typeof e.rules[n])throw TypeError(\".google.api.Http.rules: object expected\");t.rules[n]=l.google.api.HttpRule.fromObject(e.rules[n])}}return null!=e.fullyDecodeReservedExpansion&&(t.fullyDecodeReservedExpansion=Boolean(e.fullyDecodeReservedExpansion)),t},J.toObject=function(e,t){var n={};if(((t=t||{}).arrays||t.defaults)&&(n.rules=[]),t.defaults&&(n.fullyDecodeReservedExpansion=!1),e.rules&&e.rules.length){n.rules=[];for(var o=0;o<e.rules.length;++o)n.rules[o]=l.google.api.HttpRule.toObject(e.rules[o],t)}return null!=e.fullyDecodeReservedExpansion&&e.hasOwnProperty(\"fullyDecodeReservedExpansion\")&&(n.fullyDecodeReservedExpansion=e.fullyDecodeReservedExpansion),n},J.prototype.toJSON=function(){return this.constructor.toObject(this,o.util.toJSONOptions)},J),r.HttpRule=(h.prototype.selector=\"\",h.prototype.get=\"\",h.prototype.put=\"\",h.prototype.post=\"\",h.prototype.delete=\"\",h.prototype.patch=\"\",h.prototype.custom=null,h.prototype.body=\"\",h.prototype.responseBody=\"\",h.prototype.additionalBindings=p.emptyArray,Object.defineProperty(h.prototype,\"pattern\",{get:p.oneOfGetter(e=[\"get\",\"put\",\"post\",\"delete\",\"patch\",\"custom\"]),set:p.oneOfSetter(e)}),h.create=function(e){return new h(e)},h.encode=function(e,t){if(t=t||i.create(),null!=e.selector&&Object.hasOwnProperty.call(e,\"selector\")&&t.uint32(10).string(e.selector),null!=e.get&&Object.hasOwnProperty.call(e,\"get\")&&t.uint32(18).string(e.get),null!=e.put&&Object.hasOwnProperty.call(e,\"put\")&&t.uint32(26).string(e.put),null!=e.post&&Object.hasOwnProperty.call(e,\"post\")&&t.uint32(34).string(e.post),null!=e.delete&&Object.hasOwnProperty.call(e,\"delete\")&&t.uint32(42).string(e.delete),null!=e.patch&&Object.hasOwnProperty.call(e,\"patch\")&&t.uint32(50).string(e.patch),null!=e.body&&Object.hasOwnProperty.call(e,\"body\")&&t.uint32(58).string(e.body),null!=e.custom&&Object.hasOwnProperty.call(e,\"custom\")&&l.google.api.CustomHttpPattern.encode(e.custom,t.uint32(66).fork()).ldelim(),null!=e.additionalBindings&&e.additionalBindings.length)for(var n=0;n<e.additionalBindings.length;++n)l.google.api.HttpRule.encode(e.additionalBindings[n],t.uint32(90).fork()).ldelim();return null!=e.responseBody&&Object.hasOwnProperty.call(e,\"responseBody\")&&t.uint32(98).string(e.responseBody),t},h.encodeDelimited=function(e,t){return this.encode(e,t).ldelim()},h.decode=function(e,t){e instanceof a||(e=a.create(e));for(var n=void 0===t?e.len:e.pos+t,o=new l.google.api.HttpRule;e.pos<n;){var r=e.uint32();switch(r>>>3){case 1:o.selector=e.string();break;case 2:o.get=e.string();break;case 3:o.put=e.string();break;case 4:o.post=e.string();break;case 5:o.delete=e.string();break;case 6:o.patch=e.string();break;case 8:o.custom=l.google.api.CustomHttpPattern.decode(e,e.uint32());break;case 7:o.body=e.string();break;case 12:o.responseBody=e.string();break;case 11:o.additionalBindings&&o.additionalBindings.length||(o.additionalBindings=[]),o.additionalBindings.push(l.google.api.HttpRule.decode(e,e.uint32()));break;default:e.skipType(7&r)}}return o},h.decodeDelimited=function(e){return e instanceof a||(e=new a(e)),this.decode(e,e.uint32())},h.verify=function(e){if(\"object\"!=typeof e||null===e)return\"object expected\";var t={};if(null!=e.selector&&e.hasOwnProperty(\"selector\")&&!p.isString(e.selector))return\"selector: string expected\";if(null!=e.get&&e.hasOwnProperty(\"get\")&&(t.pattern=1,!p.isString(e.get)))return\"get: string expected\";if(null!=e.put&&e.hasOwnProperty(\"put\")){if(1===t.pattern)return\"pattern: multiple values\";if(t.pattern=1,!p.isString(e.put))return\"put: string expected\"}if(null!=e.post&&e.hasOwnProperty(\"post\")){if(1===t.pattern)return\"pattern: multiple values\";if(t.pattern=1,!p.isString(e.post))return\"post: string expected\"}if(null!=e.delete&&e.hasOwnProperty(\"delete\")){if(1===t.pattern)return\"pattern: multiple values\";if(t.pattern=1,!p.isString(e.delete))return\"delete: string expected\"}if(null!=e.patch&&e.hasOwnProperty(\"patch\")){if(1===t.pattern)return\"pattern: multiple values\";if(t.pattern=1,!p.isString(e.patch))return\"patch: string expected\"}if(null!=e.custom&&e.hasOwnProperty(\"custom\")){if(1===t.pattern)return\"pattern: multiple values\";if(t.pattern=1,n=l.google.api.CustomHttpPattern.verify(e.custom))return\"custom.\"+n}if(null!=e.body&&e.hasOwnProperty(\"body\")&&!p.isString(e.body))return\"body: string expected\";if(null!=e.responseBody&&e.hasOwnProperty(\"responseBody\")&&!p.isString(e.responseBody))return\"responseBody: string expected\";if(null!=e.additionalBindings&&e.hasOwnProperty(\"additionalBindings\")){if(!Array.isArray(e.additionalBindings))return\"additionalBindings: array expected\";for(var n,o=0;o<e.additionalBindings.length;++o)if(n=l.google.api.HttpRule.verify(e.additionalBindings[o]))return\"additionalBindings.\"+n}return null},h.fromObject=function(e){if(e instanceof l.google.api.HttpRule)return e;var t=new l.google.api.HttpRule;if(null!=e.selector&&(t.selector=String(e.selector)),null!=e.get&&(t.get=String(e.get)),null!=e.put&&(t.put=String(e.put)),null!=e.post&&(t.post=String(e.post)),null!=e.delete&&(t.delete=String(e.delete)),null!=e.patch&&(t.patch=String(e.patch)),null!=e.custom){if(\"object\"!=typeof e.custom)throw TypeError(\".google.api.HttpRule.custom: object expected\");t.custom=l.google.api.CustomHttpPattern.fromObject(e.custom)}if(null!=e.body&&(t.body=String(e.body)),null!=e.responseBody&&(t.responseBody=String(e.responseBody)),e.additionalBindings){if(!Array.isArray(e.additionalBindings))throw TypeError(\".google.api.HttpRule.additionalBindings: array expected\");t.additionalBindings=[];for(var n=0;n<e.additionalBindings.length;++n){if(\"object\"!=typeof e.additionalBindings[n])throw TypeError(\".google.api.HttpRule.additionalBindings: object expected\");t.additionalBindings[n]=l.google.api.HttpRule.fromObject(e.additionalBindings[n])}}return t},h.toObject=function(e,t){var n={};if(((t=t||{}).arrays||t.defaults)&&(n.additionalBindings=[]),t.defaults&&(n.selector=\"\",n.body=\"\",n.responseBody=\"\"),null!=e.selector&&e.hasOwnProperty(\"selector\")&&(n.selector=e.selector),null!=e.get&&e.hasOwnProperty(\"get\")&&(n.get=e.get,t.oneofs)&&(n.pattern=\"get\"),null!=e.put&&e.hasOwnProperty(\"put\")&&(n.put=e.put,t.oneofs)&&(n.pattern=\"put\"),null!=e.post&&e.hasOwnProperty(\"post\")&&(n.post=e.post,t.oneofs)&&(n.pattern=\"post\"),null!=e.delete&&e.hasOwnProperty(\"delete\")&&(n.delete=e.delete,t.oneofs)&&(n.pattern=\"delete\"),null!=e.patch&&e.hasOwnProperty(\"patch\")&&(n.patch=e.patch,t.oneofs)&&(n.pattern=\"patch\"),null!=e.body&&e.hasOwnProperty(\"body\")&&(n.body=e.body),null!=e.custom&&e.hasOwnProperty(\"custom\")&&(n.custom=l.google.api.CustomHttpPattern.toObject(e.custom,t),t.oneofs)&&(n.pattern=\"custom\"),e.additionalBindings&&e.additionalBindings.length){n.additionalBindings=[];for(var o=0;o<e.additionalBindings.length;++o)n.additionalBindings[o]=l.google.api.HttpRule.toObject(e.additionalBindings[o],t)}return null!=e.responseBody&&e.hasOwnProperty(\"responseBody\")&&(n.responseBody=e.responseBody),n},h.prototype.toJSON=function(){return this.constructor.toObject(this,o.util.toJSONOptions)},h),r.CustomHttpPattern=(_.prototype.kind=\"\",_.prototype.path=\"\",_.create=function(e){return new _(e)},_.encode=function(e,t){return t=t||i.create(),null!=e.kind&&Object.hasOwnProperty.call(e,\"kind\")&&t.uint32(10).string(e.kind),null!=e.path&&Object.hasOwnProperty.call(e,\"path\")&&t.uint32(18).string(e.path),t},_.encodeDelimited=function(e,t){return this.encode(e,t).ldelim()},_.decode=function(e,t){e instanceof a||(e=a.create(e));for(var n=void 0===t?e.len:e.pos+t,o=new l.google.api.CustomHttpPattern;e.pos<n;){var r=e.uint32();switch(r>>>3){case 1:o.kind=e.string();break;case 2:o.path=e.string();break;default:e.skipType(7&r)}}return o},_.decodeDelimited=function(e){return e instanceof a||(e=new a(e)),this.decode(e,e.uint32())},_.verify=function(e){return\"object\"!=typeof e||null===e?\"object expected\":null!=e.kind&&e.hasOwnProperty(\"kind\")&&!p.isString(e.kind)?\"kind: string expected\":null!=e.path&&e.hasOwnProperty(\"path\")&&!p.isString(e.path)?\"path: string expected\":null},_.fromObject=function(e){var t;return e instanceof l.google.api.CustomHttpPattern?e:(t=new l.google.api.CustomHttpPattern,null!=e.kind&&(t.kind=String(e.kind)),null!=e.path&&(t.path=String(e.path)),t)},_.toObject=function(e,t){var n={};return(t=t||{}).defaults&&(n.kind=\"\",n.path=\"\"),null!=e.kind&&e.hasOwnProperty(\"kind\")&&(n.kind=e.kind),null!=e.path&&e.hasOwnProperty(\"path\")&&(n.path=e.path),n},_.prototype.toJSON=function(){return this.constructor.toObject(this,o.util.toJSONOptions)},_),r.FieldBehavior=(e={},(t=Object.create(e))[e[0]=\"FIELD_BEHAVIOR_UNSPECIFIED\"]=0,t[e[1]=\"OPTIONAL\"]=1,t[e[2]=\"REQUIRED\"]=2,t[e[3]=\"OUTPUT_ONLY\"]=3,t[e[4]=\"INPUT_ONLY\"]=4,t[e[5]=\"IMMUTABLE\"]=5,t),r.ResourceDescriptor=(b.prototype.type=\"\",b.prototype.pattern=p.emptyArray,b.prototype.nameField=\"\",b.prototype.history=0,b.prototype.plural=\"\",b.prototype.singular=\"\",b.create=function(e){return new b(e)},b.encode=function(e,t){if(t=t||i.create(),null!=e.type&&Object.hasOwnProperty.call(e,\"type\")&&t.uint32(10).string(e.type),null!=e.pattern&&e.pattern.length)for(var n=0;n<e.pattern.length;++n)t.uint32(18).string(e.pattern[n]);return null!=e.nameField&&Object.hasOwnProperty.call(e,\"nameField\")&&t.uint32(26).string(e.nameField),null!=e.history&&Object.hasOwnProperty.call(e,\"history\")&&t.uint32(32).int32(e.history),null!=e.plural&&Object.hasOwnProperty.call(e,\"plural\")&&t.uint32(42).string(e.plural),null!=e.singular&&Object.hasOwnProperty.call(e,\"singular\")&&t.uint32(50).string(e.singular),t},b.encodeDelimited=function(e,t){return this.encode(e,t).ldelim()},b.decode=function(e,t){e instanceof a||(e=a.create(e));for(var n=void 0===t?e.len:e.pos+t,o=new l.google.api.ResourceDescriptor;e.pos<n;){var r=e.uint32();switch(r>>>3){case 1:o.type=e.string();break;case 2:o.pattern&&o.pattern.length||(o.pattern=[]),o.pattern.push(e.string());break;case 3:o.nameField=e.string();break;case 4:o.history=e.int32();break;case 5:o.plural=e.string();break;case 6:o.singular=e.string();break;default:e.skipType(7&r)}}return o},b.decodeDelimited=function(e){return e instanceof a||(e=new a(e)),this.decode(e,e.uint32())},b.verify=function(e){if(\"object\"!=typeof e||null===e)return\"object expected\";if(null!=e.type&&e.hasOwnProperty(\"type\")&&!p.isString(e.type))return\"type: string expected\";if(null!=e.pattern&&e.hasOwnProperty(\"pattern\")){if(!Array.isArray(e.pattern))return\"pattern: array expected\";for(var t=0;t<e.pattern.length;++t)if(!p.isString(e.pattern[t]))return\"pattern: string[] expected\"}if(null!=e.nameField&&e.hasOwnProperty(\"nameField\")&&!p.isString(e.nameField))return\"nameField: string expected\";if(null!=e.history&&e.hasOwnProperty(\"history\"))switch(e.history){default:return\"history: enum value expected\";case 0:case 1:case 2:}return null!=e.plural&&e.hasOwnProperty(\"plural\")&&!p.isString(e.plural)?\"plural: string expected\":null!=e.singular&&e.hasOwnProperty(\"singular\")&&!p.isString(e.singular)?\"singular: string expected\":null},b.fromObject=function(e){if(e instanceof l.google.api.ResourceDescriptor)return e;var t=new l.google.api.ResourceDescriptor;if(null!=e.type&&(t.type=String(e.type)),e.pattern){if(!Array.isArray(e.pattern))throw TypeError(\".google.api.ResourceDescriptor.pattern: array expected\");t.pattern=[];for(var n=0;n<e.pattern.length;++n)t.pattern[n]=String(e.pattern[n])}switch(null!=e.nameField&&(t.nameField=String(e.nameField)),e.history){case\"HISTORY_UNSPECIFIED\":case 0:t.history=0;break;case\"ORIGINALLY_SINGLE_PATTERN\":case 1:t.history=1;break;case\"FUTURE_MULTI_PATTERN\":case 2:t.history=2}return null!=e.plural&&(t.plural=String(e.plural)),null!=e.singular&&(t.singular=String(e.singular)),t},b.toObject=function(e,t){var n={};if(((t=t||{}).arrays||t.defaults)&&(n.pattern=[]),t.defaults&&(n.type=\"\",n.nameField=\"\",n.history=t.enums===String?\"HISTORY_UNSPECIFIED\":0,n.plural=\"\",n.singular=\"\"),null!=e.type&&e.hasOwnProperty(\"type\")&&(n.type=e.type),e.pattern&&e.pattern.length){n.pattern=[];for(var o=0;o<e.pattern.length;++o)n.pattern[o]=e.pattern[o]}return null!=e.nameField&&e.hasOwnProperty(\"nameField\")&&(n.nameField=e.nameField),null!=e.history&&e.hasOwnProperty(\"history\")&&(n.history=t.enums===String?l.google.api.ResourceDescriptor.History[e.history]:e.history),null!=e.plural&&e.hasOwnProperty(\"plural\")&&(n.plural=e.plural),null!=e.singular&&e.hasOwnProperty(\"singular\")&&(n.singular=e.singular),n},b.prototype.toJSON=function(){return this.constructor.toObject(this,o.util.toJSONOptions)},b.History=(e={},(t=Object.create(e))[e[0]=\"HISTORY_UNSPECIFIED\"]=0,t[e[1]=\"ORIGINALLY_SINGLE_PATTERN\"]=1,t[e[2]=\"FUTURE_MULTI_PATTERN\"]=2,t),b),r.ResourceReference=(H.prototype.type=\"\",H.prototype.childType=\"\",H.create=function(e){return new H(e)},H.encode=function(e,t){return t=t||i.create(),null!=e.type&&Object.hasOwnProperty.call(e,\"type\")&&t.uint32(10).string(e.type),null!=e.childType&&Object.hasOwnProperty.call(e,\"childType\")&&t.uint32(18).string(e.childType),t},H.encodeDelimited=function(e,t){return this.encode(e,t).ldelim()},H.decode=function(e,t){e instanceof a||(e=a.create(e));for(var n=void 0===t?e.len:e.pos+t,o=new l.google.api.ResourceReference;e.pos<n;){var r=e.uint32();switch(r>>>3){case 1:o.type=e.string();break;case 2:o.childType=e.string();break;default:e.skipType(7&r)}}return o},H.decodeDelimited=function(e){return e instanceof a||(e=new a(e)),this.decode(e,e.uint32())},H.verify=function(e){return\"object\"!=typeof e||null===e?\"object expected\":null!=e.type&&e.hasOwnProperty(\"type\")&&!p.isString(e.type)?\"type: string expected\":null!=e.childType&&e.hasOwnProperty(\"childType\")&&!p.isString(e.childType)?\"childType: string expected\":null},H.fromObject=function(e){var t;return e instanceof l.google.api.ResourceReference?e:(t=new l.google.api.ResourceReference,null!=e.type&&(t.type=String(e.type)),null!=e.childType&&(t.childType=String(e.childType)),t)},H.toObject=function(e,t){var n={};return(t=t||{}).defaults&&(n.type=\"\",n.childType=\"\"),null!=e.type&&e.hasOwnProperty(\"type\")&&(n.type=e.type),null!=e.childType&&e.hasOwnProperty(\"childType\")&&(n.childType=e.childType),n},H.prototype.toJSON=function(){return this.constructor.toObject(this,o.util.toJSONOptions)},H),r),F.protobuf=((n={}).FileDescriptorSet=(q.prototype.file=p.emptyArray,q.create=function(e){return new q(e)},q.encode=function(e,t){if(t=t||i.create(),null!=e.file&&e.file.length)for(var n=0;n<e.file.length;++n)l.google.protobuf.FileDescriptorProto.encode(e.file[n],t.uint32(10).fork()).ldelim();return t},q.encodeDelimited=function(e,t){return this.encode(e,t).ldelim()},q.decode=function(e,t){e instanceof a||(e=a.create(e));for(var n=void 0===t?e.len:e.pos+t,o=new l.google.protobuf.FileDescriptorSet;e.pos<n;){var r=e.uint32();r>>>3==1?(o.file&&o.file.length||(o.file=[]),o.file.push(l.google.protobuf.FileDescriptorProto.decode(e,e.uint32()))):e.skipType(7&r)}return o},q.decodeDelimited=function(e){return e instanceof a||(e=new a(e)),this.decode(e,e.uint32())},q.verify=function(e){if(\"object\"!=typeof e||null===e)return\"object expected\";if(null!=e.file&&e.hasOwnProperty(\"file\")){if(!Array.isArray(e.file))return\"file: array expected\";for(var t=0;t<e.file.length;++t){var n=l.google.protobuf.FileDescriptorProto.verify(e.file[t]);if(n)return\"file.\"+n}}return null},q.fromObject=function(e){if(e instanceof l.google.protobuf.FileDescriptorSet)return e;var t=new l.google.protobuf.FileDescriptorSet;if(e.file){if(!Array.isArray(e.file))throw TypeError(\".google.protobuf.FileDescriptorSet.file: array expected\");t.file=[];for(var n=0;n<e.file.length;++n){if(\"object\"!=typeof e.file[n])throw TypeError(\".google.protobuf.FileDescriptorSet.file: object expected\");t.file[n]=l.google.protobuf.FileDescriptorProto.fromObject(e.file[n])}}return t},q.toObject=function(e,t){var n={};if(((t=t||{}).arrays||t.defaults)&&(n.file=[]),e.file&&e.file.length){n.file=[];for(var o=0;o<e.file.length;++o)n.file[o]=l.google.protobuf.FileDescriptorProto.toObject(e.file[o],t)}return n},q.prototype.toJSON=function(){return this.constructor.toObject(this,o.util.toJSONOptions)},q),n.FileDescriptorProto=(m.prototype.name=\"\",m.prototype.package=\"\",m.prototype.dependency=p.emptyArray,m.prototype.publicDependency=p.emptyArray,m.prototype.weakDependency=p.emptyArray,m.prototype.messageType=p.emptyArray,m.prototype.enumType=p.emptyArray,m.prototype.service=p.emptyArray,m.prototype.extension=p.emptyArray,m.prototype.options=null,m.prototype.sourceCodeInfo=null,m.prototype.syntax=\"\",m.create=function(e){return new m(e)},m.encode=function(e,t){if(t=t||i.create(),null!=e.name&&Object.hasOwnProperty.call(e,\"name\")&&t.uint32(10).string(e.name),null!=e.package&&Object.hasOwnProperty.call(e,\"package\")&&t.uint32(18).string(e.package),null!=e.dependency&&e.dependency.length)for(var n=0;n<e.dependency.length;++n)t.uint32(26).string(e.dependency[n]);if(null!=e.messageType&&e.messageType.length)for(n=0;n<e.messageType.length;++n)l.google.protobuf.DescriptorProto.encode(e.messageType[n],t.uint32(34).fork()).ldelim();if(null!=e.enumType&&e.enumType.length)for(n=0;n<e.enumType.length;++n)l.google.protobuf.EnumDescriptorProto.encode(e.enumType[n],t.uint32(42).fork()).ldelim();if(null!=e.service&&e.service.length)for(n=0;n<e.service.length;++n)l.google.protobuf.ServiceDescriptorProto.encode(e.service[n],t.uint32(50).fork()).ldelim();if(null!=e.extension&&e.extension.length)for(n=0;n<e.extension.length;++n)l.google.protobuf.FieldDescriptorProto.encode(e.extension[n],t.uint32(58).fork()).ldelim();if(null!=e.options&&Object.hasOwnProperty.call(e,\"options\")&&l.google.protobuf.FileOptions.encode(e.options,t.uint32(66).fork()).ldelim(),null!=e.sourceCodeInfo&&Object.hasOwnProperty.call(e,\"sourceCodeInfo\")&&l.google.protobuf.SourceCodeInfo.encode(e.sourceCodeInfo,t.uint32(74).fork()).ldelim(),null!=e.publicDependency&&e.publicDependency.length)for(n=0;n<e.publicDependency.length;++n)t.uint32(80).int32(e.publicDependency[n]);if(null!=e.weakDependency&&e.weakDependency.length)for(n=0;n<e.weakDependency.length;++n)t.uint32(88).int32(e.weakDependency[n]);return null!=e.syntax&&Object.hasOwnProperty.call(e,\"syntax\")&&t.uint32(98).string(e.syntax),t},m.encodeDelimited=function(e,t){return this.encode(e,t).ldelim()},m.decode=function(e,t){e instanceof a||(e=a.create(e));for(var n=void 0===t?e.len:e.pos+t,o=new l.google.protobuf.FileDescriptorProto;e.pos<n;){var r=e.uint32();switch(r>>>3){case 1:o.name=e.string();break;case 2:o.package=e.string();break;case 3:o.dependency&&o.dependency.length||(o.dependency=[]),o.dependency.push(e.string());break;case 10:if(o.publicDependency&&o.publicDependency.length||(o.publicDependency=[]),2==(7&r))for(var i=e.uint32()+e.pos;e.pos<i;)o.publicDependency.push(e.int32());else o.publicDependency.push(e.int32());break;case 11:if(o.weakDependency&&o.weakDependency.length||(o.weakDependency=[]),2==(7&r))for(i=e.uint32()+e.pos;e.pos<i;)o.weakDependency.push(e.int32());else o.weakDependency.push(e.int32());break;case 4:o.messageType&&o.messageType.length||(o.messageType=[]),o.messageType.push(l.google.protobuf.DescriptorProto.decode(e,e.uint32()));break;case 5:o.enumType&&o.enumType.length||(o.enumType=[]),o.enumType.push(l.google.protobuf.EnumDescriptorProto.decode(e,e.uint32()));break;case 6:o.service&&o.service.length||(o.service=[]),o.service.push(l.google.protobuf.ServiceDescriptorProto.decode(e,e.uint32()));break;case 7:o.extension&&o.extension.length||(o.extension=[]),o.extension.push(l.google.protobuf.FieldDescriptorProto.decode(e,e.uint32()));break;case 8:o.options=l.google.protobuf.FileOptions.decode(e,e.uint32());break;case 9:o.sourceCodeInfo=l.google.protobuf.SourceCodeInfo.decode(e,e.uint32());break;case 12:o.syntax=e.string();break;default:e.skipType(7&r)}}return o},m.decodeDelimited=function(e){return e instanceof a||(e=new a(e)),this.decode(e,e.uint32())},m.verify=function(e){if(\"object\"!=typeof e||null===e)return\"object expected\";if(null!=e.name&&e.hasOwnProperty(\"name\")&&!p.isString(e.name))return\"name: string expected\";if(null!=e.package&&e.hasOwnProperty(\"package\")&&!p.isString(e.package))return\"package: string expected\";if(null!=e.dependency&&e.hasOwnProperty(\"dependency\")){if(!Array.isArray(e.dependency))return\"dependency: array expected\";for(var t=0;t<e.dependency.length;++t)if(!p.isString(e.dependency[t]))return\"dependency: string[] expected\"}if(null!=e.publicDependency&&e.hasOwnProperty(\"publicDependency\")){if(!Array.isArray(e.publicDependency))return\"publicDependency: array expected\";for(t=0;t<e.publicDependency.length;++t)if(!p.isInteger(e.publicDependency[t]))return\"publicDependency: integer[] expected\"}if(null!=e.weakDependency&&e.hasOwnProperty(\"weakDependency\")){if(!Array.isArray(e.weakDependency))return\"weakDependency: array expected\";for(t=0;t<e.weakDependency.length;++t)if(!p.isInteger(e.weakDependency[t]))return\"weakDependency: integer[] expected\"}if(null!=e.messageType&&e.hasOwnProperty(\"messageType\")){if(!Array.isArray(e.messageType))return\"messageType: array expected\";for(t=0;t<e.messageType.length;++t)if(n=l.google.protobuf.DescriptorProto.verify(e.messageType[t]))return\"messageType.\"+n}if(null!=e.enumType&&e.hasOwnProperty(\"enumType\")){if(!Array.isArray(e.enumType))return\"enumType: array expected\";for(t=0;t<e.enumType.length;++t)if(n=l.google.protobuf.EnumDescriptorProto.verify(e.enumType[t]))return\"enumType.\"+n}if(null!=e.service&&e.hasOwnProperty(\"service\")){if(!Array.isArray(e.service))return\"service: array expected\";for(t=0;t<e.service.length;++t)if(n=l.google.protobuf.ServiceDescriptorProto.verify(e.service[t]))return\"service.\"+n}if(null!=e.extension&&e.hasOwnProperty(\"extension\")){if(!Array.isArray(e.extension))return\"extension: array expected\";for(t=0;t<e.extension.length;++t)if(n=l.google.protobuf.FieldDescriptorProto.verify(e.extension[t]))return\"extension.\"+n}var n;if(null!=e.options&&e.hasOwnProperty(\"options\")&&(n=l.google.protobuf.FileOptions.verify(e.options)))return\"options.\"+n;if(null!=e.sourceCodeInfo&&e.hasOwnProperty(\"sourceCodeInfo\")&&(n=l.google.protobuf.SourceCodeInfo.verify(e.sourceCodeInfo)))return\"sourceCodeInfo.\"+n;return null!=e.syntax&&e.hasOwnProperty(\"syntax\")&&!p.isString(e.syntax)?\"syntax: string expected\":null},m.fromObject=function(e){if(e instanceof l.google.protobuf.FileDescriptorProto)return e;var t=new l.google.protobuf.FileDescriptorProto;if(null!=e.name&&(t.name=String(e.name)),null!=e.package&&(t.package=String(e.package)),e.dependency){if(!Array.isArray(e.dependency))throw TypeError(\".google.protobuf.FileDescriptorProto.dependency: array expected\");t.dependency=[];for(var n=0;n<e.dependency.length;++n)t.dependency[n]=String(e.dependency[n])}if(e.publicDependency){if(!Array.isArray(e.publicDependency))throw TypeError(\".google.protobuf.FileDescriptorProto.publicDependency: array expected\");t.publicDependency=[];for(n=0;n<e.publicDependency.length;++n)t.publicDependency[n]=0|e.publicDependency[n]}if(e.weakDependency){if(!Array.isArray(e.weakDependency))throw TypeError(\".google.protobuf.FileDescriptorProto.weakDependency: array expected\");t.weakDependency=[];for(n=0;n<e.weakDependency.length;++n)t.weakDependency[n]=0|e.weakDependency[n]}if(e.messageType){if(!Array.isArray(e.messageType))throw TypeError(\".google.protobuf.FileDescriptorProto.messageType: array expected\");t.messageType=[];for(n=0;n<e.messageType.length;++n){if(\"object\"!=typeof e.messageType[n])throw TypeError(\".google.protobuf.FileDescriptorProto.messageType: object expected\");t.messageType[n]=l.google.protobuf.DescriptorProto.fromObject(e.messageType[n])}}if(e.enumType){if(!Array.isArray(e.enumType))throw TypeError(\".google.protobuf.FileDescriptorProto.enumType: array expected\");t.enumType=[];for(n=0;n<e.enumType.length;++n){if(\"object\"!=typeof e.enumType[n])throw TypeError(\".google.protobuf.FileDescriptorProto.enumType: object expected\");t.enumType[n]=l.google.protobuf.EnumDescriptorProto.fromObject(e.enumType[n])}}if(e.service){if(!Array.isArray(e.service))throw TypeError(\".google.protobuf.FileDescriptorProto.service: array expected\");t.service=[];for(n=0;n<e.service.length;++n){if(\"object\"!=typeof e.service[n])throw TypeError(\".google.protobuf.FileDescriptorProto.service: object expected\");t.service[n]=l.google.protobuf.ServiceDescriptorProto.fromObject(e.service[n])}}if(e.extension){if(!Array.isArray(e.extension))throw TypeError(\".google.protobuf.FileDescriptorProto.extension: array expected\");t.extension=[];for(n=0;n<e.extension.length;++n){if(\"object\"!=typeof e.extension[n])throw TypeError(\".google.protobuf.FileDescriptorProto.extension: object expected\");t.extension[n]=l.google.protobuf.FieldDescriptorProto.fromObject(e.extension[n])}}if(null!=e.options){if(\"object\"!=typeof e.options)throw TypeError(\".google.protobuf.FileDescriptorProto.options: object expected\");t.options=l.google.protobuf.FileOptions.fromObject(e.options)}if(null!=e.sourceCodeInfo){if(\"object\"!=typeof e.sourceCodeInfo)throw TypeError(\".google.protobuf.FileDescriptorProto.sourceCodeInfo: object expected\");t.sourceCodeInfo=l.google.protobuf.SourceCodeInfo.fromObject(e.sourceCodeInfo)}return null!=e.syntax&&(t.syntax=String(e.syntax)),t},m.toObject=function(e,t){var n={};if(((t=t||{}).arrays||t.defaults)&&(n.dependency=[],n.messageType=[],n.enumType=[],n.service=[],n.extension=[],n.publicDependency=[],n.weakDependency=[]),t.defaults&&(n.name=\"\",n.package=\"\",n.options=null,n.sourceCodeInfo=null,n.syntax=\"\"),null!=e.name&&e.hasOwnProperty(\"name\")&&(n.name=e.name),null!=e.package&&e.hasOwnProperty(\"package\")&&(n.package=e.package),e.dependency&&e.dependency.length){n.dependency=[];for(var o=0;o<e.dependency.length;++o)n.dependency[o]=e.dependency[o]}if(e.messageType&&e.messageType.length){n.messageType=[];for(o=0;o<e.messageType.length;++o)n.messageType[o]=l.google.protobuf.DescriptorProto.toObject(e.messageType[o],t)}if(e.enumType&&e.enumType.length){n.enumType=[];for(o=0;o<e.enumType.length;++o)n.enumType[o]=l.google.protobuf.EnumDescriptorProto.toObject(e.enumType[o],t)}if(e.service&&e.service.length){n.service=[];for(o=0;o<e.service.length;++o)n.service[o]=l.google.protobuf.ServiceDescriptorProto.toObject(e.service[o],t)}if(e.extension&&e.extension.length){n.extension=[];for(o=0;o<e.extension.length;++o)n.extension[o]=l.google.protobuf.FieldDescriptorProto.toObject(e.extension[o],t)}if(null!=e.options&&e.hasOwnProperty(\"options\")&&(n.options=l.google.protobuf.FileOptions.toObject(e.options,t)),null!=e.sourceCodeInfo&&e.hasOwnProperty(\"sourceCodeInfo\")&&(n.sourceCodeInfo=l.google.protobuf.SourceCodeInfo.toObject(e.sourceCodeInfo,t)),e.publicDependency&&e.publicDependency.length){n.publicDependency=[];for(o=0;o<e.publicDependency.length;++o)n.publicDependency[o]=e.publicDependency[o]}if(e.weakDependency&&e.weakDependency.length){n.weakDependency=[];for(o=0;o<e.weakDependency.length;++o)n.weakDependency[o]=e.weakDependency[o]}return null!=e.syntax&&e.hasOwnProperty(\"syntax\")&&(n.syntax=e.syntax),n},m.prototype.toJSON=function(){return this.constructor.toObject(this,o.util.toJSONOptions)},m),n.DescriptorProto=(O.prototype.name=\"\",O.prototype.field=p.emptyArray,O.prototype.extension=p.emptyArray,O.prototype.nestedType=p.emptyArray,O.prototype.enumType=p.emptyArray,O.prototype.extensionRange=p.emptyArray,O.prototype.oneofDecl=p.emptyArray,O.prototype.options=null,O.prototype.reservedRange=p.emptyArray,O.prototype.reservedName=p.emptyArray,O.create=function(e){return new O(e)},O.encode=function(e,t){if(t=t||i.create(),null!=e.name&&Object.hasOwnProperty.call(e,\"name\")&&t.uint32(10).string(e.name),null!=e.field&&e.field.length)for(var n=0;n<e.field.length;++n)l.google.protobuf.FieldDescriptorProto.encode(e.field[n],t.uint32(18).fork()).ldelim();if(null!=e.nestedType&&e.nestedType.length)for(n=0;n<e.nestedType.length;++n)l.google.protobuf.DescriptorProto.encode(e.nestedType[n],t.uint32(26).fork()).ldelim();if(null!=e.enumType&&e.enumType.length)for(n=0;n<e.enumType.length;++n)l.google.protobuf.EnumDescriptorProto.encode(e.enumType[n],t.uint32(34).fork()).ldelim();if(null!=e.extensionRange&&e.extensionRange.length)for(n=0;n<e.extensionRange.length;++n)l.google.protobuf.DescriptorProto.ExtensionRange.encode(e.extensionRange[n],t.uint32(42).fork()).ldelim();if(null!=e.extension&&e.extension.length)for(n=0;n<e.extension.length;++n)l.google.protobuf.FieldDescriptorProto.encode(e.extension[n],t.uint32(50).fork()).ldelim();if(null!=e.options&&Object.hasOwnProperty.call(e,\"options\")&&l.google.protobuf.MessageOptions.encode(e.options,t.uint32(58).fork()).ldelim(),null!=e.oneofDecl&&e.oneofDecl.length)for(n=0;n<e.oneofDecl.length;++n)l.google.protobuf.OneofDescriptorProto.encode(e.oneofDecl[n],t.uint32(66).fork()).ldelim();if(null!=e.reservedRange&&e.reservedRange.length)for(n=0;n<e.reservedRange.length;++n)l.google.protobuf.DescriptorProto.ReservedRange.encode(e.reservedRange[n],t.uint32(74).fork()).ldelim();if(null!=e.reservedName&&e.reservedName.length)for(n=0;n<e.reservedName.length;++n)t.uint32(82).string(e.reservedName[n]);return t},O.encodeDelimited=function(e,t){return this.encode(e,t).ldelim()},O.decode=function(e,t){e instanceof a||(e=a.create(e));for(var n=void 0===t?e.len:e.pos+t,o=new l.google.protobuf.DescriptorProto;e.pos<n;){var r=e.uint32();switch(r>>>3){case 1:o.name=e.string();break;case 2:o.field&&o.field.length||(o.field=[]),o.field.push(l.google.protobuf.FieldDescriptorProto.decode(e,e.uint32()));break;case 6:o.extension&&o.extension.length||(o.extension=[]),o.extension.push(l.google.protobuf.FieldDescriptorProto.decode(e,e.uint32()));break;case 3:o.nestedType&&o.nestedType.length||(o.nestedType=[]),o.nestedType.push(l.google.protobuf.DescriptorProto.decode(e,e.uint32()));break;case 4:o.enumType&&o.enumType.length||(o.enumType=[]),o.enumType.push(l.google.protobuf.EnumDescriptorProto.decode(e,e.uint32()));break;case 5:o.extensionRange&&o.extensionRange.length||(o.extensionRange=[]),o.extensionRange.push(l.google.protobuf.DescriptorProto.ExtensionRange.decode(e,e.uint32()));break;case 8:o.oneofDecl&&o.oneofDecl.length||(o.oneofDecl=[]),o.oneofDecl.push(l.google.protobuf.OneofDescriptorProto.decode(e,e.uint32()));break;case 7:o.options=l.google.protobuf.MessageOptions.decode(e,e.uint32());break;case 9:o.reservedRange&&o.reservedRange.length||(o.reservedRange=[]),o.reservedRange.push(l.google.protobuf.DescriptorProto.ReservedRange.decode(e,e.uint32()));break;case 10:o.reservedName&&o.reservedName.length||(o.reservedName=[]),o.reservedName.push(e.string());break;default:e.skipType(7&r)}}return o},O.decodeDelimited=function(e){return e instanceof a||(e=new a(e)),this.decode(e,e.uint32())},O.verify=function(e){if(\"object\"!=typeof e||null===e)return\"object expected\";if(null!=e.name&&e.hasOwnProperty(\"name\")&&!p.isString(e.name))return\"name: string expected\";if(null!=e.field&&e.hasOwnProperty(\"field\")){if(!Array.isArray(e.field))return\"field: array expected\";for(var t=0;t<e.field.length;++t)if(n=l.google.protobuf.FieldDescriptorProto.verify(e.field[t]))return\"field.\"+n}if(null!=e.extension&&e.hasOwnProperty(\"extension\")){if(!Array.isArray(e.extension))return\"extension: array expected\";for(t=0;t<e.extension.length;++t)if(n=l.google.protobuf.FieldDescriptorProto.verify(e.extension[t]))return\"extension.\"+n}if(null!=e.nestedType&&e.hasOwnProperty(\"nestedType\")){if(!Array.isArray(e.nestedType))return\"nestedType: array expected\";for(t=0;t<e.nestedType.length;++t)if(n=l.google.protobuf.DescriptorProto.verify(e.nestedType[t]))return\"nestedType.\"+n}if(null!=e.enumType&&e.hasOwnProperty(\"enumType\")){if(!Array.isArray(e.enumType))return\"enumType: array expected\";for(t=0;t<e.enumType.length;++t)if(n=l.google.protobuf.EnumDescriptorProto.verify(e.enumType[t]))return\"enumType.\"+n}if(null!=e.extensionRange&&e.hasOwnProperty(\"extensionRange\")){if(!Array.isArray(e.extensionRange))return\"extensionRange: array expected\";for(t=0;t<e.extensionRange.length;++t)if(n=l.google.protobuf.DescriptorProto.ExtensionRange.verify(e.extensionRange[t]))return\"extensionRange.\"+n}if(null!=e.oneofDecl&&e.hasOwnProperty(\"oneofDecl\")){if(!Array.isArray(e.oneofDecl))return\"oneofDecl: array expected\";for(t=0;t<e.oneofDecl.length;++t)if(n=l.google.protobuf.OneofDescriptorProto.verify(e.oneofDecl[t]))return\"oneofDecl.\"+n}if(null!=e.options&&e.hasOwnProperty(\"options\")&&(n=l.google.protobuf.MessageOptions.verify(e.options)))return\"options.\"+n;if(null!=e.reservedRange&&e.hasOwnProperty(\"reservedRange\")){if(!Array.isArray(e.reservedRange))return\"reservedRange: array expected\";for(var n,t=0;t<e.reservedRange.length;++t)if(n=l.google.protobuf.DescriptorProto.ReservedRange.verify(e.reservedRange[t]))return\"reservedRange.\"+n}if(null!=e.reservedName&&e.hasOwnProperty(\"reservedName\")){if(!Array.isArray(e.reservedName))return\"reservedName: array expected\";for(t=0;t<e.reservedName.length;++t)if(!p.isString(e.reservedName[t]))return\"reservedName: string[] expected\"}return null},O.fromObject=function(e){if(e instanceof l.google.protobuf.DescriptorProto)return e;var t=new l.google.protobuf.DescriptorProto;if(null!=e.name&&(t.name=String(e.name)),e.field){if(!Array.isArray(e.field))throw TypeError(\".google.protobuf.DescriptorProto.field: array expected\");t.field=[];for(var n=0;n<e.field.length;++n){if(\"object\"!=typeof e.field[n])throw TypeError(\".google.protobuf.DescriptorProto.field: object expected\");t.field[n]=l.google.protobuf.FieldDescriptorProto.fromObject(e.field[n])}}if(e.extension){if(!Array.isArray(e.extension))throw TypeError(\".google.protobuf.DescriptorProto.extension: array expected\");t.extension=[];for(n=0;n<e.extension.length;++n){if(\"object\"!=typeof e.extension[n])throw TypeError(\".google.protobuf.DescriptorProto.extension: object expected\");t.extension[n]=l.google.protobuf.FieldDescriptorProto.fromObject(e.extension[n])}}if(e.nestedType){if(!Array.isArray(e.nestedType))throw TypeError(\".google.protobuf.DescriptorProto.nestedType: array expected\");t.nestedType=[];for(n=0;n<e.nestedType.length;++n){if(\"object\"!=typeof e.nestedType[n])throw TypeError(\".google.protobuf.DescriptorProto.nestedType: object expected\");t.nestedType[n]=l.google.protobuf.DescriptorProto.fromObject(e.nestedType[n])}}if(e.enumType){if(!Array.isArray(e.enumType))throw TypeError(\".google.protobuf.DescriptorProto.enumType: array expected\");t.enumType=[];for(n=0;n<e.enumType.length;++n){if(\"object\"!=typeof e.enumType[n])throw TypeError(\".google.protobuf.DescriptorProto.enumType: object expected\");t.enumType[n]=l.google.protobuf.EnumDescriptorProto.fromObject(e.enumType[n])}}if(e.extensionRange){if(!Array.isArray(e.extensionRange))throw TypeError(\".google.protobuf.DescriptorProto.extensionRange: array expected\");t.extensionRange=[];for(n=0;n<e.extensionRange.length;++n){if(\"object\"!=typeof e.extensionRange[n])throw TypeError(\".google.protobuf.DescriptorProto.extensionRange: object expected\");t.extensionRange[n]=l.google.protobuf.DescriptorProto.ExtensionRange.fromObject(e.extensionRange[n])}}if(e.oneofDecl){if(!Array.isArray(e.oneofDecl))throw TypeError(\".google.protobuf.DescriptorProto.oneofDecl: array expected\");t.oneofDecl=[];for(n=0;n<e.oneofDecl.length;++n){if(\"object\"!=typeof e.oneofDecl[n])throw TypeError(\".google.protobuf.DescriptorProto.oneofDecl: object expected\");t.oneofDecl[n]=l.google.protobuf.OneofDescriptorProto.fromObject(e.oneofDecl[n])}}if(null!=e.options){if(\"object\"!=typeof e.options)throw TypeError(\".google.protobuf.DescriptorProto.options: object expected\");t.options=l.google.protobuf.MessageOptions.fromObject(e.options)}if(e.reservedRange){if(!Array.isArray(e.reservedRange))throw TypeError(\".google.protobuf.DescriptorProto.reservedRange: array expected\");t.reservedRange=[];for(n=0;n<e.reservedRange.length;++n){if(\"object\"!=typeof e.reservedRange[n])throw TypeError(\".google.protobuf.DescriptorProto.reservedRange: object expected\");t.reservedRange[n]=l.google.protobuf.DescriptorProto.ReservedRange.fromObject(e.reservedRange[n])}}if(e.reservedName){if(!Array.isArray(e.reservedName))throw TypeError(\".google.protobuf.DescriptorProto.reservedName: array expected\");t.reservedName=[];for(n=0;n<e.reservedName.length;++n)t.reservedName[n]=String(e.reservedName[n])}return t},O.toObject=function(e,t){var n={};if(((t=t||{}).arrays||t.defaults)&&(n.field=[],n.nestedType=[],n.enumType=[],n.extensionRange=[],n.extension=[],n.oneofDecl=[],n.reservedRange=[],n.reservedName=[]),t.defaults&&(n.name=\"\",n.options=null),null!=e.name&&e.hasOwnProperty(\"name\")&&(n.name=e.name),e.field&&e.field.length){n.field=[];for(var o=0;o<e.field.length;++o)n.field[o]=l.google.protobuf.FieldDescriptorProto.toObject(e.field[o],t)}if(e.nestedType&&e.nestedType.length){n.nestedType=[];for(o=0;o<e.nestedType.length;++o)n.nestedType[o]=l.google.protobuf.DescriptorProto.toObject(e.nestedType[o],t)}if(e.enumType&&e.enumType.length){n.enumType=[];for(o=0;o<e.enumType.length;++o)n.enumType[o]=l.google.protobuf.EnumDescriptorProto.toObject(e.enumType[o],t)}if(e.extensionRange&&e.extensionRange.length){n.extensionRange=[];for(o=0;o<e.extensionRange.length;++o)n.extensionRange[o]=l.google.protobuf.DescriptorProto.ExtensionRange.toObject(e.extensionRange[o],t)}if(e.extension&&e.extension.length){n.extension=[];for(o=0;o<e.extension.length;++o)n.extension[o]=l.google.protobuf.FieldDescriptorProto.toObject(e.extension[o],t)}if(null!=e.options&&e.hasOwnProperty(\"options\")&&(n.options=l.google.protobuf.MessageOptions.toObject(e.options,t)),e.oneofDecl&&e.oneofDecl.length){n.oneofDecl=[];for(o=0;o<e.oneofDecl.length;++o)n.oneofDecl[o]=l.google.protobuf.OneofDescriptorProto.toObject(e.oneofDecl[o],t)}if(e.reservedRange&&e.reservedRange.length){n.reservedRange=[];for(o=0;o<e.reservedRange.length;++o)n.reservedRange[o]=l.google.protobuf.DescriptorProto.ReservedRange.toObject(e.reservedRange[o],t)}if(e.reservedName&&e.reservedName.length){n.reservedName=[];for(o=0;o<e.reservedName.length;++o)n.reservedName[o]=e.reservedName[o]}return n},O.prototype.toJSON=function(){return this.constructor.toObject(this,o.util.toJSONOptions)},O.ExtensionRange=(v.prototype.start=0,v.prototype.end=0,v.prototype.options=null,v.create=function(e){return new v(e)},v.encode=function(e,t){return t=t||i.create(),null!=e.start&&Object.hasOwnProperty.call(e,\"start\")&&t.uint32(8).int32(e.start),null!=e.end&&Object.hasOwnProperty.call(e,\"end\")&&t.uint32(16).int32(e.end),null!=e.options&&Object.hasOwnProperty.call(e,\"options\")&&l.google.protobuf.ExtensionRangeOptions.encode(e.options,t.uint32(26).fork()).ldelim(),t},v.encodeDelimited=function(e,t){return this.encode(e,t).ldelim()},v.decode=function(e,t){e instanceof a||(e=a.create(e));for(var n=void 0===t?e.len:e.pos+t,o=new l.google.protobuf.DescriptorProto.ExtensionRange;e.pos<n;){var r=e.uint32();switch(r>>>3){case 1:o.start=e.int32();break;case 2:o.end=e.int32();break;case 3:o.options=l.google.protobuf.ExtensionRangeOptions.decode(e,e.uint32());break;default:e.skipType(7&r)}}return o},v.decodeDelimited=function(e){return e instanceof a||(e=new a(e)),this.decode(e,e.uint32())},v.verify=function(e){if(\"object\"!=typeof e||null===e)return\"object expected\";if(null!=e.start&&e.hasOwnProperty(\"start\")&&!p.isInteger(e.start))return\"start: integer expected\";if(null!=e.end&&e.hasOwnProperty(\"end\")&&!p.isInteger(e.end))return\"end: integer expected\";if(null!=e.options&&e.hasOwnProperty(\"options\")){e=l.google.protobuf.ExtensionRangeOptions.verify(e.options);if(e)return\"options.\"+e}return null},v.fromObject=function(e){if(e instanceof l.google.protobuf.DescriptorProto.ExtensionRange)return e;var t=new l.google.protobuf.DescriptorProto.ExtensionRange;if(null!=e.start&&(t.start=0|e.start),null!=e.end&&(t.end=0|e.end),null!=e.options){if(\"object\"!=typeof e.options)throw TypeError(\".google.protobuf.DescriptorProto.ExtensionRange.options: object expected\");t.options=l.google.protobuf.ExtensionRangeOptions.fromObject(e.options)}return t},v.toObject=function(e,t){var n={};return(t=t||{}).defaults&&(n.start=0,n.end=0,n.options=null),null!=e.start&&e.hasOwnProperty(\"start\")&&(n.start=e.start),null!=e.end&&e.hasOwnProperty(\"end\")&&(n.end=e.end),null!=e.options&&e.hasOwnProperty(\"options\")&&(n.options=l.google.protobuf.ExtensionRangeOptions.toObject(e.options,t)),n},v.prototype.toJSON=function(){return this.constructor.toObject(this,o.util.toJSONOptions)},v),O.ReservedRange=(Y.prototype.start=0,Y.prototype.end=0,Y.create=function(e){return new Y(e)},Y.encode=function(e,t){return t=t||i.create(),null!=e.start&&Object.hasOwnProperty.call(e,\"start\")&&t.uint32(8).int32(e.start),null!=e.end&&Object.hasOwnProperty.call(e,\"end\")&&t.uint32(16).int32(e.end),t},Y.encodeDelimited=function(e,t){return this.encode(e,t).ldelim()},Y.decode=function(e,t){e instanceof a||(e=a.create(e));for(var n=void 0===t?e.len:e.pos+t,o=new l.google.protobuf.DescriptorProto.ReservedRange;e.pos<n;){var r=e.uint32();switch(r>>>3){case 1:o.start=e.int32();break;case 2:o.end=e.int32();break;default:e.skipType(7&r)}}return o},Y.decodeDelimited=function(e){return e instanceof a||(e=new a(e)),this.decode(e,e.uint32())},Y.verify=function(e){return\"object\"!=typeof e||null===e?\"object expected\":null!=e.start&&e.hasOwnProperty(\"start\")&&!p.isInteger(e.start)?\"start: integer expected\":null!=e.end&&e.hasOwnProperty(\"end\")&&!p.isInteger(e.end)?\"end: integer expected\":null},Y.fromObject=function(e){var t;return e instanceof l.google.protobuf.DescriptorProto.ReservedRange?e:(t=new l.google.protobuf.DescriptorProto.ReservedRange,null!=e.start&&(t.start=0|e.start),null!=e.end&&(t.end=0|e.end),t)},Y.toObject=function(e,t){var n={};return(t=t||{}).defaults&&(n.start=0,n.end=0),null!=e.start&&e.hasOwnProperty(\"start\")&&(n.start=e.start),null!=e.end&&e.hasOwnProperty(\"end\")&&(n.end=e.end),n},Y.prototype.toJSON=function(){return this.constructor.toObject(this,o.util.toJSONOptions)},Y),O),n.ExtensionRangeOptions=(z.prototype.uninterpretedOption=p.emptyArray,z.create=function(e){return new z(e)},z.encode=function(e,t){if(t=t||i.create(),null!=e.uninterpretedOption&&e.uninterpretedOption.length)for(var n=0;n<e.uninterpretedOption.length;++n)l.google.protobuf.UninterpretedOption.encode(e.uninterpretedOption[n],t.uint32(7994).fork()).ldelim();return t},z.encodeDelimited=function(e,t){return this.encode(e,t).ldelim()},z.decode=function(e,t){e instanceof a||(e=a.create(e));for(var n=void 0===t?e.len:e.pos+t,o=new l.google.protobuf.ExtensionRangeOptions;e.pos<n;){var r=e.uint32();r>>>3==999?(o.uninterpretedOption&&o.uninterpretedOption.length||(o.uninterpretedOption=[]),o.uninterpretedOption.push(l.google.protobuf.UninterpretedOption.decode(e,e.uint32()))):e.skipType(7&r)}return o},z.decodeDelimited=function(e){return e instanceof a||(e=new a(e)),this.decode(e,e.uint32())},z.verify=function(e){if(\"object\"!=typeof e||null===e)return\"object expected\";if(null!=e.uninterpretedOption&&e.hasOwnProperty(\"uninterpretedOption\")){if(!Array.isArray(e.uninterpretedOption))return\"uninterpretedOption: array expected\";for(var t=0;t<e.uninterpretedOption.length;++t){var n=l.google.protobuf.UninterpretedOption.verify(e.uninterpretedOption[t]);if(n)return\"uninterpretedOption.\"+n}}return null},z.fromObject=function(e){if(e instanceof l.google.protobuf.ExtensionRangeOptions)return e;var t=new l.google.protobuf.ExtensionRangeOptions;if(e.uninterpretedOption){if(!Array.isArray(e.uninterpretedOption))throw TypeError(\".google.protobuf.ExtensionRangeOptions.uninterpretedOption: array expected\");t.uninterpretedOption=[];for(var n=0;n<e.uninterpretedOption.length;++n){if(\"object\"!=typeof e.uninterpretedOption[n])throw TypeError(\".google.protobuf.ExtensionRangeOptions.uninterpretedOption: object expected\");t.uninterpretedOption[n]=l.google.protobuf.UninterpretedOption.fromObject(e.uninterpretedOption[n])}}return t},z.toObject=function(e,t){var n={};if(((t=t||{}).arrays||t.defaults)&&(n.uninterpretedOption=[]),e.uninterpretedOption&&e.uninterpretedOption.length){n.uninterpretedOption=[];for(var o=0;o<e.uninterpretedOption.length;++o)n.uninterpretedOption[o]=l.google.protobuf.UninterpretedOption.toObject(e.uninterpretedOption[o],t)}return n},z.prototype.toJSON=function(){return this.constructor.toObject(this,o.util.toJSONOptions)},z),n.FieldDescriptorProto=(P.prototype.name=\"\",P.prototype.number=0,P.prototype.label=1,P.prototype.type=1,P.prototype.typeName=\"\",P.prototype.extendee=\"\",P.prototype.defaultValue=\"\",P.prototype.oneofIndex=0,P.prototype.jsonName=\"\",P.prototype.options=null,P.prototype.proto3Optional=!1,P.create=function(e){return new P(e)},P.encode=function(e,t){return t=t||i.create(),null!=e.name&&Object.hasOwnProperty.call(e,\"name\")&&t.uint32(10).string(e.name),null!=e.extendee&&Object.hasOwnProperty.call(e,\"extendee\")&&t.uint32(18).string(e.extendee),null!=e.number&&Object.hasOwnProperty.call(e,\"number\")&&t.uint32(24).int32(e.number),null!=e.label&&Object.hasOwnProperty.call(e,\"label\")&&t.uint32(32).int32(e.label),null!=e.type&&Object.hasOwnProperty.call(e,\"type\")&&t.uint32(40).int32(e.type),null!=e.typeName&&Object.hasOwnProperty.call(e,\"typeName\")&&t.uint32(50).string(e.typeName),null!=e.defaultValue&&Object.hasOwnProperty.call(e,\"defaultValue\")&&t.uint32(58).string(e.defaultValue),null!=e.options&&Object.hasOwnProperty.call(e,\"options\")&&l.google.protobuf.FieldOptions.encode(e.options,t.uint32(66).fork()).ldelim(),null!=e.oneofIndex&&Object.hasOwnProperty.call(e,\"oneofIndex\")&&t.uint32(72).int32(e.oneofIndex),null!=e.jsonName&&Object.hasOwnProperty.call(e,\"jsonName\")&&t.uint32(82).string(e.jsonName),null!=e.proto3Optional&&Object.hasOwnProperty.call(e,\"proto3Optional\")&&t.uint32(136).bool(e.proto3Optional),t},P.encodeDelimited=function(e,t){return this.encode(e,t).ldelim()},P.decode=function(e,t){e instanceof a||(e=a.create(e));for(var n=void 0===t?e.len:e.pos+t,o=new l.google.protobuf.FieldDescriptorProto;e.pos<n;){var r=e.uint32();switch(r>>>3){case 1:o.name=e.string();break;case 3:o.number=e.int32();break;case 4:o.label=e.int32();break;case 5:o.type=e.int32();break;case 6:o.typeName=e.string();break;case 2:o.extendee=e.string();break;case 7:o.defaultValue=e.string();break;case 9:o.oneofIndex=e.int32();break;case 10:o.jsonName=e.string();break;case 8:o.options=l.google.protobuf.FieldOptions.decode(e,e.uint32());break;case 17:o.proto3Optional=e.bool();break;default:e.skipType(7&r)}}return o},P.decodeDelimited=function(e){return e instanceof a||(e=new a(e)),this.decode(e,e.uint32())},P.verify=function(e){if(\"object\"!=typeof e||null===e)return\"object expected\";if(null!=e.name&&e.hasOwnProperty(\"name\")&&!p.isString(e.name))return\"name: string expected\";if(null!=e.number&&e.hasOwnProperty(\"number\")&&!p.isInteger(e.number))return\"number: integer expected\";if(null!=e.label&&e.hasOwnProperty(\"label\"))switch(e.label){default:return\"label: enum value expected\";case 1:case 2:case 3:}if(null!=e.type&&e.hasOwnProperty(\"type\"))switch(e.type){default:return\"type: enum value expected\";case 1:case 2:case 3:case 4:case 5:case 6:case 7:case 8:case 9:case 10:case 11:case 12:case 13:case 14:case 15:case 16:case 17:case 18:}if(null!=e.typeName&&e.hasOwnProperty(\"typeName\")&&!p.isString(e.typeName))return\"typeName: string expected\";if(null!=e.extendee&&e.hasOwnProperty(\"extendee\")&&!p.isString(e.extendee))return\"extendee: string expected\";if(null!=e.defaultValue&&e.hasOwnProperty(\"defaultValue\")&&!p.isString(e.defaultValue))return\"defaultValue: string expected\";if(null!=e.oneofIndex&&e.hasOwnProperty(\"oneofIndex\")&&!p.isInteger(e.oneofIndex))return\"oneofIndex: integer expected\";if(null!=e.jsonName&&e.hasOwnProperty(\"jsonName\")&&!p.isString(e.jsonName))return\"jsonName: string expected\";if(null!=e.options&&e.hasOwnProperty(\"options\")){var t=l.google.protobuf.FieldOptions.verify(e.options);if(t)return\"options.\"+t}return null!=e.proto3Optional&&e.hasOwnProperty(\"proto3Optional\")&&\"boolean\"!=typeof e.proto3Optional?\"proto3Optional: boolean expected\":null},P.fromObject=function(e){if(e instanceof l.google.protobuf.FieldDescriptorProto)return e;var t=new l.google.protobuf.FieldDescriptorProto;switch(null!=e.name&&(t.name=String(e.name)),null!=e.number&&(t.number=0|e.number),e.label){case\"LABEL_OPTIONAL\":case 1:t.label=1;break;case\"LABEL_REQUIRED\":case 2:t.label=2;break;case\"LABEL_REPEATED\":case 3:t.label=3}switch(e.type){case\"TYPE_DOUBLE\":case 1:t.type=1;break;case\"TYPE_FLOAT\":case 2:t.type=2;break;case\"TYPE_INT64\":case 3:t.type=3;break;case\"TYPE_UINT64\":case 4:t.type=4;break;case\"TYPE_INT32\":case 5:t.type=5;break;case\"TYPE_FIXED64\":case 6:t.type=6;break;case\"TYPE_FIXED32\":case 7:t.type=7;break;case\"TYPE_BOOL\":case 8:t.type=8;break;case\"TYPE_STRING\":case 9:t.type=9;break;case\"TYPE_GROUP\":case 10:t.type=10;break;case\"TYPE_MESSAGE\":case 11:t.type=11;break;case\"TYPE_BYTES\":case 12:t.type=12;break;case\"TYPE_UINT32\":case 13:t.type=13;break;case\"TYPE_ENUM\":case 14:t.type=14;break;case\"TYPE_SFIXED32\":case 15:t.type=15;break;case\"TYPE_SFIXED64\":case 16:t.type=16;break;case\"TYPE_SINT32\":case 17:t.type=17;break;case\"TYPE_SINT64\":case 18:t.type=18}if(null!=e.typeName&&(t.typeName=String(e.typeName)),null!=e.extendee&&(t.extendee=String(e.extendee)),null!=e.defaultValue&&(t.defaultValue=String(e.defaultValue)),null!=e.oneofIndex&&(t.oneofIndex=0|e.oneofIndex),null!=e.jsonName&&(t.jsonName=String(e.jsonName)),null!=e.options){if(\"object\"!=typeof e.options)throw TypeError(\".google.protobuf.FieldDescriptorProto.options: object expected\");t.options=l.google.protobuf.FieldOptions.fromObject(e.options)}return null!=e.proto3Optional&&(t.proto3Optional=Boolean(e.proto3Optional)),t},P.toObject=function(e,t){var n={};return(t=t||{}).defaults&&(n.name=\"\",n.extendee=\"\",n.number=0,n.label=t.enums===String?\"LABEL_OPTIONAL\":1,n.type=t.enums===String?\"TYPE_DOUBLE\":1,n.typeName=\"\",n.defaultValue=\"\",n.options=null,n.oneofIndex=0,n.jsonName=\"\",n.proto3Optional=!1),null!=e.name&&e.hasOwnProperty(\"name\")&&(n.name=e.name),null!=e.extendee&&e.hasOwnProperty(\"extendee\")&&(n.extendee=e.extendee),null!=e.number&&e.hasOwnProperty(\"number\")&&(n.number=e.number),null!=e.label&&e.hasOwnProperty(\"label\")&&(n.label=t.enums===String?l.google.protobuf.FieldDescriptorProto.Label[e.label]:e.label),null!=e.type&&e.hasOwnProperty(\"type\")&&(n.type=t.enums===String?l.google.protobuf.FieldDescriptorProto.Type[e.type]:e.type),null!=e.typeName&&e.hasOwnProperty(\"typeName\")&&(n.typeName=e.typeName),null!=e.defaultValue&&e.hasOwnProperty(\"defaultValue\")&&(n.defaultValue=e.defaultValue),null!=e.options&&e.hasOwnProperty(\"options\")&&(n.options=l.google.protobuf.FieldOptions.toObject(e.options,t)),null!=e.oneofIndex&&e.hasOwnProperty(\"oneofIndex\")&&(n.oneofIndex=e.oneofIndex),null!=e.jsonName&&e.hasOwnProperty(\"jsonName\")&&(n.jsonName=e.jsonName),null!=e.proto3Optional&&e.hasOwnProperty(\"proto3Optional\")&&(n.proto3Optional=e.proto3Optional),n},P.prototype.toJSON=function(){return this.constructor.toObject(this,o.util.toJSONOptions)},P.Type=(e={},(t=Object.create(e))[e[1]=\"TYPE_DOUBLE\"]=1,t[e[2]=\"TYPE_FLOAT\"]=2,t[e[3]=\"TYPE_INT64\"]=3,t[e[4]=\"TYPE_UINT64\"]=4,t[e[5]=\"TYPE_INT32\"]=5,t[e[6]=\"TYPE_FIXED64\"]=6,t[e[7]=\"TYPE_FIXED32\"]=7,t[e[8]=\"TYPE_BOOL\"]=8,t[e[9]=\"TYPE_STRING\"]=9,t[e[10]=\"TYPE_GROUP\"]=10,t[e[11]=\"TYPE_MESSAGE\"]=11,t[e[12]=\"TYPE_BYTES\"]=12,t[e[13]=\"TYPE_UINT32\"]=13,t[e[14]=\"TYPE_ENUM\"]=14,t[e[15]=\"TYPE_SFIXED32\"]=15,t[e[16]=\"TYPE_SFIXED64\"]=16,t[e[17]=\"TYPE_SINT32\"]=17,t[e[18]=\"TYPE_SINT64\"]=18,t),P.Label=(e={},(t=Object.create(e))[e[1]=\"LABEL_OPTIONAL\"]=1,t[e[2]=\"LABEL_REQUIRED\"]=2,t[e[3]=\"LABEL_REPEATED\"]=3,t),P),n.OneofDescriptorProto=(W.prototype.name=\"\",W.prototype.options=null,W.create=function(e){return new W(e)},W.encode=function(e,t){return t=t||i.create(),null!=e.name&&Object.hasOwnProperty.call(e,\"name\")&&t.uint32(10).string(e.name),null!=e.options&&Object.hasOwnProperty.call(e,\"options\")&&l.google.protobuf.OneofOptions.encode(e.options,t.uint32(18).fork()).ldelim(),t},W.encodeDelimited=function(e,t){return this.encode(e,t).ldelim()},W.decode=function(e,t){e instanceof a||(e=a.create(e));for(var n=void 0===t?e.len:e.pos+t,o=new l.google.protobuf.OneofDescriptorProto;e.pos<n;){var r=e.uint32();switch(r>>>3){case 1:o.name=e.string();break;case 2:o.options=l.google.protobuf.OneofOptions.decode(e,e.uint32());break;default:e.skipType(7&r)}}return o},W.decodeDelimited=function(e){return e instanceof a||(e=new a(e)),this.decode(e,e.uint32())},W.verify=function(e){if(\"object\"!=typeof e||null===e)return\"object expected\";if(null!=e.name&&e.hasOwnProperty(\"name\")&&!p.isString(e.name))return\"name: string expected\";if(null!=e.options&&e.hasOwnProperty(\"options\")){e=l.google.protobuf.OneofOptions.verify(e.options);if(e)return\"options.\"+e}return null},W.fromObject=function(e){if(e instanceof l.google.protobuf.OneofDescriptorProto)return e;var t=new l.google.protobuf.OneofDescriptorProto;if(null!=e.name&&(t.name=String(e.name)),null!=e.options){if(\"object\"!=typeof e.options)throw TypeError(\".google.protobuf.OneofDescriptorProto.options: object expected\");t.options=l.google.protobuf.OneofOptions.fromObject(e.options)}return t},W.toObject=function(e,t){var n={};return(t=t||{}).defaults&&(n.name=\"\",n.options=null),null!=e.name&&e.hasOwnProperty(\"name\")&&(n.name=e.name),null!=e.options&&e.hasOwnProperty(\"options\")&&(n.options=l.google.protobuf.OneofOptions.toObject(e.options,t)),n},W.prototype.toJSON=function(){return this.constructor.toObject(this,o.util.toJSONOptions)},W),n.EnumDescriptorProto=(w.prototype.name=\"\",w.prototype.value=p.emptyArray,w.prototype.options=null,w.prototype.reservedRange=p.emptyArray,w.prototype.reservedName=p.emptyArray,w.create=function(e){return new w(e)},w.encode=function(e,t){if(t=t||i.create(),null!=e.name&&Object.hasOwnProperty.call(e,\"name\")&&t.uint32(10).string(e.name),null!=e.value&&e.value.length)for(var n=0;n<e.value.length;++n)l.google.protobuf.EnumValueDescriptorProto.encode(e.value[n],t.uint32(18).fork()).ldelim();if(null!=e.options&&Object.hasOwnProperty.call(e,\"options\")&&l.google.protobuf.EnumOptions.encode(e.options,t.uint32(26).fork()).ldelim(),null!=e.reservedRange&&e.reservedRange.length)for(n=0;n<e.reservedRange.length;++n)l.google.protobuf.EnumDescriptorProto.EnumReservedRange.encode(e.reservedRange[n],t.uint32(34).fork()).ldelim();if(null!=e.reservedName&&e.reservedName.length)for(n=0;n<e.reservedName.length;++n)t.uint32(42).string(e.reservedName[n]);return t},w.encodeDelimited=function(e,t){return this.encode(e,t).ldelim()},w.decode=function(e,t){e instanceof a||(e=a.create(e));for(var n=void 0===t?e.len:e.pos+t,o=new l.google.protobuf.EnumDescriptorProto;e.pos<n;){var r=e.uint32();switch(r>>>3){case 1:o.name=e.string();break;case 2:o.value&&o.value.length||(o.value=[]),o.value.push(l.google.protobuf.EnumValueDescriptorProto.decode(e,e.uint32()));break;case 3:o.options=l.google.protobuf.EnumOptions.decode(e,e.uint32());break;case 4:o.reservedRange&&o.reservedRange.length||(o.reservedRange=[]),o.reservedRange.push(l.google.protobuf.EnumDescriptorProto.EnumReservedRange.decode(e,e.uint32()));break;case 5:o.reservedName&&o.reservedName.length||(o.reservedName=[]),o.reservedName.push(e.string());break;default:e.skipType(7&r)}}return o},w.decodeDelimited=function(e){return e instanceof a||(e=new a(e)),this.decode(e,e.uint32())},w.verify=function(e){if(\"object\"!=typeof e||null===e)return\"object expected\";if(null!=e.name&&e.hasOwnProperty(\"name\")&&!p.isString(e.name))return\"name: string expected\";if(null!=e.value&&e.hasOwnProperty(\"value\")){if(!Array.isArray(e.value))return\"value: array expected\";for(var t=0;t<e.value.length;++t)if(n=l.google.protobuf.EnumValueDescriptorProto.verify(e.value[t]))return\"value.\"+n}if(null!=e.options&&e.hasOwnProperty(\"options\")&&(n=l.google.protobuf.EnumOptions.verify(e.options)))return\"options.\"+n;if(null!=e.reservedRange&&e.hasOwnProperty(\"reservedRange\")){if(!Array.isArray(e.reservedRange))return\"reservedRange: array expected\";for(var n,t=0;t<e.reservedRange.length;++t)if(n=l.google.protobuf.EnumDescriptorProto.EnumReservedRange.verify(e.reservedRange[t]))return\"reservedRange.\"+n}if(null!=e.reservedName&&e.hasOwnProperty(\"reservedName\")){if(!Array.isArray(e.reservedName))return\"reservedName: array expected\";for(t=0;t<e.reservedName.length;++t)if(!p.isString(e.reservedName[t]))return\"reservedName: string[] expected\"}return null},w.fromObject=function(e){if(e instanceof l.google.protobuf.EnumDescriptorProto)return e;var t=new l.google.protobuf.EnumDescriptorProto;if(null!=e.name&&(t.name=String(e.name)),e.value){if(!Array.isArray(e.value))throw TypeError(\".google.protobuf.EnumDescriptorProto.value: array expected\");t.value=[];for(var n=0;n<e.value.length;++n){if(\"object\"!=typeof e.value[n])throw TypeError(\".google.protobuf.EnumDescriptorProto.value: object expected\");t.value[n]=l.google.protobuf.EnumValueDescriptorProto.fromObject(e.value[n])}}if(null!=e.options){if(\"object\"!=typeof e.options)throw TypeError(\".google.protobuf.EnumDescriptorProto.options: object expected\");t.options=l.google.protobuf.EnumOptions.fromObject(e.options)}if(e.reservedRange){if(!Array.isArray(e.reservedRange))throw TypeError(\".google.protobuf.EnumDescriptorProto.reservedRange: array expected\");t.reservedRange=[];for(n=0;n<e.reservedRange.length;++n){if(\"object\"!=typeof e.reservedRange[n])throw TypeError(\".google.protobuf.EnumDescriptorProto.reservedRange: object expected\");t.reservedRange[n]=l.google.protobuf.EnumDescriptorProto.EnumReservedRange.fromObject(e.reservedRange[n])}}if(e.reservedName){if(!Array.isArray(e.reservedName))throw TypeError(\".google.protobuf.EnumDescriptorProto.reservedName: array expected\");t.reservedName=[];for(n=0;n<e.reservedName.length;++n)t.reservedName[n]=String(e.reservedName[n])}return t},w.toObject=function(e,t){var n={};if(((t=t||{}).arrays||t.defaults)&&(n.value=[],n.reservedRange=[],n.reservedName=[]),t.defaults&&(n.name=\"\",n.options=null),null!=e.name&&e.hasOwnProperty(\"name\")&&(n.name=e.name),e.value&&e.value.length){n.value=[];for(var o=0;o<e.value.length;++o)n.value[o]=l.google.protobuf.EnumValueDescriptorProto.toObject(e.value[o],t)}if(null!=e.options&&e.hasOwnProperty(\"options\")&&(n.options=l.google.protobuf.EnumOptions.toObject(e.options,t)),e.reservedRange&&e.reservedRange.length){n.reservedRange=[];for(o=0;o<e.reservedRange.length;++o)n.reservedRange[o]=l.google.protobuf.EnumDescriptorProto.EnumReservedRange.toObject(e.reservedRange[o],t)}if(e.reservedName&&e.reservedName.length){n.reservedName=[];for(o=0;o<e.reservedName.length;++o)n.reservedName[o]=e.reservedName[o]}return n},w.prototype.toJSON=function(){return this.constructor.toObject(this,o.util.toJSONOptions)},w.EnumReservedRange=(X.prototype.start=0,X.prototype.end=0,X.create=function(e){return new X(e)},X.encode=function(e,t){return t=t||i.create(),null!=e.start&&Object.hasOwnProperty.call(e,\"start\")&&t.uint32(8).int32(e.start),null!=e.end&&Object.hasOwnProperty.call(e,\"end\")&&t.uint32(16).int32(e.end),t},X.encodeDelimited=function(e,t){return this.encode(e,t).ldelim()},X.decode=function(e,t){e instanceof a||(e=a.create(e));for(var n=void 0===t?e.len:e.pos+t,o=new l.google.protobuf.EnumDescriptorProto.EnumReservedRange;e.pos<n;){var r=e.uint32();switch(r>>>3){case 1:o.start=e.int32();break;case 2:o.end=e.int32();break;default:e.skipType(7&r)}}return o},X.decodeDelimited=function(e){return e instanceof a||(e=new a(e)),this.decode(e,e.uint32())},X.verify=function(e){return\"object\"!=typeof e||null===e?\"object expected\":null!=e.start&&e.hasOwnProperty(\"start\")&&!p.isInteger(e.start)?\"start: integer expected\":null!=e.end&&e.hasOwnProperty(\"end\")&&!p.isInteger(e.end)?\"end: integer expected\":null},X.fromObject=function(e){var t;return e instanceof l.google.protobuf.EnumDescriptorProto.EnumReservedRange?e:(t=new l.google.protobuf.EnumDescriptorProto.EnumReservedRange,null!=e.start&&(t.start=0|e.start),null!=e.end&&(t.end=0|e.end),t)},X.toObject=function(e,t){var n={};return(t=t||{}).defaults&&(n.start=0,n.end=0),null!=e.start&&e.hasOwnProperty(\"start\")&&(n.start=e.start),null!=e.end&&e.hasOwnProperty(\"end\")&&(n.end=e.end),n},X.prototype.toJSON=function(){return this.constructor.toObject(this,o.util.toJSONOptions)},X),w),n.EnumValueDescriptorProto=(j.prototype.name=\"\",j.prototype.number=0,j.prototype.options=null,j.create=function(e){return new j(e)},j.encode=function(e,t){return t=t||i.create(),null!=e.name&&Object.hasOwnProperty.call(e,\"name\")&&t.uint32(10).string(e.name),null!=e.number&&Object.hasOwnProperty.call(e,\"number\")&&t.uint32(16).int32(e.number),null!=e.options&&Object.hasOwnProperty.call(e,\"options\")&&l.google.protobuf.EnumValueOptions.encode(e.options,t.uint32(26).fork()).ldelim(),t},j.encodeDelimited=function(e,t){return this.encode(e,t).ldelim()},j.decode=function(e,t){e instanceof a||(e=a.create(e));for(var n=void 0===t?e.len:e.pos+t,o=new l.google.protobuf.EnumValueDescriptorProto;e.pos<n;){var r=e.uint32();switch(r>>>3){case 1:o.name=e.string();break;case 2:o.number=e.int32();break;case 3:o.options=l.google.protobuf.EnumValueOptions.decode(e,e.uint32());break;default:e.skipType(7&r)}}return o},j.decodeDelimited=function(e){return e instanceof a||(e=new a(e)),this.decode(e,e.uint32())},j.verify=function(e){if(\"object\"!=typeof e||null===e)return\"object expected\";if(null!=e.name&&e.hasOwnProperty(\"name\")&&!p.isString(e.name))return\"name: string expected\";if(null!=e.number&&e.hasOwnProperty(\"number\")&&!p.isInteger(e.number))return\"number: integer expected\";if(null!=e.options&&e.hasOwnProperty(\"options\")){e=l.google.protobuf.EnumValueOptions.verify(e.options);if(e)return\"options.\"+e}return null},j.fromObject=function(e){if(e instanceof l.google.protobuf.EnumValueDescriptorProto)return e;var t=new l.google.protobuf.EnumValueDescriptorProto;if(null!=e.name&&(t.name=String(e.name)),null!=e.number&&(t.number=0|e.number),null!=e.options){if(\"object\"!=typeof e.options)throw TypeError(\".google.protobuf.EnumValueDescriptorProto.options: object expected\");t.options=l.google.protobuf.EnumValueOptions.fromObject(e.options)}return t},j.toObject=function(e,t){var n={};return(t=t||{}).defaults&&(n.name=\"\",n.number=0,n.options=null),null!=e.name&&e.hasOwnProperty(\"name\")&&(n.name=e.name),null!=e.number&&e.hasOwnProperty(\"number\")&&(n.number=e.number),null!=e.options&&e.hasOwnProperty(\"options\")&&(n.options=l.google.protobuf.EnumValueOptions.toObject(e.options,t)),n},j.prototype.toJSON=function(){return this.constructor.toObject(this,o.util.toJSONOptions)},j),n.ServiceDescriptorProto=(D.prototype.name=\"\",D.prototype.method=p.emptyArray,D.prototype.options=null,D.create=function(e){return new D(e)},D.encode=function(e,t){if(t=t||i.create(),null!=e.name&&Object.hasOwnProperty.call(e,\"name\")&&t.uint32(10).string(e.name),null!=e.method&&e.method.length)for(var n=0;n<e.method.length;++n)l.google.protobuf.MethodDescriptorProto.encode(e.method[n],t.uint32(18).fork()).ldelim();return null!=e.options&&Object.hasOwnProperty.call(e,\"options\")&&l.google.protobuf.ServiceOptions.encode(e.options,t.uint32(26).fork()).ldelim(),t},D.encodeDelimited=function(e,t){return this.encode(e,t).ldelim()},D.decode=function(e,t){e instanceof a||(e=a.create(e));for(var n=void 0===t?e.len:e.pos+t,o=new l.google.protobuf.ServiceDescriptorProto;e.pos<n;){var r=e.uint32();switch(r>>>3){case 1:o.name=e.string();break;case 2:o.method&&o.method.length||(o.method=[]),o.method.push(l.google.protobuf.MethodDescriptorProto.decode(e,e.uint32()));break;case 3:o.options=l.google.protobuf.ServiceOptions.decode(e,e.uint32());break;default:e.skipType(7&r)}}return o},D.decodeDelimited=function(e){return e instanceof a||(e=new a(e)),this.decode(e,e.uint32())},D.verify=function(e){if(\"object\"!=typeof e||null===e)return\"object expected\";if(null!=e.name&&e.hasOwnProperty(\"name\")&&!p.isString(e.name))return\"name: string expected\";if(null!=e.method&&e.hasOwnProperty(\"method\")){if(!Array.isArray(e.method))return\"method: array expected\";for(var t=0;t<e.method.length;++t)if(n=l.google.protobuf.MethodDescriptorProto.verify(e.method[t]))return\"method.\"+n}var n;if(null!=e.options&&e.hasOwnProperty(\"options\")&&(n=l.google.protobuf.ServiceOptions.verify(e.options)))return\"options.\"+n;return null},D.fromObject=function(e){if(e instanceof l.google.protobuf.ServiceDescriptorProto)return e;var t=new l.google.protobuf.ServiceDescriptorProto;if(null!=e.name&&(t.name=String(e.name)),e.method){if(!Array.isArray(e.method))throw TypeError(\".google.protobuf.ServiceDescriptorProto.method: array expected\");t.method=[];for(var n=0;n<e.method.length;++n){if(\"object\"!=typeof e.method[n])throw TypeError(\".google.protobuf.ServiceDescriptorProto.method: object expected\");t.method[n]=l.google.protobuf.MethodDescriptorProto.fromObject(e.method[n])}}if(null!=e.options){if(\"object\"!=typeof e.options)throw TypeError(\".google.protobuf.ServiceDescriptorProto.options: object expected\");t.options=l.google.protobuf.ServiceOptions.fromObject(e.options)}return t},D.toObject=function(e,t){var n={};if(((t=t||{}).arrays||t.defaults)&&(n.method=[]),t.defaults&&(n.name=\"\",n.options=null),null!=e.name&&e.hasOwnProperty(\"name\")&&(n.name=e.name),e.method&&e.method.length){n.method=[];for(var o=0;o<e.method.length;++o)n.method[o]=l.google.protobuf.MethodDescriptorProto.toObject(e.method[o],t)}return null!=e.options&&e.hasOwnProperty(\"options\")&&(n.options=l.google.protobuf.ServiceOptions.toObject(e.options,t)),n},D.prototype.toJSON=function(){return this.constructor.toObject(this,o.util.toJSONOptions)},D),n.MethodDescriptorProto=(x.prototype.name=\"\",x.prototype.inputType=\"\",x.prototype.outputType=\"\",x.prototype.options=null,x.prototype.clientStreaming=!1,x.prototype.serverStreaming=!1,x.create=function(e){return new x(e)},x.encode=function(e,t){return t=t||i.create(),null!=e.name&&Object.hasOwnProperty.call(e,\"name\")&&t.uint32(10).string(e.name),null!=e.inputType&&Object.hasOwnProperty.call(e,\"inputType\")&&t.uint32(18).string(e.inputType),null!=e.outputType&&Object.hasOwnProperty.call(e,\"outputType\")&&t.uint32(26).string(e.outputType),null!=e.options&&Object.hasOwnProperty.call(e,\"options\")&&l.google.protobuf.MethodOptions.encode(e.options,t.uint32(34).fork()).ldelim(),null!=e.clientStreaming&&Object.hasOwnProperty.call(e,\"clientStreaming\")&&t.uint32(40).bool(e.clientStreaming),null!=e.serverStreaming&&Object.hasOwnProperty.call(e,\"serverStreaming\")&&t.uint32(48).bool(e.serverStreaming),t},x.encodeDelimited=function(e,t){return this.encode(e,t).ldelim()},x.decode=function(e,t){e instanceof a||(e=a.create(e));for(var n=void 0===t?e.len:e.pos+t,o=new l.google.protobuf.MethodDescriptorProto;e.pos<n;){var r=e.uint32();switch(r>>>3){case 1:o.name=e.string();break;case 2:o.inputType=e.string();break;case 3:o.outputType=e.string();break;case 4:o.options=l.google.protobuf.MethodOptions.decode(e,e.uint32());break;case 5:o.clientStreaming=e.bool();break;case 6:o.serverStreaming=e.bool();break;default:e.skipType(7&r)}}return o},x.decodeDelimited=function(e){return e instanceof a||(e=new a(e)),this.decode(e,e.uint32())},x.verify=function(e){if(\"object\"!=typeof e||null===e)return\"object expected\";if(null!=e.name&&e.hasOwnProperty(\"name\")&&!p.isString(e.name))return\"name: string expected\";if(null!=e.inputType&&e.hasOwnProperty(\"inputType\")&&!p.isString(e.inputType))return\"inputType: string expected\";if(null!=e.outputType&&e.hasOwnProperty(\"outputType\")&&!p.isString(e.outputType))return\"outputType: string expected\";if(null!=e.options&&e.hasOwnProperty(\"options\")){var t=l.google.protobuf.MethodOptions.verify(e.options);if(t)return\"options.\"+t}return null!=e.clientStreaming&&e.hasOwnProperty(\"clientStreaming\")&&\"boolean\"!=typeof e.clientStreaming?\"clientStreaming: boolean expected\":null!=e.serverStreaming&&e.hasOwnProperty(\"serverStreaming\")&&\"boolean\"!=typeof e.serverStreaming?\"serverStreaming: boolean expected\":null},x.fromObject=function(e){if(e instanceof l.google.protobuf.MethodDescriptorProto)return e;var t=new l.google.protobuf.MethodDescriptorProto;if(null!=e.name&&(t.name=String(e.name)),null!=e.inputType&&(t.inputType=String(e.inputType)),null!=e.outputType&&(t.outputType=String(e.outputType)),null!=e.options){if(\"object\"!=typeof e.options)throw TypeError(\".google.protobuf.MethodDescriptorProto.options: object expected\");t.options=l.google.protobuf.MethodOptions.fromObject(e.options)}return null!=e.clientStreaming&&(t.clientStreaming=Boolean(e.clientStreaming)),null!=e.serverStreaming&&(t.serverStreaming=Boolean(e.serverStreaming)),t},x.toObject=function(e,t){var n={};return(t=t||{}).defaults&&(n.name=\"\",n.inputType=\"\",n.outputType=\"\",n.options=null,n.clientStreaming=!1,n.serverStreaming=!1),null!=e.name&&e.hasOwnProperty(\"name\")&&(n.name=e.name),null!=e.inputType&&e.hasOwnProperty(\"inputType\")&&(n.inputType=e.inputType),null!=e.outputType&&e.hasOwnProperty(\"outputType\")&&(n.outputType=e.outputType),null!=e.options&&e.hasOwnProperty(\"options\")&&(n.options=l.google.protobuf.MethodOptions.toObject(e.options,t)),null!=e.clientStreaming&&e.hasOwnProperty(\"clientStreaming\")&&(n.clientStreaming=e.clientStreaming),null!=e.serverStreaming&&e.hasOwnProperty(\"serverStreaming\")&&(n.serverStreaming=e.serverStreaming),n},x.prototype.toJSON=function(){return this.constructor.toObject(this,o.util.toJSONOptions)},x),n.FileOptions=(S.prototype.javaPackage=\"\",S.prototype.javaOuterClassname=\"\",S.prototype.javaMultipleFiles=!1,S.prototype.javaGenerateEqualsAndHash=!1,S.prototype.javaStringCheckUtf8=!1,S.prototype.optimizeFor=1,S.prototype.goPackage=\"\",S.prototype.ccGenericServices=!1,S.prototype.javaGenericServices=!1,S.prototype.pyGenericServices=!1,S.prototype.phpGenericServices=!1,S.prototype.deprecated=!1,S.prototype.ccEnableArenas=!0,S.prototype.objcClassPrefix=\"\",S.prototype.csharpNamespace=\"\",S.prototype.swiftPrefix=\"\",S.prototype.phpClassPrefix=\"\",S.prototype.phpNamespace=\"\",S.prototype.phpMetadataNamespace=\"\",S.prototype.rubyPackage=\"\",S.prototype.uninterpretedOption=p.emptyArray,S.prototype[\".google.api.resourceDefinition\"]=p.emptyArray,S.create=function(e){return new S(e)},S.encode=function(e,t){if(t=t||i.create(),null!=e.javaPackage&&Object.hasOwnProperty.call(e,\"javaPackage\")&&t.uint32(10).string(e.javaPackage),null!=e.javaOuterClassname&&Object.hasOwnProperty.call(e,\"javaOuterClassname\")&&t.uint32(66).string(e.javaOuterClassname),null!=e.optimizeFor&&Object.hasOwnProperty.call(e,\"optimizeFor\")&&t.uint32(72).int32(e.optimizeFor),null!=e.javaMultipleFiles&&Object.hasOwnProperty.call(e,\"javaMultipleFiles\")&&t.uint32(80).bool(e.javaMultipleFiles),null!=e.goPackage&&Object.hasOwnProperty.call(e,\"goPackage\")&&t.uint32(90).string(e.goPackage),null!=e.ccGenericServices&&Object.hasOwnProperty.call(e,\"ccGenericServices\")&&t.uint32(128).bool(e.ccGenericServices),null!=e.javaGenericServices&&Object.hasOwnProperty.call(e,\"javaGenericServices\")&&t.uint32(136).bool(e.javaGenericServices),null!=e.pyGenericServices&&Object.hasOwnProperty.call(e,\"pyGenericServices\")&&t.uint32(144).bool(e.pyGenericServices),null!=e.javaGenerateEqualsAndHash&&Object.hasOwnProperty.call(e,\"javaGenerateEqualsAndHash\")&&t.uint32(160).bool(e.javaGenerateEqualsAndHash),null!=e.deprecated&&Object.hasOwnProperty.call(e,\"deprecated\")&&t.uint32(184).bool(e.deprecated),null!=e.javaStringCheckUtf8&&Object.hasOwnProperty.call(e,\"javaStringCheckUtf8\")&&t.uint32(216).bool(e.javaStringCheckUtf8),null!=e.ccEnableArenas&&Object.hasOwnProperty.call(e,\"ccEnableArenas\")&&t.uint32(248).bool(e.ccEnableArenas),null!=e.objcClassPrefix&&Object.hasOwnProperty.call(e,\"objcClassPrefix\")&&t.uint32(290).string(e.objcClassPrefix),null!=e.csharpNamespace&&Object.hasOwnProperty.call(e,\"csharpNamespace\")&&t.uint32(298).string(e.csharpNamespace),null!=e.swiftPrefix&&Object.hasOwnProperty.call(e,\"swiftPrefix\")&&t.uint32(314).string(e.swiftPrefix),null!=e.phpClassPrefix&&Object.hasOwnProperty.call(e,\"phpClassPrefix\")&&t.uint32(322).string(e.phpClassPrefix),null!=e.phpNamespace&&Object.hasOwnProperty.call(e,\"phpNamespace\")&&t.uint32(330).string(e.phpNamespace),null!=e.phpGenericServices&&Object.hasOwnProperty.call(e,\"phpGenericServices\")&&t.uint32(336).bool(e.phpGenericServices),null!=e.phpMetadataNamespace&&Object.hasOwnProperty.call(e,\"phpMetadataNamespace\")&&t.uint32(354).string(e.phpMetadataNamespace),null!=e.rubyPackage&&Object.hasOwnProperty.call(e,\"rubyPackage\")&&t.uint32(362).string(e.rubyPackage),null!=e.uninterpretedOption&&e.uninterpretedOption.length)for(var n=0;n<e.uninterpretedOption.length;++n)l.google.protobuf.UninterpretedOption.encode(e.uninterpretedOption[n],t.uint32(7994).fork()).ldelim();if(null!=e[\".google.api.resourceDefinition\"]&&e[\".google.api.resourceDefinition\"].length)for(n=0;n<e[\".google.api.resourceDefinition\"].length;++n)l.google.api.ResourceDescriptor.encode(e[\".google.api.resourceDefinition\"][n],t.uint32(8426).fork()).ldelim();return t},S.encodeDelimited=function(e,t){return this.encode(e,t).ldelim()},S.decode=function(e,t){e instanceof a||(e=a.create(e));for(var n=void 0===t?e.len:e.pos+t,o=new l.google.protobuf.FileOptions;e.pos<n;){var r=e.uint32();switch(r>>>3){case 1:o.javaPackage=e.string();break;case 8:o.javaOuterClassname=e.string();break;case 10:o.javaMultipleFiles=e.bool();break;case 20:o.javaGenerateEqualsAndHash=e.bool();break;case 27:o.javaStringCheckUtf8=e.bool();break;case 9:o.optimizeFor=e.int32();break;case 11:o.goPackage=e.string();break;case 16:o.ccGenericServices=e.bool();break;case 17:o.javaGenericServices=e.bool();break;case 18:o.pyGenericServices=e.bool();break;case 42:o.phpGenericServices=e.bool();break;case 23:o.deprecated=e.bool();break;case 31:o.ccEnableArenas=e.bool();break;case 36:o.objcClassPrefix=e.string();break;case 37:o.csharpNamespace=e.string();break;case 39:o.swiftPrefix=e.string();break;case 40:o.phpClassPrefix=e.string();break;case 41:o.phpNamespace=e.string();break;case 44:o.phpMetadataNamespace=e.string();break;case 45:o.rubyPackage=e.string();break;case 999:o.uninterpretedOption&&o.uninterpretedOption.length||(o.uninterpretedOption=[]),o.uninterpretedOption.push(l.google.protobuf.UninterpretedOption.decode(e,e.uint32()));break;case 1053:o[\".google.api.resourceDefinition\"]&&o[\".google.api.resourceDefinition\"].length||(o[\".google.api.resourceDefinition\"]=[]),o[\".google.api.resourceDefinition\"].push(l.google.api.ResourceDescriptor.decode(e,e.uint32()));break;default:e.skipType(7&r)}}return o},S.decodeDelimited=function(e){return e instanceof a||(e=new a(e)),this.decode(e,e.uint32())},S.verify=function(e){if(\"object\"!=typeof e||null===e)return\"object expected\";if(null!=e.javaPackage&&e.hasOwnProperty(\"javaPackage\")&&!p.isString(e.javaPackage))return\"javaPackage: string expected\";if(null!=e.javaOuterClassname&&e.hasOwnProperty(\"javaOuterClassname\")&&!p.isString(e.javaOuterClassname))return\"javaOuterClassname: string expected\";if(null!=e.javaMultipleFiles&&e.hasOwnProperty(\"javaMultipleFiles\")&&\"boolean\"!=typeof e.javaMultipleFiles)return\"javaMultipleFiles: boolean expected\";if(null!=e.javaGenerateEqualsAndHash&&e.hasOwnProperty(\"javaGenerateEqualsAndHash\")&&\"boolean\"!=typeof e.javaGenerateEqualsAndHash)return\"javaGenerateEqualsAndHash: boolean expected\";if(null!=e.javaStringCheckUtf8&&e.hasOwnProperty(\"javaStringCheckUtf8\")&&\"boolean\"!=typeof e.javaStringCheckUtf8)return\"javaStringCheckUtf8: boolean expected\";if(null!=e.optimizeFor&&e.hasOwnProperty(\"optimizeFor\"))switch(e.optimizeFor){default:return\"optimizeFor: enum value expected\";case 1:case 2:case 3:}if(null!=e.goPackage&&e.hasOwnProperty(\"goPackage\")&&!p.isString(e.goPackage))return\"goPackage: string expected\";if(null!=e.ccGenericServices&&e.hasOwnProperty(\"ccGenericServices\")&&\"boolean\"!=typeof e.ccGenericServices)return\"ccGenericServices: boolean expected\";if(null!=e.javaGenericServices&&e.hasOwnProperty(\"javaGenericServices\")&&\"boolean\"!=typeof e.javaGenericServices)return\"javaGenericServices: boolean expected\";if(null!=e.pyGenericServices&&e.hasOwnProperty(\"pyGenericServices\")&&\"boolean\"!=typeof e.pyGenericServices)return\"pyGenericServices: boolean expected\";if(null!=e.phpGenericServices&&e.hasOwnProperty(\"phpGenericServices\")&&\"boolean\"!=typeof e.phpGenericServices)return\"phpGenericServices: boolean expected\";if(null!=e.deprecated&&e.hasOwnProperty(\"deprecated\")&&\"boolean\"!=typeof e.deprecated)return\"deprecated: boolean expected\";if(null!=e.ccEnableArenas&&e.hasOwnProperty(\"ccEnableArenas\")&&\"boolean\"!=typeof e.ccEnableArenas)return\"ccEnableArenas: boolean expected\";if(null!=e.objcClassPrefix&&e.hasOwnProperty(\"objcClassPrefix\")&&!p.isString(e.objcClassPrefix))return\"objcClassPrefix: string expected\";if(null!=e.csharpNamespace&&e.hasOwnProperty(\"csharpNamespace\")&&!p.isString(e.csharpNamespace))return\"csharpNamespace: string expected\";if(null!=e.swiftPrefix&&e.hasOwnProperty(\"swiftPrefix\")&&!p.isString(e.swiftPrefix))return\"swiftPrefix: string expected\";if(null!=e.phpClassPrefix&&e.hasOwnProperty(\"phpClassPrefix\")&&!p.isString(e.phpClassPrefix))return\"phpClassPrefix: string expected\";if(null!=e.phpNamespace&&e.hasOwnProperty(\"phpNamespace\")&&!p.isString(e.phpNamespace))return\"phpNamespace: string expected\";if(null!=e.phpMetadataNamespace&&e.hasOwnProperty(\"phpMetadataNamespace\")&&!p.isString(e.phpMetadataNamespace))return\"phpMetadataNamespace: string expected\";if(null!=e.rubyPackage&&e.hasOwnProperty(\"rubyPackage\")&&!p.isString(e.rubyPackage))return\"rubyPackage: string expected\";if(null!=e.uninterpretedOption&&e.hasOwnProperty(\"uninterpretedOption\")){if(!Array.isArray(e.uninterpretedOption))return\"uninterpretedOption: array expected\";for(var t=0;t<e.uninterpretedOption.length;++t)if(n=l.google.protobuf.UninterpretedOption.verify(e.uninterpretedOption[t]))return\"uninterpretedOption.\"+n}if(null!=e[\".google.api.resourceDefinition\"]&&e.hasOwnProperty(\".google.api.resourceDefinition\")){if(!Array.isArray(e[\".google.api.resourceDefinition\"]))return\".google.api.resourceDefinition: array expected\";for(var n,t=0;t<e[\".google.api.resourceDefinition\"].length;++t)if(n=l.google.api.ResourceDescriptor.verify(e[\".google.api.resourceDefinition\"][t]))return\".google.api.resourceDefinition.\"+n}return null},S.fromObject=function(e){if(e instanceof l.google.protobuf.FileOptions)return e;var t=new l.google.protobuf.FileOptions;switch(null!=e.javaPackage&&(t.javaPackage=String(e.javaPackage)),null!=e.javaOuterClassname&&(t.javaOuterClassname=String(e.javaOuterClassname)),null!=e.javaMultipleFiles&&(t.javaMultipleFiles=Boolean(e.javaMultipleFiles)),null!=e.javaGenerateEqualsAndHash&&(t.javaGenerateEqualsAndHash=Boolean(e.javaGenerateEqualsAndHash)),null!=e.javaStringCheckUtf8&&(t.javaStringCheckUtf8=Boolean(e.javaStringCheckUtf8)),e.optimizeFor){case\"SPEED\":case 1:t.optimizeFor=1;break;case\"CODE_SIZE\":case 2:t.optimizeFor=2;break;case\"LITE_RUNTIME\":case 3:t.optimizeFor=3}if(null!=e.goPackage&&(t.goPackage=String(e.goPackage)),null!=e.ccGenericServices&&(t.ccGenericServices=Boolean(e.ccGenericServices)),null!=e.javaGenericServices&&(t.javaGenericServices=Boolean(e.javaGenericServices)),null!=e.pyGenericServices&&(t.pyGenericServices=Boolean(e.pyGenericServices)),null!=e.phpGenericServices&&(t.phpGenericServices=Boolean(e.phpGenericServices)),null!=e.deprecated&&(t.deprecated=Boolean(e.deprecated)),null!=e.ccEnableArenas&&(t.ccEnableArenas=Boolean(e.ccEnableArenas)),null!=e.objcClassPrefix&&(t.objcClassPrefix=String(e.objcClassPrefix)),null!=e.csharpNamespace&&(t.csharpNamespace=String(e.csharpNamespace)),null!=e.swiftPrefix&&(t.swiftPrefix=String(e.swiftPrefix)),null!=e.phpClassPrefix&&(t.phpClassPrefix=String(e.phpClassPrefix)),null!=e.phpNamespace&&(t.phpNamespace=String(e.phpNamespace)),null!=e.phpMetadataNamespace&&(t.phpMetadataNamespace=String(e.phpMetadataNamespace)),null!=e.rubyPackage&&(t.rubyPackage=String(e.rubyPackage)),e.uninterpretedOption){if(!Array.isArray(e.uninterpretedOption))throw TypeError(\".google.protobuf.FileOptions.uninterpretedOption: array expected\");t.uninterpretedOption=[];for(var n=0;n<e.uninterpretedOption.length;++n){if(\"object\"!=typeof e.uninterpretedOption[n])throw TypeError(\".google.protobuf.FileOptions.uninterpretedOption: object expected\");t.uninterpretedOption[n]=l.google.protobuf.UninterpretedOption.fromObject(e.uninterpretedOption[n])}}if(e[\".google.api.resourceDefinition\"]){if(!Array.isArray(e[\".google.api.resourceDefinition\"]))throw TypeError(\".google.protobuf.FileOptions..google.api.resourceDefinition: array expected\");t[\".google.api.resourceDefinition\"]=[];for(n=0;n<e[\".google.api.resourceDefinition\"].length;++n){if(\"object\"!=typeof e[\".google.api.resourceDefinition\"][n])throw TypeError(\".google.protobuf.FileOptions..google.api.resourceDefinition: object expected\");t[\".google.api.resourceDefinition\"][n]=l.google.api.ResourceDescriptor.fromObject(e[\".google.api.resourceDefinition\"][n])}}return t},S.toObject=function(e,t){var n={};if(((t=t||{}).arrays||t.defaults)&&(n.uninterpretedOption=[],n[\".google.api.resourceDefinition\"]=[]),t.defaults&&(n.javaPackage=\"\",n.javaOuterClassname=\"\",n.optimizeFor=t.enums===String?\"SPEED\":1,n.javaMultipleFiles=!1,n.goPackage=\"\",n.ccGenericServices=!1,n.javaGenericServices=!1,n.pyGenericServices=!1,n.javaGenerateEqualsAndHash=!1,n.deprecated=!1,n.javaStringCheckUtf8=!1,n.ccEnableArenas=!0,n.objcClassPrefix=\"\",n.csharpNamespace=\"\",n.swiftPrefix=\"\",n.phpClassPrefix=\"\",n.phpNamespace=\"\",n.phpGenericServices=!1,n.phpMetadataNamespace=\"\",n.rubyPackage=\"\"),null!=e.javaPackage&&e.hasOwnProperty(\"javaPackage\")&&(n.javaPackage=e.javaPackage),null!=e.javaOuterClassname&&e.hasOwnProperty(\"javaOuterClassname\")&&(n.javaOuterClassname=e.javaOuterClassname),null!=e.optimizeFor&&e.hasOwnProperty(\"optimizeFor\")&&(n.optimizeFor=t.enums===String?l.google.protobuf.FileOptions.OptimizeMode[e.optimizeFor]:e.optimizeFor),null!=e.javaMultipleFiles&&e.hasOwnProperty(\"javaMultipleFiles\")&&(n.javaMultipleFiles=e.javaMultipleFiles),null!=e.goPackage&&e.hasOwnProperty(\"goPackage\")&&(n.goPackage=e.goPackage),null!=e.ccGenericServices&&e.hasOwnProperty(\"ccGenericServices\")&&(n.ccGenericServices=e.ccGenericServices),null!=e.javaGenericServices&&e.hasOwnProperty(\"javaGenericServices\")&&(n.javaGenericServices=e.javaGenericServices),null!=e.pyGenericServices&&e.hasOwnProperty(\"pyGenericServices\")&&(n.pyGenericServices=e.pyGenericServices),null!=e.javaGenerateEqualsAndHash&&e.hasOwnProperty(\"javaGenerateEqualsAndHash\")&&(n.javaGenerateEqualsAndHash=e.javaGenerateEqualsAndHash),null!=e.deprecated&&e.hasOwnProperty(\"deprecated\")&&(n.deprecated=e.deprecated),null!=e.javaStringCheckUtf8&&e.hasOwnProperty(\"javaStringCheckUtf8\")&&(n.javaStringCheckUtf8=e.javaStringCheckUtf8),null!=e.ccEnableArenas&&e.hasOwnProperty(\"ccEnableArenas\")&&(n.ccEnableArenas=e.ccEnableArenas),null!=e.objcClassPrefix&&e.hasOwnProperty(\"objcClassPrefix\")&&(n.objcClassPrefix=e.objcClassPrefix),null!=e.csharpNamespace&&e.hasOwnProperty(\"csharpNamespace\")&&(n.csharpNamespace=e.csharpNamespace),null!=e.swiftPrefix&&e.hasOwnProperty(\"swiftPrefix\")&&(n.swiftPrefix=e.swiftPrefix),null!=e.phpClassPrefix&&e.hasOwnProperty(\"phpClassPrefix\")&&(n.phpClassPrefix=e.phpClassPrefix),null!=e.phpNamespace&&e.hasOwnProperty(\"phpNamespace\")&&(n.phpNamespace=e.phpNamespace),null!=e.phpGenericServices&&e.hasOwnProperty(\"phpGenericServices\")&&(n.phpGenericServices=e.phpGenericServices),null!=e.phpMetadataNamespace&&e.hasOwnProperty(\"phpMetadataNamespace\")&&(n.phpMetadataNamespace=e.phpMetadataNamespace),null!=e.rubyPackage&&e.hasOwnProperty(\"rubyPackage\")&&(n.rubyPackage=e.rubyPackage),e.uninterpretedOption&&e.uninterpretedOption.length){n.uninterpretedOption=[];for(var o=0;o<e.uninterpretedOption.length;++o)n.uninterpretedOption[o]=l.google.protobuf.UninterpretedOption.toObject(e.uninterpretedOption[o],t)}if(e[\".google.api.resourceDefinition\"]&&e[\".google.api.resourceDefinition\"].length){n[\".google.api.resourceDefinition\"]=[];for(o=0;o<e[\".google.api.resourceDefinition\"].length;++o)n[\".google.api.resourceDefinition\"][o]=l.google.api.ResourceDescriptor.toObject(e[\".google.api.resourceDefinition\"][o],t)}return n},S.prototype.toJSON=function(){return this.constructor.toObject(this,o.util.toJSONOptions)},S.OptimizeMode=(e={},(t=Object.create(e))[e[1]=\"SPEED\"]=1,t[e[2]=\"CODE_SIZE\"]=2,t[e[3]=\"LITE_RUNTIME\"]=3,t),S),n.MessageOptions=(k.prototype.messageSetWireFormat=!1,k.prototype.noStandardDescriptorAccessor=!1,k.prototype.deprecated=!1,k.prototype.mapEntry=!1,k.prototype.uninterpretedOption=p.emptyArray,k.prototype[\".google.api.resource\"]=null,k.create=function(e){return new k(e)},k.encode=function(e,t){if(t=t||i.create(),null!=e.messageSetWireFormat&&Object.hasOwnProperty.call(e,\"messageSetWireFormat\")&&t.uint32(8).bool(e.messageSetWireFormat),null!=e.noStandardDescriptorAccessor&&Object.hasOwnProperty.call(e,\"noStandardDescriptorAccessor\")&&t.uint32(16).bool(e.noStandardDescriptorAccessor),null!=e.deprecated&&Object.hasOwnProperty.call(e,\"deprecated\")&&t.uint32(24).bool(e.deprecated),null!=e.mapEntry&&Object.hasOwnProperty.call(e,\"mapEntry\")&&t.uint32(56).bool(e.mapEntry),null!=e.uninterpretedOption&&e.uninterpretedOption.length)for(var n=0;n<e.uninterpretedOption.length;++n)l.google.protobuf.UninterpretedOption.encode(e.uninterpretedOption[n],t.uint32(7994).fork()).ldelim();return null!=e[\".google.api.resource\"]&&Object.hasOwnProperty.call(e,\".google.api.resource\")&&l.google.api.ResourceDescriptor.encode(e[\".google.api.resource\"],t.uint32(8426).fork()).ldelim(),t},k.encodeDelimited=function(e,t){return this.encode(e,t).ldelim()},k.decode=function(e,t){e instanceof a||(e=a.create(e));for(var n=void 0===t?e.len:e.pos+t,o=new l.google.protobuf.MessageOptions;e.pos<n;){var r=e.uint32();switch(r>>>3){case 1:o.messageSetWireFormat=e.bool();break;case 2:o.noStandardDescriptorAccessor=e.bool();break;case 3:o.deprecated=e.bool();break;case 7:o.mapEntry=e.bool();break;case 999:o.uninterpretedOption&&o.uninterpretedOption.length||(o.uninterpretedOption=[]),o.uninterpretedOption.push(l.google.protobuf.UninterpretedOption.decode(e,e.uint32()));break;case 1053:o[\".google.api.resource\"]=l.google.api.ResourceDescriptor.decode(e,e.uint32());break;default:e.skipType(7&r)}}return o},k.decodeDelimited=function(e){return e instanceof a||(e=new a(e)),this.decode(e,e.uint32())},k.verify=function(e){if(\"object\"!=typeof e||null===e)return\"object expected\";if(null!=e.messageSetWireFormat&&e.hasOwnProperty(\"messageSetWireFormat\")&&\"boolean\"!=typeof e.messageSetWireFormat)return\"messageSetWireFormat: boolean expected\";if(null!=e.noStandardDescriptorAccessor&&e.hasOwnProperty(\"noStandardDescriptorAccessor\")&&\"boolean\"!=typeof e.noStandardDescriptorAccessor)return\"noStandardDescriptorAccessor: boolean expected\";if(null!=e.deprecated&&e.hasOwnProperty(\"deprecated\")&&\"boolean\"!=typeof e.deprecated)return\"deprecated: boolean expected\";if(null!=e.mapEntry&&e.hasOwnProperty(\"mapEntry\")&&\"boolean\"!=typeof e.mapEntry)return\"mapEntry: boolean expected\";if(null!=e.uninterpretedOption&&e.hasOwnProperty(\"uninterpretedOption\")){if(!Array.isArray(e.uninterpretedOption))return\"uninterpretedOption: array expected\";for(var t=0;t<e.uninterpretedOption.length;++t)if(n=l.google.protobuf.UninterpretedOption.verify(e.uninterpretedOption[t]))return\"uninterpretedOption.\"+n}var n;if(null!=e[\".google.api.resource\"]&&e.hasOwnProperty(\".google.api.resource\")&&(n=l.google.api.ResourceDescriptor.verify(e[\".google.api.resource\"])))return\".google.api.resource.\"+n;return null},k.fromObject=function(e){if(e instanceof l.google.protobuf.MessageOptions)return e;var t=new l.google.protobuf.MessageOptions;if(null!=e.messageSetWireFormat&&(t.messageSetWireFormat=Boolean(e.messageSetWireFormat)),null!=e.noStandardDescriptorAccessor&&(t.noStandardDescriptorAccessor=Boolean(e.noStandardDescriptorAccessor)),null!=e.deprecated&&(t.deprecated=Boolean(e.deprecated)),null!=e.mapEntry&&(t.mapEntry=Boolean(e.mapEntry)),e.uninterpretedOption){if(!Array.isArray(e.uninterpretedOption))throw TypeError(\".google.protobuf.MessageOptions.uninterpretedOption: array expected\");t.uninterpretedOption=[];for(var n=0;n<e.uninterpretedOption.length;++n){if(\"object\"!=typeof e.uninterpretedOption[n])throw TypeError(\".google.protobuf.MessageOptions.uninterpretedOption: object expected\");t.uninterpretedOption[n]=l.google.protobuf.UninterpretedOption.fromObject(e.uninterpretedOption[n])}}if(null!=e[\".google.api.resource\"]){if(\"object\"!=typeof e[\".google.api.resource\"])throw TypeError(\".google.protobuf.MessageOptions..google.api.resource: object expected\");t[\".google.api.resource\"]=l.google.api.ResourceDescriptor.fromObject(e[\".google.api.resource\"])}return t},k.toObject=function(e,t){var n={};if(((t=t||{}).arrays||t.defaults)&&(n.uninterpretedOption=[]),t.defaults&&(n.messageSetWireFormat=!1,n.noStandardDescriptorAccessor=!1,n.deprecated=!1,n.mapEntry=!1,n[\".google.api.resource\"]=null),null!=e.messageSetWireFormat&&e.hasOwnProperty(\"messageSetWireFormat\")&&(n.messageSetWireFormat=e.messageSetWireFormat),null!=e.noStandardDescriptorAccessor&&e.hasOwnProperty(\"noStandardDescriptorAccessor\")&&(n.noStandardDescriptorAccessor=e.noStandardDescriptorAccessor),null!=e.deprecated&&e.hasOwnProperty(\"deprecated\")&&(n.deprecated=e.deprecated),null!=e.mapEntry&&e.hasOwnProperty(\"mapEntry\")&&(n.mapEntry=e.mapEntry),e.uninterpretedOption&&e.uninterpretedOption.length){n.uninterpretedOption=[];for(var o=0;o<e.uninterpretedOption.length;++o)n.uninterpretedOption[o]=l.google.protobuf.UninterpretedOption.toObject(e.uninterpretedOption[o],t)}return null!=e[\".google.api.resource\"]&&e.hasOwnProperty(\".google.api.resource\")&&(n[\".google.api.resource\"]=l.google.api.ResourceDescriptor.toObject(e[\".google.api.resource\"],t)),n},k.prototype.toJSON=function(){return this.constructor.toObject(this,o.util.toJSONOptions)},k),n.FieldOptions=(T.prototype.ctype=0,T.prototype.packed=!1,T.prototype.jstype=0,T.prototype.lazy=!1,T.prototype.deprecated=!1,T.prototype.weak=!1,T.prototype.uninterpretedOption=p.emptyArray,T.prototype[\".google.api.fieldBehavior\"]=p.emptyArray,T.prototype[\".google.api.resourceReference\"]=null,T.create=function(e){return new T(e)},T.encode=function(e,t){if(t=t||i.create(),null!=e.ctype&&Object.hasOwnProperty.call(e,\"ctype\")&&t.uint32(8).int32(e.ctype),null!=e.packed&&Object.hasOwnProperty.call(e,\"packed\")&&t.uint32(16).bool(e.packed),null!=e.deprecated&&Object.hasOwnProperty.call(e,\"deprecated\")&&t.uint32(24).bool(e.deprecated),null!=e.lazy&&Object.hasOwnProperty.call(e,\"lazy\")&&t.uint32(40).bool(e.lazy),null!=e.jstype&&Object.hasOwnProperty.call(e,\"jstype\")&&t.uint32(48).int32(e.jstype),null!=e.weak&&Object.hasOwnProperty.call(e,\"weak\")&&t.uint32(80).bool(e.weak),null!=e.uninterpretedOption&&e.uninterpretedOption.length)for(var n=0;n<e.uninterpretedOption.length;++n)l.google.protobuf.UninterpretedOption.encode(e.uninterpretedOption[n],t.uint32(7994).fork()).ldelim();if(null!=e[\".google.api.fieldBehavior\"]&&e[\".google.api.fieldBehavior\"].length){t.uint32(8418).fork();for(n=0;n<e[\".google.api.fieldBehavior\"].length;++n)t.int32(e[\".google.api.fieldBehavior\"][n]);t.ldelim()}return null!=e[\".google.api.resourceReference\"]&&Object.hasOwnProperty.call(e,\".google.api.resourceReference\")&&l.google.api.ResourceReference.encode(e[\".google.api.resourceReference\"],t.uint32(8442).fork()).ldelim(),t},T.encodeDelimited=function(e,t){return this.encode(e,t).ldelim()},T.decode=function(e,t){e instanceof a||(e=a.create(e));for(var n=void 0===t?e.len:e.pos+t,o=new l.google.protobuf.FieldOptions;e.pos<n;){var r=e.uint32();switch(r>>>3){case 1:o.ctype=e.int32();break;case 2:o.packed=e.bool();break;case 6:o.jstype=e.int32();break;case 5:o.lazy=e.bool();break;case 3:o.deprecated=e.bool();break;case 10:o.weak=e.bool();break;case 999:o.uninterpretedOption&&o.uninterpretedOption.length||(o.uninterpretedOption=[]),o.uninterpretedOption.push(l.google.protobuf.UninterpretedOption.decode(e,e.uint32()));break;case 1052:if(o[\".google.api.fieldBehavior\"]&&o[\".google.api.fieldBehavior\"].length||(o[\".google.api.fieldBehavior\"]=[]),2==(7&r))for(var i=e.uint32()+e.pos;e.pos<i;)o[\".google.api.fieldBehavior\"].push(e.int32());else o[\".google.api.fieldBehavior\"].push(e.int32());break;case 1055:o[\".google.api.resourceReference\"]=l.google.api.ResourceReference.decode(e,e.uint32());break;default:e.skipType(7&r)}}return o},T.decodeDelimited=function(e){return e instanceof a||(e=new a(e)),this.decode(e,e.uint32())},T.verify=function(e){if(\"object\"!=typeof e||null===e)return\"object expected\";if(null!=e.ctype&&e.hasOwnProperty(\"ctype\"))switch(e.ctype){default:return\"ctype: enum value expected\";case 0:case 1:case 2:}if(null!=e.packed&&e.hasOwnProperty(\"packed\")&&\"boolean\"!=typeof e.packed)return\"packed: boolean expected\";if(null!=e.jstype&&e.hasOwnProperty(\"jstype\"))switch(e.jstype){default:return\"jstype: enum value expected\";case 0:case 1:case 2:}if(null!=e.lazy&&e.hasOwnProperty(\"lazy\")&&\"boolean\"!=typeof e.lazy)return\"lazy: boolean expected\";if(null!=e.deprecated&&e.hasOwnProperty(\"deprecated\")&&\"boolean\"!=typeof e.deprecated)return\"deprecated: boolean expected\";if(null!=e.weak&&e.hasOwnProperty(\"weak\")&&\"boolean\"!=typeof e.weak)return\"weak: boolean expected\";if(null!=e.uninterpretedOption&&e.hasOwnProperty(\"uninterpretedOption\")){if(!Array.isArray(e.uninterpretedOption))return\"uninterpretedOption: array expected\";for(var t=0;t<e.uninterpretedOption.length;++t)if(n=l.google.protobuf.UninterpretedOption.verify(e.uninterpretedOption[t]))return\"uninterpretedOption.\"+n}if(null!=e[\".google.api.fieldBehavior\"]&&e.hasOwnProperty(\".google.api.fieldBehavior\")){if(!Array.isArray(e[\".google.api.fieldBehavior\"]))return\".google.api.fieldBehavior: array expected\";for(t=0;t<e[\".google.api.fieldBehavior\"].length;++t)switch(e[\".google.api.fieldBehavior\"][t]){default:return\".google.api.fieldBehavior: enum value[] expected\";case 0:case 1:case 2:case 3:case 4:case 5:}}var n;if(null!=e[\".google.api.resourceReference\"]&&e.hasOwnProperty(\".google.api.resourceReference\")&&(n=l.google.api.ResourceReference.verify(e[\".google.api.resourceReference\"])))return\".google.api.resourceReference.\"+n;return null},T.fromObject=function(e){if(e instanceof l.google.protobuf.FieldOptions)return e;var t=new l.google.protobuf.FieldOptions;switch(e.ctype){case\"STRING\":case 0:t.ctype=0;break;case\"CORD\":case 1:t.ctype=1;break;case\"STRING_PIECE\":case 2:t.ctype=2}switch(null!=e.packed&&(t.packed=Boolean(e.packed)),e.jstype){case\"JS_NORMAL\":case 0:t.jstype=0;break;case\"JS_STRING\":case 1:t.jstype=1;break;case\"JS_NUMBER\":case 2:t.jstype=2}if(null!=e.lazy&&(t.lazy=Boolean(e.lazy)),null!=e.deprecated&&(t.deprecated=Boolean(e.deprecated)),null!=e.weak&&(t.weak=Boolean(e.weak)),e.uninterpretedOption){if(!Array.isArray(e.uninterpretedOption))throw TypeError(\".google.protobuf.FieldOptions.uninterpretedOption: array expected\");t.uninterpretedOption=[];for(var n=0;n<e.uninterpretedOption.length;++n){if(\"object\"!=typeof e.uninterpretedOption[n])throw TypeError(\".google.protobuf.FieldOptions.uninterpretedOption: object expected\");t.uninterpretedOption[n]=l.google.protobuf.UninterpretedOption.fromObject(e.uninterpretedOption[n])}}if(e[\".google.api.fieldBehavior\"]){if(!Array.isArray(e[\".google.api.fieldBehavior\"]))throw TypeError(\".google.protobuf.FieldOptions..google.api.fieldBehavior: array expected\");t[\".google.api.fieldBehavior\"]=[];for(n=0;n<e[\".google.api.fieldBehavior\"].length;++n)switch(e[\".google.api.fieldBehavior\"][n]){default:case\"FIELD_BEHAVIOR_UNSPECIFIED\":case 0:t[\".google.api.fieldBehavior\"][n]=0;break;case\"OPTIONAL\":case 1:t[\".google.api.fieldBehavior\"][n]=1;break;case\"REQUIRED\":case 2:t[\".google.api.fieldBehavior\"][n]=2;break;case\"OUTPUT_ONLY\":case 3:t[\".google.api.fieldBehavior\"][n]=3;break;case\"INPUT_ONLY\":case 4:t[\".google.api.fieldBehavior\"][n]=4;break;case\"IMMUTABLE\":case 5:t[\".google.api.fieldBehavior\"][n]=5}}if(null!=e[\".google.api.resourceReference\"]){if(\"object\"!=typeof e[\".google.api.resourceReference\"])throw TypeError(\".google.protobuf.FieldOptions..google.api.resourceReference: object expected\");t[\".google.api.resourceReference\"]=l.google.api.ResourceReference.fromObject(e[\".google.api.resourceReference\"])}return t},T.toObject=function(e,t){var n={};if(((t=t||{}).arrays||t.defaults)&&(n.uninterpretedOption=[],n[\".google.api.fieldBehavior\"]=[]),t.defaults&&(n.ctype=t.enums===String?\"STRING\":0,n.packed=!1,n.deprecated=!1,n.lazy=!1,n.jstype=t.enums===String?\"JS_NORMAL\":0,n.weak=!1,n[\".google.api.resourceReference\"]=null),null!=e.ctype&&e.hasOwnProperty(\"ctype\")&&(n.ctype=t.enums===String?l.google.protobuf.FieldOptions.CType[e.ctype]:e.ctype),null!=e.packed&&e.hasOwnProperty(\"packed\")&&(n.packed=e.packed),null!=e.deprecated&&e.hasOwnProperty(\"deprecated\")&&(n.deprecated=e.deprecated),null!=e.lazy&&e.hasOwnProperty(\"lazy\")&&(n.lazy=e.lazy),null!=e.jstype&&e.hasOwnProperty(\"jstype\")&&(n.jstype=t.enums===String?l.google.protobuf.FieldOptions.JSType[e.jstype]:e.jstype),null!=e.weak&&e.hasOwnProperty(\"weak\")&&(n.weak=e.weak),e.uninterpretedOption&&e.uninterpretedOption.length){n.uninterpretedOption=[];for(var o=0;o<e.uninterpretedOption.length;++o)n.uninterpretedOption[o]=l.google.protobuf.UninterpretedOption.toObject(e.uninterpretedOption[o],t)}if(e[\".google.api.fieldBehavior\"]&&e[\".google.api.fieldBehavior\"].length){n[\".google.api.fieldBehavior\"]=[];for(o=0;o<e[\".google.api.fieldBehavior\"].length;++o)n[\".google.api.fieldBehavior\"][o]=t.enums===String?l.google.api.FieldBehavior[e[\".google.api.fieldBehavior\"][o]]:e[\".google.api.fieldBehavior\"][o]}return null!=e[\".google.api.resourceReference\"]&&e.hasOwnProperty(\".google.api.resourceReference\")&&(n[\".google.api.resourceReference\"]=l.google.api.ResourceReference.toObject(e[\".google.api.resourceReference\"],t)),n},T.prototype.toJSON=function(){return this.constructor.toObject(this,o.util.toJSONOptions)},T.CType=(e={},(t=Object.create(e))[e[0]=\"STRING\"]=0,t[e[1]=\"CORD\"]=1,t[e[2]=\"STRING_PIECE\"]=2,t),T.JSType=(e={},(t=Object.create(e))[e[0]=\"JS_NORMAL\"]=0,t[e[1]=\"JS_STRING\"]=1,t[e[2]=\"JS_NUMBER\"]=2,t),T),n.OneofOptions=(Q.prototype.uninterpretedOption=p.emptyArray,Q.create=function(e){return new Q(e)},Q.encode=function(e,t){if(t=t||i.create(),null!=e.uninterpretedOption&&e.uninterpretedOption.length)for(var n=0;n<e.uninterpretedOption.length;++n)l.google.protobuf.UninterpretedOption.encode(e.uninterpretedOption[n],t.uint32(7994).fork()).ldelim();return t},Q.encodeDelimited=function(e,t){return this.encode(e,t).ldelim()},Q.decode=function(e,t){e instanceof a||(e=a.create(e));for(var n=void 0===t?e.len:e.pos+t,o=new l.google.protobuf.OneofOptions;e.pos<n;){var r=e.uint32();r>>>3==999?(o.uninterpretedOption&&o.uninterpretedOption.length||(o.uninterpretedOption=[]),o.uninterpretedOption.push(l.google.protobuf.UninterpretedOption.decode(e,e.uint32()))):e.skipType(7&r)}return o},Q.decodeDelimited=function(e){return e instanceof a||(e=new a(e)),this.decode(e,e.uint32())},Q.verify=function(e){if(\"object\"!=typeof e||null===e)return\"object expected\";if(null!=e.uninterpretedOption&&e.hasOwnProperty(\"uninterpretedOption\")){if(!Array.isArray(e.uninterpretedOption))return\"uninterpretedOption: array expected\";for(var t=0;t<e.uninterpretedOption.length;++t){var n=l.google.protobuf.UninterpretedOption.verify(e.uninterpretedOption[t]);if(n)return\"uninterpretedOption.\"+n}}return null},Q.fromObject=function(e){if(e instanceof l.google.protobuf.OneofOptions)return e;var t=new l.google.protobuf.OneofOptions;if(e.uninterpretedOption){if(!Array.isArray(e.uninterpretedOption))throw TypeError(\".google.protobuf.OneofOptions.uninterpretedOption: array expected\");t.uninterpretedOption=[];for(var n=0;n<e.uninterpretedOption.length;++n){if(\"object\"!=typeof e.uninterpretedOption[n])throw TypeError(\".google.protobuf.OneofOptions.uninterpretedOption: object expected\");t.uninterpretedOption[n]=l.google.protobuf.UninterpretedOption.fromObject(e.uninterpretedOption[n])}}return t},Q.toObject=function(e,t){var n={};if(((t=t||{}).arrays||t.defaults)&&(n.uninterpretedOption=[]),e.uninterpretedOption&&e.uninterpretedOption.length){n.uninterpretedOption=[];for(var o=0;o<e.uninterpretedOption.length;++o)n.uninterpretedOption[o]=l.google.protobuf.UninterpretedOption.toObject(e.uninterpretedOption[o],t)}return n},Q.prototype.toJSON=function(){return this.constructor.toObject(this,o.util.toJSONOptions)},Q),n.EnumOptions=(E.prototype.allowAlias=!1,E.prototype.deprecated=!1,E.prototype.uninterpretedOption=p.emptyArray,E.create=function(e){return new E(e)},E.encode=function(e,t){if(t=t||i.create(),null!=e.allowAlias&&Object.hasOwnProperty.call(e,\"allowAlias\")&&t.uint32(16).bool(e.allowAlias),null!=e.deprecated&&Object.hasOwnProperty.call(e,\"deprecated\")&&t.uint32(24).bool(e.deprecated),null!=e.uninterpretedOption&&e.uninterpretedOption.length)for(var n=0;n<e.uninterpretedOption.length;++n)l.google.protobuf.UninterpretedOption.encode(e.uninterpretedOption[n],t.uint32(7994).fork()).ldelim();return t},E.encodeDelimited=function(e,t){return this.encode(e,t).ldelim()},E.decode=function(e,t){e instanceof a||(e=a.create(e));for(var n=void 0===t?e.len:e.pos+t,o=new l.google.protobuf.EnumOptions;e.pos<n;){var r=e.uint32();switch(r>>>3){case 2:o.allowAlias=e.bool();break;case 3:o.deprecated=e.bool();break;case 999:o.uninterpretedOption&&o.uninterpretedOption.length||(o.uninterpretedOption=[]),o.uninterpretedOption.push(l.google.protobuf.UninterpretedOption.decode(e,e.uint32()));break;default:e.skipType(7&r)}}return o},E.decodeDelimited=function(e){return e instanceof a||(e=new a(e)),this.decode(e,e.uint32())},E.verify=function(e){if(\"object\"!=typeof e||null===e)return\"object expected\";if(null!=e.allowAlias&&e.hasOwnProperty(\"allowAlias\")&&\"boolean\"!=typeof e.allowAlias)return\"allowAlias: boolean expected\";if(null!=e.deprecated&&e.hasOwnProperty(\"deprecated\")&&\"boolean\"!=typeof e.deprecated)return\"deprecated: boolean expected\";if(null!=e.uninterpretedOption&&e.hasOwnProperty(\"uninterpretedOption\")){if(!Array.isArray(e.uninterpretedOption))return\"uninterpretedOption: array expected\";for(var t=0;t<e.uninterpretedOption.length;++t){var n=l.google.protobuf.UninterpretedOption.verify(e.uninterpretedOption[t]);if(n)return\"uninterpretedOption.\"+n}}return null},E.fromObject=function(e){if(e instanceof l.google.protobuf.EnumOptions)return e;var t=new l.google.protobuf.EnumOptions;if(null!=e.allowAlias&&(t.allowAlias=Boolean(e.allowAlias)),null!=e.deprecated&&(t.deprecated=Boolean(e.deprecated)),e.uninterpretedOption){if(!Array.isArray(e.uninterpretedOption))throw TypeError(\".google.protobuf.EnumOptions.uninterpretedOption: array expected\");t.uninterpretedOption=[];for(var n=0;n<e.uninterpretedOption.length;++n){if(\"object\"!=typeof e.uninterpretedOption[n])throw TypeError(\".google.protobuf.EnumOptions.uninterpretedOption: object expected\");t.uninterpretedOption[n]=l.google.protobuf.UninterpretedOption.fromObject(e.uninterpretedOption[n])}}return t},E.toObject=function(e,t){var n={};if(((t=t||{}).arrays||t.defaults)&&(n.uninterpretedOption=[]),t.defaults&&(n.allowAlias=!1,n.deprecated=!1),null!=e.allowAlias&&e.hasOwnProperty(\"allowAlias\")&&(n.allowAlias=e.allowAlias),null!=e.deprecated&&e.hasOwnProperty(\"deprecated\")&&(n.deprecated=e.deprecated),e.uninterpretedOption&&e.uninterpretedOption.length){n.uninterpretedOption=[];for(var o=0;o<e.uninterpretedOption.length;++o)n.uninterpretedOption[o]=l.google.protobuf.UninterpretedOption.toObject(e.uninterpretedOption[o],t)}return n},E.prototype.toJSON=function(){return this.constructor.toObject(this,o.util.toJSONOptions)},E),n.EnumValueOptions=(K.prototype.deprecated=!1,K.prototype.uninterpretedOption=p.emptyArray,K.create=function(e){return new K(e)},K.encode=function(e,t){if(t=t||i.create(),null!=e.deprecated&&Object.hasOwnProperty.call(e,\"deprecated\")&&t.uint32(8).bool(e.deprecated),null!=e.uninterpretedOption&&e.uninterpretedOption.length)for(var n=0;n<e.uninterpretedOption.length;++n)l.google.protobuf.UninterpretedOption.encode(e.uninterpretedOption[n],t.uint32(7994).fork()).ldelim();return t},K.encodeDelimited=function(e,t){return this.encode(e,t).ldelim()},K.decode=function(e,t){e instanceof a||(e=a.create(e));for(var n=void 0===t?e.len:e.pos+t,o=new l.google.protobuf.EnumValueOptions;e.pos<n;){var r=e.uint32();switch(r>>>3){case 1:o.deprecated=e.bool();break;case 999:o.uninterpretedOption&&o.uninterpretedOption.length||(o.uninterpretedOption=[]),o.uninterpretedOption.push(l.google.protobuf.UninterpretedOption.decode(e,e.uint32()));break;default:e.skipType(7&r)}}return o},K.decodeDelimited=function(e){return e instanceof a||(e=new a(e)),this.decode(e,e.uint32())},K.verify=function(e){if(\"object\"!=typeof e||null===e)return\"object expected\";if(null!=e.deprecated&&e.hasOwnProperty(\"deprecated\")&&\"boolean\"!=typeof e.deprecated)return\"deprecated: boolean expected\";if(null!=e.uninterpretedOption&&e.hasOwnProperty(\"uninterpretedOption\")){if(!Array.isArray(e.uninterpretedOption))return\"uninterpretedOption: array expected\";for(var t=0;t<e.uninterpretedOption.length;++t){var n=l.google.protobuf.UninterpretedOption.verify(e.uninterpretedOption[t]);if(n)return\"uninterpretedOption.\"+n}}return null},K.fromObject=function(e){if(e instanceof l.google.protobuf.EnumValueOptions)return e;var t=new l.google.protobuf.EnumValueOptions;if(null!=e.deprecated&&(t.deprecated=Boolean(e.deprecated)),e.uninterpretedOption){if(!Array.isArray(e.uninterpretedOption))throw TypeError(\".google.protobuf.EnumValueOptions.uninterpretedOption: array expected\");t.uninterpretedOption=[];for(var n=0;n<e.uninterpretedOption.length;++n){if(\"object\"!=typeof e.uninterpretedOption[n])throw TypeError(\".google.protobuf.EnumValueOptions.uninterpretedOption: object expected\");t.uninterpretedOption[n]=l.google.protobuf.UninterpretedOption.fromObject(e.uninterpretedOption[n])}}return t},K.toObject=function(e,t){var n={};if(((t=t||{}).arrays||t.defaults)&&(n.uninterpretedOption=[]),t.defaults&&(n.deprecated=!1),null!=e.deprecated&&e.hasOwnProperty(\"deprecated\")&&(n.deprecated=e.deprecated),e.uninterpretedOption&&e.uninterpretedOption.length){n.uninterpretedOption=[];for(var o=0;o<e.uninterpretedOption.length;++o)n.uninterpretedOption[o]=l.google.protobuf.UninterpretedOption.toObject(e.uninterpretedOption[o],t)}return n},K.prototype.toJSON=function(){return this.constructor.toObject(this,o.util.toJSONOptions)},K),n.ServiceOptions=(A.prototype.deprecated=!1,A.prototype.uninterpretedOption=p.emptyArray,A.prototype[\".google.api.defaultHost\"]=\"\",A.prototype[\".google.api.oauthScopes\"]=\"\",A.create=function(e){return new A(e)},A.encode=function(e,t){if(t=t||i.create(),null!=e.deprecated&&Object.hasOwnProperty.call(e,\"deprecated\")&&t.uint32(264).bool(e.deprecated),null!=e.uninterpretedOption&&e.uninterpretedOption.length)for(var n=0;n<e.uninterpretedOption.length;++n)l.google.protobuf.UninterpretedOption.encode(e.uninterpretedOption[n],t.uint32(7994).fork()).ldelim();return null!=e[\".google.api.defaultHost\"]&&Object.hasOwnProperty.call(e,\".google.api.defaultHost\")&&t.uint32(8394).string(e[\".google.api.defaultHost\"]),null!=e[\".google.api.oauthScopes\"]&&Object.hasOwnProperty.call(e,\".google.api.oauthScopes\")&&t.uint32(8402).string(e[\".google.api.oauthScopes\"]),t},A.encodeDelimited=function(e,t){return this.encode(e,t).ldelim()},A.decode=function(e,t){e instanceof a||(e=a.create(e));for(var n=void 0===t?e.len:e.pos+t,o=new l.google.protobuf.ServiceOptions;e.pos<n;){var r=e.uint32();switch(r>>>3){case 33:o.deprecated=e.bool();break;case 999:o.uninterpretedOption&&o.uninterpretedOption.length||(o.uninterpretedOption=[]),o.uninterpretedOption.push(l.google.protobuf.UninterpretedOption.decode(e,e.uint32()));break;case 1049:o[\".google.api.defaultHost\"]=e.string();break;case 1050:o[\".google.api.oauthScopes\"]=e.string();break;default:e.skipType(7&r)}}return o},A.decodeDelimited=function(e){return e instanceof a||(e=new a(e)),this.decode(e,e.uint32())},A.verify=function(e){if(\"object\"!=typeof e||null===e)return\"object expected\";if(null!=e.deprecated&&e.hasOwnProperty(\"deprecated\")&&\"boolean\"!=typeof e.deprecated)return\"deprecated: boolean expected\";if(null!=e.uninterpretedOption&&e.hasOwnProperty(\"uninterpretedOption\")){if(!Array.isArray(e.uninterpretedOption))return\"uninterpretedOption: array expected\";for(var t=0;t<e.uninterpretedOption.length;++t){var n=l.google.protobuf.UninterpretedOption.verify(e.uninterpretedOption[t]);if(n)return\"uninterpretedOption.\"+n}}return null!=e[\".google.api.defaultHost\"]&&e.hasOwnProperty(\".google.api.defaultHost\")&&!p.isString(e[\".google.api.defaultHost\"])?\".google.api.defaultHost: string expected\":null!=e[\".google.api.oauthScopes\"]&&e.hasOwnProperty(\".google.api.oauthScopes\")&&!p.isString(e[\".google.api.oauthScopes\"])?\".google.api.oauthScopes: string expected\":null},A.fromObject=function(e){if(e instanceof l.google.protobuf.ServiceOptions)return e;var t=new l.google.protobuf.ServiceOptions;if(null!=e.deprecated&&(t.deprecated=Boolean(e.deprecated)),e.uninterpretedOption){if(!Array.isArray(e.uninterpretedOption))throw TypeError(\".google.protobuf.ServiceOptions.uninterpretedOption: array expected\");t.uninterpretedOption=[];for(var n=0;n<e.uninterpretedOption.length;++n){if(\"object\"!=typeof e.uninterpretedOption[n])throw TypeError(\".google.protobuf.ServiceOptions.uninterpretedOption: object expected\");t.uninterpretedOption[n]=l.google.protobuf.UninterpretedOption.fromObject(e.uninterpretedOption[n])}}return null!=e[\".google.api.defaultHost\"]&&(t[\".google.api.defaultHost\"]=String(e[\".google.api.defaultHost\"])),null!=e[\".google.api.oauthScopes\"]&&(t[\".google.api.oauthScopes\"]=String(e[\".google.api.oauthScopes\"])),t},A.toObject=function(e,t){var n={};if(((t=t||{}).arrays||t.defaults)&&(n.uninterpretedOption=[]),t.defaults&&(n.deprecated=!1,n[\".google.api.defaultHost\"]=\"\",n[\".google.api.oauthScopes\"]=\"\"),null!=e.deprecated&&e.hasOwnProperty(\"deprecated\")&&(n.deprecated=e.deprecated),e.uninterpretedOption&&e.uninterpretedOption.length){n.uninterpretedOption=[];for(var o=0;o<e.uninterpretedOption.length;++o)n.uninterpretedOption[o]=l.google.protobuf.UninterpretedOption.toObject(e.uninterpretedOption[o],t)}return null!=e[\".google.api.defaultHost\"]&&e.hasOwnProperty(\".google.api.defaultHost\")&&(n[\".google.api.defaultHost\"]=e[\".google.api.defaultHost\"]),null!=e[\".google.api.oauthScopes\"]&&e.hasOwnProperty(\".google.api.oauthScopes\")&&(n[\".google.api.oauthScopes\"]=e[\".google.api.oauthScopes\"]),n},A.prototype.toJSON=function(){return this.constructor.toObject(this,o.util.toJSONOptions)},A),n.MethodOptions=(N.prototype.deprecated=!1,N.prototype.idempotencyLevel=0,N.prototype.uninterpretedOption=p.emptyArray,N.prototype[\".google.api.http\"]=null,N.prototype[\".google.api.methodSignature\"]=p.emptyArray,N.create=function(e){return new N(e)},N.encode=function(e,t){if(t=t||i.create(),null!=e.deprecated&&Object.hasOwnProperty.call(e,\"deprecated\")&&t.uint32(264).bool(e.deprecated),null!=e.idempotencyLevel&&Object.hasOwnProperty.call(e,\"idempotencyLevel\")&&t.uint32(272).int32(e.idempotencyLevel),null!=e.uninterpretedOption&&e.uninterpretedOption.length)for(var n=0;n<e.uninterpretedOption.length;++n)l.google.protobuf.UninterpretedOption.encode(e.uninterpretedOption[n],t.uint32(7994).fork()).ldelim();if(null!=e[\".google.api.methodSignature\"]&&e[\".google.api.methodSignature\"].length)for(n=0;n<e[\".google.api.methodSignature\"].length;++n)t.uint32(8410).string(e[\".google.api.methodSignature\"][n]);return null!=e[\".google.api.http\"]&&Object.hasOwnProperty.call(e,\".google.api.http\")&&l.google.api.HttpRule.encode(e[\".google.api.http\"],t.uint32(578365826).fork()).ldelim(),t},N.encodeDelimited=function(e,t){return this.encode(e,t).ldelim()},N.decode=function(e,t){e instanceof a||(e=a.create(e));for(var n=void 0===t?e.len:e.pos+t,o=new l.google.protobuf.MethodOptions;e.pos<n;){var r=e.uint32();switch(r>>>3){case 33:o.deprecated=e.bool();break;case 34:o.idempotencyLevel=e.int32();break;case 999:o.uninterpretedOption&&o.uninterpretedOption.length||(o.uninterpretedOption=[]),o.uninterpretedOption.push(l.google.protobuf.UninterpretedOption.decode(e,e.uint32()));break;case 72295728:o[\".google.api.http\"]=l.google.api.HttpRule.decode(e,e.uint32());break;case 1051:o[\".google.api.methodSignature\"]&&o[\".google.api.methodSignature\"].length||(o[\".google.api.methodSignature\"]=[]),o[\".google.api.methodSignature\"].push(e.string());break;default:e.skipType(7&r)}}return o},N.decodeDelimited=function(e){return e instanceof a||(e=new a(e)),this.decode(e,e.uint32())},N.verify=function(e){if(\"object\"!=typeof e||null===e)return\"object expected\";if(null!=e.deprecated&&e.hasOwnProperty(\"deprecated\")&&\"boolean\"!=typeof e.deprecated)return\"deprecated: boolean expected\";if(null!=e.idempotencyLevel&&e.hasOwnProperty(\"idempotencyLevel\"))switch(e.idempotencyLevel){default:return\"idempotencyLevel: enum value expected\";case 0:case 1:case 2:}if(null!=e.uninterpretedOption&&e.hasOwnProperty(\"uninterpretedOption\")){if(!Array.isArray(e.uninterpretedOption))return\"uninterpretedOption: array expected\";for(var t=0;t<e.uninterpretedOption.length;++t)if(n=l.google.protobuf.UninterpretedOption.verify(e.uninterpretedOption[t]))return\"uninterpretedOption.\"+n}var n;if(null!=e[\".google.api.http\"]&&e.hasOwnProperty(\".google.api.http\")&&(n=l.google.api.HttpRule.verify(e[\".google.api.http\"])))return\".google.api.http.\"+n;if(null!=e[\".google.api.methodSignature\"]&&e.hasOwnProperty(\".google.api.methodSignature\")){if(!Array.isArray(e[\".google.api.methodSignature\"]))return\".google.api.methodSignature: array expected\";for(t=0;t<e[\".google.api.methodSignature\"].length;++t)if(!p.isString(e[\".google.api.methodSignature\"][t]))return\".google.api.methodSignature: string[] expected\"}return null},N.fromObject=function(e){if(e instanceof l.google.protobuf.MethodOptions)return e;var t=new l.google.protobuf.MethodOptions;switch(null!=e.deprecated&&(t.deprecated=Boolean(e.deprecated)),e.idempotencyLevel){case\"IDEMPOTENCY_UNKNOWN\":case 0:t.idempotencyLevel=0;break;case\"NO_SIDE_EFFECTS\":case 1:t.idempotencyLevel=1;break;case\"IDEMPOTENT\":case 2:t.idempotencyLevel=2}if(e.uninterpretedOption){if(!Array.isArray(e.uninterpretedOption))throw TypeError(\".google.protobuf.MethodOptions.uninterpretedOption: array expected\");t.uninterpretedOption=[];for(var n=0;n<e.uninterpretedOption.length;++n){if(\"object\"!=typeof e.uninterpretedOption[n])throw TypeError(\".google.protobuf.MethodOptions.uninterpretedOption: object expected\");t.uninterpretedOption[n]=l.google.protobuf.UninterpretedOption.fromObject(e.uninterpretedOption[n])}}if(null!=e[\".google.api.http\"]){if(\"object\"!=typeof e[\".google.api.http\"])throw TypeError(\".google.protobuf.MethodOptions..google.api.http: object expected\");t[\".google.api.http\"]=l.google.api.HttpRule.fromObject(e[\".google.api.http\"])}if(e[\".google.api.methodSignature\"]){if(!Array.isArray(e[\".google.api.methodSignature\"]))throw TypeError(\".google.protobuf.MethodOptions..google.api.methodSignature: array expected\");t[\".google.api.methodSignature\"]=[];for(n=0;n<e[\".google.api.methodSignature\"].length;++n)t[\".google.api.methodSignature\"][n]=String(e[\".google.api.methodSignature\"][n])}return t},N.toObject=function(e,t){var n={};if(((t=t||{}).arrays||t.defaults)&&(n.uninterpretedOption=[],n[\".google.api.methodSignature\"]=[]),t.defaults&&(n.deprecated=!1,n.idempotencyLevel=t.enums===String?\"IDEMPOTENCY_UNKNOWN\":0,n[\".google.api.http\"]=null),null!=e.deprecated&&e.hasOwnProperty(\"deprecated\")&&(n.deprecated=e.deprecated),null!=e.idempotencyLevel&&e.hasOwnProperty(\"idempotencyLevel\")&&(n.idempotencyLevel=t.enums===String?l.google.protobuf.MethodOptions.IdempotencyLevel[e.idempotencyLevel]:e.idempotencyLevel),e.uninterpretedOption&&e.uninterpretedOption.length){n.uninterpretedOption=[];for(var o=0;o<e.uninterpretedOption.length;++o)n.uninterpretedOption[o]=l.google.protobuf.UninterpretedOption.toObject(e.uninterpretedOption[o],t)}if(e[\".google.api.methodSignature\"]&&e[\".google.api.methodSignature\"].length){n[\".google.api.methodSignature\"]=[];for(o=0;o<e[\".google.api.methodSignature\"].length;++o)n[\".google.api.methodSignature\"][o]=e[\".google.api.methodSignature\"][o]}return null!=e[\".google.api.http\"]&&e.hasOwnProperty(\".google.api.http\")&&(n[\".google.api.http\"]=l.google.api.HttpRule.toObject(e[\".google.api.http\"],t)),n},N.prototype.toJSON=function(){return this.constructor.toObject(this,o.util.toJSONOptions)},N.IdempotencyLevel=(e={},(t=Object.create(e))[e[0]=\"IDEMPOTENCY_UNKNOWN\"]=0,t[e[1]=\"NO_SIDE_EFFECTS\"]=1,t[e[2]=\"IDEMPOTENT\"]=2,t),N),n.UninterpretedOption=(R.prototype.name=p.emptyArray,R.prototype.identifierValue=\"\",R.prototype.positiveIntValue=p.Long?p.Long.fromBits(0,0,!0):0,R.prototype.negativeIntValue=p.Long?p.Long.fromBits(0,0,!1):0,R.prototype.doubleValue=0,R.prototype.stringValue=p.newBuffer([]),R.prototype.aggregateValue=\"\",R.create=function(e){return new R(e)},R.encode=function(e,t){if(t=t||i.create(),null!=e.name&&e.name.length)for(var n=0;n<e.name.length;++n)l.google.protobuf.UninterpretedOption.NamePart.encode(e.name[n],t.uint32(18).fork()).ldelim();return null!=e.identifierValue&&Object.hasOwnProperty.call(e,\"identifierValue\")&&t.uint32(26).string(e.identifierValue),null!=e.positiveIntValue&&Object.hasOwnProperty.call(e,\"positiveIntValue\")&&t.uint32(32).uint64(e.positiveIntValue),null!=e.negativeIntValue&&Object.hasOwnProperty.call(e,\"negativeIntValue\")&&t.uint32(40).int64(e.negativeIntValue),null!=e.doubleValue&&Object.hasOwnProperty.call(e,\"doubleValue\")&&t.uint32(49).double(e.doubleValue),null!=e.stringValue&&Object.hasOwnProperty.call(e,\"stringValue\")&&t.uint32(58).bytes(e.stringValue),null!=e.aggregateValue&&Object.hasOwnProperty.call(e,\"aggregateValue\")&&t.uint32(66).string(e.aggregateValue),t},R.encodeDelimited=function(e,t){return this.encode(e,t).ldelim()},R.decode=function(e,t){e instanceof a||(e=a.create(e));for(var n=void 0===t?e.len:e.pos+t,o=new l.google.protobuf.UninterpretedOption;e.pos<n;){var r=e.uint32();switch(r>>>3){case 2:o.name&&o.name.length||(o.name=[]),o.name.push(l.google.protobuf.UninterpretedOption.NamePart.decode(e,e.uint32()));break;case 3:o.identifierValue=e.string();break;case 4:o.positiveIntValue=e.uint64();break;case 5:o.negativeIntValue=e.int64();break;case 6:o.doubleValue=e.double();break;case 7:o.stringValue=e.bytes();break;case 8:o.aggregateValue=e.string();break;default:e.skipType(7&r)}}return o},R.decodeDelimited=function(e){return e instanceof a||(e=new a(e)),this.decode(e,e.uint32())},R.verify=function(e){if(\"object\"!=typeof e||null===e)return\"object expected\";if(null!=e.name&&e.hasOwnProperty(\"name\")){if(!Array.isArray(e.name))return\"name: array expected\";for(var t=0;t<e.name.length;++t){var n=l.google.protobuf.UninterpretedOption.NamePart.verify(e.name[t]);if(n)return\"name.\"+n}}return null!=e.identifierValue&&e.hasOwnProperty(\"identifierValue\")&&!p.isString(e.identifierValue)?\"identifierValue: string expected\":null!=e.positiveIntValue&&e.hasOwnProperty(\"positiveIntValue\")&&!(p.isInteger(e.positiveIntValue)||e.positiveIntValue&&p.isInteger(e.positiveIntValue.low)&&p.isInteger(e.positiveIntValue.high))?\"positiveIntValue: integer|Long expected\":null!=e.negativeIntValue&&e.hasOwnProperty(\"negativeIntValue\")&&!(p.isInteger(e.negativeIntValue)||e.negativeIntValue&&p.isInteger(e.negativeIntValue.low)&&p.isInteger(e.negativeIntValue.high))?\"negativeIntValue: integer|Long expected\":null!=e.doubleValue&&e.hasOwnProperty(\"doubleValue\")&&\"number\"!=typeof e.doubleValue?\"doubleValue: number expected\":null!=e.stringValue&&e.hasOwnProperty(\"stringValue\")&&!(e.stringValue&&\"number\"==typeof e.stringValue.length||p.isString(e.stringValue))?\"stringValue: buffer expected\":null!=e.aggregateValue&&e.hasOwnProperty(\"aggregateValue\")&&!p.isString(e.aggregateValue)?\"aggregateValue: string expected\":null},R.fromObject=function(e){if(e instanceof l.google.protobuf.UninterpretedOption)return e;var t=new l.google.protobuf.UninterpretedOption;if(e.name){if(!Array.isArray(e.name))throw TypeError(\".google.protobuf.UninterpretedOption.name: array expected\");t.name=[];for(var n=0;n<e.name.length;++n){if(\"object\"!=typeof e.name[n])throw TypeError(\".google.protobuf.UninterpretedOption.name: object expected\");t.name[n]=l.google.protobuf.UninterpretedOption.NamePart.fromObject(e.name[n])}}return null!=e.identifierValue&&(t.identifierValue=String(e.identifierValue)),null!=e.positiveIntValue&&(p.Long?(t.positiveIntValue=p.Long.fromValue(e.positiveIntValue)).unsigned=!0:\"string\"==typeof e.positiveIntValue?t.positiveIntValue=parseInt(e.positiveIntValue,10):\"number\"==typeof e.positiveIntValue?t.positiveIntValue=e.positiveIntValue:\"object\"==typeof e.positiveIntValue&&(t.positiveIntValue=new p.LongBits(e.positiveIntValue.low>>>0,e.positiveIntValue.high>>>0).toNumber(!0))),null!=e.negativeIntValue&&(p.Long?(t.negativeIntValue=p.Long.fromValue(e.negativeIntValue)).unsigned=!1:\"string\"==typeof e.negativeIntValue?t.negativeIntValue=parseInt(e.negativeIntValue,10):\"number\"==typeof e.negativeIntValue?t.negativeIntValue=e.negativeIntValue:\"object\"==typeof e.negativeIntValue&&(t.negativeIntValue=new p.LongBits(e.negativeIntValue.low>>>0,e.negativeIntValue.high>>>0).toNumber())),null!=e.doubleValue&&(t.doubleValue=Number(e.doubleValue)),null!=e.stringValue&&(\"string\"==typeof e.stringValue?p.base64.decode(e.stringValue,t.stringValue=p.newBuffer(p.base64.length(e.stringValue)),0):e.stringValue.length&&(t.stringValue=e.stringValue)),null!=e.aggregateValue&&(t.aggregateValue=String(e.aggregateValue)),t},R.toObject=function(e,t){var n,o={};if(((t=t||{}).arrays||t.defaults)&&(o.name=[]),t.defaults&&(o.identifierValue=\"\",p.Long?(n=new p.Long(0,0,!0),o.positiveIntValue=t.longs===String?n.toString():t.longs===Number?n.toNumber():n):o.positiveIntValue=t.longs===String?\"0\":0,p.Long?(n=new p.Long(0,0,!1),o.negativeIntValue=t.longs===String?n.toString():t.longs===Number?n.toNumber():n):o.negativeIntValue=t.longs===String?\"0\":0,o.doubleValue=0,t.bytes===String?o.stringValue=\"\":(o.stringValue=[],t.bytes!==Array&&(o.stringValue=p.newBuffer(o.stringValue))),o.aggregateValue=\"\"),e.name&&e.name.length){o.name=[];for(var r=0;r<e.name.length;++r)o.name[r]=l.google.protobuf.UninterpretedOption.NamePart.toObject(e.name[r],t)}return null!=e.identifierValue&&e.hasOwnProperty(\"identifierValue\")&&(o.identifierValue=e.identifierValue),null!=e.positiveIntValue&&e.hasOwnProperty(\"positiveIntValue\")&&(\"number\"==typeof e.positiveIntValue?o.positiveIntValue=t.longs===String?String(e.positiveIntValue):e.positiveIntValue:o.positiveIntValue=t.longs===String?p.Long.prototype.toString.call(e.positiveIntValue):t.longs===Number?new p.LongBits(e.positiveIntValue.low>>>0,e.positiveIntValue.high>>>0).toNumber(!0):e.positiveIntValue),null!=e.negativeIntValue&&e.hasOwnProperty(\"negativeIntValue\")&&(\"number\"==typeof e.negativeIntValue?o.negativeIntValue=t.longs===String?String(e.negativeIntValue):e.negativeIntValue:o.negativeIntValue=t.longs===String?p.Long.prototype.toString.call(e.negativeIntValue):t.longs===Number?new p.LongBits(e.negativeIntValue.low>>>0,e.negativeIntValue.high>>>0).toNumber():e.negativeIntValue),null!=e.doubleValue&&e.hasOwnProperty(\"doubleValue\")&&(o.doubleValue=t.json&&!isFinite(e.doubleValue)?String(e.doubleValue):e.doubleValue),null!=e.stringValue&&e.hasOwnProperty(\"stringValue\")&&(o.stringValue=t.bytes===String?p.base64.encode(e.stringValue,0,e.stringValue.length):t.bytes===Array?Array.prototype.slice.call(e.stringValue):e.stringValue),null!=e.aggregateValue&&e.hasOwnProperty(\"aggregateValue\")&&(o.aggregateValue=e.aggregateValue),o},R.prototype.toJSON=function(){return this.constructor.toObject(this,o.util.toJSONOptions)},R.NamePart=(Z.prototype.namePart=\"\",Z.prototype.isExtension=!1,Z.create=function(e){return new Z(e)},Z.encode=function(e,t){return(t=t||i.create()).uint32(10).string(e.namePart),t.uint32(16).bool(e.isExtension),t},Z.encodeDelimited=function(e,t){return this.encode(e,t).ldelim()},Z.decode=function(e,t){e instanceof a||(e=a.create(e));for(var n=void 0===t?e.len:e.pos+t,o=new l.google.protobuf.UninterpretedOption.NamePart;e.pos<n;){var r=e.uint32();switch(r>>>3){case 1:o.namePart=e.string();break;case 2:o.isExtension=e.bool();break;default:e.skipType(7&r)}}if(!o.hasOwnProperty(\"namePart\"))throw p.ProtocolError(\"missing required 'namePart'\",{instance:o});if(o.hasOwnProperty(\"isExtension\"))return o;throw p.ProtocolError(\"missing required 'isExtension'\",{instance:o})},Z.decodeDelimited=function(e){return e instanceof a||(e=new a(e)),this.decode(e,e.uint32())},Z.verify=function(e){return\"object\"!=typeof e||null===e?\"object expected\":p.isString(e.namePart)?\"boolean\"!=typeof e.isExtension?\"isExtension: boolean expected\":null:\"namePart: string expected\"},Z.fromObject=function(e){var t;return e instanceof l.google.protobuf.UninterpretedOption.NamePart?e:(t=new l.google.protobuf.UninterpretedOption.NamePart,null!=e.namePart&&(t.namePart=String(e.namePart)),null!=e.isExtension&&(t.isExtension=Boolean(e.isExtension)),t)},Z.toObject=function(e,t){var n={};return(t=t||{}).defaults&&(n.namePart=\"\",n.isExtension=!1),null!=e.namePart&&e.hasOwnProperty(\"namePart\")&&(n.namePart=e.namePart),null!=e.isExtension&&e.hasOwnProperty(\"isExtension\")&&(n.isExtension=e.isExtension),n},Z.prototype.toJSON=function(){return this.constructor.toObject(this,o.util.toJSONOptions)},Z),R),n.SourceCodeInfo=($.prototype.location=p.emptyArray,$.create=function(e){return new $(e)},$.encode=function(e,t){if(t=t||i.create(),null!=e.location&&e.location.length)for(var n=0;n<e.location.length;++n)l.google.protobuf.SourceCodeInfo.Location.encode(e.location[n],t.uint32(10).fork()).ldelim();return t},$.encodeDelimited=function(e,t){return this.encode(e,t).ldelim()},$.decode=function(e,t){e instanceof a||(e=a.create(e));for(var n=void 0===t?e.len:e.pos+t,o=new l.google.protobuf.SourceCodeInfo;e.pos<n;){var r=e.uint32();r>>>3==1?(o.location&&o.location.length||(o.location=[]),o.location.push(l.google.protobuf.SourceCodeInfo.Location.decode(e,e.uint32()))):e.skipType(7&r)}return o},$.decodeDelimited=function(e){return e instanceof a||(e=new a(e)),this.decode(e,e.uint32())},$.verify=function(e){if(\"object\"!=typeof e||null===e)return\"object expected\";if(null!=e.location&&e.hasOwnProperty(\"location\")){if(!Array.isArray(e.location))return\"location: array expected\";for(var t=0;t<e.location.length;++t){var n=l.google.protobuf.SourceCodeInfo.Location.verify(e.location[t]);if(n)return\"location.\"+n}}return null},$.fromObject=function(e){if(e instanceof l.google.protobuf.SourceCodeInfo)return e;var t=new l.google.protobuf.SourceCodeInfo;if(e.location){if(!Array.isArray(e.location))throw TypeError(\".google.protobuf.SourceCodeInfo.location: array expected\");t.location=[];for(var n=0;n<e.location.length;++n){if(\"object\"!=typeof e.location[n])throw TypeError(\".google.protobuf.SourceCodeInfo.location: object expected\");t.location[n]=l.google.protobuf.SourceCodeInfo.Location.fromObject(e.location[n])}}return t},$.toObject=function(e,t){var n={};if(((t=t||{}).arrays||t.defaults)&&(n.location=[]),e.location&&e.location.length){n.location=[];for(var o=0;o<e.location.length;++o)n.location[o]=l.google.protobuf.SourceCodeInfo.Location.toObject(e.location[o],t)}return n},$.prototype.toJSON=function(){return this.constructor.toObject(this,o.util.toJSONOptions)},$.Location=(I.prototype.path=p.emptyArray,I.prototype.span=p.emptyArray,I.prototype.leadingComments=\"\",I.prototype.trailingComments=\"\",I.prototype.leadingDetachedComments=p.emptyArray,I.create=function(e){return new I(e)},I.encode=function(e,t){if(t=t||i.create(),null!=e.path&&e.path.length){t.uint32(10).fork();for(var n=0;n<e.path.length;++n)t.int32(e.path[n]);t.ldelim()}if(null!=e.span&&e.span.length){t.uint32(18).fork();for(n=0;n<e.span.length;++n)t.int32(e.span[n]);t.ldelim()}if(null!=e.leadingComments&&Object.hasOwnProperty.call(e,\"leadingComments\")&&t.uint32(26).string(e.leadingComments),null!=e.trailingComments&&Object.hasOwnProperty.call(e,\"trailingComments\")&&t.uint32(34).string(e.trailingComments),null!=e.leadingDetachedComments&&e.leadingDetachedComments.length)for(n=0;n<e.leadingDetachedComments.length;++n)t.uint32(50).string(e.leadingDetachedComments[n]);return t},I.encodeDelimited=function(e,t){return this.encode(e,t).ldelim()},I.decode=function(e,t){e instanceof a||(e=a.create(e));for(var n=void 0===t?e.len:e.pos+t,o=new l.google.protobuf.SourceCodeInfo.Location;e.pos<n;){var r=e.uint32();switch(r>>>3){case 1:if(o.path&&o.path.length||(o.path=[]),2==(7&r))for(var i=e.uint32()+e.pos;e.pos<i;)o.path.push(e.int32());else o.path.push(e.int32());break;case 2:if(o.span&&o.span.length||(o.span=[]),2==(7&r))for(i=e.uint32()+e.pos;e.pos<i;)o.span.push(e.int32());else o.span.push(e.int32());break;case 3:o.leadingComments=e.string();break;case 4:o.trailingComments=e.string();break;case 6:o.leadingDetachedComments&&o.leadingDetachedComments.length||(o.leadingDetachedComments=[]),o.leadingDetachedComments.push(e.string());break;default:e.skipType(7&r)}}return o},I.decodeDelimited=function(e){return e instanceof a||(e=new a(e)),this.decode(e,e.uint32())},I.verify=function(e){if(\"object\"!=typeof e||null===e)return\"object expected\";if(null!=e.path&&e.hasOwnProperty(\"path\")){if(!Array.isArray(e.path))return\"path: array expected\";for(var t=0;t<e.path.length;++t)if(!p.isInteger(e.path[t]))return\"path: integer[] expected\"}if(null!=e.span&&e.hasOwnProperty(\"span\")){if(!Array.isArray(e.span))return\"span: array expected\";for(t=0;t<e.span.length;++t)if(!p.isInteger(e.span[t]))return\"span: integer[] expected\"}if(null!=e.leadingComments&&e.hasOwnProperty(\"leadingComments\")&&!p.isString(e.leadingComments))return\"leadingComments: string expected\";if(null!=e.trailingComments&&e.hasOwnProperty(\"trailingComments\")&&!p.isString(e.trailingComments))return\"trailingComments: string expected\";if(null!=e.leadingDetachedComments&&e.hasOwnProperty(\"leadingDetachedComments\")){if(!Array.isArray(e.leadingDetachedComments))return\"leadingDetachedComments: array expected\";for(t=0;t<e.leadingDetachedComments.length;++t)if(!p.isString(e.leadingDetachedComments[t]))return\"leadingDetachedComments: string[] expected\"}return null},I.fromObject=function(e){if(e instanceof l.google.protobuf.SourceCodeInfo.Location)return e;var t=new l.google.protobuf.SourceCodeInfo.Location;if(e.path){if(!Array.isArray(e.path))throw TypeError(\".google.protobuf.SourceCodeInfo.Location.path: array expected\");t.path=[];for(var n=0;n<e.path.length;++n)t.path[n]=0|e.path[n]}if(e.span){if(!Array.isArray(e.span))throw TypeError(\".google.protobuf.SourceCodeInfo.Location.span: array expected\");t.span=[];for(n=0;n<e.span.length;++n)t.span[n]=0|e.span[n]}if(null!=e.leadingComments&&(t.leadingComments=String(e.leadingComments)),null!=e.trailingComments&&(t.trailingComments=String(e.trailingComments)),e.leadingDetachedComments){if(!Array.isArray(e.leadingDetachedComments))throw TypeError(\".google.protobuf.SourceCodeInfo.Location.leadingDetachedComments: array expected\");t.leadingDetachedComments=[];for(n=0;n<e.leadingDetachedComments.length;++n)t.leadingDetachedComments[n]=String(e.leadingDetachedComments[n])}return t},I.toObject=function(e,t){var n={};if(((t=t||{}).arrays||t.defaults)&&(n.path=[],n.span=[],n.leadingDetachedComments=[]),t.defaults&&(n.leadingComments=\"\",n.trailingComments=\"\"),e.path&&e.path.length){n.path=[];for(var o=0;o<e.path.length;++o)n.path[o]=e.path[o]}if(e.span&&e.span.length){n.span=[];for(o=0;o<e.span.length;++o)n.span[o]=e.span[o]}if(null!=e.leadingComments&&e.hasOwnProperty(\"leadingComments\")&&(n.leadingComments=e.leadingComments),null!=e.trailingComments&&e.hasOwnProperty(\"trailingComments\")&&(n.trailingComments=e.trailingComments),e.leadingDetachedComments&&e.leadingDetachedComments.length){n.leadingDetachedComments=[];for(o=0;o<e.leadingDetachedComments.length;++o)n.leadingDetachedComments[o]=e.leadingDetachedComments[o]}return n},I.prototype.toJSON=function(){return this.constructor.toObject(this,o.util.toJSONOptions)},I),$),n.GeneratedCodeInfo=(ee.prototype.annotation=p.emptyArray,ee.create=function(e){return new ee(e)},ee.encode=function(e,t){if(t=t||i.create(),null!=e.annotation&&e.annotation.length)for(var n=0;n<e.annotation.length;++n)l.google.protobuf.GeneratedCodeInfo.Annotation.encode(e.annotation[n],t.uint32(10).fork()).ldelim();return t},ee.encodeDelimited=function(e,t){return this.encode(e,t).ldelim()},ee.decode=function(e,t){e instanceof a||(e=a.create(e));for(var n=void 0===t?e.len:e.pos+t,o=new l.google.protobuf.GeneratedCodeInfo;e.pos<n;){var r=e.uint32();r>>>3==1?(o.annotation&&o.annotation.length||(o.annotation=[]),o.annotation.push(l.google.protobuf.GeneratedCodeInfo.Annotation.decode(e,e.uint32()))):e.skipType(7&r)}return o},ee.decodeDelimited=function(e){return e instanceof a||(e=new a(e)),this.decode(e,e.uint32())},ee.verify=function(e){if(\"object\"!=typeof e||null===e)return\"object expected\";if(null!=e.annotation&&e.hasOwnProperty(\"annotation\")){if(!Array.isArray(e.annotation))return\"annotation: array expected\";for(var t=0;t<e.annotation.length;++t){var n=l.google.protobuf.GeneratedCodeInfo.Annotation.verify(e.annotation[t]);if(n)return\"annotation.\"+n}}return null},ee.fromObject=function(e){if(e instanceof l.google.protobuf.GeneratedCodeInfo)return e;var t=new l.google.protobuf.GeneratedCodeInfo;if(e.annotation){if(!Array.isArray(e.annotation))throw TypeError(\".google.protobuf.GeneratedCodeInfo.annotation: array expected\");t.annotation=[];for(var n=0;n<e.annotation.length;++n){if(\"object\"!=typeof e.annotation[n])throw TypeError(\".google.protobuf.GeneratedCodeInfo.annotation: object expected\");t.annotation[n]=l.google.protobuf.GeneratedCodeInfo.Annotation.fromObject(e.annotation[n])}}return t},ee.toObject=function(e,t){var n={};if(((t=t||{}).arrays||t.defaults)&&(n.annotation=[]),e.annotation&&e.annotation.length){n.annotation=[];for(var o=0;o<e.annotation.length;++o)n.annotation[o]=l.google.protobuf.GeneratedCodeInfo.Annotation.toObject(e.annotation[o],t)}return n},ee.prototype.toJSON=function(){return this.constructor.toObject(this,o.util.toJSONOptions)},ee.Annotation=(C.prototype.path=p.emptyArray,C.prototype.sourceFile=\"\",C.prototype.begin=0,C.prototype.end=0,C.create=function(e){return new C(e)},C.encode=function(e,t){if(t=t||i.create(),null!=e.path&&e.path.length){t.uint32(10).fork();for(var n=0;n<e.path.length;++n)t.int32(e.path[n]);t.ldelim()}return null!=e.sourceFile&&Object.hasOwnProperty.call(e,\"sourceFile\")&&t.uint32(18).string(e.sourceFile),null!=e.begin&&Object.hasOwnProperty.call(e,\"begin\")&&t.uint32(24).int32(e.begin),null!=e.end&&Object.hasOwnProperty.call(e,\"end\")&&t.uint32(32).int32(e.end),t},C.encodeDelimited=function(e,t){return this.encode(e,t).ldelim()},C.decode=function(e,t){e instanceof a||(e=a.create(e));for(var n=void 0===t?e.len:e.pos+t,o=new l.google.protobuf.GeneratedCodeInfo.Annotation;e.pos<n;){var r=e.uint32();switch(r>>>3){case 1:if(o.path&&o.path.length||(o.path=[]),2==(7&r))for(var i=e.uint32()+e.pos;e.pos<i;)o.path.push(e.int32());else o.path.push(e.int32());break;case 2:o.sourceFile=e.string();break;case 3:o.begin=e.int32();break;case 4:o.end=e.int32();break;default:e.skipType(7&r)}}return o},C.decodeDelimited=function(e){return e instanceof a||(e=new a(e)),this.decode(e,e.uint32())},C.verify=function(e){if(\"object\"!=typeof e||null===e)return\"object expected\";if(null!=e.path&&e.hasOwnProperty(\"path\")){if(!Array.isArray(e.path))return\"path: array expected\";for(var t=0;t<e.path.length;++t)if(!p.isInteger(e.path[t]))return\"path: integer[] expected\"}return null!=e.sourceFile&&e.hasOwnProperty(\"sourceFile\")&&!p.isString(e.sourceFile)?\"sourceFile: string expected\":null!=e.begin&&e.hasOwnProperty(\"begin\")&&!p.isInteger(e.begin)?\"begin: integer expected\":null!=e.end&&e.hasOwnProperty(\"end\")&&!p.isInteger(e.end)?\"end: integer expected\":null},C.fromObject=function(e){if(e instanceof l.google.protobuf.GeneratedCodeInfo.Annotation)return e;var t=new l.google.protobuf.GeneratedCodeInfo.Annotation;if(e.path){if(!Array.isArray(e.path))throw TypeError(\".google.protobuf.GeneratedCodeInfo.Annotation.path: array expected\");t.path=[];for(var n=0;n<e.path.length;++n)t.path[n]=0|e.path[n]}return null!=e.sourceFile&&(t.sourceFile=String(e.sourceFile)),null!=e.begin&&(t.begin=0|e.begin),null!=e.end&&(t.end=0|e.end),t},C.toObject=function(e,t){var n={};if(((t=t||{}).arrays||t.defaults)&&(n.path=[]),t.defaults&&(n.sourceFile=\"\",n.begin=0,n.end=0),e.path&&e.path.length){n.path=[];for(var o=0;o<e.path.length;++o)n.path[o]=e.path[o]}return null!=e.sourceFile&&e.hasOwnProperty(\"sourceFile\")&&(n.sourceFile=e.sourceFile),null!=e.begin&&e.hasOwnProperty(\"begin\")&&(n.begin=e.begin),null!=e.end&&e.hasOwnProperty(\"end\")&&(n.end=e.end),n},C.prototype.toJSON=function(){return this.constructor.toObject(this,o.util.toJSONOptions)},C),ee),n),F.type=((r={}).Expr=(V.prototype.expression=\"\",V.prototype.title=\"\",V.prototype.description=\"\",V.prototype.location=\"\",V.create=function(e){return new V(e)},V.encode=function(e,t){return t=t||i.create(),null!=e.expression&&Object.hasOwnProperty.call(e,\"expression\")&&t.uint32(10).string(e.expression),null!=e.title&&Object.hasOwnProperty.call(e,\"title\")&&t.uint32(18).string(e.title),null!=e.description&&Object.hasOwnProperty.call(e,\"description\")&&t.uint32(26).string(e.description),null!=e.location&&Object.hasOwnProperty.call(e,\"location\")&&t.uint32(34).string(e.location),t},V.encodeDelimited=function(e,t){return this.encode(e,t).ldelim()},V.decode=function(e,t){e instanceof a||(e=a.create(e));for(var n=void 0===t?e.len:e.pos+t,o=new l.google.type.Expr;e.pos<n;){var r=e.uint32();switch(r>>>3){case 1:o.expression=e.string();break;case 2:o.title=e.string();break;case 3:o.description=e.string();break;case 4:o.location=e.string();break;default:e.skipType(7&r)}}return o},V.decodeDelimited=function(e){return e instanceof a||(e=new a(e)),this.decode(e,e.uint32())},V.verify=function(e){return\"object\"!=typeof e||null===e?\"object expected\":null!=e.expression&&e.hasOwnProperty(\"expression\")&&!p.isString(e.expression)?\"expression: string expected\":null!=e.title&&e.hasOwnProperty(\"title\")&&!p.isString(e.title)?\"title: string expected\":null!=e.description&&e.hasOwnProperty(\"description\")&&!p.isString(e.description)?\"description: string expected\":null!=e.location&&e.hasOwnProperty(\"location\")&&!p.isString(e.location)?\"location: string expected\":null},V.fromObject=function(e){var t;return e instanceof l.google.type.Expr?e:(t=new l.google.type.Expr,null!=e.expression&&(t.expression=String(e.expression)),null!=e.title&&(t.title=String(e.title)),null!=e.description&&(t.description=String(e.description)),null!=e.location&&(t.location=String(e.location)),t)},V.toObject=function(e,t){var n={};return(t=t||{}).defaults&&(n.expression=\"\",n.title=\"\",n.description=\"\",n.location=\"\"),null!=e.expression&&e.hasOwnProperty(\"expression\")&&(n.expression=e.expression),null!=e.title&&e.hasOwnProperty(\"title\")&&(n.title=e.title),null!=e.description&&e.hasOwnProperty(\"description\")&&(n.description=e.description),null!=e.location&&e.hasOwnProperty(\"location\")&&(n.location=e.location),n},V.prototype.toJSON=function(){return this.constructor.toObject(this,o.util.toJSONOptions)},V),r),F),l});//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/google-gax/build/protos/iam_service.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/google-gax/build/protos/iam_service.json":
/*!***************************************************************!*\
  !*** ./node_modules/google-gax/build/protos/iam_service.json ***!
  \***************************************************************/
/***/ ((module) => {

"use strict";
module.exports = /*#__PURE__*/JSON.parse('{"nested":{"google":{"nested":{"iam":{"nested":{"v1":{"options":{"cc_enable_arenas":true,"csharp_namespace":"Google.Cloud.Iam.V1","go_package":"google.golang.org/genproto/googleapis/iam/v1;iam","java_multiple_files":true,"java_outer_classname":"PolicyProto","java_package":"com.google.iam.v1","php_namespace":"Google\\\\Cloud\\\\Iam\\\\V1"},"nested":{"IAMPolicy":{"options":{"(google.api.default_host)":"iam-meta-api.googleapis.com"},"methods":{"SetIamPolicy":{"requestType":"SetIamPolicyRequest","responseType":"Policy","options":{"(google.api.http).post":"/v1/{resource=**}:setIamPolicy","(google.api.http).body":"*"},"parsedOptions":[{"(google.api.http)":{"post":"/v1/{resource=**}:setIamPolicy","body":"*"}}]},"GetIamPolicy":{"requestType":"GetIamPolicyRequest","responseType":"Policy","options":{"(google.api.http).post":"/v1/{resource=**}:getIamPolicy","(google.api.http).body":"*"},"parsedOptions":[{"(google.api.http)":{"post":"/v1/{resource=**}:getIamPolicy","body":"*"}}]},"TestIamPermissions":{"requestType":"TestIamPermissionsRequest","responseType":"TestIamPermissionsResponse","options":{"(google.api.http).post":"/v1/{resource=**}:testIamPermissions","(google.api.http).body":"*"},"parsedOptions":[{"(google.api.http)":{"post":"/v1/{resource=**}:testIamPermissions","body":"*"}}]}}},"SetIamPolicyRequest":{"fields":{"resource":{"type":"string","id":1,"options":{"(google.api.field_behavior)":"REQUIRED","(google.api.resource_reference).type":"*"}},"policy":{"type":"Policy","id":2,"options":{"(google.api.field_behavior)":"REQUIRED"}}}},"GetIamPolicyRequest":{"fields":{"resource":{"type":"string","id":1,"options":{"(google.api.field_behavior)":"REQUIRED","(google.api.resource_reference).type":"*"}},"options":{"type":"GetPolicyOptions","id":2}}},"TestIamPermissionsRequest":{"fields":{"resource":{"type":"string","id":1,"options":{"(google.api.field_behavior)":"REQUIRED","(google.api.resource_reference).type":"*"}},"permissions":{"rule":"repeated","type":"string","id":2,"options":{"(google.api.field_behavior)":"REQUIRED"}}}},"TestIamPermissionsResponse":{"fields":{"permissions":{"rule":"repeated","type":"string","id":1}}},"GetPolicyOptions":{"fields":{"requestedPolicyVersion":{"type":"int32","id":1}}},"Policy":{"fields":{"version":{"type":"int32","id":1},"bindings":{"rule":"repeated","type":"Binding","id":4},"etag":{"type":"bytes","id":3}}},"Binding":{"fields":{"role":{"type":"string","id":1},"members":{"rule":"repeated","type":"string","id":2},"condition":{"type":"google.type.Expr","id":3}}},"PolicyDelta":{"fields":{"bindingDeltas":{"rule":"repeated","type":"BindingDelta","id":1},"auditConfigDeltas":{"rule":"repeated","type":"AuditConfigDelta","id":2}}},"BindingDelta":{"fields":{"action":{"type":"Action","id":1},"role":{"type":"string","id":2},"member":{"type":"string","id":3},"condition":{"type":"google.type.Expr","id":4}},"nested":{"Action":{"values":{"ACTION_UNSPECIFIED":0,"ADD":1,"REMOVE":2}}}},"AuditConfigDelta":{"fields":{"action":{"type":"Action","id":1},"service":{"type":"string","id":2},"exemptedMember":{"type":"string","id":3},"logType":{"type":"string","id":4}},"nested":{"Action":{"values":{"ACTION_UNSPECIFIED":0,"ADD":1,"REMOVE":2}}}},"logging":{"options":{"csharp_namespace":"Google.Cloud.Iam.V1.Logging","go_package":"google.golang.org/genproto/googleapis/iam/v1/logging;logging","java_multiple_files":true,"java_outer_classname":"AuditDataProto","java_package":"com.google.iam.v1.logging"},"nested":{"AuditData":{"fields":{"policyDelta":{"type":"google.iam.v1.PolicyDelta","id":2}}}}}}}}},"api":{"options":{"go_package":"google.golang.org/genproto/googleapis/api/annotations;annotations","java_multiple_files":true,"java_outer_classname":"ResourceProto","java_package":"com.google.api","objc_class_prefix":"GAPI","cc_enable_arenas":true},"nested":{"http":{"type":"HttpRule","id":72295728,"extend":"google.protobuf.MethodOptions"},"Http":{"fields":{"rules":{"rule":"repeated","type":"HttpRule","id":1},"fullyDecodeReservedExpansion":{"type":"bool","id":2}}},"HttpRule":{"oneofs":{"pattern":{"oneof":["get","put","post","delete","patch","custom"]}},"fields":{"selector":{"type":"string","id":1},"get":{"type":"string","id":2},"put":{"type":"string","id":3},"post":{"type":"string","id":4},"delete":{"type":"string","id":5},"patch":{"type":"string","id":6},"custom":{"type":"CustomHttpPattern","id":8},"body":{"type":"string","id":7},"responseBody":{"type":"string","id":12},"additionalBindings":{"rule":"repeated","type":"HttpRule","id":11}}},"CustomHttpPattern":{"fields":{"kind":{"type":"string","id":1},"path":{"type":"string","id":2}}},"methodSignature":{"rule":"repeated","type":"string","id":1051,"extend":"google.protobuf.MethodOptions"},"defaultHost":{"type":"string","id":1049,"extend":"google.protobuf.ServiceOptions"},"oauthScopes":{"type":"string","id":1050,"extend":"google.protobuf.ServiceOptions"},"fieldBehavior":{"rule":"repeated","type":"google.api.FieldBehavior","id":1052,"extend":"google.protobuf.FieldOptions"},"FieldBehavior":{"values":{"FIELD_BEHAVIOR_UNSPECIFIED":0,"OPTIONAL":1,"REQUIRED":2,"OUTPUT_ONLY":3,"INPUT_ONLY":4,"IMMUTABLE":5}},"resourceReference":{"type":"google.api.ResourceReference","id":1055,"extend":"google.protobuf.FieldOptions"},"resourceDefinition":{"rule":"repeated","type":"google.api.ResourceDescriptor","id":1053,"extend":"google.protobuf.FileOptions"},"resource":{"type":"google.api.ResourceDescriptor","id":1053,"extend":"google.protobuf.MessageOptions"},"ResourceDescriptor":{"fields":{"type":{"type":"string","id":1},"pattern":{"rule":"repeated","type":"string","id":2},"nameField":{"type":"string","id":3},"history":{"type":"History","id":4},"plural":{"type":"string","id":5},"singular":{"type":"string","id":6}},"nested":{"History":{"values":{"HISTORY_UNSPECIFIED":0,"ORIGINALLY_SINGLE_PATTERN":1,"FUTURE_MULTI_PATTERN":2}}}},"ResourceReference":{"fields":{"type":{"type":"string","id":1},"childType":{"type":"string","id":2}}}}},"protobuf":{"options":{"go_package":"github.com/golang/protobuf/protoc-gen-go/descriptor;descriptor","java_package":"com.google.protobuf","java_outer_classname":"DescriptorProtos","csharp_namespace":"Google.Protobuf.Reflection","objc_class_prefix":"GPB","cc_enable_arenas":true,"optimize_for":"SPEED"},"nested":{"FileDescriptorSet":{"fields":{"file":{"rule":"repeated","type":"FileDescriptorProto","id":1}}},"FileDescriptorProto":{"fields":{"name":{"type":"string","id":1},"package":{"type":"string","id":2},"dependency":{"rule":"repeated","type":"string","id":3},"publicDependency":{"rule":"repeated","type":"int32","id":10,"options":{"packed":false}},"weakDependency":{"rule":"repeated","type":"int32","id":11,"options":{"packed":false}},"messageType":{"rule":"repeated","type":"DescriptorProto","id":4},"enumType":{"rule":"repeated","type":"EnumDescriptorProto","id":5},"service":{"rule":"repeated","type":"ServiceDescriptorProto","id":6},"extension":{"rule":"repeated","type":"FieldDescriptorProto","id":7},"options":{"type":"FileOptions","id":8},"sourceCodeInfo":{"type":"SourceCodeInfo","id":9},"syntax":{"type":"string","id":12}}},"DescriptorProto":{"fields":{"name":{"type":"string","id":1},"field":{"rule":"repeated","type":"FieldDescriptorProto","id":2},"extension":{"rule":"repeated","type":"FieldDescriptorProto","id":6},"nestedType":{"rule":"repeated","type":"DescriptorProto","id":3},"enumType":{"rule":"repeated","type":"EnumDescriptorProto","id":4},"extensionRange":{"rule":"repeated","type":"ExtensionRange","id":5},"oneofDecl":{"rule":"repeated","type":"OneofDescriptorProto","id":8},"options":{"type":"MessageOptions","id":7},"reservedRange":{"rule":"repeated","type":"ReservedRange","id":9},"reservedName":{"rule":"repeated","type":"string","id":10}},"nested":{"ExtensionRange":{"fields":{"start":{"type":"int32","id":1},"end":{"type":"int32","id":2},"options":{"type":"ExtensionRangeOptions","id":3}}},"ReservedRange":{"fields":{"start":{"type":"int32","id":1},"end":{"type":"int32","id":2}}}}},"ExtensionRangeOptions":{"fields":{"uninterpretedOption":{"rule":"repeated","type":"UninterpretedOption","id":999}},"extensions":[[1000,536870911]]},"FieldDescriptorProto":{"fields":{"name":{"type":"string","id":1},"number":{"type":"int32","id":3},"label":{"type":"Label","id":4},"type":{"type":"Type","id":5},"typeName":{"type":"string","id":6},"extendee":{"type":"string","id":2},"defaultValue":{"type":"string","id":7},"oneofIndex":{"type":"int32","id":9},"jsonName":{"type":"string","id":10},"options":{"type":"FieldOptions","id":8},"proto3Optional":{"type":"bool","id":17}},"nested":{"Type":{"values":{"TYPE_DOUBLE":1,"TYPE_FLOAT":2,"TYPE_INT64":3,"TYPE_UINT64":4,"TYPE_INT32":5,"TYPE_FIXED64":6,"TYPE_FIXED32":7,"TYPE_BOOL":8,"TYPE_STRING":9,"TYPE_GROUP":10,"TYPE_MESSAGE":11,"TYPE_BYTES":12,"TYPE_UINT32":13,"TYPE_ENUM":14,"TYPE_SFIXED32":15,"TYPE_SFIXED64":16,"TYPE_SINT32":17,"TYPE_SINT64":18}},"Label":{"values":{"LABEL_OPTIONAL":1,"LABEL_REQUIRED":2,"LABEL_REPEATED":3}}}},"OneofDescriptorProto":{"fields":{"name":{"type":"string","id":1},"options":{"type":"OneofOptions","id":2}}},"EnumDescriptorProto":{"fields":{"name":{"type":"string","id":1},"value":{"rule":"repeated","type":"EnumValueDescriptorProto","id":2},"options":{"type":"EnumOptions","id":3},"reservedRange":{"rule":"repeated","type":"EnumReservedRange","id":4},"reservedName":{"rule":"repeated","type":"string","id":5}},"nested":{"EnumReservedRange":{"fields":{"start":{"type":"int32","id":1},"end":{"type":"int32","id":2}}}}},"EnumValueDescriptorProto":{"fields":{"name":{"type":"string","id":1},"number":{"type":"int32","id":2},"options":{"type":"EnumValueOptions","id":3}}},"ServiceDescriptorProto":{"fields":{"name":{"type":"string","id":1},"method":{"rule":"repeated","type":"MethodDescriptorProto","id":2},"options":{"type":"ServiceOptions","id":3}}},"MethodDescriptorProto":{"fields":{"name":{"type":"string","id":1},"inputType":{"type":"string","id":2},"outputType":{"type":"string","id":3},"options":{"type":"MethodOptions","id":4},"clientStreaming":{"type":"bool","id":5,"options":{"default":false}},"serverStreaming":{"type":"bool","id":6,"options":{"default":false}}}},"FileOptions":{"fields":{"javaPackage":{"type":"string","id":1},"javaOuterClassname":{"type":"string","id":8},"javaMultipleFiles":{"type":"bool","id":10,"options":{"default":false}},"javaGenerateEqualsAndHash":{"type":"bool","id":20,"options":{"deprecated":true}},"javaStringCheckUtf8":{"type":"bool","id":27,"options":{"default":false}},"optimizeFor":{"type":"OptimizeMode","id":9,"options":{"default":"SPEED"}},"goPackage":{"type":"string","id":11},"ccGenericServices":{"type":"bool","id":16,"options":{"default":false}},"javaGenericServices":{"type":"bool","id":17,"options":{"default":false}},"pyGenericServices":{"type":"bool","id":18,"options":{"default":false}},"phpGenericServices":{"type":"bool","id":42,"options":{"default":false}},"deprecated":{"type":"bool","id":23,"options":{"default":false}},"ccEnableArenas":{"type":"bool","id":31,"options":{"default":true}},"objcClassPrefix":{"type":"string","id":36},"csharpNamespace":{"type":"string","id":37},"swiftPrefix":{"type":"string","id":39},"phpClassPrefix":{"type":"string","id":40},"phpNamespace":{"type":"string","id":41},"phpMetadataNamespace":{"type":"string","id":44},"rubyPackage":{"type":"string","id":45},"uninterpretedOption":{"rule":"repeated","type":"UninterpretedOption","id":999}},"extensions":[[1000,536870911]],"reserved":[[38,38]],"nested":{"OptimizeMode":{"values":{"SPEED":1,"CODE_SIZE":2,"LITE_RUNTIME":3}}}},"MessageOptions":{"fields":{"messageSetWireFormat":{"type":"bool","id":1,"options":{"default":false}},"noStandardDescriptorAccessor":{"type":"bool","id":2,"options":{"default":false}},"deprecated":{"type":"bool","id":3,"options":{"default":false}},"mapEntry":{"type":"bool","id":7},"uninterpretedOption":{"rule":"repeated","type":"UninterpretedOption","id":999}},"extensions":[[1000,536870911]],"reserved":[[8,8],[9,9]]},"FieldOptions":{"fields":{"ctype":{"type":"CType","id":1,"options":{"default":"STRING"}},"packed":{"type":"bool","id":2},"jstype":{"type":"JSType","id":6,"options":{"default":"JS_NORMAL"}},"lazy":{"type":"bool","id":5,"options":{"default":false}},"deprecated":{"type":"bool","id":3,"options":{"default":false}},"weak":{"type":"bool","id":10,"options":{"default":false}},"uninterpretedOption":{"rule":"repeated","type":"UninterpretedOption","id":999}},"extensions":[[1000,536870911]],"reserved":[[4,4]],"nested":{"CType":{"values":{"STRING":0,"CORD":1,"STRING_PIECE":2}},"JSType":{"values":{"JS_NORMAL":0,"JS_STRING":1,"JS_NUMBER":2}}}},"OneofOptions":{"fields":{"uninterpretedOption":{"rule":"repeated","type":"UninterpretedOption","id":999}},"extensions":[[1000,536870911]]},"EnumOptions":{"fields":{"allowAlias":{"type":"bool","id":2},"deprecated":{"type":"bool","id":3,"options":{"default":false}},"uninterpretedOption":{"rule":"repeated","type":"UninterpretedOption","id":999}},"extensions":[[1000,536870911]],"reserved":[[5,5]]},"EnumValueOptions":{"fields":{"deprecated":{"type":"bool","id":1,"options":{"default":false}},"uninterpretedOption":{"rule":"repeated","type":"UninterpretedOption","id":999}},"extensions":[[1000,536870911]]},"ServiceOptions":{"fields":{"deprecated":{"type":"bool","id":33,"options":{"default":false}},"uninterpretedOption":{"rule":"repeated","type":"UninterpretedOption","id":999}},"extensions":[[1000,536870911]]},"MethodOptions":{"fields":{"deprecated":{"type":"bool","id":33,"options":{"default":false}},"idempotencyLevel":{"type":"IdempotencyLevel","id":34,"options":{"default":"IDEMPOTENCY_UNKNOWN"}},"uninterpretedOption":{"rule":"repeated","type":"UninterpretedOption","id":999}},"extensions":[[1000,536870911]],"nested":{"IdempotencyLevel":{"values":{"IDEMPOTENCY_UNKNOWN":0,"NO_SIDE_EFFECTS":1,"IDEMPOTENT":2}}}},"UninterpretedOption":{"fields":{"name":{"rule":"repeated","type":"NamePart","id":2},"identifierValue":{"type":"string","id":3},"positiveIntValue":{"type":"uint64","id":4},"negativeIntValue":{"type":"int64","id":5},"doubleValue":{"type":"double","id":6},"stringValue":{"type":"bytes","id":7},"aggregateValue":{"type":"string","id":8}},"nested":{"NamePart":{"fields":{"namePart":{"rule":"required","type":"string","id":1},"isExtension":{"rule":"required","type":"bool","id":2}}}}},"SourceCodeInfo":{"fields":{"location":{"rule":"repeated","type":"Location","id":1}},"nested":{"Location":{"fields":{"path":{"rule":"repeated","type":"int32","id":1},"span":{"rule":"repeated","type":"int32","id":2},"leadingComments":{"type":"string","id":3},"trailingComments":{"type":"string","id":4},"leadingDetachedComments":{"rule":"repeated","type":"string","id":6}}}}},"GeneratedCodeInfo":{"fields":{"annotation":{"rule":"repeated","type":"Annotation","id":1}},"nested":{"Annotation":{"fields":{"path":{"rule":"repeated","type":"int32","id":1},"sourceFile":{"type":"string","id":2},"begin":{"type":"int32","id":3},"end":{"type":"int32","id":4}}}}}}},"type":{"options":{"go_package":"google.golang.org/genproto/googleapis/type/expr;expr","java_multiple_files":true,"java_outer_classname":"ExprProto","java_package":"com.google.type","objc_class_prefix":"GTP"},"nested":{"Expr":{"fields":{"expression":{"type":"string","id":1},"title":{"type":"string","id":2},"description":{"type":"string","id":3},"location":{"type":"string","id":4}}}}}}}}}');

/***/ }),

/***/ "(rsc)/./node_modules/google-gax/build/protos/locations.js":
/*!***********************************************************!*\
  !*** ./node_modules/google-gax/build/protos/locations.js ***!
  \***********************************************************/
/***/ ((module, exports, __webpack_require__) => {

eval("var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;(e=>{ true?!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(/*! protobufjs/minimal */ \"(rsc)/./node_modules/protobufjs/minimal.js\")], __WEBPACK_AMD_DEFINE_FACTORY__ = (e),\n\t\t__WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ?\n\t\t(__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__),\n\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__)):0})(function(o){var e,t,n,F,s=o.Reader,r=o.Writer,u=o.util,c=o.roots.locations_protos||(o.roots.locations_protos={});function L(e,t,n){o.rpc.Service.call(this,e,t,n)}function i(e){if(e)for(var t=Object.keys(e),n=0;n<t.length;++n)null!=e[t[n]]&&(this[t[n]]=e[t[n]])}function a(e){if(this.locations=[],e)for(var t=Object.keys(e),n=0;n<t.length;++n)null!=e[t[n]]&&(this[t[n]]=e[t[n]])}function G(e){if(e)for(var t=Object.keys(e),n=0;n<t.length;++n)null!=e[t[n]]&&(this[t[n]]=e[t[n]])}function p(e){if(this.labels={},e)for(var t=Object.keys(e),n=0;n<t.length;++n)null!=e[t[n]]&&(this[t[n]]=e[t[n]])}function l(e){if(this.rules=[],e)for(var t=Object.keys(e),n=0;n<t.length;++n)null!=e[t[n]]&&(this[t[n]]=e[t[n]])}function d(e){if(this.additionalBindings=[],e)for(var t=Object.keys(e),n=0;n<t.length;++n)null!=e[t[n]]&&(this[t[n]]=e[t[n]])}function g(e){if(e)for(var t=Object.keys(e),n=0;n<t.length;++n)null!=e[t[n]]&&(this[t[n]]=e[t[n]])}function B(e){if(this.file=[],e)for(var t=Object.keys(e),n=0;n<t.length;++n)null!=e[t[n]]&&(this[t[n]]=e[t[n]])}function f(e){if(this.dependency=[],this.publicDependency=[],this.weakDependency=[],this.messageType=[],this.enumType=[],this.service=[],this.extension=[],e)for(var t=Object.keys(e),n=0;n<t.length;++n)null!=e[t[n]]&&(this[t[n]]=e[t[n]])}function y(e){if(this.field=[],this.extension=[],this.nestedType=[],this.enumType=[],this.extensionRange=[],this.oneofDecl=[],this.reservedRange=[],this.reservedName=[],e)for(var t=Object.keys(e),n=0;n<t.length;++n)null!=e[t[n]]&&(this[t[n]]=e[t[n]])}function h(e){if(e)for(var t=Object.keys(e),n=0;n<t.length;++n)null!=e[t[n]]&&(this[t[n]]=e[t[n]])}function b(e){if(e)for(var t=Object.keys(e),n=0;n<t.length;++n)null!=e[t[n]]&&(this[t[n]]=e[t[n]])}function U(e){if(this.uninterpretedOption=[],e)for(var t=Object.keys(e),n=0;n<t.length;++n)null!=e[t[n]]&&(this[t[n]]=e[t[n]])}function O(e){if(e)for(var t=Object.keys(e),n=0;n<t.length;++n)null!=e[t[n]]&&(this[t[n]]=e[t[n]])}function m(e){if(e)for(var t=Object.keys(e),n=0;n<t.length;++n)null!=e[t[n]]&&(this[t[n]]=e[t[n]])}function v(e){if(this.value=[],this.reservedRange=[],this.reservedName=[],e)for(var t=Object.keys(e),n=0;n<t.length;++n)null!=e[t[n]]&&(this[t[n]]=e[t[n]])}function P(e){if(e)for(var t=Object.keys(e),n=0;n<t.length;++n)null!=e[t[n]]&&(this[t[n]]=e[t[n]])}function w(e){if(e)for(var t=Object.keys(e),n=0;n<t.length;++n)null!=e[t[n]]&&(this[t[n]]=e[t[n]])}function j(e){if(this.method=[],e)for(var t=Object.keys(e),n=0;n<t.length;++n)null!=e[t[n]]&&(this[t[n]]=e[t[n]])}function x(e){if(e)for(var t=Object.keys(e),n=0;n<t.length;++n)null!=e[t[n]]&&(this[t[n]]=e[t[n]])}function S(e){if(this.uninterpretedOption=[],e)for(var t=Object.keys(e),n=0;n<t.length;++n)null!=e[t[n]]&&(this[t[n]]=e[t[n]])}function k(e){if(this.uninterpretedOption=[],e)for(var t=Object.keys(e),n=0;n<t.length;++n)null!=e[t[n]]&&(this[t[n]]=e[t[n]])}function D(e){if(this.uninterpretedOption=[],e)for(var t=Object.keys(e),n=0;n<t.length;++n)null!=e[t[n]]&&(this[t[n]]=e[t[n]])}function M(e){if(this.uninterpretedOption=[],e)for(var t=Object.keys(e),n=0;n<t.length;++n)null!=e[t[n]]&&(this[t[n]]=e[t[n]])}function T(e){if(this.uninterpretedOption=[],e)for(var t=Object.keys(e),n=0;n<t.length;++n)null!=e[t[n]]&&(this[t[n]]=e[t[n]])}function E(e){if(this.uninterpretedOption=[],e)for(var t=Object.keys(e),n=0;n<t.length;++n)null!=e[t[n]]&&(this[t[n]]=e[t[n]])}function A(e){if(this.uninterpretedOption=[],e)for(var t=Object.keys(e),n=0;n<t.length;++n)null!=e[t[n]]&&(this[t[n]]=e[t[n]])}function N(e){if(this.uninterpretedOption=[],this[\".google.api.methodSignature\"]=[],e)for(var t=Object.keys(e),n=0;n<t.length;++n)null!=e[t[n]]&&(this[t[n]]=e[t[n]])}function I(e){if(this.name=[],e)for(var t=Object.keys(e),n=0;n<t.length;++n)null!=e[t[n]]&&(this[t[n]]=e[t[n]])}function R(e){if(e)for(var t=Object.keys(e),n=0;n<t.length;++n)null!=e[t[n]]&&(this[t[n]]=e[t[n]])}function _(e){if(this.location=[],e)for(var t=Object.keys(e),n=0;n<t.length;++n)null!=e[t[n]]&&(this[t[n]]=e[t[n]])}function C(e){if(this.path=[],this.span=[],this.leadingDetachedComments=[],e)for(var t=Object.keys(e),n=0;n<t.length;++n)null!=e[t[n]]&&(this[t[n]]=e[t[n]])}function J(e){if(this.annotation=[],e)for(var t=Object.keys(e),n=0;n<t.length;++n)null!=e[t[n]]&&(this[t[n]]=e[t[n]])}function V(e){if(this.path=[],e)for(var t=Object.keys(e),n=0;n<t.length;++n)null!=e[t[n]]&&(this[t[n]]=e[t[n]])}function H(e){if(e)for(var t=Object.keys(e),n=0;n<t.length;++n)null!=e[t[n]]&&(this[t[n]]=e[t[n]])}return c.google=((F={}).cloud=((n={}).location=((e={}).Locations=(((L.prototype=Object.create(o.rpc.Service.prototype)).constructor=L).create=function(e,t,n){return new this(e,t,n)},Object.defineProperty(L.prototype.listLocations=function e(t,n){return this.rpcCall(e,c.google.cloud.location.ListLocationsRequest,c.google.cloud.location.ListLocationsResponse,t,n)},\"name\",{value:\"ListLocations\"}),Object.defineProperty(L.prototype.getLocation=function e(t,n){return this.rpcCall(e,c.google.cloud.location.GetLocationRequest,c.google.cloud.location.Location,t,n)},\"name\",{value:\"GetLocation\"}),L),e.ListLocationsRequest=(i.prototype.name=\"\",i.prototype.filter=\"\",i.prototype.pageSize=0,i.prototype.pageToken=\"\",i.create=function(e){return new i(e)},i.encode=function(e,t){return t=t||r.create(),null!=e.name&&Object.hasOwnProperty.call(e,\"name\")&&t.uint32(10).string(e.name),null!=e.filter&&Object.hasOwnProperty.call(e,\"filter\")&&t.uint32(18).string(e.filter),null!=e.pageSize&&Object.hasOwnProperty.call(e,\"pageSize\")&&t.uint32(24).int32(e.pageSize),null!=e.pageToken&&Object.hasOwnProperty.call(e,\"pageToken\")&&t.uint32(34).string(e.pageToken),t},i.encodeDelimited=function(e,t){return this.encode(e,t).ldelim()},i.decode=function(e,t){e instanceof s||(e=s.create(e));for(var n=void 0===t?e.len:e.pos+t,o=new c.google.cloud.location.ListLocationsRequest;e.pos<n;){var r=e.uint32();switch(r>>>3){case 1:o.name=e.string();break;case 2:o.filter=e.string();break;case 3:o.pageSize=e.int32();break;case 4:o.pageToken=e.string();break;default:e.skipType(7&r)}}return o},i.decodeDelimited=function(e){return e instanceof s||(e=new s(e)),this.decode(e,e.uint32())},i.verify=function(e){return\"object\"!=typeof e||null===e?\"object expected\":null!=e.name&&e.hasOwnProperty(\"name\")&&!u.isString(e.name)?\"name: string expected\":null!=e.filter&&e.hasOwnProperty(\"filter\")&&!u.isString(e.filter)?\"filter: string expected\":null!=e.pageSize&&e.hasOwnProperty(\"pageSize\")&&!u.isInteger(e.pageSize)?\"pageSize: integer expected\":null!=e.pageToken&&e.hasOwnProperty(\"pageToken\")&&!u.isString(e.pageToken)?\"pageToken: string expected\":null},i.fromObject=function(e){var t;return e instanceof c.google.cloud.location.ListLocationsRequest?e:(t=new c.google.cloud.location.ListLocationsRequest,null!=e.name&&(t.name=String(e.name)),null!=e.filter&&(t.filter=String(e.filter)),null!=e.pageSize&&(t.pageSize=0|e.pageSize),null!=e.pageToken&&(t.pageToken=String(e.pageToken)),t)},i.toObject=function(e,t){var n={};return(t=t||{}).defaults&&(n.name=\"\",n.filter=\"\",n.pageSize=0,n.pageToken=\"\"),null!=e.name&&e.hasOwnProperty(\"name\")&&(n.name=e.name),null!=e.filter&&e.hasOwnProperty(\"filter\")&&(n.filter=e.filter),null!=e.pageSize&&e.hasOwnProperty(\"pageSize\")&&(n.pageSize=e.pageSize),null!=e.pageToken&&e.hasOwnProperty(\"pageToken\")&&(n.pageToken=e.pageToken),n},i.prototype.toJSON=function(){return this.constructor.toObject(this,o.util.toJSONOptions)},i),e.ListLocationsResponse=(a.prototype.locations=u.emptyArray,a.prototype.nextPageToken=\"\",a.create=function(e){return new a(e)},a.encode=function(e,t){if(t=t||r.create(),null!=e.locations&&e.locations.length)for(var n=0;n<e.locations.length;++n)c.google.cloud.location.Location.encode(e.locations[n],t.uint32(10).fork()).ldelim();return null!=e.nextPageToken&&Object.hasOwnProperty.call(e,\"nextPageToken\")&&t.uint32(18).string(e.nextPageToken),t},a.encodeDelimited=function(e,t){return this.encode(e,t).ldelim()},a.decode=function(e,t){e instanceof s||(e=s.create(e));for(var n=void 0===t?e.len:e.pos+t,o=new c.google.cloud.location.ListLocationsResponse;e.pos<n;){var r=e.uint32();switch(r>>>3){case 1:o.locations&&o.locations.length||(o.locations=[]),o.locations.push(c.google.cloud.location.Location.decode(e,e.uint32()));break;case 2:o.nextPageToken=e.string();break;default:e.skipType(7&r)}}return o},a.decodeDelimited=function(e){return e instanceof s||(e=new s(e)),this.decode(e,e.uint32())},a.verify=function(e){if(\"object\"!=typeof e||null===e)return\"object expected\";if(null!=e.locations&&e.hasOwnProperty(\"locations\")){if(!Array.isArray(e.locations))return\"locations: array expected\";for(var t=0;t<e.locations.length;++t){var n=c.google.cloud.location.Location.verify(e.locations[t]);if(n)return\"locations.\"+n}}return null!=e.nextPageToken&&e.hasOwnProperty(\"nextPageToken\")&&!u.isString(e.nextPageToken)?\"nextPageToken: string expected\":null},a.fromObject=function(e){if(e instanceof c.google.cloud.location.ListLocationsResponse)return e;var t=new c.google.cloud.location.ListLocationsResponse;if(e.locations){if(!Array.isArray(e.locations))throw TypeError(\".google.cloud.location.ListLocationsResponse.locations: array expected\");t.locations=[];for(var n=0;n<e.locations.length;++n){if(\"object\"!=typeof e.locations[n])throw TypeError(\".google.cloud.location.ListLocationsResponse.locations: object expected\");t.locations[n]=c.google.cloud.location.Location.fromObject(e.locations[n])}}return null!=e.nextPageToken&&(t.nextPageToken=String(e.nextPageToken)),t},a.toObject=function(e,t){var n={};if(((t=t||{}).arrays||t.defaults)&&(n.locations=[]),t.defaults&&(n.nextPageToken=\"\"),e.locations&&e.locations.length){n.locations=[];for(var o=0;o<e.locations.length;++o)n.locations[o]=c.google.cloud.location.Location.toObject(e.locations[o],t)}return null!=e.nextPageToken&&e.hasOwnProperty(\"nextPageToken\")&&(n.nextPageToken=e.nextPageToken),n},a.prototype.toJSON=function(){return this.constructor.toObject(this,o.util.toJSONOptions)},a),e.GetLocationRequest=(G.prototype.name=\"\",G.create=function(e){return new G(e)},G.encode=function(e,t){return t=t||r.create(),null!=e.name&&Object.hasOwnProperty.call(e,\"name\")&&t.uint32(10).string(e.name),t},G.encodeDelimited=function(e,t){return this.encode(e,t).ldelim()},G.decode=function(e,t){e instanceof s||(e=s.create(e));for(var n=void 0===t?e.len:e.pos+t,o=new c.google.cloud.location.GetLocationRequest;e.pos<n;){var r=e.uint32();r>>>3==1?o.name=e.string():e.skipType(7&r)}return o},G.decodeDelimited=function(e){return e instanceof s||(e=new s(e)),this.decode(e,e.uint32())},G.verify=function(e){return\"object\"!=typeof e||null===e?\"object expected\":null!=e.name&&e.hasOwnProperty(\"name\")&&!u.isString(e.name)?\"name: string expected\":null},G.fromObject=function(e){var t;return e instanceof c.google.cloud.location.GetLocationRequest?e:(t=new c.google.cloud.location.GetLocationRequest,null!=e.name&&(t.name=String(e.name)),t)},G.toObject=function(e,t){var n={};return(t=t||{}).defaults&&(n.name=\"\"),null!=e.name&&e.hasOwnProperty(\"name\")&&(n.name=e.name),n},G.prototype.toJSON=function(){return this.constructor.toObject(this,o.util.toJSONOptions)},G),e.Location=(p.prototype.name=\"\",p.prototype.locationId=\"\",p.prototype.displayName=\"\",p.prototype.labels=u.emptyObject,p.prototype.metadata=null,p.create=function(e){return new p(e)},p.encode=function(e,t){if(t=t||r.create(),null!=e.name&&Object.hasOwnProperty.call(e,\"name\")&&t.uint32(10).string(e.name),null!=e.labels&&Object.hasOwnProperty.call(e,\"labels\"))for(var n=Object.keys(e.labels),o=0;o<n.length;++o)t.uint32(18).fork().uint32(10).string(n[o]).uint32(18).string(e.labels[n[o]]).ldelim();return null!=e.metadata&&Object.hasOwnProperty.call(e,\"metadata\")&&c.google.protobuf.Any.encode(e.metadata,t.uint32(26).fork()).ldelim(),null!=e.locationId&&Object.hasOwnProperty.call(e,\"locationId\")&&t.uint32(34).string(e.locationId),null!=e.displayName&&Object.hasOwnProperty.call(e,\"displayName\")&&t.uint32(42).string(e.displayName),t},p.encodeDelimited=function(e,t){return this.encode(e,t).ldelim()},p.decode=function(e,t){e instanceof s||(e=s.create(e));for(var n=void 0===t?e.len:e.pos+t,o=new c.google.cloud.location.Location;e.pos<n;){var r=e.uint32();switch(r>>>3){case 1:o.name=e.string();break;case 4:o.locationId=e.string();break;case 5:o.displayName=e.string();break;case 2:o.labels===u.emptyObject&&(o.labels={});for(var i=e.uint32()+e.pos,a=\"\",p=\"\";e.pos<i;){var l=e.uint32();switch(l>>>3){case 1:a=e.string();break;case 2:p=e.string();break;default:e.skipType(7&l)}}o.labels[a]=p;break;case 3:o.metadata=c.google.protobuf.Any.decode(e,e.uint32());break;default:e.skipType(7&r)}}return o},p.decodeDelimited=function(e){return e instanceof s||(e=new s(e)),this.decode(e,e.uint32())},p.verify=function(e){if(\"object\"!=typeof e||null===e)return\"object expected\";if(null!=e.name&&e.hasOwnProperty(\"name\")&&!u.isString(e.name))return\"name: string expected\";if(null!=e.locationId&&e.hasOwnProperty(\"locationId\")&&!u.isString(e.locationId))return\"locationId: string expected\";if(null!=e.displayName&&e.hasOwnProperty(\"displayName\")&&!u.isString(e.displayName))return\"displayName: string expected\";if(null!=e.labels&&e.hasOwnProperty(\"labels\")){if(!u.isObject(e.labels))return\"labels: object expected\";for(var t=Object.keys(e.labels),n=0;n<t.length;++n)if(!u.isString(e.labels[t[n]]))return\"labels: string{k:string} expected\"}if(null!=e.metadata&&e.hasOwnProperty(\"metadata\")){var o=c.google.protobuf.Any.verify(e.metadata);if(o)return\"metadata.\"+o}return null},p.fromObject=function(e){if(e instanceof c.google.cloud.location.Location)return e;var t=new c.google.cloud.location.Location;if(null!=e.name&&(t.name=String(e.name)),null!=e.locationId&&(t.locationId=String(e.locationId)),null!=e.displayName&&(t.displayName=String(e.displayName)),e.labels){if(\"object\"!=typeof e.labels)throw TypeError(\".google.cloud.location.Location.labels: object expected\");t.labels={};for(var n=Object.keys(e.labels),o=0;o<n.length;++o)t.labels[n[o]]=String(e.labels[n[o]])}if(null!=e.metadata){if(\"object\"!=typeof e.metadata)throw TypeError(\".google.cloud.location.Location.metadata: object expected\");t.metadata=c.google.protobuf.Any.fromObject(e.metadata)}return t},p.toObject=function(e,t){var n,o={};if(((t=t||{}).objects||t.defaults)&&(o.labels={}),t.defaults&&(o.name=\"\",o.metadata=null,o.locationId=\"\",o.displayName=\"\"),null!=e.name&&e.hasOwnProperty(\"name\")&&(o.name=e.name),e.labels&&(n=Object.keys(e.labels)).length){o.labels={};for(var r=0;r<n.length;++r)o.labels[n[r]]=e.labels[n[r]]}return null!=e.metadata&&e.hasOwnProperty(\"metadata\")&&(o.metadata=c.google.protobuf.Any.toObject(e.metadata,t)),null!=e.locationId&&e.hasOwnProperty(\"locationId\")&&(o.locationId=e.locationId),null!=e.displayName&&e.hasOwnProperty(\"displayName\")&&(o.displayName=e.displayName),o},p.prototype.toJSON=function(){return this.constructor.toObject(this,o.util.toJSONOptions)},p),e),n),F.api=((e={}).Http=(l.prototype.rules=u.emptyArray,l.prototype.fullyDecodeReservedExpansion=!1,l.create=function(e){return new l(e)},l.encode=function(e,t){if(t=t||r.create(),null!=e.rules&&e.rules.length)for(var n=0;n<e.rules.length;++n)c.google.api.HttpRule.encode(e.rules[n],t.uint32(10).fork()).ldelim();return null!=e.fullyDecodeReservedExpansion&&Object.hasOwnProperty.call(e,\"fullyDecodeReservedExpansion\")&&t.uint32(16).bool(e.fullyDecodeReservedExpansion),t},l.encodeDelimited=function(e,t){return this.encode(e,t).ldelim()},l.decode=function(e,t){e instanceof s||(e=s.create(e));for(var n=void 0===t?e.len:e.pos+t,o=new c.google.api.Http;e.pos<n;){var r=e.uint32();switch(r>>>3){case 1:o.rules&&o.rules.length||(o.rules=[]),o.rules.push(c.google.api.HttpRule.decode(e,e.uint32()));break;case 2:o.fullyDecodeReservedExpansion=e.bool();break;default:e.skipType(7&r)}}return o},l.decodeDelimited=function(e){return e instanceof s||(e=new s(e)),this.decode(e,e.uint32())},l.verify=function(e){if(\"object\"!=typeof e||null===e)return\"object expected\";if(null!=e.rules&&e.hasOwnProperty(\"rules\")){if(!Array.isArray(e.rules))return\"rules: array expected\";for(var t=0;t<e.rules.length;++t){var n=c.google.api.HttpRule.verify(e.rules[t]);if(n)return\"rules.\"+n}}return null!=e.fullyDecodeReservedExpansion&&e.hasOwnProperty(\"fullyDecodeReservedExpansion\")&&\"boolean\"!=typeof e.fullyDecodeReservedExpansion?\"fullyDecodeReservedExpansion: boolean expected\":null},l.fromObject=function(e){if(e instanceof c.google.api.Http)return e;var t=new c.google.api.Http;if(e.rules){if(!Array.isArray(e.rules))throw TypeError(\".google.api.Http.rules: array expected\");t.rules=[];for(var n=0;n<e.rules.length;++n){if(\"object\"!=typeof e.rules[n])throw TypeError(\".google.api.Http.rules: object expected\");t.rules[n]=c.google.api.HttpRule.fromObject(e.rules[n])}}return null!=e.fullyDecodeReservedExpansion&&(t.fullyDecodeReservedExpansion=Boolean(e.fullyDecodeReservedExpansion)),t},l.toObject=function(e,t){var n={};if(((t=t||{}).arrays||t.defaults)&&(n.rules=[]),t.defaults&&(n.fullyDecodeReservedExpansion=!1),e.rules&&e.rules.length){n.rules=[];for(var o=0;o<e.rules.length;++o)n.rules[o]=c.google.api.HttpRule.toObject(e.rules[o],t)}return null!=e.fullyDecodeReservedExpansion&&e.hasOwnProperty(\"fullyDecodeReservedExpansion\")&&(n.fullyDecodeReservedExpansion=e.fullyDecodeReservedExpansion),n},l.prototype.toJSON=function(){return this.constructor.toObject(this,o.util.toJSONOptions)},l),e.HttpRule=(d.prototype.selector=\"\",d.prototype.get=null,d.prototype.put=null,d.prototype.post=null,d.prototype.delete=null,d.prototype.patch=null,d.prototype.custom=null,d.prototype.body=\"\",d.prototype.responseBody=\"\",d.prototype.additionalBindings=u.emptyArray,Object.defineProperty(d.prototype,\"pattern\",{get:u.oneOfGetter(n=[\"get\",\"put\",\"post\",\"delete\",\"patch\",\"custom\"]),set:u.oneOfSetter(n)}),d.create=function(e){return new d(e)},d.encode=function(e,t){if(t=t||r.create(),null!=e.selector&&Object.hasOwnProperty.call(e,\"selector\")&&t.uint32(10).string(e.selector),null!=e.get&&Object.hasOwnProperty.call(e,\"get\")&&t.uint32(18).string(e.get),null!=e.put&&Object.hasOwnProperty.call(e,\"put\")&&t.uint32(26).string(e.put),null!=e.post&&Object.hasOwnProperty.call(e,\"post\")&&t.uint32(34).string(e.post),null!=e.delete&&Object.hasOwnProperty.call(e,\"delete\")&&t.uint32(42).string(e.delete),null!=e.patch&&Object.hasOwnProperty.call(e,\"patch\")&&t.uint32(50).string(e.patch),null!=e.body&&Object.hasOwnProperty.call(e,\"body\")&&t.uint32(58).string(e.body),null!=e.custom&&Object.hasOwnProperty.call(e,\"custom\")&&c.google.api.CustomHttpPattern.encode(e.custom,t.uint32(66).fork()).ldelim(),null!=e.additionalBindings&&e.additionalBindings.length)for(var n=0;n<e.additionalBindings.length;++n)c.google.api.HttpRule.encode(e.additionalBindings[n],t.uint32(90).fork()).ldelim();return null!=e.responseBody&&Object.hasOwnProperty.call(e,\"responseBody\")&&t.uint32(98).string(e.responseBody),t},d.encodeDelimited=function(e,t){return this.encode(e,t).ldelim()},d.decode=function(e,t){e instanceof s||(e=s.create(e));for(var n=void 0===t?e.len:e.pos+t,o=new c.google.api.HttpRule;e.pos<n;){var r=e.uint32();switch(r>>>3){case 1:o.selector=e.string();break;case 2:o.get=e.string();break;case 3:o.put=e.string();break;case 4:o.post=e.string();break;case 5:o.delete=e.string();break;case 6:o.patch=e.string();break;case 8:o.custom=c.google.api.CustomHttpPattern.decode(e,e.uint32());break;case 7:o.body=e.string();break;case 12:o.responseBody=e.string();break;case 11:o.additionalBindings&&o.additionalBindings.length||(o.additionalBindings=[]),o.additionalBindings.push(c.google.api.HttpRule.decode(e,e.uint32()));break;default:e.skipType(7&r)}}return o},d.decodeDelimited=function(e){return e instanceof s||(e=new s(e)),this.decode(e,e.uint32())},d.verify=function(e){if(\"object\"!=typeof e||null===e)return\"object expected\";var t={};if(null!=e.selector&&e.hasOwnProperty(\"selector\")&&!u.isString(e.selector))return\"selector: string expected\";if(null!=e.get&&e.hasOwnProperty(\"get\")&&(t.pattern=1,!u.isString(e.get)))return\"get: string expected\";if(null!=e.put&&e.hasOwnProperty(\"put\")){if(1===t.pattern)return\"pattern: multiple values\";if(t.pattern=1,!u.isString(e.put))return\"put: string expected\"}if(null!=e.post&&e.hasOwnProperty(\"post\")){if(1===t.pattern)return\"pattern: multiple values\";if(t.pattern=1,!u.isString(e.post))return\"post: string expected\"}if(null!=e.delete&&e.hasOwnProperty(\"delete\")){if(1===t.pattern)return\"pattern: multiple values\";if(t.pattern=1,!u.isString(e.delete))return\"delete: string expected\"}if(null!=e.patch&&e.hasOwnProperty(\"patch\")){if(1===t.pattern)return\"pattern: multiple values\";if(t.pattern=1,!u.isString(e.patch))return\"patch: string expected\"}if(null!=e.custom&&e.hasOwnProperty(\"custom\")){if(1===t.pattern)return\"pattern: multiple values\";if(t.pattern=1,n=c.google.api.CustomHttpPattern.verify(e.custom))return\"custom.\"+n}if(null!=e.body&&e.hasOwnProperty(\"body\")&&!u.isString(e.body))return\"body: string expected\";if(null!=e.responseBody&&e.hasOwnProperty(\"responseBody\")&&!u.isString(e.responseBody))return\"responseBody: string expected\";if(null!=e.additionalBindings&&e.hasOwnProperty(\"additionalBindings\")){if(!Array.isArray(e.additionalBindings))return\"additionalBindings: array expected\";for(var n,o=0;o<e.additionalBindings.length;++o)if(n=c.google.api.HttpRule.verify(e.additionalBindings[o]))return\"additionalBindings.\"+n}return null},d.fromObject=function(e){if(e instanceof c.google.api.HttpRule)return e;var t=new c.google.api.HttpRule;if(null!=e.selector&&(t.selector=String(e.selector)),null!=e.get&&(t.get=String(e.get)),null!=e.put&&(t.put=String(e.put)),null!=e.post&&(t.post=String(e.post)),null!=e.delete&&(t.delete=String(e.delete)),null!=e.patch&&(t.patch=String(e.patch)),null!=e.custom){if(\"object\"!=typeof e.custom)throw TypeError(\".google.api.HttpRule.custom: object expected\");t.custom=c.google.api.CustomHttpPattern.fromObject(e.custom)}if(null!=e.body&&(t.body=String(e.body)),null!=e.responseBody&&(t.responseBody=String(e.responseBody)),e.additionalBindings){if(!Array.isArray(e.additionalBindings))throw TypeError(\".google.api.HttpRule.additionalBindings: array expected\");t.additionalBindings=[];for(var n=0;n<e.additionalBindings.length;++n){if(\"object\"!=typeof e.additionalBindings[n])throw TypeError(\".google.api.HttpRule.additionalBindings: object expected\");t.additionalBindings[n]=c.google.api.HttpRule.fromObject(e.additionalBindings[n])}}return t},d.toObject=function(e,t){var n={};if(((t=t||{}).arrays||t.defaults)&&(n.additionalBindings=[]),t.defaults&&(n.selector=\"\",n.body=\"\",n.responseBody=\"\"),null!=e.selector&&e.hasOwnProperty(\"selector\")&&(n.selector=e.selector),null!=e.get&&e.hasOwnProperty(\"get\")&&(n.get=e.get,t.oneofs)&&(n.pattern=\"get\"),null!=e.put&&e.hasOwnProperty(\"put\")&&(n.put=e.put,t.oneofs)&&(n.pattern=\"put\"),null!=e.post&&e.hasOwnProperty(\"post\")&&(n.post=e.post,t.oneofs)&&(n.pattern=\"post\"),null!=e.delete&&e.hasOwnProperty(\"delete\")&&(n.delete=e.delete,t.oneofs)&&(n.pattern=\"delete\"),null!=e.patch&&e.hasOwnProperty(\"patch\")&&(n.patch=e.patch,t.oneofs)&&(n.pattern=\"patch\"),null!=e.body&&e.hasOwnProperty(\"body\")&&(n.body=e.body),null!=e.custom&&e.hasOwnProperty(\"custom\")&&(n.custom=c.google.api.CustomHttpPattern.toObject(e.custom,t),t.oneofs)&&(n.pattern=\"custom\"),e.additionalBindings&&e.additionalBindings.length){n.additionalBindings=[];for(var o=0;o<e.additionalBindings.length;++o)n.additionalBindings[o]=c.google.api.HttpRule.toObject(e.additionalBindings[o],t)}return null!=e.responseBody&&e.hasOwnProperty(\"responseBody\")&&(n.responseBody=e.responseBody),n},d.prototype.toJSON=function(){return this.constructor.toObject(this,o.util.toJSONOptions)},d),e.CustomHttpPattern=(g.prototype.kind=\"\",g.prototype.path=\"\",g.create=function(e){return new g(e)},g.encode=function(e,t){return t=t||r.create(),null!=e.kind&&Object.hasOwnProperty.call(e,\"kind\")&&t.uint32(10).string(e.kind),null!=e.path&&Object.hasOwnProperty.call(e,\"path\")&&t.uint32(18).string(e.path),t},g.encodeDelimited=function(e,t){return this.encode(e,t).ldelim()},g.decode=function(e,t){e instanceof s||(e=s.create(e));for(var n=void 0===t?e.len:e.pos+t,o=new c.google.api.CustomHttpPattern;e.pos<n;){var r=e.uint32();switch(r>>>3){case 1:o.kind=e.string();break;case 2:o.path=e.string();break;default:e.skipType(7&r)}}return o},g.decodeDelimited=function(e){return e instanceof s||(e=new s(e)),this.decode(e,e.uint32())},g.verify=function(e){return\"object\"!=typeof e||null===e?\"object expected\":null!=e.kind&&e.hasOwnProperty(\"kind\")&&!u.isString(e.kind)?\"kind: string expected\":null!=e.path&&e.hasOwnProperty(\"path\")&&!u.isString(e.path)?\"path: string expected\":null},g.fromObject=function(e){var t;return e instanceof c.google.api.CustomHttpPattern?e:(t=new c.google.api.CustomHttpPattern,null!=e.kind&&(t.kind=String(e.kind)),null!=e.path&&(t.path=String(e.path)),t)},g.toObject=function(e,t){var n={};return(t=t||{}).defaults&&(n.kind=\"\",n.path=\"\"),null!=e.kind&&e.hasOwnProperty(\"kind\")&&(n.kind=e.kind),null!=e.path&&e.hasOwnProperty(\"path\")&&(n.path=e.path),n},g.prototype.toJSON=function(){return this.constructor.toObject(this,o.util.toJSONOptions)},g),e),F.protobuf=((n={}).FileDescriptorSet=(B.prototype.file=u.emptyArray,B.create=function(e){return new B(e)},B.encode=function(e,t){if(t=t||r.create(),null!=e.file&&e.file.length)for(var n=0;n<e.file.length;++n)c.google.protobuf.FileDescriptorProto.encode(e.file[n],t.uint32(10).fork()).ldelim();return t},B.encodeDelimited=function(e,t){return this.encode(e,t).ldelim()},B.decode=function(e,t){e instanceof s||(e=s.create(e));for(var n=void 0===t?e.len:e.pos+t,o=new c.google.protobuf.FileDescriptorSet;e.pos<n;){var r=e.uint32();r>>>3==1?(o.file&&o.file.length||(o.file=[]),o.file.push(c.google.protobuf.FileDescriptorProto.decode(e,e.uint32()))):e.skipType(7&r)}return o},B.decodeDelimited=function(e){return e instanceof s||(e=new s(e)),this.decode(e,e.uint32())},B.verify=function(e){if(\"object\"!=typeof e||null===e)return\"object expected\";if(null!=e.file&&e.hasOwnProperty(\"file\")){if(!Array.isArray(e.file))return\"file: array expected\";for(var t=0;t<e.file.length;++t){var n=c.google.protobuf.FileDescriptorProto.verify(e.file[t]);if(n)return\"file.\"+n}}return null},B.fromObject=function(e){if(e instanceof c.google.protobuf.FileDescriptorSet)return e;var t=new c.google.protobuf.FileDescriptorSet;if(e.file){if(!Array.isArray(e.file))throw TypeError(\".google.protobuf.FileDescriptorSet.file: array expected\");t.file=[];for(var n=0;n<e.file.length;++n){if(\"object\"!=typeof e.file[n])throw TypeError(\".google.protobuf.FileDescriptorSet.file: object expected\");t.file[n]=c.google.protobuf.FileDescriptorProto.fromObject(e.file[n])}}return t},B.toObject=function(e,t){var n={};if(((t=t||{}).arrays||t.defaults)&&(n.file=[]),e.file&&e.file.length){n.file=[];for(var o=0;o<e.file.length;++o)n.file[o]=c.google.protobuf.FileDescriptorProto.toObject(e.file[o],t)}return n},B.prototype.toJSON=function(){return this.constructor.toObject(this,o.util.toJSONOptions)},B),n.FileDescriptorProto=(f.prototype.name=\"\",f.prototype.package=\"\",f.prototype.dependency=u.emptyArray,f.prototype.publicDependency=u.emptyArray,f.prototype.weakDependency=u.emptyArray,f.prototype.messageType=u.emptyArray,f.prototype.enumType=u.emptyArray,f.prototype.service=u.emptyArray,f.prototype.extension=u.emptyArray,f.prototype.options=null,f.prototype.sourceCodeInfo=null,f.prototype.syntax=\"\",f.create=function(e){return new f(e)},f.encode=function(e,t){if(t=t||r.create(),null!=e.name&&Object.hasOwnProperty.call(e,\"name\")&&t.uint32(10).string(e.name),null!=e.package&&Object.hasOwnProperty.call(e,\"package\")&&t.uint32(18).string(e.package),null!=e.dependency&&e.dependency.length)for(var n=0;n<e.dependency.length;++n)t.uint32(26).string(e.dependency[n]);if(null!=e.messageType&&e.messageType.length)for(n=0;n<e.messageType.length;++n)c.google.protobuf.DescriptorProto.encode(e.messageType[n],t.uint32(34).fork()).ldelim();if(null!=e.enumType&&e.enumType.length)for(n=0;n<e.enumType.length;++n)c.google.protobuf.EnumDescriptorProto.encode(e.enumType[n],t.uint32(42).fork()).ldelim();if(null!=e.service&&e.service.length)for(n=0;n<e.service.length;++n)c.google.protobuf.ServiceDescriptorProto.encode(e.service[n],t.uint32(50).fork()).ldelim();if(null!=e.extension&&e.extension.length)for(n=0;n<e.extension.length;++n)c.google.protobuf.FieldDescriptorProto.encode(e.extension[n],t.uint32(58).fork()).ldelim();if(null!=e.options&&Object.hasOwnProperty.call(e,\"options\")&&c.google.protobuf.FileOptions.encode(e.options,t.uint32(66).fork()).ldelim(),null!=e.sourceCodeInfo&&Object.hasOwnProperty.call(e,\"sourceCodeInfo\")&&c.google.protobuf.SourceCodeInfo.encode(e.sourceCodeInfo,t.uint32(74).fork()).ldelim(),null!=e.publicDependency&&e.publicDependency.length)for(n=0;n<e.publicDependency.length;++n)t.uint32(80).int32(e.publicDependency[n]);if(null!=e.weakDependency&&e.weakDependency.length)for(n=0;n<e.weakDependency.length;++n)t.uint32(88).int32(e.weakDependency[n]);return null!=e.syntax&&Object.hasOwnProperty.call(e,\"syntax\")&&t.uint32(98).string(e.syntax),t},f.encodeDelimited=function(e,t){return this.encode(e,t).ldelim()},f.decode=function(e,t){e instanceof s||(e=s.create(e));for(var n=void 0===t?e.len:e.pos+t,o=new c.google.protobuf.FileDescriptorProto;e.pos<n;){var r=e.uint32();switch(r>>>3){case 1:o.name=e.string();break;case 2:o.package=e.string();break;case 3:o.dependency&&o.dependency.length||(o.dependency=[]),o.dependency.push(e.string());break;case 10:if(o.publicDependency&&o.publicDependency.length||(o.publicDependency=[]),2==(7&r))for(var i=e.uint32()+e.pos;e.pos<i;)o.publicDependency.push(e.int32());else o.publicDependency.push(e.int32());break;case 11:if(o.weakDependency&&o.weakDependency.length||(o.weakDependency=[]),2==(7&r))for(i=e.uint32()+e.pos;e.pos<i;)o.weakDependency.push(e.int32());else o.weakDependency.push(e.int32());break;case 4:o.messageType&&o.messageType.length||(o.messageType=[]),o.messageType.push(c.google.protobuf.DescriptorProto.decode(e,e.uint32()));break;case 5:o.enumType&&o.enumType.length||(o.enumType=[]),o.enumType.push(c.google.protobuf.EnumDescriptorProto.decode(e,e.uint32()));break;case 6:o.service&&o.service.length||(o.service=[]),o.service.push(c.google.protobuf.ServiceDescriptorProto.decode(e,e.uint32()));break;case 7:o.extension&&o.extension.length||(o.extension=[]),o.extension.push(c.google.protobuf.FieldDescriptorProto.decode(e,e.uint32()));break;case 8:o.options=c.google.protobuf.FileOptions.decode(e,e.uint32());break;case 9:o.sourceCodeInfo=c.google.protobuf.SourceCodeInfo.decode(e,e.uint32());break;case 12:o.syntax=e.string();break;default:e.skipType(7&r)}}return o},f.decodeDelimited=function(e){return e instanceof s||(e=new s(e)),this.decode(e,e.uint32())},f.verify=function(e){if(\"object\"!=typeof e||null===e)return\"object expected\";if(null!=e.name&&e.hasOwnProperty(\"name\")&&!u.isString(e.name))return\"name: string expected\";if(null!=e.package&&e.hasOwnProperty(\"package\")&&!u.isString(e.package))return\"package: string expected\";if(null!=e.dependency&&e.hasOwnProperty(\"dependency\")){if(!Array.isArray(e.dependency))return\"dependency: array expected\";for(var t=0;t<e.dependency.length;++t)if(!u.isString(e.dependency[t]))return\"dependency: string[] expected\"}if(null!=e.publicDependency&&e.hasOwnProperty(\"publicDependency\")){if(!Array.isArray(e.publicDependency))return\"publicDependency: array expected\";for(t=0;t<e.publicDependency.length;++t)if(!u.isInteger(e.publicDependency[t]))return\"publicDependency: integer[] expected\"}if(null!=e.weakDependency&&e.hasOwnProperty(\"weakDependency\")){if(!Array.isArray(e.weakDependency))return\"weakDependency: array expected\";for(t=0;t<e.weakDependency.length;++t)if(!u.isInteger(e.weakDependency[t]))return\"weakDependency: integer[] expected\"}if(null!=e.messageType&&e.hasOwnProperty(\"messageType\")){if(!Array.isArray(e.messageType))return\"messageType: array expected\";for(t=0;t<e.messageType.length;++t)if(n=c.google.protobuf.DescriptorProto.verify(e.messageType[t]))return\"messageType.\"+n}if(null!=e.enumType&&e.hasOwnProperty(\"enumType\")){if(!Array.isArray(e.enumType))return\"enumType: array expected\";for(t=0;t<e.enumType.length;++t)if(n=c.google.protobuf.EnumDescriptorProto.verify(e.enumType[t]))return\"enumType.\"+n}if(null!=e.service&&e.hasOwnProperty(\"service\")){if(!Array.isArray(e.service))return\"service: array expected\";for(t=0;t<e.service.length;++t)if(n=c.google.protobuf.ServiceDescriptorProto.verify(e.service[t]))return\"service.\"+n}if(null!=e.extension&&e.hasOwnProperty(\"extension\")){if(!Array.isArray(e.extension))return\"extension: array expected\";for(t=0;t<e.extension.length;++t)if(n=c.google.protobuf.FieldDescriptorProto.verify(e.extension[t]))return\"extension.\"+n}var n;if(null!=e.options&&e.hasOwnProperty(\"options\")&&(n=c.google.protobuf.FileOptions.verify(e.options)))return\"options.\"+n;if(null!=e.sourceCodeInfo&&e.hasOwnProperty(\"sourceCodeInfo\")&&(n=c.google.protobuf.SourceCodeInfo.verify(e.sourceCodeInfo)))return\"sourceCodeInfo.\"+n;return null!=e.syntax&&e.hasOwnProperty(\"syntax\")&&!u.isString(e.syntax)?\"syntax: string expected\":null},f.fromObject=function(e){if(e instanceof c.google.protobuf.FileDescriptorProto)return e;var t=new c.google.protobuf.FileDescriptorProto;if(null!=e.name&&(t.name=String(e.name)),null!=e.package&&(t.package=String(e.package)),e.dependency){if(!Array.isArray(e.dependency))throw TypeError(\".google.protobuf.FileDescriptorProto.dependency: array expected\");t.dependency=[];for(var n=0;n<e.dependency.length;++n)t.dependency[n]=String(e.dependency[n])}if(e.publicDependency){if(!Array.isArray(e.publicDependency))throw TypeError(\".google.protobuf.FileDescriptorProto.publicDependency: array expected\");t.publicDependency=[];for(n=0;n<e.publicDependency.length;++n)t.publicDependency[n]=0|e.publicDependency[n]}if(e.weakDependency){if(!Array.isArray(e.weakDependency))throw TypeError(\".google.protobuf.FileDescriptorProto.weakDependency: array expected\");t.weakDependency=[];for(n=0;n<e.weakDependency.length;++n)t.weakDependency[n]=0|e.weakDependency[n]}if(e.messageType){if(!Array.isArray(e.messageType))throw TypeError(\".google.protobuf.FileDescriptorProto.messageType: array expected\");t.messageType=[];for(n=0;n<e.messageType.length;++n){if(\"object\"!=typeof e.messageType[n])throw TypeError(\".google.protobuf.FileDescriptorProto.messageType: object expected\");t.messageType[n]=c.google.protobuf.DescriptorProto.fromObject(e.messageType[n])}}if(e.enumType){if(!Array.isArray(e.enumType))throw TypeError(\".google.protobuf.FileDescriptorProto.enumType: array expected\");t.enumType=[];for(n=0;n<e.enumType.length;++n){if(\"object\"!=typeof e.enumType[n])throw TypeError(\".google.protobuf.FileDescriptorProto.enumType: object expected\");t.enumType[n]=c.google.protobuf.EnumDescriptorProto.fromObject(e.enumType[n])}}if(e.service){if(!Array.isArray(e.service))throw TypeError(\".google.protobuf.FileDescriptorProto.service: array expected\");t.service=[];for(n=0;n<e.service.length;++n){if(\"object\"!=typeof e.service[n])throw TypeError(\".google.protobuf.FileDescriptorProto.service: object expected\");t.service[n]=c.google.protobuf.ServiceDescriptorProto.fromObject(e.service[n])}}if(e.extension){if(!Array.isArray(e.extension))throw TypeError(\".google.protobuf.FileDescriptorProto.extension: array expected\");t.extension=[];for(n=0;n<e.extension.length;++n){if(\"object\"!=typeof e.extension[n])throw TypeError(\".google.protobuf.FileDescriptorProto.extension: object expected\");t.extension[n]=c.google.protobuf.FieldDescriptorProto.fromObject(e.extension[n])}}if(null!=e.options){if(\"object\"!=typeof e.options)throw TypeError(\".google.protobuf.FileDescriptorProto.options: object expected\");t.options=c.google.protobuf.FileOptions.fromObject(e.options)}if(null!=e.sourceCodeInfo){if(\"object\"!=typeof e.sourceCodeInfo)throw TypeError(\".google.protobuf.FileDescriptorProto.sourceCodeInfo: object expected\");t.sourceCodeInfo=c.google.protobuf.SourceCodeInfo.fromObject(e.sourceCodeInfo)}return null!=e.syntax&&(t.syntax=String(e.syntax)),t},f.toObject=function(e,t){var n={};if(((t=t||{}).arrays||t.defaults)&&(n.dependency=[],n.messageType=[],n.enumType=[],n.service=[],n.extension=[],n.publicDependency=[],n.weakDependency=[]),t.defaults&&(n.name=\"\",n.package=\"\",n.options=null,n.sourceCodeInfo=null,n.syntax=\"\"),null!=e.name&&e.hasOwnProperty(\"name\")&&(n.name=e.name),null!=e.package&&e.hasOwnProperty(\"package\")&&(n.package=e.package),e.dependency&&e.dependency.length){n.dependency=[];for(var o=0;o<e.dependency.length;++o)n.dependency[o]=e.dependency[o]}if(e.messageType&&e.messageType.length){n.messageType=[];for(o=0;o<e.messageType.length;++o)n.messageType[o]=c.google.protobuf.DescriptorProto.toObject(e.messageType[o],t)}if(e.enumType&&e.enumType.length){n.enumType=[];for(o=0;o<e.enumType.length;++o)n.enumType[o]=c.google.protobuf.EnumDescriptorProto.toObject(e.enumType[o],t)}if(e.service&&e.service.length){n.service=[];for(o=0;o<e.service.length;++o)n.service[o]=c.google.protobuf.ServiceDescriptorProto.toObject(e.service[o],t)}if(e.extension&&e.extension.length){n.extension=[];for(o=0;o<e.extension.length;++o)n.extension[o]=c.google.protobuf.FieldDescriptorProto.toObject(e.extension[o],t)}if(null!=e.options&&e.hasOwnProperty(\"options\")&&(n.options=c.google.protobuf.FileOptions.toObject(e.options,t)),null!=e.sourceCodeInfo&&e.hasOwnProperty(\"sourceCodeInfo\")&&(n.sourceCodeInfo=c.google.protobuf.SourceCodeInfo.toObject(e.sourceCodeInfo,t)),e.publicDependency&&e.publicDependency.length){n.publicDependency=[];for(o=0;o<e.publicDependency.length;++o)n.publicDependency[o]=e.publicDependency[o]}if(e.weakDependency&&e.weakDependency.length){n.weakDependency=[];for(o=0;o<e.weakDependency.length;++o)n.weakDependency[o]=e.weakDependency[o]}return null!=e.syntax&&e.hasOwnProperty(\"syntax\")&&(n.syntax=e.syntax),n},f.prototype.toJSON=function(){return this.constructor.toObject(this,o.util.toJSONOptions)},f),n.DescriptorProto=(y.prototype.name=\"\",y.prototype.field=u.emptyArray,y.prototype.extension=u.emptyArray,y.prototype.nestedType=u.emptyArray,y.prototype.enumType=u.emptyArray,y.prototype.extensionRange=u.emptyArray,y.prototype.oneofDecl=u.emptyArray,y.prototype.options=null,y.prototype.reservedRange=u.emptyArray,y.prototype.reservedName=u.emptyArray,y.create=function(e){return new y(e)},y.encode=function(e,t){if(t=t||r.create(),null!=e.name&&Object.hasOwnProperty.call(e,\"name\")&&t.uint32(10).string(e.name),null!=e.field&&e.field.length)for(var n=0;n<e.field.length;++n)c.google.protobuf.FieldDescriptorProto.encode(e.field[n],t.uint32(18).fork()).ldelim();if(null!=e.nestedType&&e.nestedType.length)for(n=0;n<e.nestedType.length;++n)c.google.protobuf.DescriptorProto.encode(e.nestedType[n],t.uint32(26).fork()).ldelim();if(null!=e.enumType&&e.enumType.length)for(n=0;n<e.enumType.length;++n)c.google.protobuf.EnumDescriptorProto.encode(e.enumType[n],t.uint32(34).fork()).ldelim();if(null!=e.extensionRange&&e.extensionRange.length)for(n=0;n<e.extensionRange.length;++n)c.google.protobuf.DescriptorProto.ExtensionRange.encode(e.extensionRange[n],t.uint32(42).fork()).ldelim();if(null!=e.extension&&e.extension.length)for(n=0;n<e.extension.length;++n)c.google.protobuf.FieldDescriptorProto.encode(e.extension[n],t.uint32(50).fork()).ldelim();if(null!=e.options&&Object.hasOwnProperty.call(e,\"options\")&&c.google.protobuf.MessageOptions.encode(e.options,t.uint32(58).fork()).ldelim(),null!=e.oneofDecl&&e.oneofDecl.length)for(n=0;n<e.oneofDecl.length;++n)c.google.protobuf.OneofDescriptorProto.encode(e.oneofDecl[n],t.uint32(66).fork()).ldelim();if(null!=e.reservedRange&&e.reservedRange.length)for(n=0;n<e.reservedRange.length;++n)c.google.protobuf.DescriptorProto.ReservedRange.encode(e.reservedRange[n],t.uint32(74).fork()).ldelim();if(null!=e.reservedName&&e.reservedName.length)for(n=0;n<e.reservedName.length;++n)t.uint32(82).string(e.reservedName[n]);return t},y.encodeDelimited=function(e,t){return this.encode(e,t).ldelim()},y.decode=function(e,t){e instanceof s||(e=s.create(e));for(var n=void 0===t?e.len:e.pos+t,o=new c.google.protobuf.DescriptorProto;e.pos<n;){var r=e.uint32();switch(r>>>3){case 1:o.name=e.string();break;case 2:o.field&&o.field.length||(o.field=[]),o.field.push(c.google.protobuf.FieldDescriptorProto.decode(e,e.uint32()));break;case 6:o.extension&&o.extension.length||(o.extension=[]),o.extension.push(c.google.protobuf.FieldDescriptorProto.decode(e,e.uint32()));break;case 3:o.nestedType&&o.nestedType.length||(o.nestedType=[]),o.nestedType.push(c.google.protobuf.DescriptorProto.decode(e,e.uint32()));break;case 4:o.enumType&&o.enumType.length||(o.enumType=[]),o.enumType.push(c.google.protobuf.EnumDescriptorProto.decode(e,e.uint32()));break;case 5:o.extensionRange&&o.extensionRange.length||(o.extensionRange=[]),o.extensionRange.push(c.google.protobuf.DescriptorProto.ExtensionRange.decode(e,e.uint32()));break;case 8:o.oneofDecl&&o.oneofDecl.length||(o.oneofDecl=[]),o.oneofDecl.push(c.google.protobuf.OneofDescriptorProto.decode(e,e.uint32()));break;case 7:o.options=c.google.protobuf.MessageOptions.decode(e,e.uint32());break;case 9:o.reservedRange&&o.reservedRange.length||(o.reservedRange=[]),o.reservedRange.push(c.google.protobuf.DescriptorProto.ReservedRange.decode(e,e.uint32()));break;case 10:o.reservedName&&o.reservedName.length||(o.reservedName=[]),o.reservedName.push(e.string());break;default:e.skipType(7&r)}}return o},y.decodeDelimited=function(e){return e instanceof s||(e=new s(e)),this.decode(e,e.uint32())},y.verify=function(e){if(\"object\"!=typeof e||null===e)return\"object expected\";if(null!=e.name&&e.hasOwnProperty(\"name\")&&!u.isString(e.name))return\"name: string expected\";if(null!=e.field&&e.hasOwnProperty(\"field\")){if(!Array.isArray(e.field))return\"field: array expected\";for(var t=0;t<e.field.length;++t)if(n=c.google.protobuf.FieldDescriptorProto.verify(e.field[t]))return\"field.\"+n}if(null!=e.extension&&e.hasOwnProperty(\"extension\")){if(!Array.isArray(e.extension))return\"extension: array expected\";for(t=0;t<e.extension.length;++t)if(n=c.google.protobuf.FieldDescriptorProto.verify(e.extension[t]))return\"extension.\"+n}if(null!=e.nestedType&&e.hasOwnProperty(\"nestedType\")){if(!Array.isArray(e.nestedType))return\"nestedType: array expected\";for(t=0;t<e.nestedType.length;++t)if(n=c.google.protobuf.DescriptorProto.verify(e.nestedType[t]))return\"nestedType.\"+n}if(null!=e.enumType&&e.hasOwnProperty(\"enumType\")){if(!Array.isArray(e.enumType))return\"enumType: array expected\";for(t=0;t<e.enumType.length;++t)if(n=c.google.protobuf.EnumDescriptorProto.verify(e.enumType[t]))return\"enumType.\"+n}if(null!=e.extensionRange&&e.hasOwnProperty(\"extensionRange\")){if(!Array.isArray(e.extensionRange))return\"extensionRange: array expected\";for(t=0;t<e.extensionRange.length;++t)if(n=c.google.protobuf.DescriptorProto.ExtensionRange.verify(e.extensionRange[t]))return\"extensionRange.\"+n}if(null!=e.oneofDecl&&e.hasOwnProperty(\"oneofDecl\")){if(!Array.isArray(e.oneofDecl))return\"oneofDecl: array expected\";for(t=0;t<e.oneofDecl.length;++t)if(n=c.google.protobuf.OneofDescriptorProto.verify(e.oneofDecl[t]))return\"oneofDecl.\"+n}if(null!=e.options&&e.hasOwnProperty(\"options\")&&(n=c.google.protobuf.MessageOptions.verify(e.options)))return\"options.\"+n;if(null!=e.reservedRange&&e.hasOwnProperty(\"reservedRange\")){if(!Array.isArray(e.reservedRange))return\"reservedRange: array expected\";for(var n,t=0;t<e.reservedRange.length;++t)if(n=c.google.protobuf.DescriptorProto.ReservedRange.verify(e.reservedRange[t]))return\"reservedRange.\"+n}if(null!=e.reservedName&&e.hasOwnProperty(\"reservedName\")){if(!Array.isArray(e.reservedName))return\"reservedName: array expected\";for(t=0;t<e.reservedName.length;++t)if(!u.isString(e.reservedName[t]))return\"reservedName: string[] expected\"}return null},y.fromObject=function(e){if(e instanceof c.google.protobuf.DescriptorProto)return e;var t=new c.google.protobuf.DescriptorProto;if(null!=e.name&&(t.name=String(e.name)),e.field){if(!Array.isArray(e.field))throw TypeError(\".google.protobuf.DescriptorProto.field: array expected\");t.field=[];for(var n=0;n<e.field.length;++n){if(\"object\"!=typeof e.field[n])throw TypeError(\".google.protobuf.DescriptorProto.field: object expected\");t.field[n]=c.google.protobuf.FieldDescriptorProto.fromObject(e.field[n])}}if(e.extension){if(!Array.isArray(e.extension))throw TypeError(\".google.protobuf.DescriptorProto.extension: array expected\");t.extension=[];for(n=0;n<e.extension.length;++n){if(\"object\"!=typeof e.extension[n])throw TypeError(\".google.protobuf.DescriptorProto.extension: object expected\");t.extension[n]=c.google.protobuf.FieldDescriptorProto.fromObject(e.extension[n])}}if(e.nestedType){if(!Array.isArray(e.nestedType))throw TypeError(\".google.protobuf.DescriptorProto.nestedType: array expected\");t.nestedType=[];for(n=0;n<e.nestedType.length;++n){if(\"object\"!=typeof e.nestedType[n])throw TypeError(\".google.protobuf.DescriptorProto.nestedType: object expected\");t.nestedType[n]=c.google.protobuf.DescriptorProto.fromObject(e.nestedType[n])}}if(e.enumType){if(!Array.isArray(e.enumType))throw TypeError(\".google.protobuf.DescriptorProto.enumType: array expected\");t.enumType=[];for(n=0;n<e.enumType.length;++n){if(\"object\"!=typeof e.enumType[n])throw TypeError(\".google.protobuf.DescriptorProto.enumType: object expected\");t.enumType[n]=c.google.protobuf.EnumDescriptorProto.fromObject(e.enumType[n])}}if(e.extensionRange){if(!Array.isArray(e.extensionRange))throw TypeError(\".google.protobuf.DescriptorProto.extensionRange: array expected\");t.extensionRange=[];for(n=0;n<e.extensionRange.length;++n){if(\"object\"!=typeof e.extensionRange[n])throw TypeError(\".google.protobuf.DescriptorProto.extensionRange: object expected\");t.extensionRange[n]=c.google.protobuf.DescriptorProto.ExtensionRange.fromObject(e.extensionRange[n])}}if(e.oneofDecl){if(!Array.isArray(e.oneofDecl))throw TypeError(\".google.protobuf.DescriptorProto.oneofDecl: array expected\");t.oneofDecl=[];for(n=0;n<e.oneofDecl.length;++n){if(\"object\"!=typeof e.oneofDecl[n])throw TypeError(\".google.protobuf.DescriptorProto.oneofDecl: object expected\");t.oneofDecl[n]=c.google.protobuf.OneofDescriptorProto.fromObject(e.oneofDecl[n])}}if(null!=e.options){if(\"object\"!=typeof e.options)throw TypeError(\".google.protobuf.DescriptorProto.options: object expected\");t.options=c.google.protobuf.MessageOptions.fromObject(e.options)}if(e.reservedRange){if(!Array.isArray(e.reservedRange))throw TypeError(\".google.protobuf.DescriptorProto.reservedRange: array expected\");t.reservedRange=[];for(n=0;n<e.reservedRange.length;++n){if(\"object\"!=typeof e.reservedRange[n])throw TypeError(\".google.protobuf.DescriptorProto.reservedRange: object expected\");t.reservedRange[n]=c.google.protobuf.DescriptorProto.ReservedRange.fromObject(e.reservedRange[n])}}if(e.reservedName){if(!Array.isArray(e.reservedName))throw TypeError(\".google.protobuf.DescriptorProto.reservedName: array expected\");t.reservedName=[];for(n=0;n<e.reservedName.length;++n)t.reservedName[n]=String(e.reservedName[n])}return t},y.toObject=function(e,t){var n={};if(((t=t||{}).arrays||t.defaults)&&(n.field=[],n.nestedType=[],n.enumType=[],n.extensionRange=[],n.extension=[],n.oneofDecl=[],n.reservedRange=[],n.reservedName=[]),t.defaults&&(n.name=\"\",n.options=null),null!=e.name&&e.hasOwnProperty(\"name\")&&(n.name=e.name),e.field&&e.field.length){n.field=[];for(var o=0;o<e.field.length;++o)n.field[o]=c.google.protobuf.FieldDescriptorProto.toObject(e.field[o],t)}if(e.nestedType&&e.nestedType.length){n.nestedType=[];for(o=0;o<e.nestedType.length;++o)n.nestedType[o]=c.google.protobuf.DescriptorProto.toObject(e.nestedType[o],t)}if(e.enumType&&e.enumType.length){n.enumType=[];for(o=0;o<e.enumType.length;++o)n.enumType[o]=c.google.protobuf.EnumDescriptorProto.toObject(e.enumType[o],t)}if(e.extensionRange&&e.extensionRange.length){n.extensionRange=[];for(o=0;o<e.extensionRange.length;++o)n.extensionRange[o]=c.google.protobuf.DescriptorProto.ExtensionRange.toObject(e.extensionRange[o],t)}if(e.extension&&e.extension.length){n.extension=[];for(o=0;o<e.extension.length;++o)n.extension[o]=c.google.protobuf.FieldDescriptorProto.toObject(e.extension[o],t)}if(null!=e.options&&e.hasOwnProperty(\"options\")&&(n.options=c.google.protobuf.MessageOptions.toObject(e.options,t)),e.oneofDecl&&e.oneofDecl.length){n.oneofDecl=[];for(o=0;o<e.oneofDecl.length;++o)n.oneofDecl[o]=c.google.protobuf.OneofDescriptorProto.toObject(e.oneofDecl[o],t)}if(e.reservedRange&&e.reservedRange.length){n.reservedRange=[];for(o=0;o<e.reservedRange.length;++o)n.reservedRange[o]=c.google.protobuf.DescriptorProto.ReservedRange.toObject(e.reservedRange[o],t)}if(e.reservedName&&e.reservedName.length){n.reservedName=[];for(o=0;o<e.reservedName.length;++o)n.reservedName[o]=e.reservedName[o]}return n},y.prototype.toJSON=function(){return this.constructor.toObject(this,o.util.toJSONOptions)},y.ExtensionRange=(h.prototype.start=0,h.prototype.end=0,h.prototype.options=null,h.create=function(e){return new h(e)},h.encode=function(e,t){return t=t||r.create(),null!=e.start&&Object.hasOwnProperty.call(e,\"start\")&&t.uint32(8).int32(e.start),null!=e.end&&Object.hasOwnProperty.call(e,\"end\")&&t.uint32(16).int32(e.end),null!=e.options&&Object.hasOwnProperty.call(e,\"options\")&&c.google.protobuf.ExtensionRangeOptions.encode(e.options,t.uint32(26).fork()).ldelim(),t},h.encodeDelimited=function(e,t){return this.encode(e,t).ldelim()},h.decode=function(e,t){e instanceof s||(e=s.create(e));for(var n=void 0===t?e.len:e.pos+t,o=new c.google.protobuf.DescriptorProto.ExtensionRange;e.pos<n;){var r=e.uint32();switch(r>>>3){case 1:o.start=e.int32();break;case 2:o.end=e.int32();break;case 3:o.options=c.google.protobuf.ExtensionRangeOptions.decode(e,e.uint32());break;default:e.skipType(7&r)}}return o},h.decodeDelimited=function(e){return e instanceof s||(e=new s(e)),this.decode(e,e.uint32())},h.verify=function(e){if(\"object\"!=typeof e||null===e)return\"object expected\";if(null!=e.start&&e.hasOwnProperty(\"start\")&&!u.isInteger(e.start))return\"start: integer expected\";if(null!=e.end&&e.hasOwnProperty(\"end\")&&!u.isInteger(e.end))return\"end: integer expected\";if(null!=e.options&&e.hasOwnProperty(\"options\")){e=c.google.protobuf.ExtensionRangeOptions.verify(e.options);if(e)return\"options.\"+e}return null},h.fromObject=function(e){if(e instanceof c.google.protobuf.DescriptorProto.ExtensionRange)return e;var t=new c.google.protobuf.DescriptorProto.ExtensionRange;if(null!=e.start&&(t.start=0|e.start),null!=e.end&&(t.end=0|e.end),null!=e.options){if(\"object\"!=typeof e.options)throw TypeError(\".google.protobuf.DescriptorProto.ExtensionRange.options: object expected\");t.options=c.google.protobuf.ExtensionRangeOptions.fromObject(e.options)}return t},h.toObject=function(e,t){var n={};return(t=t||{}).defaults&&(n.start=0,n.end=0,n.options=null),null!=e.start&&e.hasOwnProperty(\"start\")&&(n.start=e.start),null!=e.end&&e.hasOwnProperty(\"end\")&&(n.end=e.end),null!=e.options&&e.hasOwnProperty(\"options\")&&(n.options=c.google.protobuf.ExtensionRangeOptions.toObject(e.options,t)),n},h.prototype.toJSON=function(){return this.constructor.toObject(this,o.util.toJSONOptions)},h),y.ReservedRange=(b.prototype.start=0,b.prototype.end=0,b.create=function(e){return new b(e)},b.encode=function(e,t){return t=t||r.create(),null!=e.start&&Object.hasOwnProperty.call(e,\"start\")&&t.uint32(8).int32(e.start),null!=e.end&&Object.hasOwnProperty.call(e,\"end\")&&t.uint32(16).int32(e.end),t},b.encodeDelimited=function(e,t){return this.encode(e,t).ldelim()},b.decode=function(e,t){e instanceof s||(e=s.create(e));for(var n=void 0===t?e.len:e.pos+t,o=new c.google.protobuf.DescriptorProto.ReservedRange;e.pos<n;){var r=e.uint32();switch(r>>>3){case 1:o.start=e.int32();break;case 2:o.end=e.int32();break;default:e.skipType(7&r)}}return o},b.decodeDelimited=function(e){return e instanceof s||(e=new s(e)),this.decode(e,e.uint32())},b.verify=function(e){return\"object\"!=typeof e||null===e?\"object expected\":null!=e.start&&e.hasOwnProperty(\"start\")&&!u.isInteger(e.start)?\"start: integer expected\":null!=e.end&&e.hasOwnProperty(\"end\")&&!u.isInteger(e.end)?\"end: integer expected\":null},b.fromObject=function(e){var t;return e instanceof c.google.protobuf.DescriptorProto.ReservedRange?e:(t=new c.google.protobuf.DescriptorProto.ReservedRange,null!=e.start&&(t.start=0|e.start),null!=e.end&&(t.end=0|e.end),t)},b.toObject=function(e,t){var n={};return(t=t||{}).defaults&&(n.start=0,n.end=0),null!=e.start&&e.hasOwnProperty(\"start\")&&(n.start=e.start),null!=e.end&&e.hasOwnProperty(\"end\")&&(n.end=e.end),n},b.prototype.toJSON=function(){return this.constructor.toObject(this,o.util.toJSONOptions)},b),y),n.ExtensionRangeOptions=(U.prototype.uninterpretedOption=u.emptyArray,U.create=function(e){return new U(e)},U.encode=function(e,t){if(t=t||r.create(),null!=e.uninterpretedOption&&e.uninterpretedOption.length)for(var n=0;n<e.uninterpretedOption.length;++n)c.google.protobuf.UninterpretedOption.encode(e.uninterpretedOption[n],t.uint32(7994).fork()).ldelim();return t},U.encodeDelimited=function(e,t){return this.encode(e,t).ldelim()},U.decode=function(e,t){e instanceof s||(e=s.create(e));for(var n=void 0===t?e.len:e.pos+t,o=new c.google.protobuf.ExtensionRangeOptions;e.pos<n;){var r=e.uint32();r>>>3==999?(o.uninterpretedOption&&o.uninterpretedOption.length||(o.uninterpretedOption=[]),o.uninterpretedOption.push(c.google.protobuf.UninterpretedOption.decode(e,e.uint32()))):e.skipType(7&r)}return o},U.decodeDelimited=function(e){return e instanceof s||(e=new s(e)),this.decode(e,e.uint32())},U.verify=function(e){if(\"object\"!=typeof e||null===e)return\"object expected\";if(null!=e.uninterpretedOption&&e.hasOwnProperty(\"uninterpretedOption\")){if(!Array.isArray(e.uninterpretedOption))return\"uninterpretedOption: array expected\";for(var t=0;t<e.uninterpretedOption.length;++t){var n=c.google.protobuf.UninterpretedOption.verify(e.uninterpretedOption[t]);if(n)return\"uninterpretedOption.\"+n}}return null},U.fromObject=function(e){if(e instanceof c.google.protobuf.ExtensionRangeOptions)return e;var t=new c.google.protobuf.ExtensionRangeOptions;if(e.uninterpretedOption){if(!Array.isArray(e.uninterpretedOption))throw TypeError(\".google.protobuf.ExtensionRangeOptions.uninterpretedOption: array expected\");t.uninterpretedOption=[];for(var n=0;n<e.uninterpretedOption.length;++n){if(\"object\"!=typeof e.uninterpretedOption[n])throw TypeError(\".google.protobuf.ExtensionRangeOptions.uninterpretedOption: object expected\");t.uninterpretedOption[n]=c.google.protobuf.UninterpretedOption.fromObject(e.uninterpretedOption[n])}}return t},U.toObject=function(e,t){var n={};if(((t=t||{}).arrays||t.defaults)&&(n.uninterpretedOption=[]),e.uninterpretedOption&&e.uninterpretedOption.length){n.uninterpretedOption=[];for(var o=0;o<e.uninterpretedOption.length;++o)n.uninterpretedOption[o]=c.google.protobuf.UninterpretedOption.toObject(e.uninterpretedOption[o],t)}return n},U.prototype.toJSON=function(){return this.constructor.toObject(this,o.util.toJSONOptions)},U),n.FieldDescriptorProto=(O.prototype.name=\"\",O.prototype.number=0,O.prototype.label=1,O.prototype.type=1,O.prototype.typeName=\"\",O.prototype.extendee=\"\",O.prototype.defaultValue=\"\",O.prototype.oneofIndex=0,O.prototype.jsonName=\"\",O.prototype.options=null,O.prototype.proto3Optional=!1,O.create=function(e){return new O(e)},O.encode=function(e,t){return t=t||r.create(),null!=e.name&&Object.hasOwnProperty.call(e,\"name\")&&t.uint32(10).string(e.name),null!=e.extendee&&Object.hasOwnProperty.call(e,\"extendee\")&&t.uint32(18).string(e.extendee),null!=e.number&&Object.hasOwnProperty.call(e,\"number\")&&t.uint32(24).int32(e.number),null!=e.label&&Object.hasOwnProperty.call(e,\"label\")&&t.uint32(32).int32(e.label),null!=e.type&&Object.hasOwnProperty.call(e,\"type\")&&t.uint32(40).int32(e.type),null!=e.typeName&&Object.hasOwnProperty.call(e,\"typeName\")&&t.uint32(50).string(e.typeName),null!=e.defaultValue&&Object.hasOwnProperty.call(e,\"defaultValue\")&&t.uint32(58).string(e.defaultValue),null!=e.options&&Object.hasOwnProperty.call(e,\"options\")&&c.google.protobuf.FieldOptions.encode(e.options,t.uint32(66).fork()).ldelim(),null!=e.oneofIndex&&Object.hasOwnProperty.call(e,\"oneofIndex\")&&t.uint32(72).int32(e.oneofIndex),null!=e.jsonName&&Object.hasOwnProperty.call(e,\"jsonName\")&&t.uint32(82).string(e.jsonName),null!=e.proto3Optional&&Object.hasOwnProperty.call(e,\"proto3Optional\")&&t.uint32(136).bool(e.proto3Optional),t},O.encodeDelimited=function(e,t){return this.encode(e,t).ldelim()},O.decode=function(e,t){e instanceof s||(e=s.create(e));for(var n=void 0===t?e.len:e.pos+t,o=new c.google.protobuf.FieldDescriptorProto;e.pos<n;){var r=e.uint32();switch(r>>>3){case 1:o.name=e.string();break;case 3:o.number=e.int32();break;case 4:o.label=e.int32();break;case 5:o.type=e.int32();break;case 6:o.typeName=e.string();break;case 2:o.extendee=e.string();break;case 7:o.defaultValue=e.string();break;case 9:o.oneofIndex=e.int32();break;case 10:o.jsonName=e.string();break;case 8:o.options=c.google.protobuf.FieldOptions.decode(e,e.uint32());break;case 17:o.proto3Optional=e.bool();break;default:e.skipType(7&r)}}return o},O.decodeDelimited=function(e){return e instanceof s||(e=new s(e)),this.decode(e,e.uint32())},O.verify=function(e){if(\"object\"!=typeof e||null===e)return\"object expected\";if(null!=e.name&&e.hasOwnProperty(\"name\")&&!u.isString(e.name))return\"name: string expected\";if(null!=e.number&&e.hasOwnProperty(\"number\")&&!u.isInteger(e.number))return\"number: integer expected\";if(null!=e.label&&e.hasOwnProperty(\"label\"))switch(e.label){default:return\"label: enum value expected\";case 1:case 2:case 3:}if(null!=e.type&&e.hasOwnProperty(\"type\"))switch(e.type){default:return\"type: enum value expected\";case 1:case 2:case 3:case 4:case 5:case 6:case 7:case 8:case 9:case 10:case 11:case 12:case 13:case 14:case 15:case 16:case 17:case 18:}if(null!=e.typeName&&e.hasOwnProperty(\"typeName\")&&!u.isString(e.typeName))return\"typeName: string expected\";if(null!=e.extendee&&e.hasOwnProperty(\"extendee\")&&!u.isString(e.extendee))return\"extendee: string expected\";if(null!=e.defaultValue&&e.hasOwnProperty(\"defaultValue\")&&!u.isString(e.defaultValue))return\"defaultValue: string expected\";if(null!=e.oneofIndex&&e.hasOwnProperty(\"oneofIndex\")&&!u.isInteger(e.oneofIndex))return\"oneofIndex: integer expected\";if(null!=e.jsonName&&e.hasOwnProperty(\"jsonName\")&&!u.isString(e.jsonName))return\"jsonName: string expected\";if(null!=e.options&&e.hasOwnProperty(\"options\")){var t=c.google.protobuf.FieldOptions.verify(e.options);if(t)return\"options.\"+t}return null!=e.proto3Optional&&e.hasOwnProperty(\"proto3Optional\")&&\"boolean\"!=typeof e.proto3Optional?\"proto3Optional: boolean expected\":null},O.fromObject=function(e){if(e instanceof c.google.protobuf.FieldDescriptorProto)return e;var t=new c.google.protobuf.FieldDescriptorProto;switch(null!=e.name&&(t.name=String(e.name)),null!=e.number&&(t.number=0|e.number),e.label){case\"LABEL_OPTIONAL\":case 1:t.label=1;break;case\"LABEL_REQUIRED\":case 2:t.label=2;break;case\"LABEL_REPEATED\":case 3:t.label=3}switch(e.type){case\"TYPE_DOUBLE\":case 1:t.type=1;break;case\"TYPE_FLOAT\":case 2:t.type=2;break;case\"TYPE_INT64\":case 3:t.type=3;break;case\"TYPE_UINT64\":case 4:t.type=4;break;case\"TYPE_INT32\":case 5:t.type=5;break;case\"TYPE_FIXED64\":case 6:t.type=6;break;case\"TYPE_FIXED32\":case 7:t.type=7;break;case\"TYPE_BOOL\":case 8:t.type=8;break;case\"TYPE_STRING\":case 9:t.type=9;break;case\"TYPE_GROUP\":case 10:t.type=10;break;case\"TYPE_MESSAGE\":case 11:t.type=11;break;case\"TYPE_BYTES\":case 12:t.type=12;break;case\"TYPE_UINT32\":case 13:t.type=13;break;case\"TYPE_ENUM\":case 14:t.type=14;break;case\"TYPE_SFIXED32\":case 15:t.type=15;break;case\"TYPE_SFIXED64\":case 16:t.type=16;break;case\"TYPE_SINT32\":case 17:t.type=17;break;case\"TYPE_SINT64\":case 18:t.type=18}if(null!=e.typeName&&(t.typeName=String(e.typeName)),null!=e.extendee&&(t.extendee=String(e.extendee)),null!=e.defaultValue&&(t.defaultValue=String(e.defaultValue)),null!=e.oneofIndex&&(t.oneofIndex=0|e.oneofIndex),null!=e.jsonName&&(t.jsonName=String(e.jsonName)),null!=e.options){if(\"object\"!=typeof e.options)throw TypeError(\".google.protobuf.FieldDescriptorProto.options: object expected\");t.options=c.google.protobuf.FieldOptions.fromObject(e.options)}return null!=e.proto3Optional&&(t.proto3Optional=Boolean(e.proto3Optional)),t},O.toObject=function(e,t){var n={};return(t=t||{}).defaults&&(n.name=\"\",n.extendee=\"\",n.number=0,n.label=t.enums===String?\"LABEL_OPTIONAL\":1,n.type=t.enums===String?\"TYPE_DOUBLE\":1,n.typeName=\"\",n.defaultValue=\"\",n.options=null,n.oneofIndex=0,n.jsonName=\"\",n.proto3Optional=!1),null!=e.name&&e.hasOwnProperty(\"name\")&&(n.name=e.name),null!=e.extendee&&e.hasOwnProperty(\"extendee\")&&(n.extendee=e.extendee),null!=e.number&&e.hasOwnProperty(\"number\")&&(n.number=e.number),null!=e.label&&e.hasOwnProperty(\"label\")&&(n.label=t.enums===String?c.google.protobuf.FieldDescriptorProto.Label[e.label]:e.label),null!=e.type&&e.hasOwnProperty(\"type\")&&(n.type=t.enums===String?c.google.protobuf.FieldDescriptorProto.Type[e.type]:e.type),null!=e.typeName&&e.hasOwnProperty(\"typeName\")&&(n.typeName=e.typeName),null!=e.defaultValue&&e.hasOwnProperty(\"defaultValue\")&&(n.defaultValue=e.defaultValue),null!=e.options&&e.hasOwnProperty(\"options\")&&(n.options=c.google.protobuf.FieldOptions.toObject(e.options,t)),null!=e.oneofIndex&&e.hasOwnProperty(\"oneofIndex\")&&(n.oneofIndex=e.oneofIndex),null!=e.jsonName&&e.hasOwnProperty(\"jsonName\")&&(n.jsonName=e.jsonName),null!=e.proto3Optional&&e.hasOwnProperty(\"proto3Optional\")&&(n.proto3Optional=e.proto3Optional),n},O.prototype.toJSON=function(){return this.constructor.toObject(this,o.util.toJSONOptions)},O.Type=(e={},(t=Object.create(e))[e[1]=\"TYPE_DOUBLE\"]=1,t[e[2]=\"TYPE_FLOAT\"]=2,t[e[3]=\"TYPE_INT64\"]=3,t[e[4]=\"TYPE_UINT64\"]=4,t[e[5]=\"TYPE_INT32\"]=5,t[e[6]=\"TYPE_FIXED64\"]=6,t[e[7]=\"TYPE_FIXED32\"]=7,t[e[8]=\"TYPE_BOOL\"]=8,t[e[9]=\"TYPE_STRING\"]=9,t[e[10]=\"TYPE_GROUP\"]=10,t[e[11]=\"TYPE_MESSAGE\"]=11,t[e[12]=\"TYPE_BYTES\"]=12,t[e[13]=\"TYPE_UINT32\"]=13,t[e[14]=\"TYPE_ENUM\"]=14,t[e[15]=\"TYPE_SFIXED32\"]=15,t[e[16]=\"TYPE_SFIXED64\"]=16,t[e[17]=\"TYPE_SINT32\"]=17,t[e[18]=\"TYPE_SINT64\"]=18,t),O.Label=(e={},(t=Object.create(e))[e[1]=\"LABEL_OPTIONAL\"]=1,t[e[2]=\"LABEL_REQUIRED\"]=2,t[e[3]=\"LABEL_REPEATED\"]=3,t),O),n.OneofDescriptorProto=(m.prototype.name=\"\",m.prototype.options=null,m.create=function(e){return new m(e)},m.encode=function(e,t){return t=t||r.create(),null!=e.name&&Object.hasOwnProperty.call(e,\"name\")&&t.uint32(10).string(e.name),null!=e.options&&Object.hasOwnProperty.call(e,\"options\")&&c.google.protobuf.OneofOptions.encode(e.options,t.uint32(18).fork()).ldelim(),t},m.encodeDelimited=function(e,t){return this.encode(e,t).ldelim()},m.decode=function(e,t){e instanceof s||(e=s.create(e));for(var n=void 0===t?e.len:e.pos+t,o=new c.google.protobuf.OneofDescriptorProto;e.pos<n;){var r=e.uint32();switch(r>>>3){case 1:o.name=e.string();break;case 2:o.options=c.google.protobuf.OneofOptions.decode(e,e.uint32());break;default:e.skipType(7&r)}}return o},m.decodeDelimited=function(e){return e instanceof s||(e=new s(e)),this.decode(e,e.uint32())},m.verify=function(e){if(\"object\"!=typeof e||null===e)return\"object expected\";if(null!=e.name&&e.hasOwnProperty(\"name\")&&!u.isString(e.name))return\"name: string expected\";if(null!=e.options&&e.hasOwnProperty(\"options\")){e=c.google.protobuf.OneofOptions.verify(e.options);if(e)return\"options.\"+e}return null},m.fromObject=function(e){if(e instanceof c.google.protobuf.OneofDescriptorProto)return e;var t=new c.google.protobuf.OneofDescriptorProto;if(null!=e.name&&(t.name=String(e.name)),null!=e.options){if(\"object\"!=typeof e.options)throw TypeError(\".google.protobuf.OneofDescriptorProto.options: object expected\");t.options=c.google.protobuf.OneofOptions.fromObject(e.options)}return t},m.toObject=function(e,t){var n={};return(t=t||{}).defaults&&(n.name=\"\",n.options=null),null!=e.name&&e.hasOwnProperty(\"name\")&&(n.name=e.name),null!=e.options&&e.hasOwnProperty(\"options\")&&(n.options=c.google.protobuf.OneofOptions.toObject(e.options,t)),n},m.prototype.toJSON=function(){return this.constructor.toObject(this,o.util.toJSONOptions)},m),n.EnumDescriptorProto=(v.prototype.name=\"\",v.prototype.value=u.emptyArray,v.prototype.options=null,v.prototype.reservedRange=u.emptyArray,v.prototype.reservedName=u.emptyArray,v.create=function(e){return new v(e)},v.encode=function(e,t){if(t=t||r.create(),null!=e.name&&Object.hasOwnProperty.call(e,\"name\")&&t.uint32(10).string(e.name),null!=e.value&&e.value.length)for(var n=0;n<e.value.length;++n)c.google.protobuf.EnumValueDescriptorProto.encode(e.value[n],t.uint32(18).fork()).ldelim();if(null!=e.options&&Object.hasOwnProperty.call(e,\"options\")&&c.google.protobuf.EnumOptions.encode(e.options,t.uint32(26).fork()).ldelim(),null!=e.reservedRange&&e.reservedRange.length)for(n=0;n<e.reservedRange.length;++n)c.google.protobuf.EnumDescriptorProto.EnumReservedRange.encode(e.reservedRange[n],t.uint32(34).fork()).ldelim();if(null!=e.reservedName&&e.reservedName.length)for(n=0;n<e.reservedName.length;++n)t.uint32(42).string(e.reservedName[n]);return t},v.encodeDelimited=function(e,t){return this.encode(e,t).ldelim()},v.decode=function(e,t){e instanceof s||(e=s.create(e));for(var n=void 0===t?e.len:e.pos+t,o=new c.google.protobuf.EnumDescriptorProto;e.pos<n;){var r=e.uint32();switch(r>>>3){case 1:o.name=e.string();break;case 2:o.value&&o.value.length||(o.value=[]),o.value.push(c.google.protobuf.EnumValueDescriptorProto.decode(e,e.uint32()));break;case 3:o.options=c.google.protobuf.EnumOptions.decode(e,e.uint32());break;case 4:o.reservedRange&&o.reservedRange.length||(o.reservedRange=[]),o.reservedRange.push(c.google.protobuf.EnumDescriptorProto.EnumReservedRange.decode(e,e.uint32()));break;case 5:o.reservedName&&o.reservedName.length||(o.reservedName=[]),o.reservedName.push(e.string());break;default:e.skipType(7&r)}}return o},v.decodeDelimited=function(e){return e instanceof s||(e=new s(e)),this.decode(e,e.uint32())},v.verify=function(e){if(\"object\"!=typeof e||null===e)return\"object expected\";if(null!=e.name&&e.hasOwnProperty(\"name\")&&!u.isString(e.name))return\"name: string expected\";if(null!=e.value&&e.hasOwnProperty(\"value\")){if(!Array.isArray(e.value))return\"value: array expected\";for(var t=0;t<e.value.length;++t)if(n=c.google.protobuf.EnumValueDescriptorProto.verify(e.value[t]))return\"value.\"+n}if(null!=e.options&&e.hasOwnProperty(\"options\")&&(n=c.google.protobuf.EnumOptions.verify(e.options)))return\"options.\"+n;if(null!=e.reservedRange&&e.hasOwnProperty(\"reservedRange\")){if(!Array.isArray(e.reservedRange))return\"reservedRange: array expected\";for(var n,t=0;t<e.reservedRange.length;++t)if(n=c.google.protobuf.EnumDescriptorProto.EnumReservedRange.verify(e.reservedRange[t]))return\"reservedRange.\"+n}if(null!=e.reservedName&&e.hasOwnProperty(\"reservedName\")){if(!Array.isArray(e.reservedName))return\"reservedName: array expected\";for(t=0;t<e.reservedName.length;++t)if(!u.isString(e.reservedName[t]))return\"reservedName: string[] expected\"}return null},v.fromObject=function(e){if(e instanceof c.google.protobuf.EnumDescriptorProto)return e;var t=new c.google.protobuf.EnumDescriptorProto;if(null!=e.name&&(t.name=String(e.name)),e.value){if(!Array.isArray(e.value))throw TypeError(\".google.protobuf.EnumDescriptorProto.value: array expected\");t.value=[];for(var n=0;n<e.value.length;++n){if(\"object\"!=typeof e.value[n])throw TypeError(\".google.protobuf.EnumDescriptorProto.value: object expected\");t.value[n]=c.google.protobuf.EnumValueDescriptorProto.fromObject(e.value[n])}}if(null!=e.options){if(\"object\"!=typeof e.options)throw TypeError(\".google.protobuf.EnumDescriptorProto.options: object expected\");t.options=c.google.protobuf.EnumOptions.fromObject(e.options)}if(e.reservedRange){if(!Array.isArray(e.reservedRange))throw TypeError(\".google.protobuf.EnumDescriptorProto.reservedRange: array expected\");t.reservedRange=[];for(n=0;n<e.reservedRange.length;++n){if(\"object\"!=typeof e.reservedRange[n])throw TypeError(\".google.protobuf.EnumDescriptorProto.reservedRange: object expected\");t.reservedRange[n]=c.google.protobuf.EnumDescriptorProto.EnumReservedRange.fromObject(e.reservedRange[n])}}if(e.reservedName){if(!Array.isArray(e.reservedName))throw TypeError(\".google.protobuf.EnumDescriptorProto.reservedName: array expected\");t.reservedName=[];for(n=0;n<e.reservedName.length;++n)t.reservedName[n]=String(e.reservedName[n])}return t},v.toObject=function(e,t){var n={};if(((t=t||{}).arrays||t.defaults)&&(n.value=[],n.reservedRange=[],n.reservedName=[]),t.defaults&&(n.name=\"\",n.options=null),null!=e.name&&e.hasOwnProperty(\"name\")&&(n.name=e.name),e.value&&e.value.length){n.value=[];for(var o=0;o<e.value.length;++o)n.value[o]=c.google.protobuf.EnumValueDescriptorProto.toObject(e.value[o],t)}if(null!=e.options&&e.hasOwnProperty(\"options\")&&(n.options=c.google.protobuf.EnumOptions.toObject(e.options,t)),e.reservedRange&&e.reservedRange.length){n.reservedRange=[];for(o=0;o<e.reservedRange.length;++o)n.reservedRange[o]=c.google.protobuf.EnumDescriptorProto.EnumReservedRange.toObject(e.reservedRange[o],t)}if(e.reservedName&&e.reservedName.length){n.reservedName=[];for(o=0;o<e.reservedName.length;++o)n.reservedName[o]=e.reservedName[o]}return n},v.prototype.toJSON=function(){return this.constructor.toObject(this,o.util.toJSONOptions)},v.EnumReservedRange=(P.prototype.start=0,P.prototype.end=0,P.create=function(e){return new P(e)},P.encode=function(e,t){return t=t||r.create(),null!=e.start&&Object.hasOwnProperty.call(e,\"start\")&&t.uint32(8).int32(e.start),null!=e.end&&Object.hasOwnProperty.call(e,\"end\")&&t.uint32(16).int32(e.end),t},P.encodeDelimited=function(e,t){return this.encode(e,t).ldelim()},P.decode=function(e,t){e instanceof s||(e=s.create(e));for(var n=void 0===t?e.len:e.pos+t,o=new c.google.protobuf.EnumDescriptorProto.EnumReservedRange;e.pos<n;){var r=e.uint32();switch(r>>>3){case 1:o.start=e.int32();break;case 2:o.end=e.int32();break;default:e.skipType(7&r)}}return o},P.decodeDelimited=function(e){return e instanceof s||(e=new s(e)),this.decode(e,e.uint32())},P.verify=function(e){return\"object\"!=typeof e||null===e?\"object expected\":null!=e.start&&e.hasOwnProperty(\"start\")&&!u.isInteger(e.start)?\"start: integer expected\":null!=e.end&&e.hasOwnProperty(\"end\")&&!u.isInteger(e.end)?\"end: integer expected\":null},P.fromObject=function(e){var t;return e instanceof c.google.protobuf.EnumDescriptorProto.EnumReservedRange?e:(t=new c.google.protobuf.EnumDescriptorProto.EnumReservedRange,null!=e.start&&(t.start=0|e.start),null!=e.end&&(t.end=0|e.end),t)},P.toObject=function(e,t){var n={};return(t=t||{}).defaults&&(n.start=0,n.end=0),null!=e.start&&e.hasOwnProperty(\"start\")&&(n.start=e.start),null!=e.end&&e.hasOwnProperty(\"end\")&&(n.end=e.end),n},P.prototype.toJSON=function(){return this.constructor.toObject(this,o.util.toJSONOptions)},P),v),n.EnumValueDescriptorProto=(w.prototype.name=\"\",w.prototype.number=0,w.prototype.options=null,w.create=function(e){return new w(e)},w.encode=function(e,t){return t=t||r.create(),null!=e.name&&Object.hasOwnProperty.call(e,\"name\")&&t.uint32(10).string(e.name),null!=e.number&&Object.hasOwnProperty.call(e,\"number\")&&t.uint32(16).int32(e.number),null!=e.options&&Object.hasOwnProperty.call(e,\"options\")&&c.google.protobuf.EnumValueOptions.encode(e.options,t.uint32(26).fork()).ldelim(),t},w.encodeDelimited=function(e,t){return this.encode(e,t).ldelim()},w.decode=function(e,t){e instanceof s||(e=s.create(e));for(var n=void 0===t?e.len:e.pos+t,o=new c.google.protobuf.EnumValueDescriptorProto;e.pos<n;){var r=e.uint32();switch(r>>>3){case 1:o.name=e.string();break;case 2:o.number=e.int32();break;case 3:o.options=c.google.protobuf.EnumValueOptions.decode(e,e.uint32());break;default:e.skipType(7&r)}}return o},w.decodeDelimited=function(e){return e instanceof s||(e=new s(e)),this.decode(e,e.uint32())},w.verify=function(e){if(\"object\"!=typeof e||null===e)return\"object expected\";if(null!=e.name&&e.hasOwnProperty(\"name\")&&!u.isString(e.name))return\"name: string expected\";if(null!=e.number&&e.hasOwnProperty(\"number\")&&!u.isInteger(e.number))return\"number: integer expected\";if(null!=e.options&&e.hasOwnProperty(\"options\")){e=c.google.protobuf.EnumValueOptions.verify(e.options);if(e)return\"options.\"+e}return null},w.fromObject=function(e){if(e instanceof c.google.protobuf.EnumValueDescriptorProto)return e;var t=new c.google.protobuf.EnumValueDescriptorProto;if(null!=e.name&&(t.name=String(e.name)),null!=e.number&&(t.number=0|e.number),null!=e.options){if(\"object\"!=typeof e.options)throw TypeError(\".google.protobuf.EnumValueDescriptorProto.options: object expected\");t.options=c.google.protobuf.EnumValueOptions.fromObject(e.options)}return t},w.toObject=function(e,t){var n={};return(t=t||{}).defaults&&(n.name=\"\",n.number=0,n.options=null),null!=e.name&&e.hasOwnProperty(\"name\")&&(n.name=e.name),null!=e.number&&e.hasOwnProperty(\"number\")&&(n.number=e.number),null!=e.options&&e.hasOwnProperty(\"options\")&&(n.options=c.google.protobuf.EnumValueOptions.toObject(e.options,t)),n},w.prototype.toJSON=function(){return this.constructor.toObject(this,o.util.toJSONOptions)},w),n.ServiceDescriptorProto=(j.prototype.name=\"\",j.prototype.method=u.emptyArray,j.prototype.options=null,j.create=function(e){return new j(e)},j.encode=function(e,t){if(t=t||r.create(),null!=e.name&&Object.hasOwnProperty.call(e,\"name\")&&t.uint32(10).string(e.name),null!=e.method&&e.method.length)for(var n=0;n<e.method.length;++n)c.google.protobuf.MethodDescriptorProto.encode(e.method[n],t.uint32(18).fork()).ldelim();return null!=e.options&&Object.hasOwnProperty.call(e,\"options\")&&c.google.protobuf.ServiceOptions.encode(e.options,t.uint32(26).fork()).ldelim(),t},j.encodeDelimited=function(e,t){return this.encode(e,t).ldelim()},j.decode=function(e,t){e instanceof s||(e=s.create(e));for(var n=void 0===t?e.len:e.pos+t,o=new c.google.protobuf.ServiceDescriptorProto;e.pos<n;){var r=e.uint32();switch(r>>>3){case 1:o.name=e.string();break;case 2:o.method&&o.method.length||(o.method=[]),o.method.push(c.google.protobuf.MethodDescriptorProto.decode(e,e.uint32()));break;case 3:o.options=c.google.protobuf.ServiceOptions.decode(e,e.uint32());break;default:e.skipType(7&r)}}return o},j.decodeDelimited=function(e){return e instanceof s||(e=new s(e)),this.decode(e,e.uint32())},j.verify=function(e){if(\"object\"!=typeof e||null===e)return\"object expected\";if(null!=e.name&&e.hasOwnProperty(\"name\")&&!u.isString(e.name))return\"name: string expected\";if(null!=e.method&&e.hasOwnProperty(\"method\")){if(!Array.isArray(e.method))return\"method: array expected\";for(var t=0;t<e.method.length;++t)if(n=c.google.protobuf.MethodDescriptorProto.verify(e.method[t]))return\"method.\"+n}var n;if(null!=e.options&&e.hasOwnProperty(\"options\")&&(n=c.google.protobuf.ServiceOptions.verify(e.options)))return\"options.\"+n;return null},j.fromObject=function(e){if(e instanceof c.google.protobuf.ServiceDescriptorProto)return e;var t=new c.google.protobuf.ServiceDescriptorProto;if(null!=e.name&&(t.name=String(e.name)),e.method){if(!Array.isArray(e.method))throw TypeError(\".google.protobuf.ServiceDescriptorProto.method: array expected\");t.method=[];for(var n=0;n<e.method.length;++n){if(\"object\"!=typeof e.method[n])throw TypeError(\".google.protobuf.ServiceDescriptorProto.method: object expected\");t.method[n]=c.google.protobuf.MethodDescriptorProto.fromObject(e.method[n])}}if(null!=e.options){if(\"object\"!=typeof e.options)throw TypeError(\".google.protobuf.ServiceDescriptorProto.options: object expected\");t.options=c.google.protobuf.ServiceOptions.fromObject(e.options)}return t},j.toObject=function(e,t){var n={};if(((t=t||{}).arrays||t.defaults)&&(n.method=[]),t.defaults&&(n.name=\"\",n.options=null),null!=e.name&&e.hasOwnProperty(\"name\")&&(n.name=e.name),e.method&&e.method.length){n.method=[];for(var o=0;o<e.method.length;++o)n.method[o]=c.google.protobuf.MethodDescriptorProto.toObject(e.method[o],t)}return null!=e.options&&e.hasOwnProperty(\"options\")&&(n.options=c.google.protobuf.ServiceOptions.toObject(e.options,t)),n},j.prototype.toJSON=function(){return this.constructor.toObject(this,o.util.toJSONOptions)},j),n.MethodDescriptorProto=(x.prototype.name=\"\",x.prototype.inputType=\"\",x.prototype.outputType=\"\",x.prototype.options=null,x.prototype.clientStreaming=!1,x.prototype.serverStreaming=!1,x.create=function(e){return new x(e)},x.encode=function(e,t){return t=t||r.create(),null!=e.name&&Object.hasOwnProperty.call(e,\"name\")&&t.uint32(10).string(e.name),null!=e.inputType&&Object.hasOwnProperty.call(e,\"inputType\")&&t.uint32(18).string(e.inputType),null!=e.outputType&&Object.hasOwnProperty.call(e,\"outputType\")&&t.uint32(26).string(e.outputType),null!=e.options&&Object.hasOwnProperty.call(e,\"options\")&&c.google.protobuf.MethodOptions.encode(e.options,t.uint32(34).fork()).ldelim(),null!=e.clientStreaming&&Object.hasOwnProperty.call(e,\"clientStreaming\")&&t.uint32(40).bool(e.clientStreaming),null!=e.serverStreaming&&Object.hasOwnProperty.call(e,\"serverStreaming\")&&t.uint32(48).bool(e.serverStreaming),t},x.encodeDelimited=function(e,t){return this.encode(e,t).ldelim()},x.decode=function(e,t){e instanceof s||(e=s.create(e));for(var n=void 0===t?e.len:e.pos+t,o=new c.google.protobuf.MethodDescriptorProto;e.pos<n;){var r=e.uint32();switch(r>>>3){case 1:o.name=e.string();break;case 2:o.inputType=e.string();break;case 3:o.outputType=e.string();break;case 4:o.options=c.google.protobuf.MethodOptions.decode(e,e.uint32());break;case 5:o.clientStreaming=e.bool();break;case 6:o.serverStreaming=e.bool();break;default:e.skipType(7&r)}}return o},x.decodeDelimited=function(e){return e instanceof s||(e=new s(e)),this.decode(e,e.uint32())},x.verify=function(e){if(\"object\"!=typeof e||null===e)return\"object expected\";if(null!=e.name&&e.hasOwnProperty(\"name\")&&!u.isString(e.name))return\"name: string expected\";if(null!=e.inputType&&e.hasOwnProperty(\"inputType\")&&!u.isString(e.inputType))return\"inputType: string expected\";if(null!=e.outputType&&e.hasOwnProperty(\"outputType\")&&!u.isString(e.outputType))return\"outputType: string expected\";if(null!=e.options&&e.hasOwnProperty(\"options\")){var t=c.google.protobuf.MethodOptions.verify(e.options);if(t)return\"options.\"+t}return null!=e.clientStreaming&&e.hasOwnProperty(\"clientStreaming\")&&\"boolean\"!=typeof e.clientStreaming?\"clientStreaming: boolean expected\":null!=e.serverStreaming&&e.hasOwnProperty(\"serverStreaming\")&&\"boolean\"!=typeof e.serverStreaming?\"serverStreaming: boolean expected\":null},x.fromObject=function(e){if(e instanceof c.google.protobuf.MethodDescriptorProto)return e;var t=new c.google.protobuf.MethodDescriptorProto;if(null!=e.name&&(t.name=String(e.name)),null!=e.inputType&&(t.inputType=String(e.inputType)),null!=e.outputType&&(t.outputType=String(e.outputType)),null!=e.options){if(\"object\"!=typeof e.options)throw TypeError(\".google.protobuf.MethodDescriptorProto.options: object expected\");t.options=c.google.protobuf.MethodOptions.fromObject(e.options)}return null!=e.clientStreaming&&(t.clientStreaming=Boolean(e.clientStreaming)),null!=e.serverStreaming&&(t.serverStreaming=Boolean(e.serverStreaming)),t},x.toObject=function(e,t){var n={};return(t=t||{}).defaults&&(n.name=\"\",n.inputType=\"\",n.outputType=\"\",n.options=null,n.clientStreaming=!1,n.serverStreaming=!1),null!=e.name&&e.hasOwnProperty(\"name\")&&(n.name=e.name),null!=e.inputType&&e.hasOwnProperty(\"inputType\")&&(n.inputType=e.inputType),null!=e.outputType&&e.hasOwnProperty(\"outputType\")&&(n.outputType=e.outputType),null!=e.options&&e.hasOwnProperty(\"options\")&&(n.options=c.google.protobuf.MethodOptions.toObject(e.options,t)),null!=e.clientStreaming&&e.hasOwnProperty(\"clientStreaming\")&&(n.clientStreaming=e.clientStreaming),null!=e.serverStreaming&&e.hasOwnProperty(\"serverStreaming\")&&(n.serverStreaming=e.serverStreaming),n},x.prototype.toJSON=function(){return this.constructor.toObject(this,o.util.toJSONOptions)},x),n.FileOptions=(S.prototype.javaPackage=\"\",S.prototype.javaOuterClassname=\"\",S.prototype.javaMultipleFiles=!1,S.prototype.javaGenerateEqualsAndHash=!1,S.prototype.javaStringCheckUtf8=!1,S.prototype.optimizeFor=1,S.prototype.goPackage=\"\",S.prototype.ccGenericServices=!1,S.prototype.javaGenericServices=!1,S.prototype.pyGenericServices=!1,S.prototype.phpGenericServices=!1,S.prototype.deprecated=!1,S.prototype.ccEnableArenas=!0,S.prototype.objcClassPrefix=\"\",S.prototype.csharpNamespace=\"\",S.prototype.swiftPrefix=\"\",S.prototype.phpClassPrefix=\"\",S.prototype.phpNamespace=\"\",S.prototype.phpMetadataNamespace=\"\",S.prototype.rubyPackage=\"\",S.prototype.uninterpretedOption=u.emptyArray,S.create=function(e){return new S(e)},S.encode=function(e,t){if(t=t||r.create(),null!=e.javaPackage&&Object.hasOwnProperty.call(e,\"javaPackage\")&&t.uint32(10).string(e.javaPackage),null!=e.javaOuterClassname&&Object.hasOwnProperty.call(e,\"javaOuterClassname\")&&t.uint32(66).string(e.javaOuterClassname),null!=e.optimizeFor&&Object.hasOwnProperty.call(e,\"optimizeFor\")&&t.uint32(72).int32(e.optimizeFor),null!=e.javaMultipleFiles&&Object.hasOwnProperty.call(e,\"javaMultipleFiles\")&&t.uint32(80).bool(e.javaMultipleFiles),null!=e.goPackage&&Object.hasOwnProperty.call(e,\"goPackage\")&&t.uint32(90).string(e.goPackage),null!=e.ccGenericServices&&Object.hasOwnProperty.call(e,\"ccGenericServices\")&&t.uint32(128).bool(e.ccGenericServices),null!=e.javaGenericServices&&Object.hasOwnProperty.call(e,\"javaGenericServices\")&&t.uint32(136).bool(e.javaGenericServices),null!=e.pyGenericServices&&Object.hasOwnProperty.call(e,\"pyGenericServices\")&&t.uint32(144).bool(e.pyGenericServices),null!=e.javaGenerateEqualsAndHash&&Object.hasOwnProperty.call(e,\"javaGenerateEqualsAndHash\")&&t.uint32(160).bool(e.javaGenerateEqualsAndHash),null!=e.deprecated&&Object.hasOwnProperty.call(e,\"deprecated\")&&t.uint32(184).bool(e.deprecated),null!=e.javaStringCheckUtf8&&Object.hasOwnProperty.call(e,\"javaStringCheckUtf8\")&&t.uint32(216).bool(e.javaStringCheckUtf8),null!=e.ccEnableArenas&&Object.hasOwnProperty.call(e,\"ccEnableArenas\")&&t.uint32(248).bool(e.ccEnableArenas),null!=e.objcClassPrefix&&Object.hasOwnProperty.call(e,\"objcClassPrefix\")&&t.uint32(290).string(e.objcClassPrefix),null!=e.csharpNamespace&&Object.hasOwnProperty.call(e,\"csharpNamespace\")&&t.uint32(298).string(e.csharpNamespace),null!=e.swiftPrefix&&Object.hasOwnProperty.call(e,\"swiftPrefix\")&&t.uint32(314).string(e.swiftPrefix),null!=e.phpClassPrefix&&Object.hasOwnProperty.call(e,\"phpClassPrefix\")&&t.uint32(322).string(e.phpClassPrefix),null!=e.phpNamespace&&Object.hasOwnProperty.call(e,\"phpNamespace\")&&t.uint32(330).string(e.phpNamespace),null!=e.phpGenericServices&&Object.hasOwnProperty.call(e,\"phpGenericServices\")&&t.uint32(336).bool(e.phpGenericServices),null!=e.phpMetadataNamespace&&Object.hasOwnProperty.call(e,\"phpMetadataNamespace\")&&t.uint32(354).string(e.phpMetadataNamespace),null!=e.rubyPackage&&Object.hasOwnProperty.call(e,\"rubyPackage\")&&t.uint32(362).string(e.rubyPackage),null!=e.uninterpretedOption&&e.uninterpretedOption.length)for(var n=0;n<e.uninterpretedOption.length;++n)c.google.protobuf.UninterpretedOption.encode(e.uninterpretedOption[n],t.uint32(7994).fork()).ldelim();return t},S.encodeDelimited=function(e,t){return this.encode(e,t).ldelim()},S.decode=function(e,t){e instanceof s||(e=s.create(e));for(var n=void 0===t?e.len:e.pos+t,o=new c.google.protobuf.FileOptions;e.pos<n;){var r=e.uint32();switch(r>>>3){case 1:o.javaPackage=e.string();break;case 8:o.javaOuterClassname=e.string();break;case 10:o.javaMultipleFiles=e.bool();break;case 20:o.javaGenerateEqualsAndHash=e.bool();break;case 27:o.javaStringCheckUtf8=e.bool();break;case 9:o.optimizeFor=e.int32();break;case 11:o.goPackage=e.string();break;case 16:o.ccGenericServices=e.bool();break;case 17:o.javaGenericServices=e.bool();break;case 18:o.pyGenericServices=e.bool();break;case 42:o.phpGenericServices=e.bool();break;case 23:o.deprecated=e.bool();break;case 31:o.ccEnableArenas=e.bool();break;case 36:o.objcClassPrefix=e.string();break;case 37:o.csharpNamespace=e.string();break;case 39:o.swiftPrefix=e.string();break;case 40:o.phpClassPrefix=e.string();break;case 41:o.phpNamespace=e.string();break;case 44:o.phpMetadataNamespace=e.string();break;case 45:o.rubyPackage=e.string();break;case 999:o.uninterpretedOption&&o.uninterpretedOption.length||(o.uninterpretedOption=[]),o.uninterpretedOption.push(c.google.protobuf.UninterpretedOption.decode(e,e.uint32()));break;default:e.skipType(7&r)}}return o},S.decodeDelimited=function(e){return e instanceof s||(e=new s(e)),this.decode(e,e.uint32())},S.verify=function(e){if(\"object\"!=typeof e||null===e)return\"object expected\";if(null!=e.javaPackage&&e.hasOwnProperty(\"javaPackage\")&&!u.isString(e.javaPackage))return\"javaPackage: string expected\";if(null!=e.javaOuterClassname&&e.hasOwnProperty(\"javaOuterClassname\")&&!u.isString(e.javaOuterClassname))return\"javaOuterClassname: string expected\";if(null!=e.javaMultipleFiles&&e.hasOwnProperty(\"javaMultipleFiles\")&&\"boolean\"!=typeof e.javaMultipleFiles)return\"javaMultipleFiles: boolean expected\";if(null!=e.javaGenerateEqualsAndHash&&e.hasOwnProperty(\"javaGenerateEqualsAndHash\")&&\"boolean\"!=typeof e.javaGenerateEqualsAndHash)return\"javaGenerateEqualsAndHash: boolean expected\";if(null!=e.javaStringCheckUtf8&&e.hasOwnProperty(\"javaStringCheckUtf8\")&&\"boolean\"!=typeof e.javaStringCheckUtf8)return\"javaStringCheckUtf8: boolean expected\";if(null!=e.optimizeFor&&e.hasOwnProperty(\"optimizeFor\"))switch(e.optimizeFor){default:return\"optimizeFor: enum value expected\";case 1:case 2:case 3:}if(null!=e.goPackage&&e.hasOwnProperty(\"goPackage\")&&!u.isString(e.goPackage))return\"goPackage: string expected\";if(null!=e.ccGenericServices&&e.hasOwnProperty(\"ccGenericServices\")&&\"boolean\"!=typeof e.ccGenericServices)return\"ccGenericServices: boolean expected\";if(null!=e.javaGenericServices&&e.hasOwnProperty(\"javaGenericServices\")&&\"boolean\"!=typeof e.javaGenericServices)return\"javaGenericServices: boolean expected\";if(null!=e.pyGenericServices&&e.hasOwnProperty(\"pyGenericServices\")&&\"boolean\"!=typeof e.pyGenericServices)return\"pyGenericServices: boolean expected\";if(null!=e.phpGenericServices&&e.hasOwnProperty(\"phpGenericServices\")&&\"boolean\"!=typeof e.phpGenericServices)return\"phpGenericServices: boolean expected\";if(null!=e.deprecated&&e.hasOwnProperty(\"deprecated\")&&\"boolean\"!=typeof e.deprecated)return\"deprecated: boolean expected\";if(null!=e.ccEnableArenas&&e.hasOwnProperty(\"ccEnableArenas\")&&\"boolean\"!=typeof e.ccEnableArenas)return\"ccEnableArenas: boolean expected\";if(null!=e.objcClassPrefix&&e.hasOwnProperty(\"objcClassPrefix\")&&!u.isString(e.objcClassPrefix))return\"objcClassPrefix: string expected\";if(null!=e.csharpNamespace&&e.hasOwnProperty(\"csharpNamespace\")&&!u.isString(e.csharpNamespace))return\"csharpNamespace: string expected\";if(null!=e.swiftPrefix&&e.hasOwnProperty(\"swiftPrefix\")&&!u.isString(e.swiftPrefix))return\"swiftPrefix: string expected\";if(null!=e.phpClassPrefix&&e.hasOwnProperty(\"phpClassPrefix\")&&!u.isString(e.phpClassPrefix))return\"phpClassPrefix: string expected\";if(null!=e.phpNamespace&&e.hasOwnProperty(\"phpNamespace\")&&!u.isString(e.phpNamespace))return\"phpNamespace: string expected\";if(null!=e.phpMetadataNamespace&&e.hasOwnProperty(\"phpMetadataNamespace\")&&!u.isString(e.phpMetadataNamespace))return\"phpMetadataNamespace: string expected\";if(null!=e.rubyPackage&&e.hasOwnProperty(\"rubyPackage\")&&!u.isString(e.rubyPackage))return\"rubyPackage: string expected\";if(null!=e.uninterpretedOption&&e.hasOwnProperty(\"uninterpretedOption\")){if(!Array.isArray(e.uninterpretedOption))return\"uninterpretedOption: array expected\";for(var t=0;t<e.uninterpretedOption.length;++t){var n=c.google.protobuf.UninterpretedOption.verify(e.uninterpretedOption[t]);if(n)return\"uninterpretedOption.\"+n}}return null},S.fromObject=function(e){if(e instanceof c.google.protobuf.FileOptions)return e;var t=new c.google.protobuf.FileOptions;switch(null!=e.javaPackage&&(t.javaPackage=String(e.javaPackage)),null!=e.javaOuterClassname&&(t.javaOuterClassname=String(e.javaOuterClassname)),null!=e.javaMultipleFiles&&(t.javaMultipleFiles=Boolean(e.javaMultipleFiles)),null!=e.javaGenerateEqualsAndHash&&(t.javaGenerateEqualsAndHash=Boolean(e.javaGenerateEqualsAndHash)),null!=e.javaStringCheckUtf8&&(t.javaStringCheckUtf8=Boolean(e.javaStringCheckUtf8)),e.optimizeFor){case\"SPEED\":case 1:t.optimizeFor=1;break;case\"CODE_SIZE\":case 2:t.optimizeFor=2;break;case\"LITE_RUNTIME\":case 3:t.optimizeFor=3}if(null!=e.goPackage&&(t.goPackage=String(e.goPackage)),null!=e.ccGenericServices&&(t.ccGenericServices=Boolean(e.ccGenericServices)),null!=e.javaGenericServices&&(t.javaGenericServices=Boolean(e.javaGenericServices)),null!=e.pyGenericServices&&(t.pyGenericServices=Boolean(e.pyGenericServices)),null!=e.phpGenericServices&&(t.phpGenericServices=Boolean(e.phpGenericServices)),null!=e.deprecated&&(t.deprecated=Boolean(e.deprecated)),null!=e.ccEnableArenas&&(t.ccEnableArenas=Boolean(e.ccEnableArenas)),null!=e.objcClassPrefix&&(t.objcClassPrefix=String(e.objcClassPrefix)),null!=e.csharpNamespace&&(t.csharpNamespace=String(e.csharpNamespace)),null!=e.swiftPrefix&&(t.swiftPrefix=String(e.swiftPrefix)),null!=e.phpClassPrefix&&(t.phpClassPrefix=String(e.phpClassPrefix)),null!=e.phpNamespace&&(t.phpNamespace=String(e.phpNamespace)),null!=e.phpMetadataNamespace&&(t.phpMetadataNamespace=String(e.phpMetadataNamespace)),null!=e.rubyPackage&&(t.rubyPackage=String(e.rubyPackage)),e.uninterpretedOption){if(!Array.isArray(e.uninterpretedOption))throw TypeError(\".google.protobuf.FileOptions.uninterpretedOption: array expected\");t.uninterpretedOption=[];for(var n=0;n<e.uninterpretedOption.length;++n){if(\"object\"!=typeof e.uninterpretedOption[n])throw TypeError(\".google.protobuf.FileOptions.uninterpretedOption: object expected\");t.uninterpretedOption[n]=c.google.protobuf.UninterpretedOption.fromObject(e.uninterpretedOption[n])}}return t},S.toObject=function(e,t){var n={};if(((t=t||{}).arrays||t.defaults)&&(n.uninterpretedOption=[]),t.defaults&&(n.javaPackage=\"\",n.javaOuterClassname=\"\",n.optimizeFor=t.enums===String?\"SPEED\":1,n.javaMultipleFiles=!1,n.goPackage=\"\",n.ccGenericServices=!1,n.javaGenericServices=!1,n.pyGenericServices=!1,n.javaGenerateEqualsAndHash=!1,n.deprecated=!1,n.javaStringCheckUtf8=!1,n.ccEnableArenas=!0,n.objcClassPrefix=\"\",n.csharpNamespace=\"\",n.swiftPrefix=\"\",n.phpClassPrefix=\"\",n.phpNamespace=\"\",n.phpGenericServices=!1,n.phpMetadataNamespace=\"\",n.rubyPackage=\"\"),null!=e.javaPackage&&e.hasOwnProperty(\"javaPackage\")&&(n.javaPackage=e.javaPackage),null!=e.javaOuterClassname&&e.hasOwnProperty(\"javaOuterClassname\")&&(n.javaOuterClassname=e.javaOuterClassname),null!=e.optimizeFor&&e.hasOwnProperty(\"optimizeFor\")&&(n.optimizeFor=t.enums===String?c.google.protobuf.FileOptions.OptimizeMode[e.optimizeFor]:e.optimizeFor),null!=e.javaMultipleFiles&&e.hasOwnProperty(\"javaMultipleFiles\")&&(n.javaMultipleFiles=e.javaMultipleFiles),null!=e.goPackage&&e.hasOwnProperty(\"goPackage\")&&(n.goPackage=e.goPackage),null!=e.ccGenericServices&&e.hasOwnProperty(\"ccGenericServices\")&&(n.ccGenericServices=e.ccGenericServices),null!=e.javaGenericServices&&e.hasOwnProperty(\"javaGenericServices\")&&(n.javaGenericServices=e.javaGenericServices),null!=e.pyGenericServices&&e.hasOwnProperty(\"pyGenericServices\")&&(n.pyGenericServices=e.pyGenericServices),null!=e.javaGenerateEqualsAndHash&&e.hasOwnProperty(\"javaGenerateEqualsAndHash\")&&(n.javaGenerateEqualsAndHash=e.javaGenerateEqualsAndHash),null!=e.deprecated&&e.hasOwnProperty(\"deprecated\")&&(n.deprecated=e.deprecated),null!=e.javaStringCheckUtf8&&e.hasOwnProperty(\"javaStringCheckUtf8\")&&(n.javaStringCheckUtf8=e.javaStringCheckUtf8),null!=e.ccEnableArenas&&e.hasOwnProperty(\"ccEnableArenas\")&&(n.ccEnableArenas=e.ccEnableArenas),null!=e.objcClassPrefix&&e.hasOwnProperty(\"objcClassPrefix\")&&(n.objcClassPrefix=e.objcClassPrefix),null!=e.csharpNamespace&&e.hasOwnProperty(\"csharpNamespace\")&&(n.csharpNamespace=e.csharpNamespace),null!=e.swiftPrefix&&e.hasOwnProperty(\"swiftPrefix\")&&(n.swiftPrefix=e.swiftPrefix),null!=e.phpClassPrefix&&e.hasOwnProperty(\"phpClassPrefix\")&&(n.phpClassPrefix=e.phpClassPrefix),null!=e.phpNamespace&&e.hasOwnProperty(\"phpNamespace\")&&(n.phpNamespace=e.phpNamespace),null!=e.phpGenericServices&&e.hasOwnProperty(\"phpGenericServices\")&&(n.phpGenericServices=e.phpGenericServices),null!=e.phpMetadataNamespace&&e.hasOwnProperty(\"phpMetadataNamespace\")&&(n.phpMetadataNamespace=e.phpMetadataNamespace),null!=e.rubyPackage&&e.hasOwnProperty(\"rubyPackage\")&&(n.rubyPackage=e.rubyPackage),e.uninterpretedOption&&e.uninterpretedOption.length){n.uninterpretedOption=[];for(var o=0;o<e.uninterpretedOption.length;++o)n.uninterpretedOption[o]=c.google.protobuf.UninterpretedOption.toObject(e.uninterpretedOption[o],t)}return n},S.prototype.toJSON=function(){return this.constructor.toObject(this,o.util.toJSONOptions)},S.OptimizeMode=(e={},(t=Object.create(e))[e[1]=\"SPEED\"]=1,t[e[2]=\"CODE_SIZE\"]=2,t[e[3]=\"LITE_RUNTIME\"]=3,t),S),n.MessageOptions=(k.prototype.messageSetWireFormat=!1,k.prototype.noStandardDescriptorAccessor=!1,k.prototype.deprecated=!1,k.prototype.mapEntry=!1,k.prototype.uninterpretedOption=u.emptyArray,k.create=function(e){return new k(e)},k.encode=function(e,t){if(t=t||r.create(),null!=e.messageSetWireFormat&&Object.hasOwnProperty.call(e,\"messageSetWireFormat\")&&t.uint32(8).bool(e.messageSetWireFormat),null!=e.noStandardDescriptorAccessor&&Object.hasOwnProperty.call(e,\"noStandardDescriptorAccessor\")&&t.uint32(16).bool(e.noStandardDescriptorAccessor),null!=e.deprecated&&Object.hasOwnProperty.call(e,\"deprecated\")&&t.uint32(24).bool(e.deprecated),null!=e.mapEntry&&Object.hasOwnProperty.call(e,\"mapEntry\")&&t.uint32(56).bool(e.mapEntry),null!=e.uninterpretedOption&&e.uninterpretedOption.length)for(var n=0;n<e.uninterpretedOption.length;++n)c.google.protobuf.UninterpretedOption.encode(e.uninterpretedOption[n],t.uint32(7994).fork()).ldelim();return t},k.encodeDelimited=function(e,t){return this.encode(e,t).ldelim()},k.decode=function(e,t){e instanceof s||(e=s.create(e));for(var n=void 0===t?e.len:e.pos+t,o=new c.google.protobuf.MessageOptions;e.pos<n;){var r=e.uint32();switch(r>>>3){case 1:o.messageSetWireFormat=e.bool();break;case 2:o.noStandardDescriptorAccessor=e.bool();break;case 3:o.deprecated=e.bool();break;case 7:o.mapEntry=e.bool();break;case 999:o.uninterpretedOption&&o.uninterpretedOption.length||(o.uninterpretedOption=[]),o.uninterpretedOption.push(c.google.protobuf.UninterpretedOption.decode(e,e.uint32()));break;default:e.skipType(7&r)}}return o},k.decodeDelimited=function(e){return e instanceof s||(e=new s(e)),this.decode(e,e.uint32())},k.verify=function(e){if(\"object\"!=typeof e||null===e)return\"object expected\";if(null!=e.messageSetWireFormat&&e.hasOwnProperty(\"messageSetWireFormat\")&&\"boolean\"!=typeof e.messageSetWireFormat)return\"messageSetWireFormat: boolean expected\";if(null!=e.noStandardDescriptorAccessor&&e.hasOwnProperty(\"noStandardDescriptorAccessor\")&&\"boolean\"!=typeof e.noStandardDescriptorAccessor)return\"noStandardDescriptorAccessor: boolean expected\";if(null!=e.deprecated&&e.hasOwnProperty(\"deprecated\")&&\"boolean\"!=typeof e.deprecated)return\"deprecated: boolean expected\";if(null!=e.mapEntry&&e.hasOwnProperty(\"mapEntry\")&&\"boolean\"!=typeof e.mapEntry)return\"mapEntry: boolean expected\";if(null!=e.uninterpretedOption&&e.hasOwnProperty(\"uninterpretedOption\")){if(!Array.isArray(e.uninterpretedOption))return\"uninterpretedOption: array expected\";for(var t=0;t<e.uninterpretedOption.length;++t){var n=c.google.protobuf.UninterpretedOption.verify(e.uninterpretedOption[t]);if(n)return\"uninterpretedOption.\"+n}}return null},k.fromObject=function(e){if(e instanceof c.google.protobuf.MessageOptions)return e;var t=new c.google.protobuf.MessageOptions;if(null!=e.messageSetWireFormat&&(t.messageSetWireFormat=Boolean(e.messageSetWireFormat)),null!=e.noStandardDescriptorAccessor&&(t.noStandardDescriptorAccessor=Boolean(e.noStandardDescriptorAccessor)),null!=e.deprecated&&(t.deprecated=Boolean(e.deprecated)),null!=e.mapEntry&&(t.mapEntry=Boolean(e.mapEntry)),e.uninterpretedOption){if(!Array.isArray(e.uninterpretedOption))throw TypeError(\".google.protobuf.MessageOptions.uninterpretedOption: array expected\");t.uninterpretedOption=[];for(var n=0;n<e.uninterpretedOption.length;++n){if(\"object\"!=typeof e.uninterpretedOption[n])throw TypeError(\".google.protobuf.MessageOptions.uninterpretedOption: object expected\");t.uninterpretedOption[n]=c.google.protobuf.UninterpretedOption.fromObject(e.uninterpretedOption[n])}}return t},k.toObject=function(e,t){var n={};if(((t=t||{}).arrays||t.defaults)&&(n.uninterpretedOption=[]),t.defaults&&(n.messageSetWireFormat=!1,n.noStandardDescriptorAccessor=!1,n.deprecated=!1,n.mapEntry=!1),null!=e.messageSetWireFormat&&e.hasOwnProperty(\"messageSetWireFormat\")&&(n.messageSetWireFormat=e.messageSetWireFormat),null!=e.noStandardDescriptorAccessor&&e.hasOwnProperty(\"noStandardDescriptorAccessor\")&&(n.noStandardDescriptorAccessor=e.noStandardDescriptorAccessor),null!=e.deprecated&&e.hasOwnProperty(\"deprecated\")&&(n.deprecated=e.deprecated),null!=e.mapEntry&&e.hasOwnProperty(\"mapEntry\")&&(n.mapEntry=e.mapEntry),e.uninterpretedOption&&e.uninterpretedOption.length){n.uninterpretedOption=[];for(var o=0;o<e.uninterpretedOption.length;++o)n.uninterpretedOption[o]=c.google.protobuf.UninterpretedOption.toObject(e.uninterpretedOption[o],t)}return n},k.prototype.toJSON=function(){return this.constructor.toObject(this,o.util.toJSONOptions)},k),n.FieldOptions=(D.prototype.ctype=0,D.prototype.packed=!1,D.prototype.jstype=0,D.prototype.lazy=!1,D.prototype.deprecated=!1,D.prototype.weak=!1,D.prototype.uninterpretedOption=u.emptyArray,D.create=function(e){return new D(e)},D.encode=function(e,t){if(t=t||r.create(),null!=e.ctype&&Object.hasOwnProperty.call(e,\"ctype\")&&t.uint32(8).int32(e.ctype),null!=e.packed&&Object.hasOwnProperty.call(e,\"packed\")&&t.uint32(16).bool(e.packed),null!=e.deprecated&&Object.hasOwnProperty.call(e,\"deprecated\")&&t.uint32(24).bool(e.deprecated),null!=e.lazy&&Object.hasOwnProperty.call(e,\"lazy\")&&t.uint32(40).bool(e.lazy),null!=e.jstype&&Object.hasOwnProperty.call(e,\"jstype\")&&t.uint32(48).int32(e.jstype),null!=e.weak&&Object.hasOwnProperty.call(e,\"weak\")&&t.uint32(80).bool(e.weak),null!=e.uninterpretedOption&&e.uninterpretedOption.length)for(var n=0;n<e.uninterpretedOption.length;++n)c.google.protobuf.UninterpretedOption.encode(e.uninterpretedOption[n],t.uint32(7994).fork()).ldelim();return t},D.encodeDelimited=function(e,t){return this.encode(e,t).ldelim()},D.decode=function(e,t){e instanceof s||(e=s.create(e));for(var n=void 0===t?e.len:e.pos+t,o=new c.google.protobuf.FieldOptions;e.pos<n;){var r=e.uint32();switch(r>>>3){case 1:o.ctype=e.int32();break;case 2:o.packed=e.bool();break;case 6:o.jstype=e.int32();break;case 5:o.lazy=e.bool();break;case 3:o.deprecated=e.bool();break;case 10:o.weak=e.bool();break;case 999:o.uninterpretedOption&&o.uninterpretedOption.length||(o.uninterpretedOption=[]),o.uninterpretedOption.push(c.google.protobuf.UninterpretedOption.decode(e,e.uint32()));break;default:e.skipType(7&r)}}return o},D.decodeDelimited=function(e){return e instanceof s||(e=new s(e)),this.decode(e,e.uint32())},D.verify=function(e){if(\"object\"!=typeof e||null===e)return\"object expected\";if(null!=e.ctype&&e.hasOwnProperty(\"ctype\"))switch(e.ctype){default:return\"ctype: enum value expected\";case 0:case 1:case 2:}if(null!=e.packed&&e.hasOwnProperty(\"packed\")&&\"boolean\"!=typeof e.packed)return\"packed: boolean expected\";if(null!=e.jstype&&e.hasOwnProperty(\"jstype\"))switch(e.jstype){default:return\"jstype: enum value expected\";case 0:case 1:case 2:}if(null!=e.lazy&&e.hasOwnProperty(\"lazy\")&&\"boolean\"!=typeof e.lazy)return\"lazy: boolean expected\";if(null!=e.deprecated&&e.hasOwnProperty(\"deprecated\")&&\"boolean\"!=typeof e.deprecated)return\"deprecated: boolean expected\";if(null!=e.weak&&e.hasOwnProperty(\"weak\")&&\"boolean\"!=typeof e.weak)return\"weak: boolean expected\";if(null!=e.uninterpretedOption&&e.hasOwnProperty(\"uninterpretedOption\")){if(!Array.isArray(e.uninterpretedOption))return\"uninterpretedOption: array expected\";for(var t=0;t<e.uninterpretedOption.length;++t){var n=c.google.protobuf.UninterpretedOption.verify(e.uninterpretedOption[t]);if(n)return\"uninterpretedOption.\"+n}}return null},D.fromObject=function(e){if(e instanceof c.google.protobuf.FieldOptions)return e;var t=new c.google.protobuf.FieldOptions;switch(e.ctype){case\"STRING\":case 0:t.ctype=0;break;case\"CORD\":case 1:t.ctype=1;break;case\"STRING_PIECE\":case 2:t.ctype=2}switch(null!=e.packed&&(t.packed=Boolean(e.packed)),e.jstype){case\"JS_NORMAL\":case 0:t.jstype=0;break;case\"JS_STRING\":case 1:t.jstype=1;break;case\"JS_NUMBER\":case 2:t.jstype=2}if(null!=e.lazy&&(t.lazy=Boolean(e.lazy)),null!=e.deprecated&&(t.deprecated=Boolean(e.deprecated)),null!=e.weak&&(t.weak=Boolean(e.weak)),e.uninterpretedOption){if(!Array.isArray(e.uninterpretedOption))throw TypeError(\".google.protobuf.FieldOptions.uninterpretedOption: array expected\");t.uninterpretedOption=[];for(var n=0;n<e.uninterpretedOption.length;++n){if(\"object\"!=typeof e.uninterpretedOption[n])throw TypeError(\".google.protobuf.FieldOptions.uninterpretedOption: object expected\");t.uninterpretedOption[n]=c.google.protobuf.UninterpretedOption.fromObject(e.uninterpretedOption[n])}}return t},D.toObject=function(e,t){var n={};if(((t=t||{}).arrays||t.defaults)&&(n.uninterpretedOption=[]),t.defaults&&(n.ctype=t.enums===String?\"STRING\":0,n.packed=!1,n.deprecated=!1,n.lazy=!1,n.jstype=t.enums===String?\"JS_NORMAL\":0,n.weak=!1),null!=e.ctype&&e.hasOwnProperty(\"ctype\")&&(n.ctype=t.enums===String?c.google.protobuf.FieldOptions.CType[e.ctype]:e.ctype),null!=e.packed&&e.hasOwnProperty(\"packed\")&&(n.packed=e.packed),null!=e.deprecated&&e.hasOwnProperty(\"deprecated\")&&(n.deprecated=e.deprecated),null!=e.lazy&&e.hasOwnProperty(\"lazy\")&&(n.lazy=e.lazy),null!=e.jstype&&e.hasOwnProperty(\"jstype\")&&(n.jstype=t.enums===String?c.google.protobuf.FieldOptions.JSType[e.jstype]:e.jstype),null!=e.weak&&e.hasOwnProperty(\"weak\")&&(n.weak=e.weak),e.uninterpretedOption&&e.uninterpretedOption.length){n.uninterpretedOption=[];for(var o=0;o<e.uninterpretedOption.length;++o)n.uninterpretedOption[o]=c.google.protobuf.UninterpretedOption.toObject(e.uninterpretedOption[o],t)}return n},D.prototype.toJSON=function(){return this.constructor.toObject(this,o.util.toJSONOptions)},D.CType=(e={},(t=Object.create(e))[e[0]=\"STRING\"]=0,t[e[1]=\"CORD\"]=1,t[e[2]=\"STRING_PIECE\"]=2,t),D.JSType=(e={},(t=Object.create(e))[e[0]=\"JS_NORMAL\"]=0,t[e[1]=\"JS_STRING\"]=1,t[e[2]=\"JS_NUMBER\"]=2,t),D),n.OneofOptions=(M.prototype.uninterpretedOption=u.emptyArray,M.create=function(e){return new M(e)},M.encode=function(e,t){if(t=t||r.create(),null!=e.uninterpretedOption&&e.uninterpretedOption.length)for(var n=0;n<e.uninterpretedOption.length;++n)c.google.protobuf.UninterpretedOption.encode(e.uninterpretedOption[n],t.uint32(7994).fork()).ldelim();return t},M.encodeDelimited=function(e,t){return this.encode(e,t).ldelim()},M.decode=function(e,t){e instanceof s||(e=s.create(e));for(var n=void 0===t?e.len:e.pos+t,o=new c.google.protobuf.OneofOptions;e.pos<n;){var r=e.uint32();r>>>3==999?(o.uninterpretedOption&&o.uninterpretedOption.length||(o.uninterpretedOption=[]),o.uninterpretedOption.push(c.google.protobuf.UninterpretedOption.decode(e,e.uint32()))):e.skipType(7&r)}return o},M.decodeDelimited=function(e){return e instanceof s||(e=new s(e)),this.decode(e,e.uint32())},M.verify=function(e){if(\"object\"!=typeof e||null===e)return\"object expected\";if(null!=e.uninterpretedOption&&e.hasOwnProperty(\"uninterpretedOption\")){if(!Array.isArray(e.uninterpretedOption))return\"uninterpretedOption: array expected\";for(var t=0;t<e.uninterpretedOption.length;++t){var n=c.google.protobuf.UninterpretedOption.verify(e.uninterpretedOption[t]);if(n)return\"uninterpretedOption.\"+n}}return null},M.fromObject=function(e){if(e instanceof c.google.protobuf.OneofOptions)return e;var t=new c.google.protobuf.OneofOptions;if(e.uninterpretedOption){if(!Array.isArray(e.uninterpretedOption))throw TypeError(\".google.protobuf.OneofOptions.uninterpretedOption: array expected\");t.uninterpretedOption=[];for(var n=0;n<e.uninterpretedOption.length;++n){if(\"object\"!=typeof e.uninterpretedOption[n])throw TypeError(\".google.protobuf.OneofOptions.uninterpretedOption: object expected\");t.uninterpretedOption[n]=c.google.protobuf.UninterpretedOption.fromObject(e.uninterpretedOption[n])}}return t},M.toObject=function(e,t){var n={};if(((t=t||{}).arrays||t.defaults)&&(n.uninterpretedOption=[]),e.uninterpretedOption&&e.uninterpretedOption.length){n.uninterpretedOption=[];for(var o=0;o<e.uninterpretedOption.length;++o)n.uninterpretedOption[o]=c.google.protobuf.UninterpretedOption.toObject(e.uninterpretedOption[o],t)}return n},M.prototype.toJSON=function(){return this.constructor.toObject(this,o.util.toJSONOptions)},M),n.EnumOptions=(T.prototype.allowAlias=!1,T.prototype.deprecated=!1,T.prototype.uninterpretedOption=u.emptyArray,T.create=function(e){return new T(e)},T.encode=function(e,t){if(t=t||r.create(),null!=e.allowAlias&&Object.hasOwnProperty.call(e,\"allowAlias\")&&t.uint32(16).bool(e.allowAlias),null!=e.deprecated&&Object.hasOwnProperty.call(e,\"deprecated\")&&t.uint32(24).bool(e.deprecated),null!=e.uninterpretedOption&&e.uninterpretedOption.length)for(var n=0;n<e.uninterpretedOption.length;++n)c.google.protobuf.UninterpretedOption.encode(e.uninterpretedOption[n],t.uint32(7994).fork()).ldelim();return t},T.encodeDelimited=function(e,t){return this.encode(e,t).ldelim()},T.decode=function(e,t){e instanceof s||(e=s.create(e));for(var n=void 0===t?e.len:e.pos+t,o=new c.google.protobuf.EnumOptions;e.pos<n;){var r=e.uint32();switch(r>>>3){case 2:o.allowAlias=e.bool();break;case 3:o.deprecated=e.bool();break;case 999:o.uninterpretedOption&&o.uninterpretedOption.length||(o.uninterpretedOption=[]),o.uninterpretedOption.push(c.google.protobuf.UninterpretedOption.decode(e,e.uint32()));break;default:e.skipType(7&r)}}return o},T.decodeDelimited=function(e){return e instanceof s||(e=new s(e)),this.decode(e,e.uint32())},T.verify=function(e){if(\"object\"!=typeof e||null===e)return\"object expected\";if(null!=e.allowAlias&&e.hasOwnProperty(\"allowAlias\")&&\"boolean\"!=typeof e.allowAlias)return\"allowAlias: boolean expected\";if(null!=e.deprecated&&e.hasOwnProperty(\"deprecated\")&&\"boolean\"!=typeof e.deprecated)return\"deprecated: boolean expected\";if(null!=e.uninterpretedOption&&e.hasOwnProperty(\"uninterpretedOption\")){if(!Array.isArray(e.uninterpretedOption))return\"uninterpretedOption: array expected\";for(var t=0;t<e.uninterpretedOption.length;++t){var n=c.google.protobuf.UninterpretedOption.verify(e.uninterpretedOption[t]);if(n)return\"uninterpretedOption.\"+n}}return null},T.fromObject=function(e){if(e instanceof c.google.protobuf.EnumOptions)return e;var t=new c.google.protobuf.EnumOptions;if(null!=e.allowAlias&&(t.allowAlias=Boolean(e.allowAlias)),null!=e.deprecated&&(t.deprecated=Boolean(e.deprecated)),e.uninterpretedOption){if(!Array.isArray(e.uninterpretedOption))throw TypeError(\".google.protobuf.EnumOptions.uninterpretedOption: array expected\");t.uninterpretedOption=[];for(var n=0;n<e.uninterpretedOption.length;++n){if(\"object\"!=typeof e.uninterpretedOption[n])throw TypeError(\".google.protobuf.EnumOptions.uninterpretedOption: object expected\");t.uninterpretedOption[n]=c.google.protobuf.UninterpretedOption.fromObject(e.uninterpretedOption[n])}}return t},T.toObject=function(e,t){var n={};if(((t=t||{}).arrays||t.defaults)&&(n.uninterpretedOption=[]),t.defaults&&(n.allowAlias=!1,n.deprecated=!1),null!=e.allowAlias&&e.hasOwnProperty(\"allowAlias\")&&(n.allowAlias=e.allowAlias),null!=e.deprecated&&e.hasOwnProperty(\"deprecated\")&&(n.deprecated=e.deprecated),e.uninterpretedOption&&e.uninterpretedOption.length){n.uninterpretedOption=[];for(var o=0;o<e.uninterpretedOption.length;++o)n.uninterpretedOption[o]=c.google.protobuf.UninterpretedOption.toObject(e.uninterpretedOption[o],t)}return n},T.prototype.toJSON=function(){return this.constructor.toObject(this,o.util.toJSONOptions)},T),n.EnumValueOptions=(E.prototype.deprecated=!1,E.prototype.uninterpretedOption=u.emptyArray,E.create=function(e){return new E(e)},E.encode=function(e,t){if(t=t||r.create(),null!=e.deprecated&&Object.hasOwnProperty.call(e,\"deprecated\")&&t.uint32(8).bool(e.deprecated),null!=e.uninterpretedOption&&e.uninterpretedOption.length)for(var n=0;n<e.uninterpretedOption.length;++n)c.google.protobuf.UninterpretedOption.encode(e.uninterpretedOption[n],t.uint32(7994).fork()).ldelim();return t},E.encodeDelimited=function(e,t){return this.encode(e,t).ldelim()},E.decode=function(e,t){e instanceof s||(e=s.create(e));for(var n=void 0===t?e.len:e.pos+t,o=new c.google.protobuf.EnumValueOptions;e.pos<n;){var r=e.uint32();switch(r>>>3){case 1:o.deprecated=e.bool();break;case 999:o.uninterpretedOption&&o.uninterpretedOption.length||(o.uninterpretedOption=[]),o.uninterpretedOption.push(c.google.protobuf.UninterpretedOption.decode(e,e.uint32()));break;default:e.skipType(7&r)}}return o},E.decodeDelimited=function(e){return e instanceof s||(e=new s(e)),this.decode(e,e.uint32())},E.verify=function(e){if(\"object\"!=typeof e||null===e)return\"object expected\";if(null!=e.deprecated&&e.hasOwnProperty(\"deprecated\")&&\"boolean\"!=typeof e.deprecated)return\"deprecated: boolean expected\";if(null!=e.uninterpretedOption&&e.hasOwnProperty(\"uninterpretedOption\")){if(!Array.isArray(e.uninterpretedOption))return\"uninterpretedOption: array expected\";for(var t=0;t<e.uninterpretedOption.length;++t){var n=c.google.protobuf.UninterpretedOption.verify(e.uninterpretedOption[t]);if(n)return\"uninterpretedOption.\"+n}}return null},E.fromObject=function(e){if(e instanceof c.google.protobuf.EnumValueOptions)return e;var t=new c.google.protobuf.EnumValueOptions;if(null!=e.deprecated&&(t.deprecated=Boolean(e.deprecated)),e.uninterpretedOption){if(!Array.isArray(e.uninterpretedOption))throw TypeError(\".google.protobuf.EnumValueOptions.uninterpretedOption: array expected\");t.uninterpretedOption=[];for(var n=0;n<e.uninterpretedOption.length;++n){if(\"object\"!=typeof e.uninterpretedOption[n])throw TypeError(\".google.protobuf.EnumValueOptions.uninterpretedOption: object expected\");t.uninterpretedOption[n]=c.google.protobuf.UninterpretedOption.fromObject(e.uninterpretedOption[n])}}return t},E.toObject=function(e,t){var n={};if(((t=t||{}).arrays||t.defaults)&&(n.uninterpretedOption=[]),t.defaults&&(n.deprecated=!1),null!=e.deprecated&&e.hasOwnProperty(\"deprecated\")&&(n.deprecated=e.deprecated),e.uninterpretedOption&&e.uninterpretedOption.length){n.uninterpretedOption=[];for(var o=0;o<e.uninterpretedOption.length;++o)n.uninterpretedOption[o]=c.google.protobuf.UninterpretedOption.toObject(e.uninterpretedOption[o],t)}return n},E.prototype.toJSON=function(){return this.constructor.toObject(this,o.util.toJSONOptions)},E),n.ServiceOptions=(A.prototype.deprecated=!1,A.prototype.uninterpretedOption=u.emptyArray,A.prototype[\".google.api.defaultHost\"]=\"\",A.prototype[\".google.api.oauthScopes\"]=\"\",A.create=function(e){return new A(e)},A.encode=function(e,t){if(t=t||r.create(),null!=e.deprecated&&Object.hasOwnProperty.call(e,\"deprecated\")&&t.uint32(264).bool(e.deprecated),null!=e.uninterpretedOption&&e.uninterpretedOption.length)for(var n=0;n<e.uninterpretedOption.length;++n)c.google.protobuf.UninterpretedOption.encode(e.uninterpretedOption[n],t.uint32(7994).fork()).ldelim();return null!=e[\".google.api.defaultHost\"]&&Object.hasOwnProperty.call(e,\".google.api.defaultHost\")&&t.uint32(8394).string(e[\".google.api.defaultHost\"]),null!=e[\".google.api.oauthScopes\"]&&Object.hasOwnProperty.call(e,\".google.api.oauthScopes\")&&t.uint32(8402).string(e[\".google.api.oauthScopes\"]),t},A.encodeDelimited=function(e,t){return this.encode(e,t).ldelim()},A.decode=function(e,t){e instanceof s||(e=s.create(e));for(var n=void 0===t?e.len:e.pos+t,o=new c.google.protobuf.ServiceOptions;e.pos<n;){var r=e.uint32();switch(r>>>3){case 33:o.deprecated=e.bool();break;case 999:o.uninterpretedOption&&o.uninterpretedOption.length||(o.uninterpretedOption=[]),o.uninterpretedOption.push(c.google.protobuf.UninterpretedOption.decode(e,e.uint32()));break;case 1049:o[\".google.api.defaultHost\"]=e.string();break;case 1050:o[\".google.api.oauthScopes\"]=e.string();break;default:e.skipType(7&r)}}return o},A.decodeDelimited=function(e){return e instanceof s||(e=new s(e)),this.decode(e,e.uint32())},A.verify=function(e){if(\"object\"!=typeof e||null===e)return\"object expected\";if(null!=e.deprecated&&e.hasOwnProperty(\"deprecated\")&&\"boolean\"!=typeof e.deprecated)return\"deprecated: boolean expected\";if(null!=e.uninterpretedOption&&e.hasOwnProperty(\"uninterpretedOption\")){if(!Array.isArray(e.uninterpretedOption))return\"uninterpretedOption: array expected\";for(var t=0;t<e.uninterpretedOption.length;++t){var n=c.google.protobuf.UninterpretedOption.verify(e.uninterpretedOption[t]);if(n)return\"uninterpretedOption.\"+n}}return null!=e[\".google.api.defaultHost\"]&&e.hasOwnProperty(\".google.api.defaultHost\")&&!u.isString(e[\".google.api.defaultHost\"])?\".google.api.defaultHost: string expected\":null!=e[\".google.api.oauthScopes\"]&&e.hasOwnProperty(\".google.api.oauthScopes\")&&!u.isString(e[\".google.api.oauthScopes\"])?\".google.api.oauthScopes: string expected\":null},A.fromObject=function(e){if(e instanceof c.google.protobuf.ServiceOptions)return e;var t=new c.google.protobuf.ServiceOptions;if(null!=e.deprecated&&(t.deprecated=Boolean(e.deprecated)),e.uninterpretedOption){if(!Array.isArray(e.uninterpretedOption))throw TypeError(\".google.protobuf.ServiceOptions.uninterpretedOption: array expected\");t.uninterpretedOption=[];for(var n=0;n<e.uninterpretedOption.length;++n){if(\"object\"!=typeof e.uninterpretedOption[n])throw TypeError(\".google.protobuf.ServiceOptions.uninterpretedOption: object expected\");t.uninterpretedOption[n]=c.google.protobuf.UninterpretedOption.fromObject(e.uninterpretedOption[n])}}return null!=e[\".google.api.defaultHost\"]&&(t[\".google.api.defaultHost\"]=String(e[\".google.api.defaultHost\"])),null!=e[\".google.api.oauthScopes\"]&&(t[\".google.api.oauthScopes\"]=String(e[\".google.api.oauthScopes\"])),t},A.toObject=function(e,t){var n={};if(((t=t||{}).arrays||t.defaults)&&(n.uninterpretedOption=[]),t.defaults&&(n.deprecated=!1,n[\".google.api.defaultHost\"]=\"\",n[\".google.api.oauthScopes\"]=\"\"),null!=e.deprecated&&e.hasOwnProperty(\"deprecated\")&&(n.deprecated=e.deprecated),e.uninterpretedOption&&e.uninterpretedOption.length){n.uninterpretedOption=[];for(var o=0;o<e.uninterpretedOption.length;++o)n.uninterpretedOption[o]=c.google.protobuf.UninterpretedOption.toObject(e.uninterpretedOption[o],t)}return null!=e[\".google.api.defaultHost\"]&&e.hasOwnProperty(\".google.api.defaultHost\")&&(n[\".google.api.defaultHost\"]=e[\".google.api.defaultHost\"]),null!=e[\".google.api.oauthScopes\"]&&e.hasOwnProperty(\".google.api.oauthScopes\")&&(n[\".google.api.oauthScopes\"]=e[\".google.api.oauthScopes\"]),n},A.prototype.toJSON=function(){return this.constructor.toObject(this,o.util.toJSONOptions)},A),n.MethodOptions=(N.prototype.deprecated=!1,N.prototype.idempotencyLevel=0,N.prototype.uninterpretedOption=u.emptyArray,N.prototype[\".google.api.http\"]=null,N.prototype[\".google.api.methodSignature\"]=u.emptyArray,N.create=function(e){return new N(e)},N.encode=function(e,t){if(t=t||r.create(),null!=e.deprecated&&Object.hasOwnProperty.call(e,\"deprecated\")&&t.uint32(264).bool(e.deprecated),null!=e.idempotencyLevel&&Object.hasOwnProperty.call(e,\"idempotencyLevel\")&&t.uint32(272).int32(e.idempotencyLevel),null!=e.uninterpretedOption&&e.uninterpretedOption.length)for(var n=0;n<e.uninterpretedOption.length;++n)c.google.protobuf.UninterpretedOption.encode(e.uninterpretedOption[n],t.uint32(7994).fork()).ldelim();if(null!=e[\".google.api.methodSignature\"]&&e[\".google.api.methodSignature\"].length)for(n=0;n<e[\".google.api.methodSignature\"].length;++n)t.uint32(8410).string(e[\".google.api.methodSignature\"][n]);return null!=e[\".google.api.http\"]&&Object.hasOwnProperty.call(e,\".google.api.http\")&&c.google.api.HttpRule.encode(e[\".google.api.http\"],t.uint32(578365826).fork()).ldelim(),t},N.encodeDelimited=function(e,t){return this.encode(e,t).ldelim()},N.decode=function(e,t){e instanceof s||(e=s.create(e));for(var n=void 0===t?e.len:e.pos+t,o=new c.google.protobuf.MethodOptions;e.pos<n;){var r=e.uint32();switch(r>>>3){case 33:o.deprecated=e.bool();break;case 34:o.idempotencyLevel=e.int32();break;case 999:o.uninterpretedOption&&o.uninterpretedOption.length||(o.uninterpretedOption=[]),o.uninterpretedOption.push(c.google.protobuf.UninterpretedOption.decode(e,e.uint32()));break;case 72295728:o[\".google.api.http\"]=c.google.api.HttpRule.decode(e,e.uint32());break;case 1051:o[\".google.api.methodSignature\"]&&o[\".google.api.methodSignature\"].length||(o[\".google.api.methodSignature\"]=[]),o[\".google.api.methodSignature\"].push(e.string());break;default:e.skipType(7&r)}}return o},N.decodeDelimited=function(e){return e instanceof s||(e=new s(e)),this.decode(e,e.uint32())},N.verify=function(e){if(\"object\"!=typeof e||null===e)return\"object expected\";if(null!=e.deprecated&&e.hasOwnProperty(\"deprecated\")&&\"boolean\"!=typeof e.deprecated)return\"deprecated: boolean expected\";if(null!=e.idempotencyLevel&&e.hasOwnProperty(\"idempotencyLevel\"))switch(e.idempotencyLevel){default:return\"idempotencyLevel: enum value expected\";case 0:case 1:case 2:}if(null!=e.uninterpretedOption&&e.hasOwnProperty(\"uninterpretedOption\")){if(!Array.isArray(e.uninterpretedOption))return\"uninterpretedOption: array expected\";for(var t=0;t<e.uninterpretedOption.length;++t)if(n=c.google.protobuf.UninterpretedOption.verify(e.uninterpretedOption[t]))return\"uninterpretedOption.\"+n}var n;if(null!=e[\".google.api.http\"]&&e.hasOwnProperty(\".google.api.http\")&&(n=c.google.api.HttpRule.verify(e[\".google.api.http\"])))return\".google.api.http.\"+n;if(null!=e[\".google.api.methodSignature\"]&&e.hasOwnProperty(\".google.api.methodSignature\")){if(!Array.isArray(e[\".google.api.methodSignature\"]))return\".google.api.methodSignature: array expected\";for(t=0;t<e[\".google.api.methodSignature\"].length;++t)if(!u.isString(e[\".google.api.methodSignature\"][t]))return\".google.api.methodSignature: string[] expected\"}return null},N.fromObject=function(e){if(e instanceof c.google.protobuf.MethodOptions)return e;var t=new c.google.protobuf.MethodOptions;switch(null!=e.deprecated&&(t.deprecated=Boolean(e.deprecated)),e.idempotencyLevel){case\"IDEMPOTENCY_UNKNOWN\":case 0:t.idempotencyLevel=0;break;case\"NO_SIDE_EFFECTS\":case 1:t.idempotencyLevel=1;break;case\"IDEMPOTENT\":case 2:t.idempotencyLevel=2}if(e.uninterpretedOption){if(!Array.isArray(e.uninterpretedOption))throw TypeError(\".google.protobuf.MethodOptions.uninterpretedOption: array expected\");t.uninterpretedOption=[];for(var n=0;n<e.uninterpretedOption.length;++n){if(\"object\"!=typeof e.uninterpretedOption[n])throw TypeError(\".google.protobuf.MethodOptions.uninterpretedOption: object expected\");t.uninterpretedOption[n]=c.google.protobuf.UninterpretedOption.fromObject(e.uninterpretedOption[n])}}if(null!=e[\".google.api.http\"]){if(\"object\"!=typeof e[\".google.api.http\"])throw TypeError(\".google.protobuf.MethodOptions..google.api.http: object expected\");t[\".google.api.http\"]=c.google.api.HttpRule.fromObject(e[\".google.api.http\"])}if(e[\".google.api.methodSignature\"]){if(!Array.isArray(e[\".google.api.methodSignature\"]))throw TypeError(\".google.protobuf.MethodOptions..google.api.methodSignature: array expected\");t[\".google.api.methodSignature\"]=[];for(n=0;n<e[\".google.api.methodSignature\"].length;++n)t[\".google.api.methodSignature\"][n]=String(e[\".google.api.methodSignature\"][n])}return t},N.toObject=function(e,t){var n={};if(((t=t||{}).arrays||t.defaults)&&(n.uninterpretedOption=[],n[\".google.api.methodSignature\"]=[]),t.defaults&&(n.deprecated=!1,n.idempotencyLevel=t.enums===String?\"IDEMPOTENCY_UNKNOWN\":0,n[\".google.api.http\"]=null),null!=e.deprecated&&e.hasOwnProperty(\"deprecated\")&&(n.deprecated=e.deprecated),null!=e.idempotencyLevel&&e.hasOwnProperty(\"idempotencyLevel\")&&(n.idempotencyLevel=t.enums===String?c.google.protobuf.MethodOptions.IdempotencyLevel[e.idempotencyLevel]:e.idempotencyLevel),e.uninterpretedOption&&e.uninterpretedOption.length){n.uninterpretedOption=[];for(var o=0;o<e.uninterpretedOption.length;++o)n.uninterpretedOption[o]=c.google.protobuf.UninterpretedOption.toObject(e.uninterpretedOption[o],t)}if(e[\".google.api.methodSignature\"]&&e[\".google.api.methodSignature\"].length){n[\".google.api.methodSignature\"]=[];for(o=0;o<e[\".google.api.methodSignature\"].length;++o)n[\".google.api.methodSignature\"][o]=e[\".google.api.methodSignature\"][o]}return null!=e[\".google.api.http\"]&&e.hasOwnProperty(\".google.api.http\")&&(n[\".google.api.http\"]=c.google.api.HttpRule.toObject(e[\".google.api.http\"],t)),n},N.prototype.toJSON=function(){return this.constructor.toObject(this,o.util.toJSONOptions)},N.IdempotencyLevel=(e={},(t=Object.create(e))[e[0]=\"IDEMPOTENCY_UNKNOWN\"]=0,t[e[1]=\"NO_SIDE_EFFECTS\"]=1,t[e[2]=\"IDEMPOTENT\"]=2,t),N),n.UninterpretedOption=(I.prototype.name=u.emptyArray,I.prototype.identifierValue=\"\",I.prototype.positiveIntValue=u.Long?u.Long.fromBits(0,0,!0):0,I.prototype.negativeIntValue=u.Long?u.Long.fromBits(0,0,!1):0,I.prototype.doubleValue=0,I.prototype.stringValue=u.newBuffer([]),I.prototype.aggregateValue=\"\",I.create=function(e){return new I(e)},I.encode=function(e,t){if(t=t||r.create(),null!=e.name&&e.name.length)for(var n=0;n<e.name.length;++n)c.google.protobuf.UninterpretedOption.NamePart.encode(e.name[n],t.uint32(18).fork()).ldelim();return null!=e.identifierValue&&Object.hasOwnProperty.call(e,\"identifierValue\")&&t.uint32(26).string(e.identifierValue),null!=e.positiveIntValue&&Object.hasOwnProperty.call(e,\"positiveIntValue\")&&t.uint32(32).uint64(e.positiveIntValue),null!=e.negativeIntValue&&Object.hasOwnProperty.call(e,\"negativeIntValue\")&&t.uint32(40).int64(e.negativeIntValue),null!=e.doubleValue&&Object.hasOwnProperty.call(e,\"doubleValue\")&&t.uint32(49).double(e.doubleValue),null!=e.stringValue&&Object.hasOwnProperty.call(e,\"stringValue\")&&t.uint32(58).bytes(e.stringValue),null!=e.aggregateValue&&Object.hasOwnProperty.call(e,\"aggregateValue\")&&t.uint32(66).string(e.aggregateValue),t},I.encodeDelimited=function(e,t){return this.encode(e,t).ldelim()},I.decode=function(e,t){e instanceof s||(e=s.create(e));for(var n=void 0===t?e.len:e.pos+t,o=new c.google.protobuf.UninterpretedOption;e.pos<n;){var r=e.uint32();switch(r>>>3){case 2:o.name&&o.name.length||(o.name=[]),o.name.push(c.google.protobuf.UninterpretedOption.NamePart.decode(e,e.uint32()));break;case 3:o.identifierValue=e.string();break;case 4:o.positiveIntValue=e.uint64();break;case 5:o.negativeIntValue=e.int64();break;case 6:o.doubleValue=e.double();break;case 7:o.stringValue=e.bytes();break;case 8:o.aggregateValue=e.string();break;default:e.skipType(7&r)}}return o},I.decodeDelimited=function(e){return e instanceof s||(e=new s(e)),this.decode(e,e.uint32())},I.verify=function(e){if(\"object\"!=typeof e||null===e)return\"object expected\";if(null!=e.name&&e.hasOwnProperty(\"name\")){if(!Array.isArray(e.name))return\"name: array expected\";for(var t=0;t<e.name.length;++t){var n=c.google.protobuf.UninterpretedOption.NamePart.verify(e.name[t]);if(n)return\"name.\"+n}}return null!=e.identifierValue&&e.hasOwnProperty(\"identifierValue\")&&!u.isString(e.identifierValue)?\"identifierValue: string expected\":null!=e.positiveIntValue&&e.hasOwnProperty(\"positiveIntValue\")&&!(u.isInteger(e.positiveIntValue)||e.positiveIntValue&&u.isInteger(e.positiveIntValue.low)&&u.isInteger(e.positiveIntValue.high))?\"positiveIntValue: integer|Long expected\":null!=e.negativeIntValue&&e.hasOwnProperty(\"negativeIntValue\")&&!(u.isInteger(e.negativeIntValue)||e.negativeIntValue&&u.isInteger(e.negativeIntValue.low)&&u.isInteger(e.negativeIntValue.high))?\"negativeIntValue: integer|Long expected\":null!=e.doubleValue&&e.hasOwnProperty(\"doubleValue\")&&\"number\"!=typeof e.doubleValue?\"doubleValue: number expected\":null!=e.stringValue&&e.hasOwnProperty(\"stringValue\")&&!(e.stringValue&&\"number\"==typeof e.stringValue.length||u.isString(e.stringValue))?\"stringValue: buffer expected\":null!=e.aggregateValue&&e.hasOwnProperty(\"aggregateValue\")&&!u.isString(e.aggregateValue)?\"aggregateValue: string expected\":null},I.fromObject=function(e){if(e instanceof c.google.protobuf.UninterpretedOption)return e;var t=new c.google.protobuf.UninterpretedOption;if(e.name){if(!Array.isArray(e.name))throw TypeError(\".google.protobuf.UninterpretedOption.name: array expected\");t.name=[];for(var n=0;n<e.name.length;++n){if(\"object\"!=typeof e.name[n])throw TypeError(\".google.protobuf.UninterpretedOption.name: object expected\");t.name[n]=c.google.protobuf.UninterpretedOption.NamePart.fromObject(e.name[n])}}return null!=e.identifierValue&&(t.identifierValue=String(e.identifierValue)),null!=e.positiveIntValue&&(u.Long?(t.positiveIntValue=u.Long.fromValue(e.positiveIntValue)).unsigned=!0:\"string\"==typeof e.positiveIntValue?t.positiveIntValue=parseInt(e.positiveIntValue,10):\"number\"==typeof e.positiveIntValue?t.positiveIntValue=e.positiveIntValue:\"object\"==typeof e.positiveIntValue&&(t.positiveIntValue=new u.LongBits(e.positiveIntValue.low>>>0,e.positiveIntValue.high>>>0).toNumber(!0))),null!=e.negativeIntValue&&(u.Long?(t.negativeIntValue=u.Long.fromValue(e.negativeIntValue)).unsigned=!1:\"string\"==typeof e.negativeIntValue?t.negativeIntValue=parseInt(e.negativeIntValue,10):\"number\"==typeof e.negativeIntValue?t.negativeIntValue=e.negativeIntValue:\"object\"==typeof e.negativeIntValue&&(t.negativeIntValue=new u.LongBits(e.negativeIntValue.low>>>0,e.negativeIntValue.high>>>0).toNumber())),null!=e.doubleValue&&(t.doubleValue=Number(e.doubleValue)),null!=e.stringValue&&(\"string\"==typeof e.stringValue?u.base64.decode(e.stringValue,t.stringValue=u.newBuffer(u.base64.length(e.stringValue)),0):e.stringValue.length&&(t.stringValue=e.stringValue)),null!=e.aggregateValue&&(t.aggregateValue=String(e.aggregateValue)),t},I.toObject=function(e,t){var n,o={};if(((t=t||{}).arrays||t.defaults)&&(o.name=[]),t.defaults&&(o.identifierValue=\"\",u.Long?(n=new u.Long(0,0,!0),o.positiveIntValue=t.longs===String?n.toString():t.longs===Number?n.toNumber():n):o.positiveIntValue=t.longs===String?\"0\":0,u.Long?(n=new u.Long(0,0,!1),o.negativeIntValue=t.longs===String?n.toString():t.longs===Number?n.toNumber():n):o.negativeIntValue=t.longs===String?\"0\":0,o.doubleValue=0,t.bytes===String?o.stringValue=\"\":(o.stringValue=[],t.bytes!==Array&&(o.stringValue=u.newBuffer(o.stringValue))),o.aggregateValue=\"\"),e.name&&e.name.length){o.name=[];for(var r=0;r<e.name.length;++r)o.name[r]=c.google.protobuf.UninterpretedOption.NamePart.toObject(e.name[r],t)}return null!=e.identifierValue&&e.hasOwnProperty(\"identifierValue\")&&(o.identifierValue=e.identifierValue),null!=e.positiveIntValue&&e.hasOwnProperty(\"positiveIntValue\")&&(\"number\"==typeof e.positiveIntValue?o.positiveIntValue=t.longs===String?String(e.positiveIntValue):e.positiveIntValue:o.positiveIntValue=t.longs===String?u.Long.prototype.toString.call(e.positiveIntValue):t.longs===Number?new u.LongBits(e.positiveIntValue.low>>>0,e.positiveIntValue.high>>>0).toNumber(!0):e.positiveIntValue),null!=e.negativeIntValue&&e.hasOwnProperty(\"negativeIntValue\")&&(\"number\"==typeof e.negativeIntValue?o.negativeIntValue=t.longs===String?String(e.negativeIntValue):e.negativeIntValue:o.negativeIntValue=t.longs===String?u.Long.prototype.toString.call(e.negativeIntValue):t.longs===Number?new u.LongBits(e.negativeIntValue.low>>>0,e.negativeIntValue.high>>>0).toNumber():e.negativeIntValue),null!=e.doubleValue&&e.hasOwnProperty(\"doubleValue\")&&(o.doubleValue=t.json&&!isFinite(e.doubleValue)?String(e.doubleValue):e.doubleValue),null!=e.stringValue&&e.hasOwnProperty(\"stringValue\")&&(o.stringValue=t.bytes===String?u.base64.encode(e.stringValue,0,e.stringValue.length):t.bytes===Array?Array.prototype.slice.call(e.stringValue):e.stringValue),null!=e.aggregateValue&&e.hasOwnProperty(\"aggregateValue\")&&(o.aggregateValue=e.aggregateValue),o},I.prototype.toJSON=function(){return this.constructor.toObject(this,o.util.toJSONOptions)},I.NamePart=(R.prototype.namePart=\"\",R.prototype.isExtension=!1,R.create=function(e){return new R(e)},R.encode=function(e,t){return(t=t||r.create()).uint32(10).string(e.namePart),t.uint32(16).bool(e.isExtension),t},R.encodeDelimited=function(e,t){return this.encode(e,t).ldelim()},R.decode=function(e,t){e instanceof s||(e=s.create(e));for(var n=void 0===t?e.len:e.pos+t,o=new c.google.protobuf.UninterpretedOption.NamePart;e.pos<n;){var r=e.uint32();switch(r>>>3){case 1:o.namePart=e.string();break;case 2:o.isExtension=e.bool();break;default:e.skipType(7&r)}}if(!o.hasOwnProperty(\"namePart\"))throw u.ProtocolError(\"missing required 'namePart'\",{instance:o});if(o.hasOwnProperty(\"isExtension\"))return o;throw u.ProtocolError(\"missing required 'isExtension'\",{instance:o})},R.decodeDelimited=function(e){return e instanceof s||(e=new s(e)),this.decode(e,e.uint32())},R.verify=function(e){return\"object\"!=typeof e||null===e?\"object expected\":u.isString(e.namePart)?\"boolean\"!=typeof e.isExtension?\"isExtension: boolean expected\":null:\"namePart: string expected\"},R.fromObject=function(e){var t;return e instanceof c.google.protobuf.UninterpretedOption.NamePart?e:(t=new c.google.protobuf.UninterpretedOption.NamePart,null!=e.namePart&&(t.namePart=String(e.namePart)),null!=e.isExtension&&(t.isExtension=Boolean(e.isExtension)),t)},R.toObject=function(e,t){var n={};return(t=t||{}).defaults&&(n.namePart=\"\",n.isExtension=!1),null!=e.namePart&&e.hasOwnProperty(\"namePart\")&&(n.namePart=e.namePart),null!=e.isExtension&&e.hasOwnProperty(\"isExtension\")&&(n.isExtension=e.isExtension),n},R.prototype.toJSON=function(){return this.constructor.toObject(this,o.util.toJSONOptions)},R),I),n.SourceCodeInfo=(_.prototype.location=u.emptyArray,_.create=function(e){return new _(e)},_.encode=function(e,t){if(t=t||r.create(),null!=e.location&&e.location.length)for(var n=0;n<e.location.length;++n)c.google.protobuf.SourceCodeInfo.Location.encode(e.location[n],t.uint32(10).fork()).ldelim();return t},_.encodeDelimited=function(e,t){return this.encode(e,t).ldelim()},_.decode=function(e,t){e instanceof s||(e=s.create(e));for(var n=void 0===t?e.len:e.pos+t,o=new c.google.protobuf.SourceCodeInfo;e.pos<n;){var r=e.uint32();r>>>3==1?(o.location&&o.location.length||(o.location=[]),o.location.push(c.google.protobuf.SourceCodeInfo.Location.decode(e,e.uint32()))):e.skipType(7&r)}return o},_.decodeDelimited=function(e){return e instanceof s||(e=new s(e)),this.decode(e,e.uint32())},_.verify=function(e){if(\"object\"!=typeof e||null===e)return\"object expected\";if(null!=e.location&&e.hasOwnProperty(\"location\")){if(!Array.isArray(e.location))return\"location: array expected\";for(var t=0;t<e.location.length;++t){var n=c.google.protobuf.SourceCodeInfo.Location.verify(e.location[t]);if(n)return\"location.\"+n}}return null},_.fromObject=function(e){if(e instanceof c.google.protobuf.SourceCodeInfo)return e;var t=new c.google.protobuf.SourceCodeInfo;if(e.location){if(!Array.isArray(e.location))throw TypeError(\".google.protobuf.SourceCodeInfo.location: array expected\");t.location=[];for(var n=0;n<e.location.length;++n){if(\"object\"!=typeof e.location[n])throw TypeError(\".google.protobuf.SourceCodeInfo.location: object expected\");t.location[n]=c.google.protobuf.SourceCodeInfo.Location.fromObject(e.location[n])}}return t},_.toObject=function(e,t){var n={};if(((t=t||{}).arrays||t.defaults)&&(n.location=[]),e.location&&e.location.length){n.location=[];for(var o=0;o<e.location.length;++o)n.location[o]=c.google.protobuf.SourceCodeInfo.Location.toObject(e.location[o],t)}return n},_.prototype.toJSON=function(){return this.constructor.toObject(this,o.util.toJSONOptions)},_.Location=(C.prototype.path=u.emptyArray,C.prototype.span=u.emptyArray,C.prototype.leadingComments=\"\",C.prototype.trailingComments=\"\",C.prototype.leadingDetachedComments=u.emptyArray,C.create=function(e){return new C(e)},C.encode=function(e,t){if(t=t||r.create(),null!=e.path&&e.path.length){t.uint32(10).fork();for(var n=0;n<e.path.length;++n)t.int32(e.path[n]);t.ldelim()}if(null!=e.span&&e.span.length){t.uint32(18).fork();for(n=0;n<e.span.length;++n)t.int32(e.span[n]);t.ldelim()}if(null!=e.leadingComments&&Object.hasOwnProperty.call(e,\"leadingComments\")&&t.uint32(26).string(e.leadingComments),null!=e.trailingComments&&Object.hasOwnProperty.call(e,\"trailingComments\")&&t.uint32(34).string(e.trailingComments),null!=e.leadingDetachedComments&&e.leadingDetachedComments.length)for(n=0;n<e.leadingDetachedComments.length;++n)t.uint32(50).string(e.leadingDetachedComments[n]);return t},C.encodeDelimited=function(e,t){return this.encode(e,t).ldelim()},C.decode=function(e,t){e instanceof s||(e=s.create(e));for(var n=void 0===t?e.len:e.pos+t,o=new c.google.protobuf.SourceCodeInfo.Location;e.pos<n;){var r=e.uint32();switch(r>>>3){case 1:if(o.path&&o.path.length||(o.path=[]),2==(7&r))for(var i=e.uint32()+e.pos;e.pos<i;)o.path.push(e.int32());else o.path.push(e.int32());break;case 2:if(o.span&&o.span.length||(o.span=[]),2==(7&r))for(i=e.uint32()+e.pos;e.pos<i;)o.span.push(e.int32());else o.span.push(e.int32());break;case 3:o.leadingComments=e.string();break;case 4:o.trailingComments=e.string();break;case 6:o.leadingDetachedComments&&o.leadingDetachedComments.length||(o.leadingDetachedComments=[]),o.leadingDetachedComments.push(e.string());break;default:e.skipType(7&r)}}return o},C.decodeDelimited=function(e){return e instanceof s||(e=new s(e)),this.decode(e,e.uint32())},C.verify=function(e){if(\"object\"!=typeof e||null===e)return\"object expected\";if(null!=e.path&&e.hasOwnProperty(\"path\")){if(!Array.isArray(e.path))return\"path: array expected\";for(var t=0;t<e.path.length;++t)if(!u.isInteger(e.path[t]))return\"path: integer[] expected\"}if(null!=e.span&&e.hasOwnProperty(\"span\")){if(!Array.isArray(e.span))return\"span: array expected\";for(t=0;t<e.span.length;++t)if(!u.isInteger(e.span[t]))return\"span: integer[] expected\"}if(null!=e.leadingComments&&e.hasOwnProperty(\"leadingComments\")&&!u.isString(e.leadingComments))return\"leadingComments: string expected\";if(null!=e.trailingComments&&e.hasOwnProperty(\"trailingComments\")&&!u.isString(e.trailingComments))return\"trailingComments: string expected\";if(null!=e.leadingDetachedComments&&e.hasOwnProperty(\"leadingDetachedComments\")){if(!Array.isArray(e.leadingDetachedComments))return\"leadingDetachedComments: array expected\";for(t=0;t<e.leadingDetachedComments.length;++t)if(!u.isString(e.leadingDetachedComments[t]))return\"leadingDetachedComments: string[] expected\"}return null},C.fromObject=function(e){if(e instanceof c.google.protobuf.SourceCodeInfo.Location)return e;var t=new c.google.protobuf.SourceCodeInfo.Location;if(e.path){if(!Array.isArray(e.path))throw TypeError(\".google.protobuf.SourceCodeInfo.Location.path: array expected\");t.path=[];for(var n=0;n<e.path.length;++n)t.path[n]=0|e.path[n]}if(e.span){if(!Array.isArray(e.span))throw TypeError(\".google.protobuf.SourceCodeInfo.Location.span: array expected\");t.span=[];for(n=0;n<e.span.length;++n)t.span[n]=0|e.span[n]}if(null!=e.leadingComments&&(t.leadingComments=String(e.leadingComments)),null!=e.trailingComments&&(t.trailingComments=String(e.trailingComments)),e.leadingDetachedComments){if(!Array.isArray(e.leadingDetachedComments))throw TypeError(\".google.protobuf.SourceCodeInfo.Location.leadingDetachedComments: array expected\");t.leadingDetachedComments=[];for(n=0;n<e.leadingDetachedComments.length;++n)t.leadingDetachedComments[n]=String(e.leadingDetachedComments[n])}return t},C.toObject=function(e,t){var n={};if(((t=t||{}).arrays||t.defaults)&&(n.path=[],n.span=[],n.leadingDetachedComments=[]),t.defaults&&(n.leadingComments=\"\",n.trailingComments=\"\"),e.path&&e.path.length){n.path=[];for(var o=0;o<e.path.length;++o)n.path[o]=e.path[o]}if(e.span&&e.span.length){n.span=[];for(o=0;o<e.span.length;++o)n.span[o]=e.span[o]}if(null!=e.leadingComments&&e.hasOwnProperty(\"leadingComments\")&&(n.leadingComments=e.leadingComments),null!=e.trailingComments&&e.hasOwnProperty(\"trailingComments\")&&(n.trailingComments=e.trailingComments),e.leadingDetachedComments&&e.leadingDetachedComments.length){n.leadingDetachedComments=[];for(o=0;o<e.leadingDetachedComments.length;++o)n.leadingDetachedComments[o]=e.leadingDetachedComments[o]}return n},C.prototype.toJSON=function(){return this.constructor.toObject(this,o.util.toJSONOptions)},C),_),n.GeneratedCodeInfo=(J.prototype.annotation=u.emptyArray,J.create=function(e){return new J(e)},J.encode=function(e,t){if(t=t||r.create(),null!=e.annotation&&e.annotation.length)for(var n=0;n<e.annotation.length;++n)c.google.protobuf.GeneratedCodeInfo.Annotation.encode(e.annotation[n],t.uint32(10).fork()).ldelim();return t},J.encodeDelimited=function(e,t){return this.encode(e,t).ldelim()},J.decode=function(e,t){e instanceof s||(e=s.create(e));for(var n=void 0===t?e.len:e.pos+t,o=new c.google.protobuf.GeneratedCodeInfo;e.pos<n;){var r=e.uint32();r>>>3==1?(o.annotation&&o.annotation.length||(o.annotation=[]),o.annotation.push(c.google.protobuf.GeneratedCodeInfo.Annotation.decode(e,e.uint32()))):e.skipType(7&r)}return o},J.decodeDelimited=function(e){return e instanceof s||(e=new s(e)),this.decode(e,e.uint32())},J.verify=function(e){if(\"object\"!=typeof e||null===e)return\"object expected\";if(null!=e.annotation&&e.hasOwnProperty(\"annotation\")){if(!Array.isArray(e.annotation))return\"annotation: array expected\";for(var t=0;t<e.annotation.length;++t){var n=c.google.protobuf.GeneratedCodeInfo.Annotation.verify(e.annotation[t]);if(n)return\"annotation.\"+n}}return null},J.fromObject=function(e){if(e instanceof c.google.protobuf.GeneratedCodeInfo)return e;var t=new c.google.protobuf.GeneratedCodeInfo;if(e.annotation){if(!Array.isArray(e.annotation))throw TypeError(\".google.protobuf.GeneratedCodeInfo.annotation: array expected\");t.annotation=[];for(var n=0;n<e.annotation.length;++n){if(\"object\"!=typeof e.annotation[n])throw TypeError(\".google.protobuf.GeneratedCodeInfo.annotation: object expected\");t.annotation[n]=c.google.protobuf.GeneratedCodeInfo.Annotation.fromObject(e.annotation[n])}}return t},J.toObject=function(e,t){var n={};if(((t=t||{}).arrays||t.defaults)&&(n.annotation=[]),e.annotation&&e.annotation.length){n.annotation=[];for(var o=0;o<e.annotation.length;++o)n.annotation[o]=c.google.protobuf.GeneratedCodeInfo.Annotation.toObject(e.annotation[o],t)}return n},J.prototype.toJSON=function(){return this.constructor.toObject(this,o.util.toJSONOptions)},J.Annotation=(V.prototype.path=u.emptyArray,V.prototype.sourceFile=\"\",V.prototype.begin=0,V.prototype.end=0,V.create=function(e){return new V(e)},V.encode=function(e,t){if(t=t||r.create(),null!=e.path&&e.path.length){t.uint32(10).fork();for(var n=0;n<e.path.length;++n)t.int32(e.path[n]);t.ldelim()}return null!=e.sourceFile&&Object.hasOwnProperty.call(e,\"sourceFile\")&&t.uint32(18).string(e.sourceFile),null!=e.begin&&Object.hasOwnProperty.call(e,\"begin\")&&t.uint32(24).int32(e.begin),null!=e.end&&Object.hasOwnProperty.call(e,\"end\")&&t.uint32(32).int32(e.end),t},V.encodeDelimited=function(e,t){return this.encode(e,t).ldelim()},V.decode=function(e,t){e instanceof s||(e=s.create(e));for(var n=void 0===t?e.len:e.pos+t,o=new c.google.protobuf.GeneratedCodeInfo.Annotation;e.pos<n;){var r=e.uint32();switch(r>>>3){case 1:if(o.path&&o.path.length||(o.path=[]),2==(7&r))for(var i=e.uint32()+e.pos;e.pos<i;)o.path.push(e.int32());else o.path.push(e.int32());break;case 2:o.sourceFile=e.string();break;case 3:o.begin=e.int32();break;case 4:o.end=e.int32();break;default:e.skipType(7&r)}}return o},V.decodeDelimited=function(e){return e instanceof s||(e=new s(e)),this.decode(e,e.uint32())},V.verify=function(e){if(\"object\"!=typeof e||null===e)return\"object expected\";if(null!=e.path&&e.hasOwnProperty(\"path\")){if(!Array.isArray(e.path))return\"path: array expected\";for(var t=0;t<e.path.length;++t)if(!u.isInteger(e.path[t]))return\"path: integer[] expected\"}return null!=e.sourceFile&&e.hasOwnProperty(\"sourceFile\")&&!u.isString(e.sourceFile)?\"sourceFile: string expected\":null!=e.begin&&e.hasOwnProperty(\"begin\")&&!u.isInteger(e.begin)?\"begin: integer expected\":null!=e.end&&e.hasOwnProperty(\"end\")&&!u.isInteger(e.end)?\"end: integer expected\":null},V.fromObject=function(e){if(e instanceof c.google.protobuf.GeneratedCodeInfo.Annotation)return e;var t=new c.google.protobuf.GeneratedCodeInfo.Annotation;if(e.path){if(!Array.isArray(e.path))throw TypeError(\".google.protobuf.GeneratedCodeInfo.Annotation.path: array expected\");t.path=[];for(var n=0;n<e.path.length;++n)t.path[n]=0|e.path[n]}return null!=e.sourceFile&&(t.sourceFile=String(e.sourceFile)),null!=e.begin&&(t.begin=0|e.begin),null!=e.end&&(t.end=0|e.end),t},V.toObject=function(e,t){var n={};if(((t=t||{}).arrays||t.defaults)&&(n.path=[]),t.defaults&&(n.sourceFile=\"\",n.begin=0,n.end=0),e.path&&e.path.length){n.path=[];for(var o=0;o<e.path.length;++o)n.path[o]=e.path[o]}return null!=e.sourceFile&&e.hasOwnProperty(\"sourceFile\")&&(n.sourceFile=e.sourceFile),null!=e.begin&&e.hasOwnProperty(\"begin\")&&(n.begin=e.begin),null!=e.end&&e.hasOwnProperty(\"end\")&&(n.end=e.end),n},V.prototype.toJSON=function(){return this.constructor.toObject(this,o.util.toJSONOptions)},V),J),n.Any=(H.prototype.type_url=\"\",H.prototype.value=u.newBuffer([]),H.create=function(e){return new H(e)},H.encode=function(e,t){return t=t||r.create(),null!=e.type_url&&Object.hasOwnProperty.call(e,\"type_url\")&&t.uint32(10).string(e.type_url),null!=e.value&&Object.hasOwnProperty.call(e,\"value\")&&t.uint32(18).bytes(e.value),t},H.encodeDelimited=function(e,t){return this.encode(e,t).ldelim()},H.decode=function(e,t){e instanceof s||(e=s.create(e));for(var n=void 0===t?e.len:e.pos+t,o=new c.google.protobuf.Any;e.pos<n;){var r=e.uint32();switch(r>>>3){case 1:o.type_url=e.string();break;case 2:o.value=e.bytes();break;default:e.skipType(7&r)}}return o},H.decodeDelimited=function(e){return e instanceof s||(e=new s(e)),this.decode(e,e.uint32())},H.verify=function(e){return\"object\"!=typeof e||null===e?\"object expected\":null!=e.type_url&&e.hasOwnProperty(\"type_url\")&&!u.isString(e.type_url)?\"type_url: string expected\":null!=e.value&&e.hasOwnProperty(\"value\")&&!(e.value&&\"number\"==typeof e.value.length||u.isString(e.value))?\"value: buffer expected\":null},H.fromObject=function(e){var t;return e instanceof c.google.protobuf.Any?e:(t=new c.google.protobuf.Any,null!=e.type_url&&(t.type_url=String(e.type_url)),null!=e.value&&(\"string\"==typeof e.value?u.base64.decode(e.value,t.value=u.newBuffer(u.base64.length(e.value)),0):e.value.length&&(t.value=e.value)),t)},H.toObject=function(e,t){var n={};return(t=t||{}).defaults&&(n.type_url=\"\",t.bytes===String?n.value=\"\":(n.value=[],t.bytes!==Array&&(n.value=u.newBuffer(n.value)))),null!=e.type_url&&e.hasOwnProperty(\"type_url\")&&(n.type_url=e.type_url),null!=e.value&&e.hasOwnProperty(\"value\")&&(n.value=t.bytes===String?u.base64.encode(e.value,0,e.value.length):t.bytes===Array?Array.prototype.slice.call(e.value):e.value),n},H.prototype.toJSON=function(){return this.constructor.toObject(this,o.util.toJSONOptions)},H),n),F),c});//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvZ29vZ2xlLWdheC9idWlsZC9wcm90b3MvbG9jYXRpb25zLmpzIiwibWFwcGluZ3MiOiJBQUFBLHFHQUFLLEtBQXFDLENBQUMsaUNBQU8sQ0FBQywyRkFBb0IsQ0FBQyxvQ0FBQyxDQUFDO0FBQUE7QUFBQTtBQUFBLGtHQUFDLENBQUMsQ0FBOEgsQ0FBQyxjQUFjLG1HQUFtRyxFQUFFLGtCQUFrQiwrQkFBK0IsY0FBYyxrQ0FBa0MsV0FBVyx3Q0FBd0MsY0FBYyxvREFBb0QsV0FBVyx3Q0FBd0MsY0FBYyxrQ0FBa0MsV0FBVyx3Q0FBd0MsY0FBYyxpQkFBaUIsZ0NBQWdDLFdBQVcsd0NBQXdDLGNBQWMsZ0RBQWdELFdBQVcsd0NBQXdDLGNBQWMsNkRBQTZELFdBQVcsd0NBQXdDLGNBQWMsa0NBQWtDLFdBQVcsd0NBQXdDLGNBQWMsK0NBQStDLFdBQVcsd0NBQXdDLGNBQWMsNEtBQTRLLFdBQVcsd0NBQXdDLGNBQWMsMExBQTBMLFdBQVcsd0NBQXdDLGNBQWMsa0NBQWtDLFdBQVcsd0NBQXdDLGNBQWMsa0NBQWtDLFdBQVcsd0NBQXdDLGNBQWMsOERBQThELFdBQVcsd0NBQXdDLGNBQWMsa0NBQWtDLFdBQVcsd0NBQXdDLGNBQWMsa0NBQWtDLFdBQVcsd0NBQXdDLGNBQWMsMkZBQTJGLFdBQVcsd0NBQXdDLGNBQWMsa0NBQWtDLFdBQVcsd0NBQXdDLGNBQWMsa0NBQWtDLFdBQVcsd0NBQXdDLGNBQWMsaURBQWlELFdBQVcsd0NBQXdDLGNBQWMsa0NBQWtDLFdBQVcsd0NBQXdDLGNBQWMsOERBQThELFdBQVcsd0NBQXdDLGNBQWMsOERBQThELFdBQVcsd0NBQXdDLGNBQWMsOERBQThELFdBQVcsd0NBQXdDLGNBQWMsOERBQThELFdBQVcsd0NBQXdDLGNBQWMsOERBQThELFdBQVcsd0NBQXdDLGNBQWMsOERBQThELFdBQVcsd0NBQXdDLGNBQWMsOERBQThELFdBQVcsd0NBQXdDLGNBQWMscUdBQXFHLFdBQVcsd0NBQXdDLGNBQWMsK0NBQStDLFdBQVcsd0NBQXdDLGNBQWMsa0NBQWtDLFdBQVcsd0NBQXdDLGNBQWMsbURBQW1ELFdBQVcsd0NBQXdDLGNBQWMsNEZBQTRGLFdBQVcsd0NBQXdDLGNBQWMscURBQXFELFdBQVcsd0NBQXdDLGNBQWMsK0NBQStDLFdBQVcsd0NBQXdDLGNBQWMsa0NBQWtDLFdBQVcsd0NBQXdDLHNCQUFzQixjQUFjLGlCQUFpQix5R0FBeUcsdUJBQXVCLGlFQUFpRSxzSEFBc0gsU0FBUyxzQkFBc0IsZ0VBQWdFLHVHQUF1RyxTQUFTLG9CQUFvQiw0SUFBNEksZ0JBQWdCLHdCQUF3Qix5WEFBeVgsaUNBQWlDLGlDQUFpQyx3QkFBd0IsZ0NBQWdDLHNGQUFzRixRQUFRLEVBQUUsaUJBQWlCLGNBQWMseUJBQXlCLE1BQU0sMkJBQTJCLE1BQU0sNEJBQTRCLE1BQU0sOEJBQThCLE1BQU0seUJBQXlCLFNBQVMsK0JBQStCLDhEQUE4RCxzQkFBc0Isd2JBQXdiLDBCQUEwQixNQUFNLDZTQUE2UywwQkFBMEIsU0FBUyxjQUFjLDhVQUE4VSwrQkFBK0IsNERBQTRELGtIQUFrSCxnQkFBZ0Isd0JBQXdCLHFFQUFxRSxxQkFBcUIseUZBQXlGLG9IQUFvSCxpQ0FBaUMsaUNBQWlDLHdCQUF3QixnQ0FBZ0MsdUZBQXVGLFFBQVEsRUFBRSxpQkFBaUIsY0FBYyxpSUFBaUksTUFBTSxrQ0FBa0MsTUFBTSx5QkFBeUIsU0FBUywrQkFBK0IsOERBQThELHNCQUFzQix3REFBd0QscURBQXFELGlFQUFpRSxZQUFZLHFCQUFxQixLQUFLLDhEQUE4RCwyQkFBMkIsb0lBQW9JLDBCQUEwQix1RUFBdUUsd0RBQXdELGdCQUFnQix5SEFBeUgsZUFBZSxZQUFZLHFCQUFxQixLQUFLLDhIQUE4SCw0RUFBNEUsMEVBQTBFLDBCQUEwQixTQUFTLFlBQVksMEdBQTBHLGVBQWUsWUFBWSxxQkFBcUIsK0VBQStFLHFHQUFxRywrQkFBK0IsNERBQTRELG1FQUFtRSxnQkFBZ0Isd0JBQXdCLHlHQUF5RyxpQ0FBaUMsaUNBQWlDLHdCQUF3QixnQ0FBZ0Msb0ZBQW9GLFFBQVEsRUFBRSxpQkFBaUIsMkNBQTJDLFNBQVMsK0JBQStCLDhEQUE4RCxzQkFBc0IsOElBQThJLDBCQUEwQixNQUFNLDRKQUE0SiwwQkFBMEIsU0FBUyxjQUFjLGtGQUFrRiwrQkFBK0IsNERBQTRELHlLQUF5SyxnQkFBZ0Isd0JBQXdCLDhMQUE4TCxXQUFXLDJGQUEyRixrVkFBa1YsaUNBQWlDLGlDQUFpQyx3QkFBd0IsZ0NBQWdDLDBFQUEwRSxRQUFRLEVBQUUsaUJBQWlCLGNBQWMseUJBQXlCLE1BQU0sK0JBQStCLE1BQU0sZ0NBQWdDLE1BQU0sNkNBQTZDLEVBQUUscUNBQXFDLFFBQVEsRUFBRSxpQkFBaUIsY0FBYyxvQkFBb0IsTUFBTSxvQkFBb0IsTUFBTSx5QkFBeUIsY0FBYyxNQUFNLDZEQUE2RCxNQUFNLHlCQUF5QixTQUFTLCtCQUErQiw4REFBOEQsc0JBQXNCLHdEQUF3RCw2RkFBNkYscUhBQXFILHlIQUF5SCwrQ0FBK0MseURBQXlELG9DQUFvQyxXQUFXLHlEQUF5RCxVQUFVLFVBQVUsbURBQW1ELCtDQUErQyx5QkFBeUIsWUFBWSwwQkFBMEIsMERBQTBELDJDQUEyQyxzS0FBc0ssd0dBQXdHLFlBQVksb0NBQW9DLFdBQVcsMENBQTBDLHFCQUFxQiw0R0FBNEcsd0RBQXdELFNBQVMsMEJBQTBCLFdBQVcsWUFBWSxvQ0FBb0MsK0tBQStLLFlBQVksWUFBWSxXQUFXLGtDQUFrQyx1UkFBdVIsK0JBQStCLDREQUE0RCxzQkFBc0Isd0dBQXdHLGdCQUFnQix3QkFBd0IsNkRBQTZELGlCQUFpQiwwRUFBMEUsK0pBQStKLGlDQUFpQyxpQ0FBaUMsd0JBQXdCLGdDQUFnQywyREFBMkQsUUFBUSxFQUFFLGlCQUFpQixjQUFjLHNHQUFzRyxNQUFNLCtDQUErQyxNQUFNLHlCQUF5QixTQUFTLCtCQUErQiw4REFBOEQsc0JBQXNCLHdEQUF3RCw2Q0FBNkMseURBQXlELFlBQVksaUJBQWlCLEtBQUssK0NBQStDLHVCQUF1QixzTUFBc00sMEJBQTBCLDJDQUEyQyw0QkFBNEIsWUFBWSxxRkFBcUYsV0FBVyxZQUFZLGlCQUFpQixLQUFLLDBGQUEwRix5REFBeUQsd0hBQXdILDBCQUEwQixTQUFTLFlBQVksNkdBQTZHLFdBQVcsWUFBWSxpQkFBaUIsNERBQTRELGlLQUFpSywrQkFBK0IsNERBQTRELHdUQUF3VCx5RkFBeUYsdUJBQXVCLGdCQUFnQix3QkFBd0IsMnhCQUEyeEIsOEJBQThCLHVGQUF1RixpSEFBaUgsaUNBQWlDLGlDQUFpQyx3QkFBd0IsZ0NBQWdDLCtEQUErRCxRQUFRLEVBQUUsaUJBQWlCLGNBQWMsNkJBQTZCLE1BQU0sd0JBQXdCLE1BQU0sd0JBQXdCLE1BQU0seUJBQXlCLE1BQU0sMkJBQTJCLE1BQU0sMEJBQTBCLE1BQU0sb0VBQW9FLE1BQU0seUJBQXlCLE1BQU0sa0NBQWtDLE1BQU0sMkpBQTJKLE1BQU0seUJBQXlCLFNBQVMsK0JBQStCLDhEQUE4RCxzQkFBc0Isd0RBQXdELFNBQVMsNkdBQTZHLHVHQUF1Ryx5Q0FBeUMsa0RBQWtELCtEQUErRCwyQ0FBMkMsa0RBQWtELGlFQUFpRSwrQ0FBK0Msa0RBQWtELHFFQUFxRSw2Q0FBNkMsa0RBQWtELG1FQUFtRSwrQ0FBK0Msa0RBQWtELG1GQUFtRiw2RkFBNkYsNkhBQTZILHVFQUF1RSxtRkFBbUYsY0FBYyw4QkFBOEIsNkZBQTZGLFlBQVksMEJBQTBCLCtDQUErQyxnQ0FBZ0Msc1FBQXNRLDZGQUE2Riw2REFBNkQsNkhBQTZILG1IQUFtSCx3QkFBd0IsWUFBWSw4QkFBOEIsS0FBSyx3SEFBd0gsbUZBQW1GLFNBQVMsMEJBQTBCLFNBQVMsWUFBWSxvMUJBQW8xQix3QkFBd0IsWUFBWSw4QkFBOEIsc0ZBQXNGLGlHQUFpRywrQkFBK0IsNERBQTRELHNGQUFzRixnQkFBZ0Isd0JBQXdCLHlMQUF5TCxpQ0FBaUMsaUNBQWlDLHdCQUF3QixnQ0FBZ0Msd0VBQXdFLFFBQVEsRUFBRSxpQkFBaUIsY0FBYyx5QkFBeUIsTUFBTSx5QkFBeUIsTUFBTSx5QkFBeUIsU0FBUywrQkFBK0IsOERBQThELHNCQUFzQixrT0FBa08sMEJBQTBCLE1BQU0sMEtBQTBLLDBCQUEwQixTQUFTLGNBQWMsb0pBQW9KLCtCQUErQiw0REFBNEQsd0JBQXdCLHdFQUF3RSxnQkFBZ0Isd0JBQXdCLDJEQUEyRCxnQkFBZ0IseUZBQXlGLFNBQVMsaUNBQWlDLGlDQUFpQyx3QkFBd0IsZ0NBQWdDLDZFQUE2RSxRQUFRLEVBQUUsaUJBQWlCLHNJQUFzSSxTQUFTLCtCQUErQiw4REFBOEQsc0JBQXNCLHdEQUF3RCwyQ0FBMkMsdURBQXVELFlBQVksZ0JBQWdCLEtBQUssOERBQThELHNCQUFzQixZQUFZLDBCQUEwQiw2REFBNkQsOENBQThDLFdBQVcscUdBQXFHLFVBQVUsWUFBWSxnQkFBZ0IsS0FBSywwR0FBMEcsdUVBQXVFLFNBQVMsMEJBQTBCLFNBQVMsWUFBWSwwREFBMEQsVUFBVSxZQUFZLGdCQUFnQiwwRUFBMEUsU0FBUywrQkFBK0IsNERBQTRELDJhQUEyYSxnQkFBZ0Isd0JBQXdCLGdQQUFnUCxzQkFBc0IseUNBQXlDLHFEQUFxRCx1QkFBdUIsNEZBQTRGLCtDQUErQyxvQkFBb0IsNkZBQTZGLDZDQUE2QyxtQkFBbUIsK0ZBQStGLGlEQUFpRCxxQkFBcUIsK0ZBQStGLHFXQUFxVyw0QkFBNEIsOENBQThDLDJEQUEyRCwwQkFBMEIsNENBQTRDLCtGQUErRixpQ0FBaUMsaUNBQWlDLHdCQUF3QixnQ0FBZ0MsK0VBQStFLFFBQVEsRUFBRSxpQkFBaUIsY0FBYyx5QkFBeUIsTUFBTSw0QkFBNEIsTUFBTSwwRkFBMEYsTUFBTSxzSEFBc0gsUUFBUSxvQ0FBb0Msd0NBQXdDLE1BQU0sNEdBQTRHLFFBQVEsa0NBQWtDLHNDQUFzQyxNQUFNLDBJQUEwSSxNQUFNLGtJQUFrSSxNQUFNLGlJQUFpSSxNQUFNLHVJQUF1SSxNQUFNLG9FQUFvRSxNQUFNLDhFQUE4RSxNQUFNLDRCQUE0QixNQUFNLHlCQUF5QixTQUFTLCtCQUErQiw4REFBOEQsc0JBQXNCLHdEQUF3RCw2RkFBNkYseUdBQXlHLHVEQUF1RCxtRUFBbUUsWUFBWSxzQkFBc0IsMEVBQTBFLG1FQUFtRSwrRUFBK0UsUUFBUSw0QkFBNEIsd0ZBQXdGLCtEQUErRCwyRUFBMkUsUUFBUSwwQkFBMEIsb0ZBQW9GLHlEQUF5RCxxRUFBcUUsUUFBUSx1QkFBdUIsMkZBQTJGLG1EQUFtRCwrREFBK0QsUUFBUSxvQkFBb0IseUZBQXlGLGlEQUFpRCw2REFBNkQsUUFBUSxtQkFBbUIsMEZBQTBGLHFEQUFxRCxpRUFBaUUsUUFBUSxxQkFBcUIsNEZBQTRGLE1BQU0sd0hBQXdILHVKQUF1Six3R0FBd0csMEJBQTBCLCtEQUErRCxnREFBZ0Qsc0dBQXNHLG1IQUFtSCxnQkFBZ0IsWUFBWSxzQkFBc0IsNENBQTRDLHVCQUF1QiwrSEFBK0gsc0JBQXNCLFFBQVEsNEJBQTRCLGtEQUFrRCxxQkFBcUIsMkhBQTJILG9CQUFvQixRQUFRLDBCQUEwQiw4Q0FBOEMsa0JBQWtCLHFIQUFxSCxpQkFBaUIsUUFBUSx1QkFBdUIsS0FBSywwSEFBMEgsaUZBQWlGLGVBQWUsK0dBQStHLGNBQWMsUUFBUSxvQkFBb0IsS0FBSyxvSEFBb0gsK0VBQStFLGNBQWMsNkdBQTZHLGFBQWEsUUFBUSxtQkFBbUIsS0FBSyxrSEFBa0gsZ0ZBQWdGLGdCQUFnQixpSEFBaUgsZUFBZSxRQUFRLHFCQUFxQixLQUFLLHNIQUFzSCxrRkFBa0Ysb0JBQW9CLCtHQUErRyw4REFBOEQsMkJBQTJCLDZIQUE2SCwrRUFBK0UscURBQXFELDBCQUEwQixTQUFTLFlBQVksbVlBQW1ZLGdCQUFnQixZQUFZLHNCQUFzQixvQ0FBb0Msd0NBQXdDLGlCQUFpQixRQUFRLHVCQUF1QixvRkFBb0Ysa0NBQWtDLGNBQWMsUUFBUSxvQkFBb0Isa0ZBQWtGLGdDQUFnQyxhQUFhLFFBQVEsbUJBQW1CLG1GQUFtRixvQ0FBb0MsZUFBZSxRQUFRLHFCQUFxQixxRkFBcUYsNlNBQTZTLHNCQUFzQixRQUFRLDRCQUE0QixnREFBZ0QsOENBQThDLG9CQUFvQixRQUFRLDBCQUEwQiw0Q0FBNEMseUVBQXlFLCtCQUErQiw0REFBNEQseVhBQXlYLGdCQUFnQix3QkFBd0IsNklBQTZJLGlCQUFpQiwyRkFBMkYsbURBQW1ELHNCQUFzQiwyRkFBMkYsK0NBQStDLG9CQUFvQiw2RkFBNkYsMkRBQTJELDBCQUEwQiw4R0FBOEcsaURBQWlELHFCQUFxQiwrRkFBK0YsMkxBQTJMLHFCQUFxQiwrRkFBK0YseURBQXlELHlCQUF5Qiw0R0FBNEcsdURBQXVELHdCQUF3QiwyQ0FBMkMsU0FBUyxpQ0FBaUMsaUNBQWlDLHdCQUF3QixnQ0FBZ0MsMkVBQTJFLFFBQVEsRUFBRSxpQkFBaUIsY0FBYyx5QkFBeUIsTUFBTSx1SEFBdUgsTUFBTSx1SUFBdUksTUFBTSxzSUFBc0ksTUFBTSxrSUFBa0ksTUFBTSxxS0FBcUssTUFBTSx1SUFBdUksTUFBTSx1RUFBdUUsTUFBTSxnS0FBZ0ssTUFBTSxtR0FBbUcsTUFBTSx5QkFBeUIsU0FBUywrQkFBK0IsOERBQThELHNCQUFzQix3REFBd0QsNkZBQTZGLDZDQUE2Qyx5REFBeUQsWUFBWSxpQkFBaUIsb0ZBQW9GLHFEQUFxRCxpRUFBaUUsUUFBUSxxQkFBcUIsNEZBQTRGLHVEQUF1RCxtRUFBbUUsUUFBUSxzQkFBc0IseUZBQXlGLG1EQUFtRCwrREFBK0QsUUFBUSxvQkFBb0IseUZBQXlGLCtEQUErRCwyRUFBMkUsUUFBUSwwQkFBMEIsZ0hBQWdILHFEQUFxRCxpRUFBaUUsUUFBUSxxQkFBcUIsNEZBQTRGLDJIQUEySCw2REFBNkQseUVBQXlFLGNBQWMseUJBQXlCLDZHQUE2RywyREFBMkQsdUVBQXVFLFFBQVEsd0JBQXdCLDhFQUE4RSxZQUFZLDBCQUEwQiwyREFBMkQsNENBQTRDLGtEQUFrRCxxR0FBcUcsV0FBVyxZQUFZLGlCQUFpQixLQUFLLDBHQUEwRywwRUFBMEUsZ0JBQWdCLDZHQUE2RyxlQUFlLFFBQVEscUJBQXFCLEtBQUssa0hBQWtILGtGQUFrRixpQkFBaUIsK0dBQStHLGdCQUFnQixRQUFRLHNCQUFzQixLQUFLLG9IQUFvSCwrRUFBK0UsZUFBZSwyR0FBMkcsY0FBYyxRQUFRLG9CQUFvQixLQUFLLGdIQUFnSCwrRUFBK0UscUJBQXFCLHVIQUF1SCxvQkFBb0IsUUFBUSwwQkFBMEIsS0FBSyw0SEFBNEgsc0dBQXNHLGdCQUFnQiw2R0FBNkcsZUFBZSxRQUFRLHFCQUFxQixLQUFLLGtIQUFrSCxrRkFBa0Ysb0JBQW9CLDJHQUEyRyxpRUFBaUUsb0JBQW9CLHFIQUFxSCxtQkFBbUIsUUFBUSx5QkFBeUIsS0FBSywwSEFBMEgsbUdBQW1HLG1CQUFtQixtSEFBbUgsa0JBQWtCLFFBQVEsd0JBQXdCLGdEQUFnRCxTQUFTLDBCQUEwQixTQUFTLFlBQVksaVJBQWlSLFdBQVcsWUFBWSxpQkFBaUIsNkVBQTZFLHNDQUFzQyxnQkFBZ0IsUUFBUSxzQkFBc0Isa0ZBQWtGLGtDQUFrQyxjQUFjLFFBQVEsb0JBQW9CLGtGQUFrRiw4Q0FBOEMsb0JBQW9CLFFBQVEsMEJBQTBCLHlHQUF5RyxvQ0FBb0MsZUFBZSxRQUFRLHFCQUFxQixxRkFBcUYscUpBQXFKLGVBQWUsUUFBUSxxQkFBcUIscUZBQXFGLDRDQUE0QyxtQkFBbUIsUUFBUSx5QkFBeUIsc0dBQXNHLDBDQUEwQyxrQkFBa0IsUUFBUSx3QkFBd0Isd0NBQXdDLFNBQVMsK0JBQStCLDREQUE0RCx1R0FBdUcsZ0JBQWdCLHdCQUF3Qix1VUFBdVUsaUNBQWlDLGlDQUFpQyx3QkFBd0IsZ0NBQWdDLDBGQUEwRixRQUFRLEVBQUUsaUJBQWlCLGNBQWMseUJBQXlCLE1BQU0sdUJBQXVCLE1BQU0sOEVBQThFLE1BQU0seUJBQXlCLFNBQVMsK0JBQStCLDhEQUE4RCxzQkFBc0Isd0RBQXdELG1HQUFtRywyRkFBMkYsaURBQWlELDREQUE0RCx3QkFBd0IsWUFBWSwwQkFBMEIsMEVBQTBFLDJEQUEyRCxvRkFBb0YsMEhBQTBILHdFQUF3RSxTQUFTLDBCQUEwQixTQUFTLGNBQWMseVJBQXlSLCtCQUErQiw0REFBNEQsZ0ZBQWdGLGdCQUFnQix3QkFBd0Isc0xBQXNMLGlDQUFpQyxpQ0FBaUMsd0JBQXdCLGdDQUFnQyx5RkFBeUYsUUFBUSxFQUFFLGlCQUFpQixjQUFjLHlCQUF5QixNQUFNLHVCQUF1QixNQUFNLHlCQUF5QixTQUFTLCtCQUErQiw4REFBOEQsc0JBQXNCLHNPQUFzTywwQkFBMEIsTUFBTSxnTUFBZ00sMEJBQTBCLFNBQVMsY0FBYyxrSkFBa0osK0JBQStCLDREQUE0RCxrR0FBa0csZ0JBQWdCLHdCQUF3Qix5RkFBeUYsK0JBQStCLDBHQUEwRyxTQUFTLGlDQUFpQyxpQ0FBaUMsd0JBQXdCLGdDQUFnQyxpRkFBaUYsUUFBUSxFQUFFLGlCQUFpQixvTUFBb00sU0FBUywrQkFBK0IsOERBQThELHNCQUFzQix3REFBd0QseUVBQXlFLHFGQUFxRixZQUFZLCtCQUErQixLQUFLLDZFQUE2RSxxQ0FBcUMsWUFBWSwwQkFBMEIsaUVBQWlFLGtEQUFrRCwwQkFBMEIsdUlBQXVJLHlCQUF5QixZQUFZLCtCQUErQixLQUFLLDRJQUE0SSxxR0FBcUcsU0FBUywwQkFBMEIsU0FBUyxZQUFZLHVHQUF1Ryx5QkFBeUIsWUFBWSwrQkFBK0Isd0dBQXdHLFNBQVMsK0JBQStCLDREQUE0RCxxVEFBcVQsZ0JBQWdCLHdCQUF3QixpakNBQWlqQyxpQ0FBaUMsaUNBQWlDLHdCQUF3QixnQ0FBZ0MsZ0ZBQWdGLFFBQVEsRUFBRSxpQkFBaUIsY0FBYyx5QkFBeUIsTUFBTSwwQkFBMEIsTUFBTSx5QkFBeUIsTUFBTSx3QkFBd0IsTUFBTSw2QkFBNkIsTUFBTSw2QkFBNkIsTUFBTSxpQ0FBaUMsTUFBTSw4QkFBOEIsTUFBTSw4QkFBOEIsTUFBTSxxRUFBcUUsTUFBTSxrQ0FBa0MsTUFBTSx5QkFBeUIsU0FBUywrQkFBK0IsOERBQThELHNCQUFzQix3REFBd0QsNkZBQTZGLHVHQUF1Ryw0REFBNEQsMkNBQTJDLHNCQUFzQix5REFBeUQsMENBQTBDLHdJQUF3SSw2R0FBNkcsNkdBQTZHLDZIQUE2SCx1SEFBdUgsNkdBQTZHLGlEQUFpRCx1REFBdUQsd0JBQXdCLDhJQUE4SSwwQkFBMEIsZ0VBQWdFLGlEQUFpRCw0RkFBNEYsc0NBQXNDLE1BQU0sc0NBQXNDLE1BQU0sc0NBQXNDLGVBQWUsa0NBQWtDLE1BQU0saUNBQWlDLE1BQU0saUNBQWlDLE1BQU0sa0NBQWtDLE1BQU0saUNBQWlDLE1BQU0sbUNBQW1DLE1BQU0sbUNBQW1DLE1BQU0sZ0NBQWdDLE1BQU0sa0NBQWtDLE1BQU0sbUNBQW1DLE1BQU0scUNBQXFDLE1BQU0sbUNBQW1DLE1BQU0sb0NBQW9DLE1BQU0sa0NBQWtDLE1BQU0sc0NBQXNDLE1BQU0sc0NBQXNDLE1BQU0sb0NBQW9DLE1BQU0sb0NBQW9DLDBSQUEwUixnSEFBZ0gsK0RBQStELDhFQUE4RSwwQkFBMEIsU0FBUyxjQUFjLDhxQ0FBOHFDLCtCQUErQiw0REFBNEQsYUFBYSxvZUFBb2UscU1BQXFNLGdCQUFnQix3QkFBd0IsaVBBQWlQLGlDQUFpQyxpQ0FBaUMsd0JBQXdCLGdDQUFnQyxnRkFBZ0YsUUFBUSxFQUFFLGlCQUFpQixjQUFjLHlCQUF5QixNQUFNLHFFQUFxRSxNQUFNLHlCQUF5QixTQUFTLCtCQUErQiw4REFBOEQsc0JBQXNCLHdEQUF3RCw2RkFBNkYsaURBQWlELG1EQUFtRCx3QkFBd0IsWUFBWSwwQkFBMEIsZ0VBQWdFLGlEQUFpRCwwREFBMEQsZ0hBQWdILCtEQUErRCxTQUFTLDBCQUEwQixTQUFTLGNBQWMsZ05BQWdOLCtCQUErQiw0REFBNEQseU1BQXlNLGdCQUFnQix3QkFBd0IsNklBQTZJLGlCQUFpQiwrRkFBK0YsZ01BQWdNLHlCQUF5QixvSEFBb0gsdURBQXVELHdCQUF3QiwyQ0FBMkMsU0FBUyxpQ0FBaUMsaUNBQWlDLHdCQUF3QixnQ0FBZ0MsK0VBQStFLFFBQVEsRUFBRSxpQkFBaUIsY0FBYyx5QkFBeUIsTUFBTSwySEFBMkgsTUFBTSxvRUFBb0UsTUFBTSx3S0FBd0ssTUFBTSxrR0FBa0csTUFBTSx5QkFBeUIsU0FBUywrQkFBK0IsOERBQThELHNCQUFzQix3REFBd0QsNkZBQTZGLDZDQUE2Qyx5REFBeUQsWUFBWSxpQkFBaUIsd0ZBQXdGLHdIQUF3SCw2REFBNkQseUVBQXlFLGNBQWMseUJBQXlCLHFIQUFxSCwyREFBMkQsdUVBQXVFLFFBQVEsd0JBQXdCLDhFQUE4RSxZQUFZLDBCQUEwQiwrREFBK0QsZ0RBQWdELGtEQUFrRCx5R0FBeUcsV0FBVyxZQUFZLGlCQUFpQixLQUFLLDhHQUE4Ryw4RUFBOEUsb0JBQW9CLCtHQUErRyw4REFBOEQsb0JBQW9CLHlIQUF5SCxtQkFBbUIsUUFBUSx5QkFBeUIsS0FBSyw4SEFBOEgsMkdBQTJHLG1CQUFtQix1SEFBdUgsa0JBQWtCLFFBQVEsd0JBQXdCLGdEQUFnRCxTQUFTLDBCQUEwQixTQUFTLFlBQVksaU1BQWlNLFdBQVcsWUFBWSxpQkFBaUIsaUZBQWlGLDBKQUEwSixtQkFBbUIsUUFBUSx5QkFBeUIsOEdBQThHLDBDQUEwQyxrQkFBa0IsUUFBUSx3QkFBd0Isd0NBQXdDLFNBQVMsK0JBQStCLDREQUE0RCxpRkFBaUYsZ0JBQWdCLHdCQUF3QixzTEFBc0wsaUNBQWlDLGlDQUFpQyx3QkFBd0IsZ0NBQWdDLGlHQUFpRyxRQUFRLEVBQUUsaUJBQWlCLGNBQWMseUJBQXlCLE1BQU0sdUJBQXVCLE1BQU0seUJBQXlCLFNBQVMsK0JBQStCLDhEQUE4RCxzQkFBc0Isc09BQXNPLDBCQUEwQixNQUFNLGdOQUFnTiwwQkFBMEIsU0FBUyxjQUFjLGtKQUFrSiwrQkFBK0IsNERBQTRELDBIQUEwSCxnQkFBZ0Isd0JBQXdCLDBVQUEwVSxpQ0FBaUMsaUNBQWlDLHdCQUF3QixnQ0FBZ0Msb0ZBQW9GLFFBQVEsRUFBRSxpQkFBaUIsY0FBYyx5QkFBeUIsTUFBTSwwQkFBMEIsTUFBTSx5RUFBeUUsTUFBTSx5QkFBeUIsU0FBUywrQkFBK0IsOERBQThELHNCQUFzQix3REFBd0QsNkZBQTZGLHVHQUF1RyxpREFBaUQsdURBQXVELHdCQUF3QixZQUFZLDBCQUEwQixvRUFBb0UscURBQXFELGdHQUFnRyxvSEFBb0gsbUVBQW1FLFNBQVMsMEJBQTBCLFNBQVMsY0FBYywrUkFBK1IsK0JBQStCLDREQUE0RCxnSUFBZ0ksZ0JBQWdCLHdCQUF3QiwrSUFBK0ksa0JBQWtCLDZGQUE2RixtSkFBbUosaUNBQWlDLGlDQUFpQyx3QkFBd0IsZ0NBQWdDLGtGQUFrRixRQUFRLEVBQUUsaUJBQWlCLGNBQWMseUJBQXlCLE1BQU0sNEhBQTRILE1BQU0sdUVBQXVFLE1BQU0seUJBQXlCLFNBQVMsK0JBQStCLDhEQUE4RCxzQkFBc0Isd0RBQXdELDZGQUE2RiwrQ0FBK0MsMkRBQTJELFlBQVksa0JBQWtCLHVGQUF1RixNQUFNLDJIQUEySCxZQUFZLDBCQUEwQixrRUFBa0UsbURBQW1ELG1EQUFtRCw4R0FBOEcsWUFBWSxZQUFZLGtCQUFrQixLQUFLLG1IQUFtSCw2RUFBNkUsb0JBQW9CLGtIQUFrSCxpRUFBaUUsU0FBUywwQkFBMEIsU0FBUyxZQUFZLCtKQUErSixZQUFZLFlBQVksa0JBQWtCLGdGQUFnRiwwSEFBMEgsK0JBQStCLDREQUE0RCxnTkFBZ04sZ0JBQWdCLHdCQUF3QixpcEJBQWlwQixpQ0FBaUMsaUNBQWlDLHdCQUF3QixnQ0FBZ0MsaUZBQWlGLFFBQVEsRUFBRSxpQkFBaUIsY0FBYyx5QkFBeUIsTUFBTSw4QkFBOEIsTUFBTSwrQkFBK0IsTUFBTSxzRUFBc0UsTUFBTSxrQ0FBa0MsTUFBTSxrQ0FBa0MsTUFBTSx5QkFBeUIsU0FBUywrQkFBK0IsOERBQThELHNCQUFzQix3REFBd0QsNkZBQTZGLGlIQUFpSCxxSEFBcUgsaURBQWlELHdEQUF3RCx3QkFBd0Isd1JBQXdSLDBCQUEwQixpRUFBaUUsa0RBQWtELHVLQUF1SyxpSEFBaUgsZ0VBQWdFLHlKQUF5SiwwQkFBMEIsU0FBUyxjQUFjLDhuQkFBOG5CLCtCQUErQiw0REFBNEQsbXNCQUFtc0IsZ0JBQWdCLHdCQUF3QixrekVBQWt6RSwrQkFBK0IsMEdBQTBHLFNBQVMsaUNBQWlDLGlDQUFpQyx3QkFBd0IsZ0NBQWdDLHVFQUF1RSxRQUFRLEVBQUUsaUJBQWlCLGNBQWMsZ0NBQWdDLE1BQU0sdUNBQXVDLE1BQU0scUNBQXFDLE1BQU0sNkNBQTZDLE1BQU0sdUNBQXVDLE1BQU0sK0JBQStCLE1BQU0sK0JBQStCLE1BQU0scUNBQXFDLE1BQU0sdUNBQXVDLE1BQU0scUNBQXFDLE1BQU0sc0NBQXNDLE1BQU0sOEJBQThCLE1BQU0sa0NBQWtDLE1BQU0scUNBQXFDLE1BQU0scUNBQXFDLE1BQU0saUNBQWlDLE1BQU0sb0NBQW9DLE1BQU0sa0NBQWtDLE1BQU0sMENBQTBDLE1BQU0saUNBQWlDLE1BQU0sZ0xBQWdMLE1BQU0seUJBQXlCLFNBQVMsK0JBQStCLDhEQUE4RCxzQkFBc0Isd0RBQXdELHlIQUF5SCxxSkFBcUosdUpBQXVKLHVMQUF1TCwrSkFBK0osOEVBQThFLGlEQUFpRCxzQkFBc0IsaUhBQWlILHVKQUF1SiwrSkFBK0osdUpBQXVKLDJKQUEySiwySEFBMkgsMklBQTJJLHlJQUF5SSx5SUFBeUkseUhBQXlILHFJQUFxSSw2SEFBNkgsNkpBQTZKLHlIQUF5SCx5RUFBeUUscUZBQXFGLFlBQVksK0JBQStCLEtBQUssNkVBQTZFLHFDQUFxQyxZQUFZLDBCQUEwQix1REFBdUQsd0NBQXdDLHlhQUF5YSxtQ0FBbUMsTUFBTSx1Q0FBdUMsTUFBTSwwQ0FBMEMsMCtCQUEwK0IsNkhBQTZILHlCQUF5QixZQUFZLCtCQUErQixLQUFLLGtJQUFrSSxxR0FBcUcsU0FBUywwQkFBMEIsU0FBUyxZQUFZLDJsRkFBMmxGLHlCQUF5QixZQUFZLCtCQUErQix3R0FBd0csU0FBUywrQkFBK0IsNERBQTRELHFCQUFxQixpVEFBaVQsZ0JBQWdCLHdCQUF3QixzaUJBQXNpQiwrQkFBK0IsMEdBQTBHLFNBQVMsaUNBQWlDLGlDQUFpQyx3QkFBd0IsZ0NBQWdDLDBFQUEwRSxRQUFRLEVBQUUsaUJBQWlCLGNBQWMsdUNBQXVDLE1BQU0sK0NBQStDLE1BQU0sNkJBQTZCLE1BQU0sMkJBQTJCLE1BQU0sZ0xBQWdMLE1BQU0seUJBQXlCLFNBQVMsK0JBQStCLDhEQUE4RCxzQkFBc0Isd0RBQXdELG1LQUFtSyxtTUFBbU0sMkhBQTJILG1IQUFtSCx5RUFBeUUscUZBQXFGLFlBQVksK0JBQStCLEtBQUssNkVBQTZFLHFDQUFxQyxZQUFZLDBCQUEwQiwwREFBMEQsMkNBQTJDLDRVQUE0VSxnSUFBZ0kseUJBQXlCLFlBQVksK0JBQStCLEtBQUsscUlBQXFJLHFHQUFxRyxTQUFTLDBCQUEwQixTQUFTLFlBQVksdW5CQUF1bkIseUJBQXlCLFlBQVksK0JBQStCLHdHQUF3RyxTQUFTLCtCQUErQiw0REFBNEQsdU5BQXVOLGdCQUFnQix3QkFBd0IsK2tCQUEra0IsK0JBQStCLDBHQUEwRyxTQUFTLGlDQUFpQyxpQ0FBaUMsd0JBQXdCLGdDQUFnQyx3RUFBd0UsUUFBUSxFQUFFLGlCQUFpQixjQUFjLHlCQUF5QixNQUFNLHlCQUF5QixNQUFNLDBCQUEwQixNQUFNLHVCQUF1QixNQUFNLDZCQUE2QixNQUFNLHdCQUF3QixNQUFNLGdMQUFnTCxNQUFNLHlCQUF5QixTQUFTLCtCQUErQiw4REFBOEQsc0JBQXNCLHdEQUF3RCw0REFBNEQsMkNBQTJDLHNCQUFzQiwyR0FBMkcsK0RBQStELDRDQUE0QyxzQkFBc0IsbUdBQW1HLDJIQUEySCxtR0FBbUcseUVBQXlFLHFGQUFxRixZQUFZLCtCQUErQixLQUFLLDZFQUE2RSxxQ0FBcUMsWUFBWSwwQkFBMEIsd0RBQXdELHlDQUF5QyxnQkFBZ0IsOEJBQThCLE1BQU0sNEJBQTRCLE1BQU0sb0NBQW9DLDhEQUE4RCxrQ0FBa0MsTUFBTSxrQ0FBa0MsTUFBTSxrQ0FBa0MsaUtBQWlLLDhIQUE4SCx5QkFBeUIsWUFBWSwrQkFBK0IsS0FBSyxtSUFBbUkscUdBQXFHLFNBQVMsMEJBQTBCLFNBQVMsWUFBWSw2dUJBQTZ1Qix5QkFBeUIsWUFBWSwrQkFBK0Isd0dBQXdHLFNBQVMsK0JBQStCLDREQUE0RCxjQUFjLGtHQUFrRyw4S0FBOEssZ0JBQWdCLHdCQUF3Qix5RkFBeUYsK0JBQStCLDBHQUEwRyxTQUFTLGlDQUFpQyxpQ0FBaUMsd0JBQXdCLGdDQUFnQyx3RUFBd0UsUUFBUSxFQUFFLGlCQUFpQixvTUFBb00sU0FBUywrQkFBK0IsOERBQThELHNCQUFzQix3REFBd0QseUVBQXlFLHFGQUFxRixZQUFZLCtCQUErQixLQUFLLDZFQUE2RSxxQ0FBcUMsWUFBWSwwQkFBMEIsd0RBQXdELHlDQUF5QywwQkFBMEIsOEhBQThILHlCQUF5QixZQUFZLCtCQUErQixLQUFLLG1JQUFtSSxxR0FBcUcsU0FBUywwQkFBMEIsU0FBUyxZQUFZLHVHQUF1Ryx5QkFBeUIsWUFBWSwrQkFBK0Isd0dBQXdHLFNBQVMsK0JBQStCLDREQUE0RCx5SUFBeUksZ0JBQWdCLHdCQUF3Qix5UkFBeVIsK0JBQStCLDBHQUEwRyxTQUFTLGlDQUFpQyxpQ0FBaUMsd0JBQXdCLGdDQUFnQyx1RUFBdUUsUUFBUSxFQUFFLGlCQUFpQixjQUFjLDZCQUE2QixNQUFNLDZCQUE2QixNQUFNLGdMQUFnTCxNQUFNLHlCQUF5QixTQUFTLCtCQUErQiw4REFBOEQsc0JBQXNCLHdEQUF3RCwySEFBMkgsMkhBQTJILHlFQUF5RSxxRkFBcUYsWUFBWSwrQkFBK0IsS0FBSyw2RUFBNkUscUNBQXFDLFlBQVksMEJBQTBCLHVEQUF1RCx3Q0FBd0MsNElBQTRJLDZIQUE2SCx5QkFBeUIsWUFBWSwrQkFBK0IsS0FBSyxrSUFBa0kscUdBQXFHLFNBQVMsMEJBQTBCLFNBQVMsWUFBWSxxVEFBcVQseUJBQXlCLFlBQVksK0JBQStCLHdHQUF3RyxTQUFTLCtCQUErQiw0REFBNEQsb0hBQW9ILGdCQUFnQix3QkFBd0Isd0xBQXdMLCtCQUErQiwwR0FBMEcsU0FBUyxpQ0FBaUMsaUNBQWlDLHdCQUF3QixnQ0FBZ0MsNEVBQTRFLFFBQVEsRUFBRSxpQkFBaUIsY0FBYyw2QkFBNkIsTUFBTSxnTEFBZ0wsTUFBTSx5QkFBeUIsU0FBUywrQkFBK0IsOERBQThELHNCQUFzQix3REFBd0QsMkhBQTJILHlFQUF5RSxxRkFBcUYsWUFBWSwrQkFBK0IsS0FBSyw2RUFBNkUscUNBQXFDLFlBQVksMEJBQTBCLDREQUE0RCw2Q0FBNkMsbUZBQW1GLGtJQUFrSSx5QkFBeUIsWUFBWSwrQkFBK0IsS0FBSyx1SUFBdUkscUdBQXFHLFNBQVMsMEJBQTBCLFNBQVMsWUFBWSxxTkFBcU4seUJBQXlCLFlBQVksK0JBQStCLHdHQUF3RyxTQUFTLCtCQUErQiw0REFBNEQsc01BQXNNLGdCQUFnQix3QkFBd0IsMExBQTBMLCtCQUErQiwwR0FBMEcsMlNBQTJTLGlDQUFpQyxpQ0FBaUMsd0JBQXdCLGdDQUFnQywwRUFBMEUsUUFBUSxFQUFFLGlCQUFpQixjQUFjLDhCQUE4QixNQUFNLGdMQUFnTCxNQUFNLGtEQUFrRCxNQUFNLGtEQUFrRCxNQUFNLHlCQUF5QixTQUFTLCtCQUErQiw4REFBOEQsc0JBQXNCLHdEQUF3RCwySEFBMkgseUVBQXlFLHFGQUFxRixZQUFZLCtCQUErQixLQUFLLDZFQUE2RSxxQ0FBcUMsd1ZBQXdWLDBCQUEwQiwwREFBMEQsMkNBQTJDLG1GQUFtRixnSUFBZ0kseUJBQXlCLFlBQVksK0JBQStCLEtBQUsscUlBQXFJLHFHQUFxRyx5TkFBeU4sMEJBQTBCLFNBQVMsWUFBWSxxUkFBcVIseUJBQXlCLFlBQVksK0JBQStCLHdHQUF3RyxtU0FBbVMsK0JBQStCLDREQUE0RCw2T0FBNk8sZ0JBQWdCLHdCQUF3Qiw4U0FBOFMsK0JBQStCLDBHQUEwRywyRkFBMkYsMENBQTBDLCtEQUErRCxnTEFBZ0wsaUNBQWlDLGlDQUFpQyx3QkFBd0IsZ0NBQWdDLHlFQUF5RSxRQUFRLEVBQUUsaUJBQWlCLGNBQWMsOEJBQThCLE1BQU0scUNBQXFDLE1BQU0sZ0xBQWdMLE1BQU0sK0VBQStFLE1BQU0sNktBQTZLLE1BQU0seUJBQXlCLFNBQVMsK0JBQStCLDhEQUE4RCxzQkFBc0Isd0RBQXdELDJIQUEySCw2RkFBNkYsc0RBQXNELHNCQUFzQix5RUFBeUUscUZBQXFGLFlBQVksK0JBQStCLCtHQUErRyxNQUFNLDBKQUEwSiw0RkFBNEYsd0dBQXdHLFFBQVEsMENBQTBDLCtHQUErRyxZQUFZLDBCQUEwQix5REFBeUQsMENBQTBDLG9GQUFvRixzREFBc0QsTUFBTSxrREFBa0QsTUFBTSw2Q0FBNkMsMEJBQTBCLCtIQUErSCx5QkFBeUIsWUFBWSwrQkFBK0IsS0FBSyxvSUFBb0kscUdBQXFHLGdDQUFnQyw4SEFBOEgsOEVBQThFLHFDQUFxQyxrSkFBa0osb0NBQW9DLFFBQVEsMENBQTBDLG9GQUFvRixTQUFTLDBCQUEwQixTQUFTLFlBQVksOGdCQUE4Z0IseUJBQXlCLFlBQVksK0JBQStCLHdHQUF3Ryw4RUFBOEUsb0NBQW9DLFFBQVEsMENBQTBDLDRFQUE0RSw0SkFBNEosK0JBQStCLDREQUE0RCx5QkFBeUIsa2JBQWtiLGdCQUFnQix3QkFBd0IsMkRBQTJELGdCQUFnQixrR0FBa0csd3BCQUF3cEIsaUNBQWlDLGlDQUFpQyx3QkFBd0IsZ0NBQWdDLCtFQUErRSxRQUFRLEVBQUUsaUJBQWlCLGNBQWMsMkhBQTJILE1BQU0sb0NBQW9DLE1BQU0scUNBQXFDLE1BQU0sb0NBQW9DLE1BQU0sZ0NBQWdDLE1BQU0sK0JBQStCLE1BQU0sbUNBQW1DLE1BQU0seUJBQXlCLFNBQVMsK0JBQStCLDhEQUE4RCxzQkFBc0Isd0RBQXdELDJDQUEyQyx1REFBdUQsWUFBWSxnQkFBZ0IsS0FBSyx1RUFBdUUsc0JBQXNCLDQvQkFBNC9CLDBCQUEwQiwrREFBK0QsZ0RBQWdELFdBQVcsdUdBQXVHLFVBQVUsWUFBWSxnQkFBZ0IsS0FBSyw0R0FBNEcsZ0ZBQWdGLGtzQ0FBa3NDLDBCQUEwQixXQUFXLFlBQVksb2lCQUFvaUIsVUFBVSxZQUFZLGdCQUFnQixtRkFBbUYseXpDQUF5ekMsK0JBQStCLDREQUE0RCxxRkFBcUYsZ0JBQWdCLHdCQUF3Qix5RkFBeUYsaUNBQWlDLGlDQUFpQyx3QkFBd0IsZ0NBQWdDLHdGQUF3RixRQUFRLEVBQUUsaUJBQWlCLGNBQWMsNkJBQTZCLE1BQU0sOEJBQThCLE1BQU0seUJBQXlCLHNGQUFzRixXQUFXLEVBQUUsNENBQTRDLHdEQUF3RCxXQUFXLEVBQUUsK0JBQStCLDhEQUE4RCxzQkFBc0IsNktBQTZLLDBCQUEwQixNQUFNLDRPQUE0TywwQkFBMEIsU0FBUyxjQUFjLDJNQUEyTSwrQkFBK0IsNERBQTRELGdGQUFnRixnQkFBZ0Isd0JBQXdCLG1FQUFtRSxvQkFBb0IsaUdBQWlHLFNBQVMsaUNBQWlDLGlDQUFpQyx3QkFBd0IsZ0NBQWdDLDBFQUEwRSxRQUFRLEVBQUUsaUJBQWlCLDBKQUEwSixTQUFTLCtCQUErQiw4REFBOEQsc0JBQXNCLHdEQUF3RCxtREFBbUQsK0RBQStELFlBQVksb0JBQW9CLEtBQUssc0VBQXNFLDBCQUEwQixZQUFZLDBCQUEwQiwwREFBMEQsMkNBQTJDLGVBQWUsMEdBQTBHLGNBQWMsWUFBWSxvQkFBb0IsS0FBSywrR0FBK0csbUZBQW1GLFNBQVMsMEJBQTBCLFNBQVMsWUFBWSxzRUFBc0UsY0FBYyxZQUFZLG9CQUFvQixzRkFBc0YsU0FBUywrQkFBK0IsNERBQTRELDhNQUE4TSxnQkFBZ0Isd0JBQXdCLGdEQUFnRCxvQkFBb0IsWUFBWSxnQkFBZ0IsdUJBQXVCLFdBQVcsZ0NBQWdDLG9CQUFvQixRQUFRLGdCQUFnQix1QkFBdUIsV0FBVyxrVEFBa1QsbUNBQW1DLHNEQUFzRCxTQUFTLGlDQUFpQyxpQ0FBaUMsd0JBQXdCLGdDQUFnQyxtRkFBbUYsUUFBUSxFQUFFLGlCQUFpQixjQUFjLGlGQUFpRixRQUFRLHdCQUF3Qiw0QkFBNEIsTUFBTSw2RUFBNkUsUUFBUSx3QkFBd0IsNEJBQTRCLE1BQU0sb0NBQW9DLE1BQU0scUNBQXFDLE1BQU0sOElBQThJLE1BQU0seUJBQXlCLFNBQVMsK0JBQStCLDhEQUE4RCxzQkFBc0Isd0RBQXdELDJDQUEyQyx1REFBdUQsWUFBWSxnQkFBZ0IsZ0VBQWdFLDJDQUEyQyx1REFBdUQsUUFBUSxnQkFBZ0IsZ0VBQWdFLHlJQUF5SSw2SUFBNkksaUZBQWlGLDZGQUE2RixRQUFRLG1DQUFtQyxvR0FBb0csWUFBWSwwQkFBMEIsbUVBQW1FLG9EQUFvRCxXQUFXLDJHQUEyRyxVQUFVLFlBQVksZ0JBQWdCLDBCQUEwQixXQUFXLDJHQUEyRyxVQUFVLFFBQVEsZ0JBQWdCLDBCQUEwQiwrS0FBK0ssaUpBQWlKLDZCQUE2QixRQUFRLG1DQUFtQyxzRUFBc0UsU0FBUywwQkFBMEIsU0FBUyxZQUFZLDBKQUEwSixVQUFVLFlBQVksZ0JBQWdCLHdCQUF3QiwwQkFBMEIsVUFBVSxRQUFRLGdCQUFnQix3QkFBd0IsNFFBQTRRLDZCQUE2QixRQUFRLG1DQUFtQyw4REFBOEQsU0FBUywrQkFBK0IsNERBQTRELHFGQUFxRixnQkFBZ0Isd0JBQXdCLHVFQUF1RSxzQkFBc0Isd0dBQXdHLFNBQVMsaUNBQWlDLGlDQUFpQyx3QkFBd0IsZ0NBQWdDLDZFQUE2RSxRQUFRLEVBQUUsaUJBQWlCLHVLQUF1SyxTQUFTLCtCQUErQiw4REFBOEQsc0JBQXNCLHdEQUF3RCx1REFBdUQsbUVBQW1FLFlBQVksc0JBQXNCLEtBQUssNkVBQTZFLDRCQUE0QixZQUFZLDBCQUEwQiw2REFBNkQsOENBQThDLGlCQUFpQixpSEFBaUgsZ0JBQWdCLFlBQVksc0JBQXNCLEtBQUssc0hBQXNILDRGQUE0RixTQUFTLDBCQUEwQixTQUFTLFlBQVksNEVBQTRFLGdCQUFnQixZQUFZLHNCQUFzQiwrRkFBK0YsU0FBUywrQkFBK0IsNERBQTRELGtJQUFrSSxnQkFBZ0Isd0JBQXdCLGdEQUFnRCxvQkFBb0IsWUFBWSxnQkFBZ0IsdUJBQXVCLFdBQVcseVFBQXlRLGlDQUFpQyxpQ0FBaUMsd0JBQXdCLGdDQUFnQyx3RkFBd0YsUUFBUSxFQUFFLGlCQUFpQixjQUFjLGlGQUFpRixRQUFRLHdCQUF3Qiw0QkFBNEIsTUFBTSwrQkFBK0IsTUFBTSx5QkFBeUIsTUFBTSx1QkFBdUIsTUFBTSx5QkFBeUIsU0FBUywrQkFBK0IsOERBQThELHNCQUFzQix3REFBd0QsMkNBQTJDLHVEQUF1RCxZQUFZLGdCQUFnQixnRUFBZ0Usb1NBQW9TLDBCQUEwQix3RUFBd0UseURBQXlELFdBQVcsZ0hBQWdILFVBQVUsWUFBWSxnQkFBZ0IsMEJBQTBCLGlJQUFpSSwwQkFBMEIsU0FBUyxZQUFZLDBHQUEwRyxVQUFVLFlBQVksZ0JBQWdCLHdCQUF3Qix5TUFBeU0sK0JBQStCLDREQUE0RCw2RkFBNkYsZ0JBQWdCLHdCQUF3Qix1TUFBdU0saUNBQWlDLGlDQUFpQyx3QkFBd0IsZ0NBQWdDLCtEQUErRCxRQUFRLEVBQUUsaUJBQWlCLGNBQWMsNkJBQTZCLE1BQU0seUJBQXlCLE1BQU0seUJBQXlCLFNBQVMsK0JBQStCLDhEQUE4RCxzQkFBc0Isa1NBQWtTLDBCQUEwQixNQUFNLG1SQUFtUiwwQkFBMEIsU0FBUyxjQUFjLDBXQUEwVywrQkFBK0IsNERBQTRELFlBQVkiLCJzb3VyY2VzIjpbIi9Vc2Vycy9iYWcteW9zZWIvRGVza3RvcC/hhJHhhanhhIfhhbXhhIvhhaEvaGFja2F0aG9uX3RlYW0vbXktYXBwL25vZGVfbW9kdWxlcy9nb29nbGUtZ2F4L2J1aWxkL3Byb3Rvcy9sb2NhdGlvbnMuanMiXSwic291cmNlc0NvbnRlbnQiOlsiKGU9PntcImZ1bmN0aW9uXCI9PXR5cGVvZiBkZWZpbmUmJmRlZmluZS5hbWQ/ZGVmaW5lKFtcInByb3RvYnVmanMvbWluaW1hbFwiXSxlKTpcImZ1bmN0aW9uXCI9PXR5cGVvZiByZXF1aXJlJiZcIm9iamVjdFwiPT10eXBlb2YgbW9kdWxlJiZtb2R1bGUmJm1vZHVsZS5leHBvcnRzJiYobW9kdWxlLmV4cG9ydHM9ZShyZXF1aXJlKFwicHJvdG9idWZqcy9taW5pbWFsXCIpKSl9KShmdW5jdGlvbihvKXt2YXIgZSx0LG4sRixzPW8uUmVhZGVyLHI9by5Xcml0ZXIsdT1vLnV0aWwsYz1vLnJvb3RzLmxvY2F0aW9uc19wcm90b3N8fChvLnJvb3RzLmxvY2F0aW9uc19wcm90b3M9e30pO2Z1bmN0aW9uIEwoZSx0LG4pe28ucnBjLlNlcnZpY2UuY2FsbCh0aGlzLGUsdCxuKX1mdW5jdGlvbiBpKGUpe2lmKGUpZm9yKHZhciB0PU9iamVjdC5rZXlzKGUpLG49MDtuPHQubGVuZ3RoOysrbiludWxsIT1lW3Rbbl1dJiYodGhpc1t0W25dXT1lW3Rbbl1dKX1mdW5jdGlvbiBhKGUpe2lmKHRoaXMubG9jYXRpb25zPVtdLGUpZm9yKHZhciB0PU9iamVjdC5rZXlzKGUpLG49MDtuPHQubGVuZ3RoOysrbiludWxsIT1lW3Rbbl1dJiYodGhpc1t0W25dXT1lW3Rbbl1dKX1mdW5jdGlvbiBHKGUpe2lmKGUpZm9yKHZhciB0PU9iamVjdC5rZXlzKGUpLG49MDtuPHQubGVuZ3RoOysrbiludWxsIT1lW3Rbbl1dJiYodGhpc1t0W25dXT1lW3Rbbl1dKX1mdW5jdGlvbiBwKGUpe2lmKHRoaXMubGFiZWxzPXt9LGUpZm9yKHZhciB0PU9iamVjdC5rZXlzKGUpLG49MDtuPHQubGVuZ3RoOysrbiludWxsIT1lW3Rbbl1dJiYodGhpc1t0W25dXT1lW3Rbbl1dKX1mdW5jdGlvbiBsKGUpe2lmKHRoaXMucnVsZXM9W10sZSlmb3IodmFyIHQ9T2JqZWN0LmtleXMoZSksbj0wO248dC5sZW5ndGg7KytuKW51bGwhPWVbdFtuXV0mJih0aGlzW3Rbbl1dPWVbdFtuXV0pfWZ1bmN0aW9uIGQoZSl7aWYodGhpcy5hZGRpdGlvbmFsQmluZGluZ3M9W10sZSlmb3IodmFyIHQ9T2JqZWN0LmtleXMoZSksbj0wO248dC5sZW5ndGg7KytuKW51bGwhPWVbdFtuXV0mJih0aGlzW3Rbbl1dPWVbdFtuXV0pfWZ1bmN0aW9uIGcoZSl7aWYoZSlmb3IodmFyIHQ9T2JqZWN0LmtleXMoZSksbj0wO248dC5sZW5ndGg7KytuKW51bGwhPWVbdFtuXV0mJih0aGlzW3Rbbl1dPWVbdFtuXV0pfWZ1bmN0aW9uIEIoZSl7aWYodGhpcy5maWxlPVtdLGUpZm9yKHZhciB0PU9iamVjdC5rZXlzKGUpLG49MDtuPHQubGVuZ3RoOysrbiludWxsIT1lW3Rbbl1dJiYodGhpc1t0W25dXT1lW3Rbbl1dKX1mdW5jdGlvbiBmKGUpe2lmKHRoaXMuZGVwZW5kZW5jeT1bXSx0aGlzLnB1YmxpY0RlcGVuZGVuY3k9W10sdGhpcy53ZWFrRGVwZW5kZW5jeT1bXSx0aGlzLm1lc3NhZ2VUeXBlPVtdLHRoaXMuZW51bVR5cGU9W10sdGhpcy5zZXJ2aWNlPVtdLHRoaXMuZXh0ZW5zaW9uPVtdLGUpZm9yKHZhciB0PU9iamVjdC5rZXlzKGUpLG49MDtuPHQubGVuZ3RoOysrbiludWxsIT1lW3Rbbl1dJiYodGhpc1t0W25dXT1lW3Rbbl1dKX1mdW5jdGlvbiB5KGUpe2lmKHRoaXMuZmllbGQ9W10sdGhpcy5leHRlbnNpb249W10sdGhpcy5uZXN0ZWRUeXBlPVtdLHRoaXMuZW51bVR5cGU9W10sdGhpcy5leHRlbnNpb25SYW5nZT1bXSx0aGlzLm9uZW9mRGVjbD1bXSx0aGlzLnJlc2VydmVkUmFuZ2U9W10sdGhpcy5yZXNlcnZlZE5hbWU9W10sZSlmb3IodmFyIHQ9T2JqZWN0LmtleXMoZSksbj0wO248dC5sZW5ndGg7KytuKW51bGwhPWVbdFtuXV0mJih0aGlzW3Rbbl1dPWVbdFtuXV0pfWZ1bmN0aW9uIGgoZSl7aWYoZSlmb3IodmFyIHQ9T2JqZWN0LmtleXMoZSksbj0wO248dC5sZW5ndGg7KytuKW51bGwhPWVbdFtuXV0mJih0aGlzW3Rbbl1dPWVbdFtuXV0pfWZ1bmN0aW9uIGIoZSl7aWYoZSlmb3IodmFyIHQ9T2JqZWN0LmtleXMoZSksbj0wO248dC5sZW5ndGg7KytuKW51bGwhPWVbdFtuXV0mJih0aGlzW3Rbbl1dPWVbdFtuXV0pfWZ1bmN0aW9uIFUoZSl7aWYodGhpcy51bmludGVycHJldGVkT3B0aW9uPVtdLGUpZm9yKHZhciB0PU9iamVjdC5rZXlzKGUpLG49MDtuPHQubGVuZ3RoOysrbiludWxsIT1lW3Rbbl1dJiYodGhpc1t0W25dXT1lW3Rbbl1dKX1mdW5jdGlvbiBPKGUpe2lmKGUpZm9yKHZhciB0PU9iamVjdC5rZXlzKGUpLG49MDtuPHQubGVuZ3RoOysrbiludWxsIT1lW3Rbbl1dJiYodGhpc1t0W25dXT1lW3Rbbl1dKX1mdW5jdGlvbiBtKGUpe2lmKGUpZm9yKHZhciB0PU9iamVjdC5rZXlzKGUpLG49MDtuPHQubGVuZ3RoOysrbiludWxsIT1lW3Rbbl1dJiYodGhpc1t0W25dXT1lW3Rbbl1dKX1mdW5jdGlvbiB2KGUpe2lmKHRoaXMudmFsdWU9W10sdGhpcy5yZXNlcnZlZFJhbmdlPVtdLHRoaXMucmVzZXJ2ZWROYW1lPVtdLGUpZm9yKHZhciB0PU9iamVjdC5rZXlzKGUpLG49MDtuPHQubGVuZ3RoOysrbiludWxsIT1lW3Rbbl1dJiYodGhpc1t0W25dXT1lW3Rbbl1dKX1mdW5jdGlvbiBQKGUpe2lmKGUpZm9yKHZhciB0PU9iamVjdC5rZXlzKGUpLG49MDtuPHQubGVuZ3RoOysrbiludWxsIT1lW3Rbbl1dJiYodGhpc1t0W25dXT1lW3Rbbl1dKX1mdW5jdGlvbiB3KGUpe2lmKGUpZm9yKHZhciB0PU9iamVjdC5rZXlzKGUpLG49MDtuPHQubGVuZ3RoOysrbiludWxsIT1lW3Rbbl1dJiYodGhpc1t0W25dXT1lW3Rbbl1dKX1mdW5jdGlvbiBqKGUpe2lmKHRoaXMubWV0aG9kPVtdLGUpZm9yKHZhciB0PU9iamVjdC5rZXlzKGUpLG49MDtuPHQubGVuZ3RoOysrbiludWxsIT1lW3Rbbl1dJiYodGhpc1t0W25dXT1lW3Rbbl1dKX1mdW5jdGlvbiB4KGUpe2lmKGUpZm9yKHZhciB0PU9iamVjdC5rZXlzKGUpLG49MDtuPHQubGVuZ3RoOysrbiludWxsIT1lW3Rbbl1dJiYodGhpc1t0W25dXT1lW3Rbbl1dKX1mdW5jdGlvbiBTKGUpe2lmKHRoaXMudW5pbnRlcnByZXRlZE9wdGlvbj1bXSxlKWZvcih2YXIgdD1PYmplY3Qua2V5cyhlKSxuPTA7bjx0Lmxlbmd0aDsrK24pbnVsbCE9ZVt0W25dXSYmKHRoaXNbdFtuXV09ZVt0W25dXSl9ZnVuY3Rpb24gayhlKXtpZih0aGlzLnVuaW50ZXJwcmV0ZWRPcHRpb249W10sZSlmb3IodmFyIHQ9T2JqZWN0LmtleXMoZSksbj0wO248dC5sZW5ndGg7KytuKW51bGwhPWVbdFtuXV0mJih0aGlzW3Rbbl1dPWVbdFtuXV0pfWZ1bmN0aW9uIEQoZSl7aWYodGhpcy51bmludGVycHJldGVkT3B0aW9uPVtdLGUpZm9yKHZhciB0PU9iamVjdC5rZXlzKGUpLG49MDtuPHQubGVuZ3RoOysrbiludWxsIT1lW3Rbbl1dJiYodGhpc1t0W25dXT1lW3Rbbl1dKX1mdW5jdGlvbiBNKGUpe2lmKHRoaXMudW5pbnRlcnByZXRlZE9wdGlvbj1bXSxlKWZvcih2YXIgdD1PYmplY3Qua2V5cyhlKSxuPTA7bjx0Lmxlbmd0aDsrK24pbnVsbCE9ZVt0W25dXSYmKHRoaXNbdFtuXV09ZVt0W25dXSl9ZnVuY3Rpb24gVChlKXtpZih0aGlzLnVuaW50ZXJwcmV0ZWRPcHRpb249W10sZSlmb3IodmFyIHQ9T2JqZWN0LmtleXMoZSksbj0wO248dC5sZW5ndGg7KytuKW51bGwhPWVbdFtuXV0mJih0aGlzW3Rbbl1dPWVbdFtuXV0pfWZ1bmN0aW9uIEUoZSl7aWYodGhpcy51bmludGVycHJldGVkT3B0aW9uPVtdLGUpZm9yKHZhciB0PU9iamVjdC5rZXlzKGUpLG49MDtuPHQubGVuZ3RoOysrbiludWxsIT1lW3Rbbl1dJiYodGhpc1t0W25dXT1lW3Rbbl1dKX1mdW5jdGlvbiBBKGUpe2lmKHRoaXMudW5pbnRlcnByZXRlZE9wdGlvbj1bXSxlKWZvcih2YXIgdD1PYmplY3Qua2V5cyhlKSxuPTA7bjx0Lmxlbmd0aDsrK24pbnVsbCE9ZVt0W25dXSYmKHRoaXNbdFtuXV09ZVt0W25dXSl9ZnVuY3Rpb24gTihlKXtpZih0aGlzLnVuaW50ZXJwcmV0ZWRPcHRpb249W10sdGhpc1tcIi5nb29nbGUuYXBpLm1ldGhvZFNpZ25hdHVyZVwiXT1bXSxlKWZvcih2YXIgdD1PYmplY3Qua2V5cyhlKSxuPTA7bjx0Lmxlbmd0aDsrK24pbnVsbCE9ZVt0W25dXSYmKHRoaXNbdFtuXV09ZVt0W25dXSl9ZnVuY3Rpb24gSShlKXtpZih0aGlzLm5hbWU9W10sZSlmb3IodmFyIHQ9T2JqZWN0LmtleXMoZSksbj0wO248dC5sZW5ndGg7KytuKW51bGwhPWVbdFtuXV0mJih0aGlzW3Rbbl1dPWVbdFtuXV0pfWZ1bmN0aW9uIFIoZSl7aWYoZSlmb3IodmFyIHQ9T2JqZWN0LmtleXMoZSksbj0wO248dC5sZW5ndGg7KytuKW51bGwhPWVbdFtuXV0mJih0aGlzW3Rbbl1dPWVbdFtuXV0pfWZ1bmN0aW9uIF8oZSl7aWYodGhpcy5sb2NhdGlvbj1bXSxlKWZvcih2YXIgdD1PYmplY3Qua2V5cyhlKSxuPTA7bjx0Lmxlbmd0aDsrK24pbnVsbCE9ZVt0W25dXSYmKHRoaXNbdFtuXV09ZVt0W25dXSl9ZnVuY3Rpb24gQyhlKXtpZih0aGlzLnBhdGg9W10sdGhpcy5zcGFuPVtdLHRoaXMubGVhZGluZ0RldGFjaGVkQ29tbWVudHM9W10sZSlmb3IodmFyIHQ9T2JqZWN0LmtleXMoZSksbj0wO248dC5sZW5ndGg7KytuKW51bGwhPWVbdFtuXV0mJih0aGlzW3Rbbl1dPWVbdFtuXV0pfWZ1bmN0aW9uIEooZSl7aWYodGhpcy5hbm5vdGF0aW9uPVtdLGUpZm9yKHZhciB0PU9iamVjdC5rZXlzKGUpLG49MDtuPHQubGVuZ3RoOysrbiludWxsIT1lW3Rbbl1dJiYodGhpc1t0W25dXT1lW3Rbbl1dKX1mdW5jdGlvbiBWKGUpe2lmKHRoaXMucGF0aD1bXSxlKWZvcih2YXIgdD1PYmplY3Qua2V5cyhlKSxuPTA7bjx0Lmxlbmd0aDsrK24pbnVsbCE9ZVt0W25dXSYmKHRoaXNbdFtuXV09ZVt0W25dXSl9ZnVuY3Rpb24gSChlKXtpZihlKWZvcih2YXIgdD1PYmplY3Qua2V5cyhlKSxuPTA7bjx0Lmxlbmd0aDsrK24pbnVsbCE9ZVt0W25dXSYmKHRoaXNbdFtuXV09ZVt0W25dXSl9cmV0dXJuIGMuZ29vZ2xlPSgoRj17fSkuY2xvdWQ9KChuPXt9KS5sb2NhdGlvbj0oKGU9e30pLkxvY2F0aW9ucz0oKChMLnByb3RvdHlwZT1PYmplY3QuY3JlYXRlKG8ucnBjLlNlcnZpY2UucHJvdG90eXBlKSkuY29uc3RydWN0b3I9TCkuY3JlYXRlPWZ1bmN0aW9uKGUsdCxuKXtyZXR1cm4gbmV3IHRoaXMoZSx0LG4pfSxPYmplY3QuZGVmaW5lUHJvcGVydHkoTC5wcm90b3R5cGUubGlzdExvY2F0aW9ucz1mdW5jdGlvbiBlKHQsbil7cmV0dXJuIHRoaXMucnBjQ2FsbChlLGMuZ29vZ2xlLmNsb3VkLmxvY2F0aW9uLkxpc3RMb2NhdGlvbnNSZXF1ZXN0LGMuZ29vZ2xlLmNsb3VkLmxvY2F0aW9uLkxpc3RMb2NhdGlvbnNSZXNwb25zZSx0LG4pfSxcIm5hbWVcIix7dmFsdWU6XCJMaXN0TG9jYXRpb25zXCJ9KSxPYmplY3QuZGVmaW5lUHJvcGVydHkoTC5wcm90b3R5cGUuZ2V0TG9jYXRpb249ZnVuY3Rpb24gZSh0LG4pe3JldHVybiB0aGlzLnJwY0NhbGwoZSxjLmdvb2dsZS5jbG91ZC5sb2NhdGlvbi5HZXRMb2NhdGlvblJlcXVlc3QsYy5nb29nbGUuY2xvdWQubG9jYXRpb24uTG9jYXRpb24sdCxuKX0sXCJuYW1lXCIse3ZhbHVlOlwiR2V0TG9jYXRpb25cIn0pLEwpLGUuTGlzdExvY2F0aW9uc1JlcXVlc3Q9KGkucHJvdG90eXBlLm5hbWU9XCJcIixpLnByb3RvdHlwZS5maWx0ZXI9XCJcIixpLnByb3RvdHlwZS5wYWdlU2l6ZT0wLGkucHJvdG90eXBlLnBhZ2VUb2tlbj1cIlwiLGkuY3JlYXRlPWZ1bmN0aW9uKGUpe3JldHVybiBuZXcgaShlKX0saS5lbmNvZGU9ZnVuY3Rpb24oZSx0KXtyZXR1cm4gdD10fHxyLmNyZWF0ZSgpLG51bGwhPWUubmFtZSYmT2JqZWN0Lmhhc093blByb3BlcnR5LmNhbGwoZSxcIm5hbWVcIikmJnQudWludDMyKDEwKS5zdHJpbmcoZS5uYW1lKSxudWxsIT1lLmZpbHRlciYmT2JqZWN0Lmhhc093blByb3BlcnR5LmNhbGwoZSxcImZpbHRlclwiKSYmdC51aW50MzIoMTgpLnN0cmluZyhlLmZpbHRlciksbnVsbCE9ZS5wYWdlU2l6ZSYmT2JqZWN0Lmhhc093blByb3BlcnR5LmNhbGwoZSxcInBhZ2VTaXplXCIpJiZ0LnVpbnQzMigyNCkuaW50MzIoZS5wYWdlU2l6ZSksbnVsbCE9ZS5wYWdlVG9rZW4mJk9iamVjdC5oYXNPd25Qcm9wZXJ0eS5jYWxsKGUsXCJwYWdlVG9rZW5cIikmJnQudWludDMyKDM0KS5zdHJpbmcoZS5wYWdlVG9rZW4pLHR9LGkuZW5jb2RlRGVsaW1pdGVkPWZ1bmN0aW9uKGUsdCl7cmV0dXJuIHRoaXMuZW5jb2RlKGUsdCkubGRlbGltKCl9LGkuZGVjb2RlPWZ1bmN0aW9uKGUsdCl7ZSBpbnN0YW5jZW9mIHN8fChlPXMuY3JlYXRlKGUpKTtmb3IodmFyIG49dm9pZCAwPT09dD9lLmxlbjplLnBvcyt0LG89bmV3IGMuZ29vZ2xlLmNsb3VkLmxvY2F0aW9uLkxpc3RMb2NhdGlvbnNSZXF1ZXN0O2UucG9zPG47KXt2YXIgcj1lLnVpbnQzMigpO3N3aXRjaChyPj4+Myl7Y2FzZSAxOm8ubmFtZT1lLnN0cmluZygpO2JyZWFrO2Nhc2UgMjpvLmZpbHRlcj1lLnN0cmluZygpO2JyZWFrO2Nhc2UgMzpvLnBhZ2VTaXplPWUuaW50MzIoKTticmVhaztjYXNlIDQ6by5wYWdlVG9rZW49ZS5zdHJpbmcoKTticmVhaztkZWZhdWx0OmUuc2tpcFR5cGUoNyZyKX19cmV0dXJuIG99LGkuZGVjb2RlRGVsaW1pdGVkPWZ1bmN0aW9uKGUpe3JldHVybiBlIGluc3RhbmNlb2Ygc3x8KGU9bmV3IHMoZSkpLHRoaXMuZGVjb2RlKGUsZS51aW50MzIoKSl9LGkudmVyaWZ5PWZ1bmN0aW9uKGUpe3JldHVyblwib2JqZWN0XCIhPXR5cGVvZiBlfHxudWxsPT09ZT9cIm9iamVjdCBleHBlY3RlZFwiOm51bGwhPWUubmFtZSYmZS5oYXNPd25Qcm9wZXJ0eShcIm5hbWVcIikmJiF1LmlzU3RyaW5nKGUubmFtZSk/XCJuYW1lOiBzdHJpbmcgZXhwZWN0ZWRcIjpudWxsIT1lLmZpbHRlciYmZS5oYXNPd25Qcm9wZXJ0eShcImZpbHRlclwiKSYmIXUuaXNTdHJpbmcoZS5maWx0ZXIpP1wiZmlsdGVyOiBzdHJpbmcgZXhwZWN0ZWRcIjpudWxsIT1lLnBhZ2VTaXplJiZlLmhhc093blByb3BlcnR5KFwicGFnZVNpemVcIikmJiF1LmlzSW50ZWdlcihlLnBhZ2VTaXplKT9cInBhZ2VTaXplOiBpbnRlZ2VyIGV4cGVjdGVkXCI6bnVsbCE9ZS5wYWdlVG9rZW4mJmUuaGFzT3duUHJvcGVydHkoXCJwYWdlVG9rZW5cIikmJiF1LmlzU3RyaW5nKGUucGFnZVRva2VuKT9cInBhZ2VUb2tlbjogc3RyaW5nIGV4cGVjdGVkXCI6bnVsbH0saS5mcm9tT2JqZWN0PWZ1bmN0aW9uKGUpe3ZhciB0O3JldHVybiBlIGluc3RhbmNlb2YgYy5nb29nbGUuY2xvdWQubG9jYXRpb24uTGlzdExvY2F0aW9uc1JlcXVlc3Q/ZToodD1uZXcgYy5nb29nbGUuY2xvdWQubG9jYXRpb24uTGlzdExvY2F0aW9uc1JlcXVlc3QsbnVsbCE9ZS5uYW1lJiYodC5uYW1lPVN0cmluZyhlLm5hbWUpKSxudWxsIT1lLmZpbHRlciYmKHQuZmlsdGVyPVN0cmluZyhlLmZpbHRlcikpLG51bGwhPWUucGFnZVNpemUmJih0LnBhZ2VTaXplPTB8ZS5wYWdlU2l6ZSksbnVsbCE9ZS5wYWdlVG9rZW4mJih0LnBhZ2VUb2tlbj1TdHJpbmcoZS5wYWdlVG9rZW4pKSx0KX0saS50b09iamVjdD1mdW5jdGlvbihlLHQpe3ZhciBuPXt9O3JldHVybih0PXR8fHt9KS5kZWZhdWx0cyYmKG4ubmFtZT1cIlwiLG4uZmlsdGVyPVwiXCIsbi5wYWdlU2l6ZT0wLG4ucGFnZVRva2VuPVwiXCIpLG51bGwhPWUubmFtZSYmZS5oYXNPd25Qcm9wZXJ0eShcIm5hbWVcIikmJihuLm5hbWU9ZS5uYW1lKSxudWxsIT1lLmZpbHRlciYmZS5oYXNPd25Qcm9wZXJ0eShcImZpbHRlclwiKSYmKG4uZmlsdGVyPWUuZmlsdGVyKSxudWxsIT1lLnBhZ2VTaXplJiZlLmhhc093blByb3BlcnR5KFwicGFnZVNpemVcIikmJihuLnBhZ2VTaXplPWUucGFnZVNpemUpLG51bGwhPWUucGFnZVRva2VuJiZlLmhhc093blByb3BlcnR5KFwicGFnZVRva2VuXCIpJiYobi5wYWdlVG9rZW49ZS5wYWdlVG9rZW4pLG59LGkucHJvdG90eXBlLnRvSlNPTj1mdW5jdGlvbigpe3JldHVybiB0aGlzLmNvbnN0cnVjdG9yLnRvT2JqZWN0KHRoaXMsby51dGlsLnRvSlNPTk9wdGlvbnMpfSxpKSxlLkxpc3RMb2NhdGlvbnNSZXNwb25zZT0oYS5wcm90b3R5cGUubG9jYXRpb25zPXUuZW1wdHlBcnJheSxhLnByb3RvdHlwZS5uZXh0UGFnZVRva2VuPVwiXCIsYS5jcmVhdGU9ZnVuY3Rpb24oZSl7cmV0dXJuIG5ldyBhKGUpfSxhLmVuY29kZT1mdW5jdGlvbihlLHQpe2lmKHQ9dHx8ci5jcmVhdGUoKSxudWxsIT1lLmxvY2F0aW9ucyYmZS5sb2NhdGlvbnMubGVuZ3RoKWZvcih2YXIgbj0wO248ZS5sb2NhdGlvbnMubGVuZ3RoOysrbiljLmdvb2dsZS5jbG91ZC5sb2NhdGlvbi5Mb2NhdGlvbi5lbmNvZGUoZS5sb2NhdGlvbnNbbl0sdC51aW50MzIoMTApLmZvcmsoKSkubGRlbGltKCk7cmV0dXJuIG51bGwhPWUubmV4dFBhZ2VUb2tlbiYmT2JqZWN0Lmhhc093blByb3BlcnR5LmNhbGwoZSxcIm5leHRQYWdlVG9rZW5cIikmJnQudWludDMyKDE4KS5zdHJpbmcoZS5uZXh0UGFnZVRva2VuKSx0fSxhLmVuY29kZURlbGltaXRlZD1mdW5jdGlvbihlLHQpe3JldHVybiB0aGlzLmVuY29kZShlLHQpLmxkZWxpbSgpfSxhLmRlY29kZT1mdW5jdGlvbihlLHQpe2UgaW5zdGFuY2VvZiBzfHwoZT1zLmNyZWF0ZShlKSk7Zm9yKHZhciBuPXZvaWQgMD09PXQ/ZS5sZW46ZS5wb3MrdCxvPW5ldyBjLmdvb2dsZS5jbG91ZC5sb2NhdGlvbi5MaXN0TG9jYXRpb25zUmVzcG9uc2U7ZS5wb3M8bjspe3ZhciByPWUudWludDMyKCk7c3dpdGNoKHI+Pj4zKXtjYXNlIDE6by5sb2NhdGlvbnMmJm8ubG9jYXRpb25zLmxlbmd0aHx8KG8ubG9jYXRpb25zPVtdKSxvLmxvY2F0aW9ucy5wdXNoKGMuZ29vZ2xlLmNsb3VkLmxvY2F0aW9uLkxvY2F0aW9uLmRlY29kZShlLGUudWludDMyKCkpKTticmVhaztjYXNlIDI6by5uZXh0UGFnZVRva2VuPWUuc3RyaW5nKCk7YnJlYWs7ZGVmYXVsdDplLnNraXBUeXBlKDcmcil9fXJldHVybiBvfSxhLmRlY29kZURlbGltaXRlZD1mdW5jdGlvbihlKXtyZXR1cm4gZSBpbnN0YW5jZW9mIHN8fChlPW5ldyBzKGUpKSx0aGlzLmRlY29kZShlLGUudWludDMyKCkpfSxhLnZlcmlmeT1mdW5jdGlvbihlKXtpZihcIm9iamVjdFwiIT10eXBlb2YgZXx8bnVsbD09PWUpcmV0dXJuXCJvYmplY3QgZXhwZWN0ZWRcIjtpZihudWxsIT1lLmxvY2F0aW9ucyYmZS5oYXNPd25Qcm9wZXJ0eShcImxvY2F0aW9uc1wiKSl7aWYoIUFycmF5LmlzQXJyYXkoZS5sb2NhdGlvbnMpKXJldHVyblwibG9jYXRpb25zOiBhcnJheSBleHBlY3RlZFwiO2Zvcih2YXIgdD0wO3Q8ZS5sb2NhdGlvbnMubGVuZ3RoOysrdCl7dmFyIG49Yy5nb29nbGUuY2xvdWQubG9jYXRpb24uTG9jYXRpb24udmVyaWZ5KGUubG9jYXRpb25zW3RdKTtpZihuKXJldHVyblwibG9jYXRpb25zLlwiK259fXJldHVybiBudWxsIT1lLm5leHRQYWdlVG9rZW4mJmUuaGFzT3duUHJvcGVydHkoXCJuZXh0UGFnZVRva2VuXCIpJiYhdS5pc1N0cmluZyhlLm5leHRQYWdlVG9rZW4pP1wibmV4dFBhZ2VUb2tlbjogc3RyaW5nIGV4cGVjdGVkXCI6bnVsbH0sYS5mcm9tT2JqZWN0PWZ1bmN0aW9uKGUpe2lmKGUgaW5zdGFuY2VvZiBjLmdvb2dsZS5jbG91ZC5sb2NhdGlvbi5MaXN0TG9jYXRpb25zUmVzcG9uc2UpcmV0dXJuIGU7dmFyIHQ9bmV3IGMuZ29vZ2xlLmNsb3VkLmxvY2F0aW9uLkxpc3RMb2NhdGlvbnNSZXNwb25zZTtpZihlLmxvY2F0aW9ucyl7aWYoIUFycmF5LmlzQXJyYXkoZS5sb2NhdGlvbnMpKXRocm93IFR5cGVFcnJvcihcIi5nb29nbGUuY2xvdWQubG9jYXRpb24uTGlzdExvY2F0aW9uc1Jlc3BvbnNlLmxvY2F0aW9uczogYXJyYXkgZXhwZWN0ZWRcIik7dC5sb2NhdGlvbnM9W107Zm9yKHZhciBuPTA7bjxlLmxvY2F0aW9ucy5sZW5ndGg7KytuKXtpZihcIm9iamVjdFwiIT10eXBlb2YgZS5sb2NhdGlvbnNbbl0pdGhyb3cgVHlwZUVycm9yKFwiLmdvb2dsZS5jbG91ZC5sb2NhdGlvbi5MaXN0TG9jYXRpb25zUmVzcG9uc2UubG9jYXRpb25zOiBvYmplY3QgZXhwZWN0ZWRcIik7dC5sb2NhdGlvbnNbbl09Yy5nb29nbGUuY2xvdWQubG9jYXRpb24uTG9jYXRpb24uZnJvbU9iamVjdChlLmxvY2F0aW9uc1tuXSl9fXJldHVybiBudWxsIT1lLm5leHRQYWdlVG9rZW4mJih0Lm5leHRQYWdlVG9rZW49U3RyaW5nKGUubmV4dFBhZ2VUb2tlbikpLHR9LGEudG9PYmplY3Q9ZnVuY3Rpb24oZSx0KXt2YXIgbj17fTtpZigoKHQ9dHx8e30pLmFycmF5c3x8dC5kZWZhdWx0cykmJihuLmxvY2F0aW9ucz1bXSksdC5kZWZhdWx0cyYmKG4ubmV4dFBhZ2VUb2tlbj1cIlwiKSxlLmxvY2F0aW9ucyYmZS5sb2NhdGlvbnMubGVuZ3RoKXtuLmxvY2F0aW9ucz1bXTtmb3IodmFyIG89MDtvPGUubG9jYXRpb25zLmxlbmd0aDsrK28pbi5sb2NhdGlvbnNbb109Yy5nb29nbGUuY2xvdWQubG9jYXRpb24uTG9jYXRpb24udG9PYmplY3QoZS5sb2NhdGlvbnNbb10sdCl9cmV0dXJuIG51bGwhPWUubmV4dFBhZ2VUb2tlbiYmZS5oYXNPd25Qcm9wZXJ0eShcIm5leHRQYWdlVG9rZW5cIikmJihuLm5leHRQYWdlVG9rZW49ZS5uZXh0UGFnZVRva2VuKSxufSxhLnByb3RvdHlwZS50b0pTT049ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5jb25zdHJ1Y3Rvci50b09iamVjdCh0aGlzLG8udXRpbC50b0pTT05PcHRpb25zKX0sYSksZS5HZXRMb2NhdGlvblJlcXVlc3Q9KEcucHJvdG90eXBlLm5hbWU9XCJcIixHLmNyZWF0ZT1mdW5jdGlvbihlKXtyZXR1cm4gbmV3IEcoZSl9LEcuZW5jb2RlPWZ1bmN0aW9uKGUsdCl7cmV0dXJuIHQ9dHx8ci5jcmVhdGUoKSxudWxsIT1lLm5hbWUmJk9iamVjdC5oYXNPd25Qcm9wZXJ0eS5jYWxsKGUsXCJuYW1lXCIpJiZ0LnVpbnQzMigxMCkuc3RyaW5nKGUubmFtZSksdH0sRy5lbmNvZGVEZWxpbWl0ZWQ9ZnVuY3Rpb24oZSx0KXtyZXR1cm4gdGhpcy5lbmNvZGUoZSx0KS5sZGVsaW0oKX0sRy5kZWNvZGU9ZnVuY3Rpb24oZSx0KXtlIGluc3RhbmNlb2Ygc3x8KGU9cy5jcmVhdGUoZSkpO2Zvcih2YXIgbj12b2lkIDA9PT10P2UubGVuOmUucG9zK3Qsbz1uZXcgYy5nb29nbGUuY2xvdWQubG9jYXRpb24uR2V0TG9jYXRpb25SZXF1ZXN0O2UucG9zPG47KXt2YXIgcj1lLnVpbnQzMigpO3I+Pj4zPT0xP28ubmFtZT1lLnN0cmluZygpOmUuc2tpcFR5cGUoNyZyKX1yZXR1cm4gb30sRy5kZWNvZGVEZWxpbWl0ZWQ9ZnVuY3Rpb24oZSl7cmV0dXJuIGUgaW5zdGFuY2VvZiBzfHwoZT1uZXcgcyhlKSksdGhpcy5kZWNvZGUoZSxlLnVpbnQzMigpKX0sRy52ZXJpZnk9ZnVuY3Rpb24oZSl7cmV0dXJuXCJvYmplY3RcIiE9dHlwZW9mIGV8fG51bGw9PT1lP1wib2JqZWN0IGV4cGVjdGVkXCI6bnVsbCE9ZS5uYW1lJiZlLmhhc093blByb3BlcnR5KFwibmFtZVwiKSYmIXUuaXNTdHJpbmcoZS5uYW1lKT9cIm5hbWU6IHN0cmluZyBleHBlY3RlZFwiOm51bGx9LEcuZnJvbU9iamVjdD1mdW5jdGlvbihlKXt2YXIgdDtyZXR1cm4gZSBpbnN0YW5jZW9mIGMuZ29vZ2xlLmNsb3VkLmxvY2F0aW9uLkdldExvY2F0aW9uUmVxdWVzdD9lOih0PW5ldyBjLmdvb2dsZS5jbG91ZC5sb2NhdGlvbi5HZXRMb2NhdGlvblJlcXVlc3QsbnVsbCE9ZS5uYW1lJiYodC5uYW1lPVN0cmluZyhlLm5hbWUpKSx0KX0sRy50b09iamVjdD1mdW5jdGlvbihlLHQpe3ZhciBuPXt9O3JldHVybih0PXR8fHt9KS5kZWZhdWx0cyYmKG4ubmFtZT1cIlwiKSxudWxsIT1lLm5hbWUmJmUuaGFzT3duUHJvcGVydHkoXCJuYW1lXCIpJiYobi5uYW1lPWUubmFtZSksbn0sRy5wcm90b3R5cGUudG9KU09OPWZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMuY29uc3RydWN0b3IudG9PYmplY3QodGhpcyxvLnV0aWwudG9KU09OT3B0aW9ucyl9LEcpLGUuTG9jYXRpb249KHAucHJvdG90eXBlLm5hbWU9XCJcIixwLnByb3RvdHlwZS5sb2NhdGlvbklkPVwiXCIscC5wcm90b3R5cGUuZGlzcGxheU5hbWU9XCJcIixwLnByb3RvdHlwZS5sYWJlbHM9dS5lbXB0eU9iamVjdCxwLnByb3RvdHlwZS5tZXRhZGF0YT1udWxsLHAuY3JlYXRlPWZ1bmN0aW9uKGUpe3JldHVybiBuZXcgcChlKX0scC5lbmNvZGU9ZnVuY3Rpb24oZSx0KXtpZih0PXR8fHIuY3JlYXRlKCksbnVsbCE9ZS5uYW1lJiZPYmplY3QuaGFzT3duUHJvcGVydHkuY2FsbChlLFwibmFtZVwiKSYmdC51aW50MzIoMTApLnN0cmluZyhlLm5hbWUpLG51bGwhPWUubGFiZWxzJiZPYmplY3QuaGFzT3duUHJvcGVydHkuY2FsbChlLFwibGFiZWxzXCIpKWZvcih2YXIgbj1PYmplY3Qua2V5cyhlLmxhYmVscyksbz0wO288bi5sZW5ndGg7KytvKXQudWludDMyKDE4KS5mb3JrKCkudWludDMyKDEwKS5zdHJpbmcobltvXSkudWludDMyKDE4KS5zdHJpbmcoZS5sYWJlbHNbbltvXV0pLmxkZWxpbSgpO3JldHVybiBudWxsIT1lLm1ldGFkYXRhJiZPYmplY3QuaGFzT3duUHJvcGVydHkuY2FsbChlLFwibWV0YWRhdGFcIikmJmMuZ29vZ2xlLnByb3RvYnVmLkFueS5lbmNvZGUoZS5tZXRhZGF0YSx0LnVpbnQzMigyNikuZm9yaygpKS5sZGVsaW0oKSxudWxsIT1lLmxvY2F0aW9uSWQmJk9iamVjdC5oYXNPd25Qcm9wZXJ0eS5jYWxsKGUsXCJsb2NhdGlvbklkXCIpJiZ0LnVpbnQzMigzNCkuc3RyaW5nKGUubG9jYXRpb25JZCksbnVsbCE9ZS5kaXNwbGF5TmFtZSYmT2JqZWN0Lmhhc093blByb3BlcnR5LmNhbGwoZSxcImRpc3BsYXlOYW1lXCIpJiZ0LnVpbnQzMig0Mikuc3RyaW5nKGUuZGlzcGxheU5hbWUpLHR9LHAuZW5jb2RlRGVsaW1pdGVkPWZ1bmN0aW9uKGUsdCl7cmV0dXJuIHRoaXMuZW5jb2RlKGUsdCkubGRlbGltKCl9LHAuZGVjb2RlPWZ1bmN0aW9uKGUsdCl7ZSBpbnN0YW5jZW9mIHN8fChlPXMuY3JlYXRlKGUpKTtmb3IodmFyIG49dm9pZCAwPT09dD9lLmxlbjplLnBvcyt0LG89bmV3IGMuZ29vZ2xlLmNsb3VkLmxvY2F0aW9uLkxvY2F0aW9uO2UucG9zPG47KXt2YXIgcj1lLnVpbnQzMigpO3N3aXRjaChyPj4+Myl7Y2FzZSAxOm8ubmFtZT1lLnN0cmluZygpO2JyZWFrO2Nhc2UgNDpvLmxvY2F0aW9uSWQ9ZS5zdHJpbmcoKTticmVhaztjYXNlIDU6by5kaXNwbGF5TmFtZT1lLnN0cmluZygpO2JyZWFrO2Nhc2UgMjpvLmxhYmVscz09PXUuZW1wdHlPYmplY3QmJihvLmxhYmVscz17fSk7Zm9yKHZhciBpPWUudWludDMyKCkrZS5wb3MsYT1cIlwiLHA9XCJcIjtlLnBvczxpOyl7dmFyIGw9ZS51aW50MzIoKTtzd2l0Y2gobD4+PjMpe2Nhc2UgMTphPWUuc3RyaW5nKCk7YnJlYWs7Y2FzZSAyOnA9ZS5zdHJpbmcoKTticmVhaztkZWZhdWx0OmUuc2tpcFR5cGUoNyZsKX19by5sYWJlbHNbYV09cDticmVhaztjYXNlIDM6by5tZXRhZGF0YT1jLmdvb2dsZS5wcm90b2J1Zi5BbnkuZGVjb2RlKGUsZS51aW50MzIoKSk7YnJlYWs7ZGVmYXVsdDplLnNraXBUeXBlKDcmcil9fXJldHVybiBvfSxwLmRlY29kZURlbGltaXRlZD1mdW5jdGlvbihlKXtyZXR1cm4gZSBpbnN0YW5jZW9mIHN8fChlPW5ldyBzKGUpKSx0aGlzLmRlY29kZShlLGUudWludDMyKCkpfSxwLnZlcmlmeT1mdW5jdGlvbihlKXtpZihcIm9iamVjdFwiIT10eXBlb2YgZXx8bnVsbD09PWUpcmV0dXJuXCJvYmplY3QgZXhwZWN0ZWRcIjtpZihudWxsIT1lLm5hbWUmJmUuaGFzT3duUHJvcGVydHkoXCJuYW1lXCIpJiYhdS5pc1N0cmluZyhlLm5hbWUpKXJldHVyblwibmFtZTogc3RyaW5nIGV4cGVjdGVkXCI7aWYobnVsbCE9ZS5sb2NhdGlvbklkJiZlLmhhc093blByb3BlcnR5KFwibG9jYXRpb25JZFwiKSYmIXUuaXNTdHJpbmcoZS5sb2NhdGlvbklkKSlyZXR1cm5cImxvY2F0aW9uSWQ6IHN0cmluZyBleHBlY3RlZFwiO2lmKG51bGwhPWUuZGlzcGxheU5hbWUmJmUuaGFzT3duUHJvcGVydHkoXCJkaXNwbGF5TmFtZVwiKSYmIXUuaXNTdHJpbmcoZS5kaXNwbGF5TmFtZSkpcmV0dXJuXCJkaXNwbGF5TmFtZTogc3RyaW5nIGV4cGVjdGVkXCI7aWYobnVsbCE9ZS5sYWJlbHMmJmUuaGFzT3duUHJvcGVydHkoXCJsYWJlbHNcIikpe2lmKCF1LmlzT2JqZWN0KGUubGFiZWxzKSlyZXR1cm5cImxhYmVsczogb2JqZWN0IGV4cGVjdGVkXCI7Zm9yKHZhciB0PU9iamVjdC5rZXlzKGUubGFiZWxzKSxuPTA7bjx0Lmxlbmd0aDsrK24paWYoIXUuaXNTdHJpbmcoZS5sYWJlbHNbdFtuXV0pKXJldHVyblwibGFiZWxzOiBzdHJpbmd7azpzdHJpbmd9IGV4cGVjdGVkXCJ9aWYobnVsbCE9ZS5tZXRhZGF0YSYmZS5oYXNPd25Qcm9wZXJ0eShcIm1ldGFkYXRhXCIpKXt2YXIgbz1jLmdvb2dsZS5wcm90b2J1Zi5BbnkudmVyaWZ5KGUubWV0YWRhdGEpO2lmKG8pcmV0dXJuXCJtZXRhZGF0YS5cIitvfXJldHVybiBudWxsfSxwLmZyb21PYmplY3Q9ZnVuY3Rpb24oZSl7aWYoZSBpbnN0YW5jZW9mIGMuZ29vZ2xlLmNsb3VkLmxvY2F0aW9uLkxvY2F0aW9uKXJldHVybiBlO3ZhciB0PW5ldyBjLmdvb2dsZS5jbG91ZC5sb2NhdGlvbi5Mb2NhdGlvbjtpZihudWxsIT1lLm5hbWUmJih0Lm5hbWU9U3RyaW5nKGUubmFtZSkpLG51bGwhPWUubG9jYXRpb25JZCYmKHQubG9jYXRpb25JZD1TdHJpbmcoZS5sb2NhdGlvbklkKSksbnVsbCE9ZS5kaXNwbGF5TmFtZSYmKHQuZGlzcGxheU5hbWU9U3RyaW5nKGUuZGlzcGxheU5hbWUpKSxlLmxhYmVscyl7aWYoXCJvYmplY3RcIiE9dHlwZW9mIGUubGFiZWxzKXRocm93IFR5cGVFcnJvcihcIi5nb29nbGUuY2xvdWQubG9jYXRpb24uTG9jYXRpb24ubGFiZWxzOiBvYmplY3QgZXhwZWN0ZWRcIik7dC5sYWJlbHM9e307Zm9yKHZhciBuPU9iamVjdC5rZXlzKGUubGFiZWxzKSxvPTA7bzxuLmxlbmd0aDsrK28pdC5sYWJlbHNbbltvXV09U3RyaW5nKGUubGFiZWxzW25bb11dKX1pZihudWxsIT1lLm1ldGFkYXRhKXtpZihcIm9iamVjdFwiIT10eXBlb2YgZS5tZXRhZGF0YSl0aHJvdyBUeXBlRXJyb3IoXCIuZ29vZ2xlLmNsb3VkLmxvY2F0aW9uLkxvY2F0aW9uLm1ldGFkYXRhOiBvYmplY3QgZXhwZWN0ZWRcIik7dC5tZXRhZGF0YT1jLmdvb2dsZS5wcm90b2J1Zi5BbnkuZnJvbU9iamVjdChlLm1ldGFkYXRhKX1yZXR1cm4gdH0scC50b09iamVjdD1mdW5jdGlvbihlLHQpe3ZhciBuLG89e307aWYoKCh0PXR8fHt9KS5vYmplY3RzfHx0LmRlZmF1bHRzKSYmKG8ubGFiZWxzPXt9KSx0LmRlZmF1bHRzJiYoby5uYW1lPVwiXCIsby5tZXRhZGF0YT1udWxsLG8ubG9jYXRpb25JZD1cIlwiLG8uZGlzcGxheU5hbWU9XCJcIiksbnVsbCE9ZS5uYW1lJiZlLmhhc093blByb3BlcnR5KFwibmFtZVwiKSYmKG8ubmFtZT1lLm5hbWUpLGUubGFiZWxzJiYobj1PYmplY3Qua2V5cyhlLmxhYmVscykpLmxlbmd0aCl7by5sYWJlbHM9e307Zm9yKHZhciByPTA7cjxuLmxlbmd0aDsrK3Ipby5sYWJlbHNbbltyXV09ZS5sYWJlbHNbbltyXV19cmV0dXJuIG51bGwhPWUubWV0YWRhdGEmJmUuaGFzT3duUHJvcGVydHkoXCJtZXRhZGF0YVwiKSYmKG8ubWV0YWRhdGE9Yy5nb29nbGUucHJvdG9idWYuQW55LnRvT2JqZWN0KGUubWV0YWRhdGEsdCkpLG51bGwhPWUubG9jYXRpb25JZCYmZS5oYXNPd25Qcm9wZXJ0eShcImxvY2F0aW9uSWRcIikmJihvLmxvY2F0aW9uSWQ9ZS5sb2NhdGlvbklkKSxudWxsIT1lLmRpc3BsYXlOYW1lJiZlLmhhc093blByb3BlcnR5KFwiZGlzcGxheU5hbWVcIikmJihvLmRpc3BsYXlOYW1lPWUuZGlzcGxheU5hbWUpLG99LHAucHJvdG90eXBlLnRvSlNPTj1mdW5jdGlvbigpe3JldHVybiB0aGlzLmNvbnN0cnVjdG9yLnRvT2JqZWN0KHRoaXMsby51dGlsLnRvSlNPTk9wdGlvbnMpfSxwKSxlKSxuKSxGLmFwaT0oKGU9e30pLkh0dHA9KGwucHJvdG90eXBlLnJ1bGVzPXUuZW1wdHlBcnJheSxsLnByb3RvdHlwZS5mdWxseURlY29kZVJlc2VydmVkRXhwYW5zaW9uPSExLGwuY3JlYXRlPWZ1bmN0aW9uKGUpe3JldHVybiBuZXcgbChlKX0sbC5lbmNvZGU9ZnVuY3Rpb24oZSx0KXtpZih0PXR8fHIuY3JlYXRlKCksbnVsbCE9ZS5ydWxlcyYmZS5ydWxlcy5sZW5ndGgpZm9yKHZhciBuPTA7bjxlLnJ1bGVzLmxlbmd0aDsrK24pYy5nb29nbGUuYXBpLkh0dHBSdWxlLmVuY29kZShlLnJ1bGVzW25dLHQudWludDMyKDEwKS5mb3JrKCkpLmxkZWxpbSgpO3JldHVybiBudWxsIT1lLmZ1bGx5RGVjb2RlUmVzZXJ2ZWRFeHBhbnNpb24mJk9iamVjdC5oYXNPd25Qcm9wZXJ0eS5jYWxsKGUsXCJmdWxseURlY29kZVJlc2VydmVkRXhwYW5zaW9uXCIpJiZ0LnVpbnQzMigxNikuYm9vbChlLmZ1bGx5RGVjb2RlUmVzZXJ2ZWRFeHBhbnNpb24pLHR9LGwuZW5jb2RlRGVsaW1pdGVkPWZ1bmN0aW9uKGUsdCl7cmV0dXJuIHRoaXMuZW5jb2RlKGUsdCkubGRlbGltKCl9LGwuZGVjb2RlPWZ1bmN0aW9uKGUsdCl7ZSBpbnN0YW5jZW9mIHN8fChlPXMuY3JlYXRlKGUpKTtmb3IodmFyIG49dm9pZCAwPT09dD9lLmxlbjplLnBvcyt0LG89bmV3IGMuZ29vZ2xlLmFwaS5IdHRwO2UucG9zPG47KXt2YXIgcj1lLnVpbnQzMigpO3N3aXRjaChyPj4+Myl7Y2FzZSAxOm8ucnVsZXMmJm8ucnVsZXMubGVuZ3RofHwoby5ydWxlcz1bXSksby5ydWxlcy5wdXNoKGMuZ29vZ2xlLmFwaS5IdHRwUnVsZS5kZWNvZGUoZSxlLnVpbnQzMigpKSk7YnJlYWs7Y2FzZSAyOm8uZnVsbHlEZWNvZGVSZXNlcnZlZEV4cGFuc2lvbj1lLmJvb2woKTticmVhaztkZWZhdWx0OmUuc2tpcFR5cGUoNyZyKX19cmV0dXJuIG99LGwuZGVjb2RlRGVsaW1pdGVkPWZ1bmN0aW9uKGUpe3JldHVybiBlIGluc3RhbmNlb2Ygc3x8KGU9bmV3IHMoZSkpLHRoaXMuZGVjb2RlKGUsZS51aW50MzIoKSl9LGwudmVyaWZ5PWZ1bmN0aW9uKGUpe2lmKFwib2JqZWN0XCIhPXR5cGVvZiBlfHxudWxsPT09ZSlyZXR1cm5cIm9iamVjdCBleHBlY3RlZFwiO2lmKG51bGwhPWUucnVsZXMmJmUuaGFzT3duUHJvcGVydHkoXCJydWxlc1wiKSl7aWYoIUFycmF5LmlzQXJyYXkoZS5ydWxlcykpcmV0dXJuXCJydWxlczogYXJyYXkgZXhwZWN0ZWRcIjtmb3IodmFyIHQ9MDt0PGUucnVsZXMubGVuZ3RoOysrdCl7dmFyIG49Yy5nb29nbGUuYXBpLkh0dHBSdWxlLnZlcmlmeShlLnJ1bGVzW3RdKTtpZihuKXJldHVyblwicnVsZXMuXCIrbn19cmV0dXJuIG51bGwhPWUuZnVsbHlEZWNvZGVSZXNlcnZlZEV4cGFuc2lvbiYmZS5oYXNPd25Qcm9wZXJ0eShcImZ1bGx5RGVjb2RlUmVzZXJ2ZWRFeHBhbnNpb25cIikmJlwiYm9vbGVhblwiIT10eXBlb2YgZS5mdWxseURlY29kZVJlc2VydmVkRXhwYW5zaW9uP1wiZnVsbHlEZWNvZGVSZXNlcnZlZEV4cGFuc2lvbjogYm9vbGVhbiBleHBlY3RlZFwiOm51bGx9LGwuZnJvbU9iamVjdD1mdW5jdGlvbihlKXtpZihlIGluc3RhbmNlb2YgYy5nb29nbGUuYXBpLkh0dHApcmV0dXJuIGU7dmFyIHQ9bmV3IGMuZ29vZ2xlLmFwaS5IdHRwO2lmKGUucnVsZXMpe2lmKCFBcnJheS5pc0FycmF5KGUucnVsZXMpKXRocm93IFR5cGVFcnJvcihcIi5nb29nbGUuYXBpLkh0dHAucnVsZXM6IGFycmF5IGV4cGVjdGVkXCIpO3QucnVsZXM9W107Zm9yKHZhciBuPTA7bjxlLnJ1bGVzLmxlbmd0aDsrK24pe2lmKFwib2JqZWN0XCIhPXR5cGVvZiBlLnJ1bGVzW25dKXRocm93IFR5cGVFcnJvcihcIi5nb29nbGUuYXBpLkh0dHAucnVsZXM6IG9iamVjdCBleHBlY3RlZFwiKTt0LnJ1bGVzW25dPWMuZ29vZ2xlLmFwaS5IdHRwUnVsZS5mcm9tT2JqZWN0KGUucnVsZXNbbl0pfX1yZXR1cm4gbnVsbCE9ZS5mdWxseURlY29kZVJlc2VydmVkRXhwYW5zaW9uJiYodC5mdWxseURlY29kZVJlc2VydmVkRXhwYW5zaW9uPUJvb2xlYW4oZS5mdWxseURlY29kZVJlc2VydmVkRXhwYW5zaW9uKSksdH0sbC50b09iamVjdD1mdW5jdGlvbihlLHQpe3ZhciBuPXt9O2lmKCgodD10fHx7fSkuYXJyYXlzfHx0LmRlZmF1bHRzKSYmKG4ucnVsZXM9W10pLHQuZGVmYXVsdHMmJihuLmZ1bGx5RGVjb2RlUmVzZXJ2ZWRFeHBhbnNpb249ITEpLGUucnVsZXMmJmUucnVsZXMubGVuZ3RoKXtuLnJ1bGVzPVtdO2Zvcih2YXIgbz0wO288ZS5ydWxlcy5sZW5ndGg7KytvKW4ucnVsZXNbb109Yy5nb29nbGUuYXBpLkh0dHBSdWxlLnRvT2JqZWN0KGUucnVsZXNbb10sdCl9cmV0dXJuIG51bGwhPWUuZnVsbHlEZWNvZGVSZXNlcnZlZEV4cGFuc2lvbiYmZS5oYXNPd25Qcm9wZXJ0eShcImZ1bGx5RGVjb2RlUmVzZXJ2ZWRFeHBhbnNpb25cIikmJihuLmZ1bGx5RGVjb2RlUmVzZXJ2ZWRFeHBhbnNpb249ZS5mdWxseURlY29kZVJlc2VydmVkRXhwYW5zaW9uKSxufSxsLnByb3RvdHlwZS50b0pTT049ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5jb25zdHJ1Y3Rvci50b09iamVjdCh0aGlzLG8udXRpbC50b0pTT05PcHRpb25zKX0sbCksZS5IdHRwUnVsZT0oZC5wcm90b3R5cGUuc2VsZWN0b3I9XCJcIixkLnByb3RvdHlwZS5nZXQ9bnVsbCxkLnByb3RvdHlwZS5wdXQ9bnVsbCxkLnByb3RvdHlwZS5wb3N0PW51bGwsZC5wcm90b3R5cGUuZGVsZXRlPW51bGwsZC5wcm90b3R5cGUucGF0Y2g9bnVsbCxkLnByb3RvdHlwZS5jdXN0b209bnVsbCxkLnByb3RvdHlwZS5ib2R5PVwiXCIsZC5wcm90b3R5cGUucmVzcG9uc2VCb2R5PVwiXCIsZC5wcm90b3R5cGUuYWRkaXRpb25hbEJpbmRpbmdzPXUuZW1wdHlBcnJheSxPYmplY3QuZGVmaW5lUHJvcGVydHkoZC5wcm90b3R5cGUsXCJwYXR0ZXJuXCIse2dldDp1Lm9uZU9mR2V0dGVyKG49W1wiZ2V0XCIsXCJwdXRcIixcInBvc3RcIixcImRlbGV0ZVwiLFwicGF0Y2hcIixcImN1c3RvbVwiXSksc2V0OnUub25lT2ZTZXR0ZXIobil9KSxkLmNyZWF0ZT1mdW5jdGlvbihlKXtyZXR1cm4gbmV3IGQoZSl9LGQuZW5jb2RlPWZ1bmN0aW9uKGUsdCl7aWYodD10fHxyLmNyZWF0ZSgpLG51bGwhPWUuc2VsZWN0b3ImJk9iamVjdC5oYXNPd25Qcm9wZXJ0eS5jYWxsKGUsXCJzZWxlY3RvclwiKSYmdC51aW50MzIoMTApLnN0cmluZyhlLnNlbGVjdG9yKSxudWxsIT1lLmdldCYmT2JqZWN0Lmhhc093blByb3BlcnR5LmNhbGwoZSxcImdldFwiKSYmdC51aW50MzIoMTgpLnN0cmluZyhlLmdldCksbnVsbCE9ZS5wdXQmJk9iamVjdC5oYXNPd25Qcm9wZXJ0eS5jYWxsKGUsXCJwdXRcIikmJnQudWludDMyKDI2KS5zdHJpbmcoZS5wdXQpLG51bGwhPWUucG9zdCYmT2JqZWN0Lmhhc093blByb3BlcnR5LmNhbGwoZSxcInBvc3RcIikmJnQudWludDMyKDM0KS5zdHJpbmcoZS5wb3N0KSxudWxsIT1lLmRlbGV0ZSYmT2JqZWN0Lmhhc093blByb3BlcnR5LmNhbGwoZSxcImRlbGV0ZVwiKSYmdC51aW50MzIoNDIpLnN0cmluZyhlLmRlbGV0ZSksbnVsbCE9ZS5wYXRjaCYmT2JqZWN0Lmhhc093blByb3BlcnR5LmNhbGwoZSxcInBhdGNoXCIpJiZ0LnVpbnQzMig1MCkuc3RyaW5nKGUucGF0Y2gpLG51bGwhPWUuYm9keSYmT2JqZWN0Lmhhc093blByb3BlcnR5LmNhbGwoZSxcImJvZHlcIikmJnQudWludDMyKDU4KS5zdHJpbmcoZS5ib2R5KSxudWxsIT1lLmN1c3RvbSYmT2JqZWN0Lmhhc093blByb3BlcnR5LmNhbGwoZSxcImN1c3RvbVwiKSYmYy5nb29nbGUuYXBpLkN1c3RvbUh0dHBQYXR0ZXJuLmVuY29kZShlLmN1c3RvbSx0LnVpbnQzMig2NikuZm9yaygpKS5sZGVsaW0oKSxudWxsIT1lLmFkZGl0aW9uYWxCaW5kaW5ncyYmZS5hZGRpdGlvbmFsQmluZGluZ3MubGVuZ3RoKWZvcih2YXIgbj0wO248ZS5hZGRpdGlvbmFsQmluZGluZ3MubGVuZ3RoOysrbiljLmdvb2dsZS5hcGkuSHR0cFJ1bGUuZW5jb2RlKGUuYWRkaXRpb25hbEJpbmRpbmdzW25dLHQudWludDMyKDkwKS5mb3JrKCkpLmxkZWxpbSgpO3JldHVybiBudWxsIT1lLnJlc3BvbnNlQm9keSYmT2JqZWN0Lmhhc093blByb3BlcnR5LmNhbGwoZSxcInJlc3BvbnNlQm9keVwiKSYmdC51aW50MzIoOTgpLnN0cmluZyhlLnJlc3BvbnNlQm9keSksdH0sZC5lbmNvZGVEZWxpbWl0ZWQ9ZnVuY3Rpb24oZSx0KXtyZXR1cm4gdGhpcy5lbmNvZGUoZSx0KS5sZGVsaW0oKX0sZC5kZWNvZGU9ZnVuY3Rpb24oZSx0KXtlIGluc3RhbmNlb2Ygc3x8KGU9cy5jcmVhdGUoZSkpO2Zvcih2YXIgbj12b2lkIDA9PT10P2UubGVuOmUucG9zK3Qsbz1uZXcgYy5nb29nbGUuYXBpLkh0dHBSdWxlO2UucG9zPG47KXt2YXIgcj1lLnVpbnQzMigpO3N3aXRjaChyPj4+Myl7Y2FzZSAxOm8uc2VsZWN0b3I9ZS5zdHJpbmcoKTticmVhaztjYXNlIDI6by5nZXQ9ZS5zdHJpbmcoKTticmVhaztjYXNlIDM6by5wdXQ9ZS5zdHJpbmcoKTticmVhaztjYXNlIDQ6by5wb3N0PWUuc3RyaW5nKCk7YnJlYWs7Y2FzZSA1Om8uZGVsZXRlPWUuc3RyaW5nKCk7YnJlYWs7Y2FzZSA2Om8ucGF0Y2g9ZS5zdHJpbmcoKTticmVhaztjYXNlIDg6by5jdXN0b209Yy5nb29nbGUuYXBpLkN1c3RvbUh0dHBQYXR0ZXJuLmRlY29kZShlLGUudWludDMyKCkpO2JyZWFrO2Nhc2UgNzpvLmJvZHk9ZS5zdHJpbmcoKTticmVhaztjYXNlIDEyOm8ucmVzcG9uc2VCb2R5PWUuc3RyaW5nKCk7YnJlYWs7Y2FzZSAxMTpvLmFkZGl0aW9uYWxCaW5kaW5ncyYmby5hZGRpdGlvbmFsQmluZGluZ3MubGVuZ3RofHwoby5hZGRpdGlvbmFsQmluZGluZ3M9W10pLG8uYWRkaXRpb25hbEJpbmRpbmdzLnB1c2goYy5nb29nbGUuYXBpLkh0dHBSdWxlLmRlY29kZShlLGUudWludDMyKCkpKTticmVhaztkZWZhdWx0OmUuc2tpcFR5cGUoNyZyKX19cmV0dXJuIG99LGQuZGVjb2RlRGVsaW1pdGVkPWZ1bmN0aW9uKGUpe3JldHVybiBlIGluc3RhbmNlb2Ygc3x8KGU9bmV3IHMoZSkpLHRoaXMuZGVjb2RlKGUsZS51aW50MzIoKSl9LGQudmVyaWZ5PWZ1bmN0aW9uKGUpe2lmKFwib2JqZWN0XCIhPXR5cGVvZiBlfHxudWxsPT09ZSlyZXR1cm5cIm9iamVjdCBleHBlY3RlZFwiO3ZhciB0PXt9O2lmKG51bGwhPWUuc2VsZWN0b3ImJmUuaGFzT3duUHJvcGVydHkoXCJzZWxlY3RvclwiKSYmIXUuaXNTdHJpbmcoZS5zZWxlY3RvcikpcmV0dXJuXCJzZWxlY3Rvcjogc3RyaW5nIGV4cGVjdGVkXCI7aWYobnVsbCE9ZS5nZXQmJmUuaGFzT3duUHJvcGVydHkoXCJnZXRcIikmJih0LnBhdHRlcm49MSwhdS5pc1N0cmluZyhlLmdldCkpKXJldHVyblwiZ2V0OiBzdHJpbmcgZXhwZWN0ZWRcIjtpZihudWxsIT1lLnB1dCYmZS5oYXNPd25Qcm9wZXJ0eShcInB1dFwiKSl7aWYoMT09PXQucGF0dGVybilyZXR1cm5cInBhdHRlcm46IG11bHRpcGxlIHZhbHVlc1wiO2lmKHQucGF0dGVybj0xLCF1LmlzU3RyaW5nKGUucHV0KSlyZXR1cm5cInB1dDogc3RyaW5nIGV4cGVjdGVkXCJ9aWYobnVsbCE9ZS5wb3N0JiZlLmhhc093blByb3BlcnR5KFwicG9zdFwiKSl7aWYoMT09PXQucGF0dGVybilyZXR1cm5cInBhdHRlcm46IG11bHRpcGxlIHZhbHVlc1wiO2lmKHQucGF0dGVybj0xLCF1LmlzU3RyaW5nKGUucG9zdCkpcmV0dXJuXCJwb3N0OiBzdHJpbmcgZXhwZWN0ZWRcIn1pZihudWxsIT1lLmRlbGV0ZSYmZS5oYXNPd25Qcm9wZXJ0eShcImRlbGV0ZVwiKSl7aWYoMT09PXQucGF0dGVybilyZXR1cm5cInBhdHRlcm46IG11bHRpcGxlIHZhbHVlc1wiO2lmKHQucGF0dGVybj0xLCF1LmlzU3RyaW5nKGUuZGVsZXRlKSlyZXR1cm5cImRlbGV0ZTogc3RyaW5nIGV4cGVjdGVkXCJ9aWYobnVsbCE9ZS5wYXRjaCYmZS5oYXNPd25Qcm9wZXJ0eShcInBhdGNoXCIpKXtpZigxPT09dC5wYXR0ZXJuKXJldHVyblwicGF0dGVybjogbXVsdGlwbGUgdmFsdWVzXCI7aWYodC5wYXR0ZXJuPTEsIXUuaXNTdHJpbmcoZS5wYXRjaCkpcmV0dXJuXCJwYXRjaDogc3RyaW5nIGV4cGVjdGVkXCJ9aWYobnVsbCE9ZS5jdXN0b20mJmUuaGFzT3duUHJvcGVydHkoXCJjdXN0b21cIikpe2lmKDE9PT10LnBhdHRlcm4pcmV0dXJuXCJwYXR0ZXJuOiBtdWx0aXBsZSB2YWx1ZXNcIjtpZih0LnBhdHRlcm49MSxuPWMuZ29vZ2xlLmFwaS5DdXN0b21IdHRwUGF0dGVybi52ZXJpZnkoZS5jdXN0b20pKXJldHVyblwiY3VzdG9tLlwiK259aWYobnVsbCE9ZS5ib2R5JiZlLmhhc093blByb3BlcnR5KFwiYm9keVwiKSYmIXUuaXNTdHJpbmcoZS5ib2R5KSlyZXR1cm5cImJvZHk6IHN0cmluZyBleHBlY3RlZFwiO2lmKG51bGwhPWUucmVzcG9uc2VCb2R5JiZlLmhhc093blByb3BlcnR5KFwicmVzcG9uc2VCb2R5XCIpJiYhdS5pc1N0cmluZyhlLnJlc3BvbnNlQm9keSkpcmV0dXJuXCJyZXNwb25zZUJvZHk6IHN0cmluZyBleHBlY3RlZFwiO2lmKG51bGwhPWUuYWRkaXRpb25hbEJpbmRpbmdzJiZlLmhhc093blByb3BlcnR5KFwiYWRkaXRpb25hbEJpbmRpbmdzXCIpKXtpZighQXJyYXkuaXNBcnJheShlLmFkZGl0aW9uYWxCaW5kaW5ncykpcmV0dXJuXCJhZGRpdGlvbmFsQmluZGluZ3M6IGFycmF5IGV4cGVjdGVkXCI7Zm9yKHZhciBuLG89MDtvPGUuYWRkaXRpb25hbEJpbmRpbmdzLmxlbmd0aDsrK28paWYobj1jLmdvb2dsZS5hcGkuSHR0cFJ1bGUudmVyaWZ5KGUuYWRkaXRpb25hbEJpbmRpbmdzW29dKSlyZXR1cm5cImFkZGl0aW9uYWxCaW5kaW5ncy5cIitufXJldHVybiBudWxsfSxkLmZyb21PYmplY3Q9ZnVuY3Rpb24oZSl7aWYoZSBpbnN0YW5jZW9mIGMuZ29vZ2xlLmFwaS5IdHRwUnVsZSlyZXR1cm4gZTt2YXIgdD1uZXcgYy5nb29nbGUuYXBpLkh0dHBSdWxlO2lmKG51bGwhPWUuc2VsZWN0b3ImJih0LnNlbGVjdG9yPVN0cmluZyhlLnNlbGVjdG9yKSksbnVsbCE9ZS5nZXQmJih0LmdldD1TdHJpbmcoZS5nZXQpKSxudWxsIT1lLnB1dCYmKHQucHV0PVN0cmluZyhlLnB1dCkpLG51bGwhPWUucG9zdCYmKHQucG9zdD1TdHJpbmcoZS5wb3N0KSksbnVsbCE9ZS5kZWxldGUmJih0LmRlbGV0ZT1TdHJpbmcoZS5kZWxldGUpKSxudWxsIT1lLnBhdGNoJiYodC5wYXRjaD1TdHJpbmcoZS5wYXRjaCkpLG51bGwhPWUuY3VzdG9tKXtpZihcIm9iamVjdFwiIT10eXBlb2YgZS5jdXN0b20pdGhyb3cgVHlwZUVycm9yKFwiLmdvb2dsZS5hcGkuSHR0cFJ1bGUuY3VzdG9tOiBvYmplY3QgZXhwZWN0ZWRcIik7dC5jdXN0b209Yy5nb29nbGUuYXBpLkN1c3RvbUh0dHBQYXR0ZXJuLmZyb21PYmplY3QoZS5jdXN0b20pfWlmKG51bGwhPWUuYm9keSYmKHQuYm9keT1TdHJpbmcoZS5ib2R5KSksbnVsbCE9ZS5yZXNwb25zZUJvZHkmJih0LnJlc3BvbnNlQm9keT1TdHJpbmcoZS5yZXNwb25zZUJvZHkpKSxlLmFkZGl0aW9uYWxCaW5kaW5ncyl7aWYoIUFycmF5LmlzQXJyYXkoZS5hZGRpdGlvbmFsQmluZGluZ3MpKXRocm93IFR5cGVFcnJvcihcIi5nb29nbGUuYXBpLkh0dHBSdWxlLmFkZGl0aW9uYWxCaW5kaW5nczogYXJyYXkgZXhwZWN0ZWRcIik7dC5hZGRpdGlvbmFsQmluZGluZ3M9W107Zm9yKHZhciBuPTA7bjxlLmFkZGl0aW9uYWxCaW5kaW5ncy5sZW5ndGg7KytuKXtpZihcIm9iamVjdFwiIT10eXBlb2YgZS5hZGRpdGlvbmFsQmluZGluZ3Nbbl0pdGhyb3cgVHlwZUVycm9yKFwiLmdvb2dsZS5hcGkuSHR0cFJ1bGUuYWRkaXRpb25hbEJpbmRpbmdzOiBvYmplY3QgZXhwZWN0ZWRcIik7dC5hZGRpdGlvbmFsQmluZGluZ3Nbbl09Yy5nb29nbGUuYXBpLkh0dHBSdWxlLmZyb21PYmplY3QoZS5hZGRpdGlvbmFsQmluZGluZ3Nbbl0pfX1yZXR1cm4gdH0sZC50b09iamVjdD1mdW5jdGlvbihlLHQpe3ZhciBuPXt9O2lmKCgodD10fHx7fSkuYXJyYXlzfHx0LmRlZmF1bHRzKSYmKG4uYWRkaXRpb25hbEJpbmRpbmdzPVtdKSx0LmRlZmF1bHRzJiYobi5zZWxlY3Rvcj1cIlwiLG4uYm9keT1cIlwiLG4ucmVzcG9uc2VCb2R5PVwiXCIpLG51bGwhPWUuc2VsZWN0b3ImJmUuaGFzT3duUHJvcGVydHkoXCJzZWxlY3RvclwiKSYmKG4uc2VsZWN0b3I9ZS5zZWxlY3RvciksbnVsbCE9ZS5nZXQmJmUuaGFzT3duUHJvcGVydHkoXCJnZXRcIikmJihuLmdldD1lLmdldCx0Lm9uZW9mcykmJihuLnBhdHRlcm49XCJnZXRcIiksbnVsbCE9ZS5wdXQmJmUuaGFzT3duUHJvcGVydHkoXCJwdXRcIikmJihuLnB1dD1lLnB1dCx0Lm9uZW9mcykmJihuLnBhdHRlcm49XCJwdXRcIiksbnVsbCE9ZS5wb3N0JiZlLmhhc093blByb3BlcnR5KFwicG9zdFwiKSYmKG4ucG9zdD1lLnBvc3QsdC5vbmVvZnMpJiYobi5wYXR0ZXJuPVwicG9zdFwiKSxudWxsIT1lLmRlbGV0ZSYmZS5oYXNPd25Qcm9wZXJ0eShcImRlbGV0ZVwiKSYmKG4uZGVsZXRlPWUuZGVsZXRlLHQub25lb2ZzKSYmKG4ucGF0dGVybj1cImRlbGV0ZVwiKSxudWxsIT1lLnBhdGNoJiZlLmhhc093blByb3BlcnR5KFwicGF0Y2hcIikmJihuLnBhdGNoPWUucGF0Y2gsdC5vbmVvZnMpJiYobi5wYXR0ZXJuPVwicGF0Y2hcIiksbnVsbCE9ZS5ib2R5JiZlLmhhc093blByb3BlcnR5KFwiYm9keVwiKSYmKG4uYm9keT1lLmJvZHkpLG51bGwhPWUuY3VzdG9tJiZlLmhhc093blByb3BlcnR5KFwiY3VzdG9tXCIpJiYobi5jdXN0b209Yy5nb29nbGUuYXBpLkN1c3RvbUh0dHBQYXR0ZXJuLnRvT2JqZWN0KGUuY3VzdG9tLHQpLHQub25lb2ZzKSYmKG4ucGF0dGVybj1cImN1c3RvbVwiKSxlLmFkZGl0aW9uYWxCaW5kaW5ncyYmZS5hZGRpdGlvbmFsQmluZGluZ3MubGVuZ3RoKXtuLmFkZGl0aW9uYWxCaW5kaW5ncz1bXTtmb3IodmFyIG89MDtvPGUuYWRkaXRpb25hbEJpbmRpbmdzLmxlbmd0aDsrK28pbi5hZGRpdGlvbmFsQmluZGluZ3Nbb109Yy5nb29nbGUuYXBpLkh0dHBSdWxlLnRvT2JqZWN0KGUuYWRkaXRpb25hbEJpbmRpbmdzW29dLHQpfXJldHVybiBudWxsIT1lLnJlc3BvbnNlQm9keSYmZS5oYXNPd25Qcm9wZXJ0eShcInJlc3BvbnNlQm9keVwiKSYmKG4ucmVzcG9uc2VCb2R5PWUucmVzcG9uc2VCb2R5KSxufSxkLnByb3RvdHlwZS50b0pTT049ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5jb25zdHJ1Y3Rvci50b09iamVjdCh0aGlzLG8udXRpbC50b0pTT05PcHRpb25zKX0sZCksZS5DdXN0b21IdHRwUGF0dGVybj0oZy5wcm90b3R5cGUua2luZD1cIlwiLGcucHJvdG90eXBlLnBhdGg9XCJcIixnLmNyZWF0ZT1mdW5jdGlvbihlKXtyZXR1cm4gbmV3IGcoZSl9LGcuZW5jb2RlPWZ1bmN0aW9uKGUsdCl7cmV0dXJuIHQ9dHx8ci5jcmVhdGUoKSxudWxsIT1lLmtpbmQmJk9iamVjdC5oYXNPd25Qcm9wZXJ0eS5jYWxsKGUsXCJraW5kXCIpJiZ0LnVpbnQzMigxMCkuc3RyaW5nKGUua2luZCksbnVsbCE9ZS5wYXRoJiZPYmplY3QuaGFzT3duUHJvcGVydHkuY2FsbChlLFwicGF0aFwiKSYmdC51aW50MzIoMTgpLnN0cmluZyhlLnBhdGgpLHR9LGcuZW5jb2RlRGVsaW1pdGVkPWZ1bmN0aW9uKGUsdCl7cmV0dXJuIHRoaXMuZW5jb2RlKGUsdCkubGRlbGltKCl9LGcuZGVjb2RlPWZ1bmN0aW9uKGUsdCl7ZSBpbnN0YW5jZW9mIHN8fChlPXMuY3JlYXRlKGUpKTtmb3IodmFyIG49dm9pZCAwPT09dD9lLmxlbjplLnBvcyt0LG89bmV3IGMuZ29vZ2xlLmFwaS5DdXN0b21IdHRwUGF0dGVybjtlLnBvczxuOyl7dmFyIHI9ZS51aW50MzIoKTtzd2l0Y2gocj4+PjMpe2Nhc2UgMTpvLmtpbmQ9ZS5zdHJpbmcoKTticmVhaztjYXNlIDI6by5wYXRoPWUuc3RyaW5nKCk7YnJlYWs7ZGVmYXVsdDplLnNraXBUeXBlKDcmcil9fXJldHVybiBvfSxnLmRlY29kZURlbGltaXRlZD1mdW5jdGlvbihlKXtyZXR1cm4gZSBpbnN0YW5jZW9mIHN8fChlPW5ldyBzKGUpKSx0aGlzLmRlY29kZShlLGUudWludDMyKCkpfSxnLnZlcmlmeT1mdW5jdGlvbihlKXtyZXR1cm5cIm9iamVjdFwiIT10eXBlb2YgZXx8bnVsbD09PWU/XCJvYmplY3QgZXhwZWN0ZWRcIjpudWxsIT1lLmtpbmQmJmUuaGFzT3duUHJvcGVydHkoXCJraW5kXCIpJiYhdS5pc1N0cmluZyhlLmtpbmQpP1wia2luZDogc3RyaW5nIGV4cGVjdGVkXCI6bnVsbCE9ZS5wYXRoJiZlLmhhc093blByb3BlcnR5KFwicGF0aFwiKSYmIXUuaXNTdHJpbmcoZS5wYXRoKT9cInBhdGg6IHN0cmluZyBleHBlY3RlZFwiOm51bGx9LGcuZnJvbU9iamVjdD1mdW5jdGlvbihlKXt2YXIgdDtyZXR1cm4gZSBpbnN0YW5jZW9mIGMuZ29vZ2xlLmFwaS5DdXN0b21IdHRwUGF0dGVybj9lOih0PW5ldyBjLmdvb2dsZS5hcGkuQ3VzdG9tSHR0cFBhdHRlcm4sbnVsbCE9ZS5raW5kJiYodC5raW5kPVN0cmluZyhlLmtpbmQpKSxudWxsIT1lLnBhdGgmJih0LnBhdGg9U3RyaW5nKGUucGF0aCkpLHQpfSxnLnRvT2JqZWN0PWZ1bmN0aW9uKGUsdCl7dmFyIG49e307cmV0dXJuKHQ9dHx8e30pLmRlZmF1bHRzJiYobi5raW5kPVwiXCIsbi5wYXRoPVwiXCIpLG51bGwhPWUua2luZCYmZS5oYXNPd25Qcm9wZXJ0eShcImtpbmRcIikmJihuLmtpbmQ9ZS5raW5kKSxudWxsIT1lLnBhdGgmJmUuaGFzT3duUHJvcGVydHkoXCJwYXRoXCIpJiYobi5wYXRoPWUucGF0aCksbn0sZy5wcm90b3R5cGUudG9KU09OPWZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMuY29uc3RydWN0b3IudG9PYmplY3QodGhpcyxvLnV0aWwudG9KU09OT3B0aW9ucyl9LGcpLGUpLEYucHJvdG9idWY9KChuPXt9KS5GaWxlRGVzY3JpcHRvclNldD0oQi5wcm90b3R5cGUuZmlsZT11LmVtcHR5QXJyYXksQi5jcmVhdGU9ZnVuY3Rpb24oZSl7cmV0dXJuIG5ldyBCKGUpfSxCLmVuY29kZT1mdW5jdGlvbihlLHQpe2lmKHQ9dHx8ci5jcmVhdGUoKSxudWxsIT1lLmZpbGUmJmUuZmlsZS5sZW5ndGgpZm9yKHZhciBuPTA7bjxlLmZpbGUubGVuZ3RoOysrbiljLmdvb2dsZS5wcm90b2J1Zi5GaWxlRGVzY3JpcHRvclByb3RvLmVuY29kZShlLmZpbGVbbl0sdC51aW50MzIoMTApLmZvcmsoKSkubGRlbGltKCk7cmV0dXJuIHR9LEIuZW5jb2RlRGVsaW1pdGVkPWZ1bmN0aW9uKGUsdCl7cmV0dXJuIHRoaXMuZW5jb2RlKGUsdCkubGRlbGltKCl9LEIuZGVjb2RlPWZ1bmN0aW9uKGUsdCl7ZSBpbnN0YW5jZW9mIHN8fChlPXMuY3JlYXRlKGUpKTtmb3IodmFyIG49dm9pZCAwPT09dD9lLmxlbjplLnBvcyt0LG89bmV3IGMuZ29vZ2xlLnByb3RvYnVmLkZpbGVEZXNjcmlwdG9yU2V0O2UucG9zPG47KXt2YXIgcj1lLnVpbnQzMigpO3I+Pj4zPT0xPyhvLmZpbGUmJm8uZmlsZS5sZW5ndGh8fChvLmZpbGU9W10pLG8uZmlsZS5wdXNoKGMuZ29vZ2xlLnByb3RvYnVmLkZpbGVEZXNjcmlwdG9yUHJvdG8uZGVjb2RlKGUsZS51aW50MzIoKSkpKTplLnNraXBUeXBlKDcmcil9cmV0dXJuIG99LEIuZGVjb2RlRGVsaW1pdGVkPWZ1bmN0aW9uKGUpe3JldHVybiBlIGluc3RhbmNlb2Ygc3x8KGU9bmV3IHMoZSkpLHRoaXMuZGVjb2RlKGUsZS51aW50MzIoKSl9LEIudmVyaWZ5PWZ1bmN0aW9uKGUpe2lmKFwib2JqZWN0XCIhPXR5cGVvZiBlfHxudWxsPT09ZSlyZXR1cm5cIm9iamVjdCBleHBlY3RlZFwiO2lmKG51bGwhPWUuZmlsZSYmZS5oYXNPd25Qcm9wZXJ0eShcImZpbGVcIikpe2lmKCFBcnJheS5pc0FycmF5KGUuZmlsZSkpcmV0dXJuXCJmaWxlOiBhcnJheSBleHBlY3RlZFwiO2Zvcih2YXIgdD0wO3Q8ZS5maWxlLmxlbmd0aDsrK3Qpe3ZhciBuPWMuZ29vZ2xlLnByb3RvYnVmLkZpbGVEZXNjcmlwdG9yUHJvdG8udmVyaWZ5KGUuZmlsZVt0XSk7aWYobilyZXR1cm5cImZpbGUuXCIrbn19cmV0dXJuIG51bGx9LEIuZnJvbU9iamVjdD1mdW5jdGlvbihlKXtpZihlIGluc3RhbmNlb2YgYy5nb29nbGUucHJvdG9idWYuRmlsZURlc2NyaXB0b3JTZXQpcmV0dXJuIGU7dmFyIHQ9bmV3IGMuZ29vZ2xlLnByb3RvYnVmLkZpbGVEZXNjcmlwdG9yU2V0O2lmKGUuZmlsZSl7aWYoIUFycmF5LmlzQXJyYXkoZS5maWxlKSl0aHJvdyBUeXBlRXJyb3IoXCIuZ29vZ2xlLnByb3RvYnVmLkZpbGVEZXNjcmlwdG9yU2V0LmZpbGU6IGFycmF5IGV4cGVjdGVkXCIpO3QuZmlsZT1bXTtmb3IodmFyIG49MDtuPGUuZmlsZS5sZW5ndGg7KytuKXtpZihcIm9iamVjdFwiIT10eXBlb2YgZS5maWxlW25dKXRocm93IFR5cGVFcnJvcihcIi5nb29nbGUucHJvdG9idWYuRmlsZURlc2NyaXB0b3JTZXQuZmlsZTogb2JqZWN0IGV4cGVjdGVkXCIpO3QuZmlsZVtuXT1jLmdvb2dsZS5wcm90b2J1Zi5GaWxlRGVzY3JpcHRvclByb3RvLmZyb21PYmplY3QoZS5maWxlW25dKX19cmV0dXJuIHR9LEIudG9PYmplY3Q9ZnVuY3Rpb24oZSx0KXt2YXIgbj17fTtpZigoKHQ9dHx8e30pLmFycmF5c3x8dC5kZWZhdWx0cykmJihuLmZpbGU9W10pLGUuZmlsZSYmZS5maWxlLmxlbmd0aCl7bi5maWxlPVtdO2Zvcih2YXIgbz0wO288ZS5maWxlLmxlbmd0aDsrK28pbi5maWxlW29dPWMuZ29vZ2xlLnByb3RvYnVmLkZpbGVEZXNjcmlwdG9yUHJvdG8udG9PYmplY3QoZS5maWxlW29dLHQpfXJldHVybiBufSxCLnByb3RvdHlwZS50b0pTT049ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5jb25zdHJ1Y3Rvci50b09iamVjdCh0aGlzLG8udXRpbC50b0pTT05PcHRpb25zKX0sQiksbi5GaWxlRGVzY3JpcHRvclByb3RvPShmLnByb3RvdHlwZS5uYW1lPVwiXCIsZi5wcm90b3R5cGUucGFja2FnZT1cIlwiLGYucHJvdG90eXBlLmRlcGVuZGVuY3k9dS5lbXB0eUFycmF5LGYucHJvdG90eXBlLnB1YmxpY0RlcGVuZGVuY3k9dS5lbXB0eUFycmF5LGYucHJvdG90eXBlLndlYWtEZXBlbmRlbmN5PXUuZW1wdHlBcnJheSxmLnByb3RvdHlwZS5tZXNzYWdlVHlwZT11LmVtcHR5QXJyYXksZi5wcm90b3R5cGUuZW51bVR5cGU9dS5lbXB0eUFycmF5LGYucHJvdG90eXBlLnNlcnZpY2U9dS5lbXB0eUFycmF5LGYucHJvdG90eXBlLmV4dGVuc2lvbj11LmVtcHR5QXJyYXksZi5wcm90b3R5cGUub3B0aW9ucz1udWxsLGYucHJvdG90eXBlLnNvdXJjZUNvZGVJbmZvPW51bGwsZi5wcm90b3R5cGUuc3ludGF4PVwiXCIsZi5jcmVhdGU9ZnVuY3Rpb24oZSl7cmV0dXJuIG5ldyBmKGUpfSxmLmVuY29kZT1mdW5jdGlvbihlLHQpe2lmKHQ9dHx8ci5jcmVhdGUoKSxudWxsIT1lLm5hbWUmJk9iamVjdC5oYXNPd25Qcm9wZXJ0eS5jYWxsKGUsXCJuYW1lXCIpJiZ0LnVpbnQzMigxMCkuc3RyaW5nKGUubmFtZSksbnVsbCE9ZS5wYWNrYWdlJiZPYmplY3QuaGFzT3duUHJvcGVydHkuY2FsbChlLFwicGFja2FnZVwiKSYmdC51aW50MzIoMTgpLnN0cmluZyhlLnBhY2thZ2UpLG51bGwhPWUuZGVwZW5kZW5jeSYmZS5kZXBlbmRlbmN5Lmxlbmd0aClmb3IodmFyIG49MDtuPGUuZGVwZW5kZW5jeS5sZW5ndGg7KytuKXQudWludDMyKDI2KS5zdHJpbmcoZS5kZXBlbmRlbmN5W25dKTtpZihudWxsIT1lLm1lc3NhZ2VUeXBlJiZlLm1lc3NhZ2VUeXBlLmxlbmd0aClmb3Iobj0wO248ZS5tZXNzYWdlVHlwZS5sZW5ndGg7KytuKWMuZ29vZ2xlLnByb3RvYnVmLkRlc2NyaXB0b3JQcm90by5lbmNvZGUoZS5tZXNzYWdlVHlwZVtuXSx0LnVpbnQzMigzNCkuZm9yaygpKS5sZGVsaW0oKTtpZihudWxsIT1lLmVudW1UeXBlJiZlLmVudW1UeXBlLmxlbmd0aClmb3Iobj0wO248ZS5lbnVtVHlwZS5sZW5ndGg7KytuKWMuZ29vZ2xlLnByb3RvYnVmLkVudW1EZXNjcmlwdG9yUHJvdG8uZW5jb2RlKGUuZW51bVR5cGVbbl0sdC51aW50MzIoNDIpLmZvcmsoKSkubGRlbGltKCk7aWYobnVsbCE9ZS5zZXJ2aWNlJiZlLnNlcnZpY2UubGVuZ3RoKWZvcihuPTA7bjxlLnNlcnZpY2UubGVuZ3RoOysrbiljLmdvb2dsZS5wcm90b2J1Zi5TZXJ2aWNlRGVzY3JpcHRvclByb3RvLmVuY29kZShlLnNlcnZpY2Vbbl0sdC51aW50MzIoNTApLmZvcmsoKSkubGRlbGltKCk7aWYobnVsbCE9ZS5leHRlbnNpb24mJmUuZXh0ZW5zaW9uLmxlbmd0aClmb3Iobj0wO248ZS5leHRlbnNpb24ubGVuZ3RoOysrbiljLmdvb2dsZS5wcm90b2J1Zi5GaWVsZERlc2NyaXB0b3JQcm90by5lbmNvZGUoZS5leHRlbnNpb25bbl0sdC51aW50MzIoNTgpLmZvcmsoKSkubGRlbGltKCk7aWYobnVsbCE9ZS5vcHRpb25zJiZPYmplY3QuaGFzT3duUHJvcGVydHkuY2FsbChlLFwib3B0aW9uc1wiKSYmYy5nb29nbGUucHJvdG9idWYuRmlsZU9wdGlvbnMuZW5jb2RlKGUub3B0aW9ucyx0LnVpbnQzMig2NikuZm9yaygpKS5sZGVsaW0oKSxudWxsIT1lLnNvdXJjZUNvZGVJbmZvJiZPYmplY3QuaGFzT3duUHJvcGVydHkuY2FsbChlLFwic291cmNlQ29kZUluZm9cIikmJmMuZ29vZ2xlLnByb3RvYnVmLlNvdXJjZUNvZGVJbmZvLmVuY29kZShlLnNvdXJjZUNvZGVJbmZvLHQudWludDMyKDc0KS5mb3JrKCkpLmxkZWxpbSgpLG51bGwhPWUucHVibGljRGVwZW5kZW5jeSYmZS5wdWJsaWNEZXBlbmRlbmN5Lmxlbmd0aClmb3Iobj0wO248ZS5wdWJsaWNEZXBlbmRlbmN5Lmxlbmd0aDsrK24pdC51aW50MzIoODApLmludDMyKGUucHVibGljRGVwZW5kZW5jeVtuXSk7aWYobnVsbCE9ZS53ZWFrRGVwZW5kZW5jeSYmZS53ZWFrRGVwZW5kZW5jeS5sZW5ndGgpZm9yKG49MDtuPGUud2Vha0RlcGVuZGVuY3kubGVuZ3RoOysrbil0LnVpbnQzMig4OCkuaW50MzIoZS53ZWFrRGVwZW5kZW5jeVtuXSk7cmV0dXJuIG51bGwhPWUuc3ludGF4JiZPYmplY3QuaGFzT3duUHJvcGVydHkuY2FsbChlLFwic3ludGF4XCIpJiZ0LnVpbnQzMig5OCkuc3RyaW5nKGUuc3ludGF4KSx0fSxmLmVuY29kZURlbGltaXRlZD1mdW5jdGlvbihlLHQpe3JldHVybiB0aGlzLmVuY29kZShlLHQpLmxkZWxpbSgpfSxmLmRlY29kZT1mdW5jdGlvbihlLHQpe2UgaW5zdGFuY2VvZiBzfHwoZT1zLmNyZWF0ZShlKSk7Zm9yKHZhciBuPXZvaWQgMD09PXQ/ZS5sZW46ZS5wb3MrdCxvPW5ldyBjLmdvb2dsZS5wcm90b2J1Zi5GaWxlRGVzY3JpcHRvclByb3RvO2UucG9zPG47KXt2YXIgcj1lLnVpbnQzMigpO3N3aXRjaChyPj4+Myl7Y2FzZSAxOm8ubmFtZT1lLnN0cmluZygpO2JyZWFrO2Nhc2UgMjpvLnBhY2thZ2U9ZS5zdHJpbmcoKTticmVhaztjYXNlIDM6by5kZXBlbmRlbmN5JiZvLmRlcGVuZGVuY3kubGVuZ3RofHwoby5kZXBlbmRlbmN5PVtdKSxvLmRlcGVuZGVuY3kucHVzaChlLnN0cmluZygpKTticmVhaztjYXNlIDEwOmlmKG8ucHVibGljRGVwZW5kZW5jeSYmby5wdWJsaWNEZXBlbmRlbmN5Lmxlbmd0aHx8KG8ucHVibGljRGVwZW5kZW5jeT1bXSksMj09KDcmcikpZm9yKHZhciBpPWUudWludDMyKCkrZS5wb3M7ZS5wb3M8aTspby5wdWJsaWNEZXBlbmRlbmN5LnB1c2goZS5pbnQzMigpKTtlbHNlIG8ucHVibGljRGVwZW5kZW5jeS5wdXNoKGUuaW50MzIoKSk7YnJlYWs7Y2FzZSAxMTppZihvLndlYWtEZXBlbmRlbmN5JiZvLndlYWtEZXBlbmRlbmN5Lmxlbmd0aHx8KG8ud2Vha0RlcGVuZGVuY3k9W10pLDI9PSg3JnIpKWZvcihpPWUudWludDMyKCkrZS5wb3M7ZS5wb3M8aTspby53ZWFrRGVwZW5kZW5jeS5wdXNoKGUuaW50MzIoKSk7ZWxzZSBvLndlYWtEZXBlbmRlbmN5LnB1c2goZS5pbnQzMigpKTticmVhaztjYXNlIDQ6by5tZXNzYWdlVHlwZSYmby5tZXNzYWdlVHlwZS5sZW5ndGh8fChvLm1lc3NhZ2VUeXBlPVtdKSxvLm1lc3NhZ2VUeXBlLnB1c2goYy5nb29nbGUucHJvdG9idWYuRGVzY3JpcHRvclByb3RvLmRlY29kZShlLGUudWludDMyKCkpKTticmVhaztjYXNlIDU6by5lbnVtVHlwZSYmby5lbnVtVHlwZS5sZW5ndGh8fChvLmVudW1UeXBlPVtdKSxvLmVudW1UeXBlLnB1c2goYy5nb29nbGUucHJvdG9idWYuRW51bURlc2NyaXB0b3JQcm90by5kZWNvZGUoZSxlLnVpbnQzMigpKSk7YnJlYWs7Y2FzZSA2Om8uc2VydmljZSYmby5zZXJ2aWNlLmxlbmd0aHx8KG8uc2VydmljZT1bXSksby5zZXJ2aWNlLnB1c2goYy5nb29nbGUucHJvdG9idWYuU2VydmljZURlc2NyaXB0b3JQcm90by5kZWNvZGUoZSxlLnVpbnQzMigpKSk7YnJlYWs7Y2FzZSA3Om8uZXh0ZW5zaW9uJiZvLmV4dGVuc2lvbi5sZW5ndGh8fChvLmV4dGVuc2lvbj1bXSksby5leHRlbnNpb24ucHVzaChjLmdvb2dsZS5wcm90b2J1Zi5GaWVsZERlc2NyaXB0b3JQcm90by5kZWNvZGUoZSxlLnVpbnQzMigpKSk7YnJlYWs7Y2FzZSA4Om8ub3B0aW9ucz1jLmdvb2dsZS5wcm90b2J1Zi5GaWxlT3B0aW9ucy5kZWNvZGUoZSxlLnVpbnQzMigpKTticmVhaztjYXNlIDk6by5zb3VyY2VDb2RlSW5mbz1jLmdvb2dsZS5wcm90b2J1Zi5Tb3VyY2VDb2RlSW5mby5kZWNvZGUoZSxlLnVpbnQzMigpKTticmVhaztjYXNlIDEyOm8uc3ludGF4PWUuc3RyaW5nKCk7YnJlYWs7ZGVmYXVsdDplLnNraXBUeXBlKDcmcil9fXJldHVybiBvfSxmLmRlY29kZURlbGltaXRlZD1mdW5jdGlvbihlKXtyZXR1cm4gZSBpbnN0YW5jZW9mIHN8fChlPW5ldyBzKGUpKSx0aGlzLmRlY29kZShlLGUudWludDMyKCkpfSxmLnZlcmlmeT1mdW5jdGlvbihlKXtpZihcIm9iamVjdFwiIT10eXBlb2YgZXx8bnVsbD09PWUpcmV0dXJuXCJvYmplY3QgZXhwZWN0ZWRcIjtpZihudWxsIT1lLm5hbWUmJmUuaGFzT3duUHJvcGVydHkoXCJuYW1lXCIpJiYhdS5pc1N0cmluZyhlLm5hbWUpKXJldHVyblwibmFtZTogc3RyaW5nIGV4cGVjdGVkXCI7aWYobnVsbCE9ZS5wYWNrYWdlJiZlLmhhc093blByb3BlcnR5KFwicGFja2FnZVwiKSYmIXUuaXNTdHJpbmcoZS5wYWNrYWdlKSlyZXR1cm5cInBhY2thZ2U6IHN0cmluZyBleHBlY3RlZFwiO2lmKG51bGwhPWUuZGVwZW5kZW5jeSYmZS5oYXNPd25Qcm9wZXJ0eShcImRlcGVuZGVuY3lcIikpe2lmKCFBcnJheS5pc0FycmF5KGUuZGVwZW5kZW5jeSkpcmV0dXJuXCJkZXBlbmRlbmN5OiBhcnJheSBleHBlY3RlZFwiO2Zvcih2YXIgdD0wO3Q8ZS5kZXBlbmRlbmN5Lmxlbmd0aDsrK3QpaWYoIXUuaXNTdHJpbmcoZS5kZXBlbmRlbmN5W3RdKSlyZXR1cm5cImRlcGVuZGVuY3k6IHN0cmluZ1tdIGV4cGVjdGVkXCJ9aWYobnVsbCE9ZS5wdWJsaWNEZXBlbmRlbmN5JiZlLmhhc093blByb3BlcnR5KFwicHVibGljRGVwZW5kZW5jeVwiKSl7aWYoIUFycmF5LmlzQXJyYXkoZS5wdWJsaWNEZXBlbmRlbmN5KSlyZXR1cm5cInB1YmxpY0RlcGVuZGVuY3k6IGFycmF5IGV4cGVjdGVkXCI7Zm9yKHQ9MDt0PGUucHVibGljRGVwZW5kZW5jeS5sZW5ndGg7Kyt0KWlmKCF1LmlzSW50ZWdlcihlLnB1YmxpY0RlcGVuZGVuY3lbdF0pKXJldHVyblwicHVibGljRGVwZW5kZW5jeTogaW50ZWdlcltdIGV4cGVjdGVkXCJ9aWYobnVsbCE9ZS53ZWFrRGVwZW5kZW5jeSYmZS5oYXNPd25Qcm9wZXJ0eShcIndlYWtEZXBlbmRlbmN5XCIpKXtpZighQXJyYXkuaXNBcnJheShlLndlYWtEZXBlbmRlbmN5KSlyZXR1cm5cIndlYWtEZXBlbmRlbmN5OiBhcnJheSBleHBlY3RlZFwiO2Zvcih0PTA7dDxlLndlYWtEZXBlbmRlbmN5Lmxlbmd0aDsrK3QpaWYoIXUuaXNJbnRlZ2VyKGUud2Vha0RlcGVuZGVuY3lbdF0pKXJldHVyblwid2Vha0RlcGVuZGVuY3k6IGludGVnZXJbXSBleHBlY3RlZFwifWlmKG51bGwhPWUubWVzc2FnZVR5cGUmJmUuaGFzT3duUHJvcGVydHkoXCJtZXNzYWdlVHlwZVwiKSl7aWYoIUFycmF5LmlzQXJyYXkoZS5tZXNzYWdlVHlwZSkpcmV0dXJuXCJtZXNzYWdlVHlwZTogYXJyYXkgZXhwZWN0ZWRcIjtmb3IodD0wO3Q8ZS5tZXNzYWdlVHlwZS5sZW5ndGg7Kyt0KWlmKG49Yy5nb29nbGUucHJvdG9idWYuRGVzY3JpcHRvclByb3RvLnZlcmlmeShlLm1lc3NhZ2VUeXBlW3RdKSlyZXR1cm5cIm1lc3NhZ2VUeXBlLlwiK259aWYobnVsbCE9ZS5lbnVtVHlwZSYmZS5oYXNPd25Qcm9wZXJ0eShcImVudW1UeXBlXCIpKXtpZighQXJyYXkuaXNBcnJheShlLmVudW1UeXBlKSlyZXR1cm5cImVudW1UeXBlOiBhcnJheSBleHBlY3RlZFwiO2Zvcih0PTA7dDxlLmVudW1UeXBlLmxlbmd0aDsrK3QpaWYobj1jLmdvb2dsZS5wcm90b2J1Zi5FbnVtRGVzY3JpcHRvclByb3RvLnZlcmlmeShlLmVudW1UeXBlW3RdKSlyZXR1cm5cImVudW1UeXBlLlwiK259aWYobnVsbCE9ZS5zZXJ2aWNlJiZlLmhhc093blByb3BlcnR5KFwic2VydmljZVwiKSl7aWYoIUFycmF5LmlzQXJyYXkoZS5zZXJ2aWNlKSlyZXR1cm5cInNlcnZpY2U6IGFycmF5IGV4cGVjdGVkXCI7Zm9yKHQ9MDt0PGUuc2VydmljZS5sZW5ndGg7Kyt0KWlmKG49Yy5nb29nbGUucHJvdG9idWYuU2VydmljZURlc2NyaXB0b3JQcm90by52ZXJpZnkoZS5zZXJ2aWNlW3RdKSlyZXR1cm5cInNlcnZpY2UuXCIrbn1pZihudWxsIT1lLmV4dGVuc2lvbiYmZS5oYXNPd25Qcm9wZXJ0eShcImV4dGVuc2lvblwiKSl7aWYoIUFycmF5LmlzQXJyYXkoZS5leHRlbnNpb24pKXJldHVyblwiZXh0ZW5zaW9uOiBhcnJheSBleHBlY3RlZFwiO2Zvcih0PTA7dDxlLmV4dGVuc2lvbi5sZW5ndGg7Kyt0KWlmKG49Yy5nb29nbGUucHJvdG9idWYuRmllbGREZXNjcmlwdG9yUHJvdG8udmVyaWZ5KGUuZXh0ZW5zaW9uW3RdKSlyZXR1cm5cImV4dGVuc2lvbi5cIitufXZhciBuO2lmKG51bGwhPWUub3B0aW9ucyYmZS5oYXNPd25Qcm9wZXJ0eShcIm9wdGlvbnNcIikmJihuPWMuZ29vZ2xlLnByb3RvYnVmLkZpbGVPcHRpb25zLnZlcmlmeShlLm9wdGlvbnMpKSlyZXR1cm5cIm9wdGlvbnMuXCIrbjtpZihudWxsIT1lLnNvdXJjZUNvZGVJbmZvJiZlLmhhc093blByb3BlcnR5KFwic291cmNlQ29kZUluZm9cIikmJihuPWMuZ29vZ2xlLnByb3RvYnVmLlNvdXJjZUNvZGVJbmZvLnZlcmlmeShlLnNvdXJjZUNvZGVJbmZvKSkpcmV0dXJuXCJzb3VyY2VDb2RlSW5mby5cIituO3JldHVybiBudWxsIT1lLnN5bnRheCYmZS5oYXNPd25Qcm9wZXJ0eShcInN5bnRheFwiKSYmIXUuaXNTdHJpbmcoZS5zeW50YXgpP1wic3ludGF4OiBzdHJpbmcgZXhwZWN0ZWRcIjpudWxsfSxmLmZyb21PYmplY3Q9ZnVuY3Rpb24oZSl7aWYoZSBpbnN0YW5jZW9mIGMuZ29vZ2xlLnByb3RvYnVmLkZpbGVEZXNjcmlwdG9yUHJvdG8pcmV0dXJuIGU7dmFyIHQ9bmV3IGMuZ29vZ2xlLnByb3RvYnVmLkZpbGVEZXNjcmlwdG9yUHJvdG87aWYobnVsbCE9ZS5uYW1lJiYodC5uYW1lPVN0cmluZyhlLm5hbWUpKSxudWxsIT1lLnBhY2thZ2UmJih0LnBhY2thZ2U9U3RyaW5nKGUucGFja2FnZSkpLGUuZGVwZW5kZW5jeSl7aWYoIUFycmF5LmlzQXJyYXkoZS5kZXBlbmRlbmN5KSl0aHJvdyBUeXBlRXJyb3IoXCIuZ29vZ2xlLnByb3RvYnVmLkZpbGVEZXNjcmlwdG9yUHJvdG8uZGVwZW5kZW5jeTogYXJyYXkgZXhwZWN0ZWRcIik7dC5kZXBlbmRlbmN5PVtdO2Zvcih2YXIgbj0wO248ZS5kZXBlbmRlbmN5Lmxlbmd0aDsrK24pdC5kZXBlbmRlbmN5W25dPVN0cmluZyhlLmRlcGVuZGVuY3lbbl0pfWlmKGUucHVibGljRGVwZW5kZW5jeSl7aWYoIUFycmF5LmlzQXJyYXkoZS5wdWJsaWNEZXBlbmRlbmN5KSl0aHJvdyBUeXBlRXJyb3IoXCIuZ29vZ2xlLnByb3RvYnVmLkZpbGVEZXNjcmlwdG9yUHJvdG8ucHVibGljRGVwZW5kZW5jeTogYXJyYXkgZXhwZWN0ZWRcIik7dC5wdWJsaWNEZXBlbmRlbmN5PVtdO2ZvcihuPTA7bjxlLnB1YmxpY0RlcGVuZGVuY3kubGVuZ3RoOysrbil0LnB1YmxpY0RlcGVuZGVuY3lbbl09MHxlLnB1YmxpY0RlcGVuZGVuY3lbbl19aWYoZS53ZWFrRGVwZW5kZW5jeSl7aWYoIUFycmF5LmlzQXJyYXkoZS53ZWFrRGVwZW5kZW5jeSkpdGhyb3cgVHlwZUVycm9yKFwiLmdvb2dsZS5wcm90b2J1Zi5GaWxlRGVzY3JpcHRvclByb3RvLndlYWtEZXBlbmRlbmN5OiBhcnJheSBleHBlY3RlZFwiKTt0LndlYWtEZXBlbmRlbmN5PVtdO2ZvcihuPTA7bjxlLndlYWtEZXBlbmRlbmN5Lmxlbmd0aDsrK24pdC53ZWFrRGVwZW5kZW5jeVtuXT0wfGUud2Vha0RlcGVuZGVuY3lbbl19aWYoZS5tZXNzYWdlVHlwZSl7aWYoIUFycmF5LmlzQXJyYXkoZS5tZXNzYWdlVHlwZSkpdGhyb3cgVHlwZUVycm9yKFwiLmdvb2dsZS5wcm90b2J1Zi5GaWxlRGVzY3JpcHRvclByb3RvLm1lc3NhZ2VUeXBlOiBhcnJheSBleHBlY3RlZFwiKTt0Lm1lc3NhZ2VUeXBlPVtdO2ZvcihuPTA7bjxlLm1lc3NhZ2VUeXBlLmxlbmd0aDsrK24pe2lmKFwib2JqZWN0XCIhPXR5cGVvZiBlLm1lc3NhZ2VUeXBlW25dKXRocm93IFR5cGVFcnJvcihcIi5nb29nbGUucHJvdG9idWYuRmlsZURlc2NyaXB0b3JQcm90by5tZXNzYWdlVHlwZTogb2JqZWN0IGV4cGVjdGVkXCIpO3QubWVzc2FnZVR5cGVbbl09Yy5nb29nbGUucHJvdG9idWYuRGVzY3JpcHRvclByb3RvLmZyb21PYmplY3QoZS5tZXNzYWdlVHlwZVtuXSl9fWlmKGUuZW51bVR5cGUpe2lmKCFBcnJheS5pc0FycmF5KGUuZW51bVR5cGUpKXRocm93IFR5cGVFcnJvcihcIi5nb29nbGUucHJvdG9idWYuRmlsZURlc2NyaXB0b3JQcm90by5lbnVtVHlwZTogYXJyYXkgZXhwZWN0ZWRcIik7dC5lbnVtVHlwZT1bXTtmb3Iobj0wO248ZS5lbnVtVHlwZS5sZW5ndGg7KytuKXtpZihcIm9iamVjdFwiIT10eXBlb2YgZS5lbnVtVHlwZVtuXSl0aHJvdyBUeXBlRXJyb3IoXCIuZ29vZ2xlLnByb3RvYnVmLkZpbGVEZXNjcmlwdG9yUHJvdG8uZW51bVR5cGU6IG9iamVjdCBleHBlY3RlZFwiKTt0LmVudW1UeXBlW25dPWMuZ29vZ2xlLnByb3RvYnVmLkVudW1EZXNjcmlwdG9yUHJvdG8uZnJvbU9iamVjdChlLmVudW1UeXBlW25dKX19aWYoZS5zZXJ2aWNlKXtpZighQXJyYXkuaXNBcnJheShlLnNlcnZpY2UpKXRocm93IFR5cGVFcnJvcihcIi5nb29nbGUucHJvdG9idWYuRmlsZURlc2NyaXB0b3JQcm90by5zZXJ2aWNlOiBhcnJheSBleHBlY3RlZFwiKTt0LnNlcnZpY2U9W107Zm9yKG49MDtuPGUuc2VydmljZS5sZW5ndGg7KytuKXtpZihcIm9iamVjdFwiIT10eXBlb2YgZS5zZXJ2aWNlW25dKXRocm93IFR5cGVFcnJvcihcIi5nb29nbGUucHJvdG9idWYuRmlsZURlc2NyaXB0b3JQcm90by5zZXJ2aWNlOiBvYmplY3QgZXhwZWN0ZWRcIik7dC5zZXJ2aWNlW25dPWMuZ29vZ2xlLnByb3RvYnVmLlNlcnZpY2VEZXNjcmlwdG9yUHJvdG8uZnJvbU9iamVjdChlLnNlcnZpY2Vbbl0pfX1pZihlLmV4dGVuc2lvbil7aWYoIUFycmF5LmlzQXJyYXkoZS5leHRlbnNpb24pKXRocm93IFR5cGVFcnJvcihcIi5nb29nbGUucHJvdG9idWYuRmlsZURlc2NyaXB0b3JQcm90by5leHRlbnNpb246IGFycmF5IGV4cGVjdGVkXCIpO3QuZXh0ZW5zaW9uPVtdO2ZvcihuPTA7bjxlLmV4dGVuc2lvbi5sZW5ndGg7KytuKXtpZihcIm9iamVjdFwiIT10eXBlb2YgZS5leHRlbnNpb25bbl0pdGhyb3cgVHlwZUVycm9yKFwiLmdvb2dsZS5wcm90b2J1Zi5GaWxlRGVzY3JpcHRvclByb3RvLmV4dGVuc2lvbjogb2JqZWN0IGV4cGVjdGVkXCIpO3QuZXh0ZW5zaW9uW25dPWMuZ29vZ2xlLnByb3RvYnVmLkZpZWxkRGVzY3JpcHRvclByb3RvLmZyb21PYmplY3QoZS5leHRlbnNpb25bbl0pfX1pZihudWxsIT1lLm9wdGlvbnMpe2lmKFwib2JqZWN0XCIhPXR5cGVvZiBlLm9wdGlvbnMpdGhyb3cgVHlwZUVycm9yKFwiLmdvb2dsZS5wcm90b2J1Zi5GaWxlRGVzY3JpcHRvclByb3RvLm9wdGlvbnM6IG9iamVjdCBleHBlY3RlZFwiKTt0Lm9wdGlvbnM9Yy5nb29nbGUucHJvdG9idWYuRmlsZU9wdGlvbnMuZnJvbU9iamVjdChlLm9wdGlvbnMpfWlmKG51bGwhPWUuc291cmNlQ29kZUluZm8pe2lmKFwib2JqZWN0XCIhPXR5cGVvZiBlLnNvdXJjZUNvZGVJbmZvKXRocm93IFR5cGVFcnJvcihcIi5nb29nbGUucHJvdG9idWYuRmlsZURlc2NyaXB0b3JQcm90by5zb3VyY2VDb2RlSW5mbzogb2JqZWN0IGV4cGVjdGVkXCIpO3Quc291cmNlQ29kZUluZm89Yy5nb29nbGUucHJvdG9idWYuU291cmNlQ29kZUluZm8uZnJvbU9iamVjdChlLnNvdXJjZUNvZGVJbmZvKX1yZXR1cm4gbnVsbCE9ZS5zeW50YXgmJih0LnN5bnRheD1TdHJpbmcoZS5zeW50YXgpKSx0fSxmLnRvT2JqZWN0PWZ1bmN0aW9uKGUsdCl7dmFyIG49e307aWYoKCh0PXR8fHt9KS5hcnJheXN8fHQuZGVmYXVsdHMpJiYobi5kZXBlbmRlbmN5PVtdLG4ubWVzc2FnZVR5cGU9W10sbi5lbnVtVHlwZT1bXSxuLnNlcnZpY2U9W10sbi5leHRlbnNpb249W10sbi5wdWJsaWNEZXBlbmRlbmN5PVtdLG4ud2Vha0RlcGVuZGVuY3k9W10pLHQuZGVmYXVsdHMmJihuLm5hbWU9XCJcIixuLnBhY2thZ2U9XCJcIixuLm9wdGlvbnM9bnVsbCxuLnNvdXJjZUNvZGVJbmZvPW51bGwsbi5zeW50YXg9XCJcIiksbnVsbCE9ZS5uYW1lJiZlLmhhc093blByb3BlcnR5KFwibmFtZVwiKSYmKG4ubmFtZT1lLm5hbWUpLG51bGwhPWUucGFja2FnZSYmZS5oYXNPd25Qcm9wZXJ0eShcInBhY2thZ2VcIikmJihuLnBhY2thZ2U9ZS5wYWNrYWdlKSxlLmRlcGVuZGVuY3kmJmUuZGVwZW5kZW5jeS5sZW5ndGgpe24uZGVwZW5kZW5jeT1bXTtmb3IodmFyIG89MDtvPGUuZGVwZW5kZW5jeS5sZW5ndGg7KytvKW4uZGVwZW5kZW5jeVtvXT1lLmRlcGVuZGVuY3lbb119aWYoZS5tZXNzYWdlVHlwZSYmZS5tZXNzYWdlVHlwZS5sZW5ndGgpe24ubWVzc2FnZVR5cGU9W107Zm9yKG89MDtvPGUubWVzc2FnZVR5cGUubGVuZ3RoOysrbyluLm1lc3NhZ2VUeXBlW29dPWMuZ29vZ2xlLnByb3RvYnVmLkRlc2NyaXB0b3JQcm90by50b09iamVjdChlLm1lc3NhZ2VUeXBlW29dLHQpfWlmKGUuZW51bVR5cGUmJmUuZW51bVR5cGUubGVuZ3RoKXtuLmVudW1UeXBlPVtdO2ZvcihvPTA7bzxlLmVudW1UeXBlLmxlbmd0aDsrK28pbi5lbnVtVHlwZVtvXT1jLmdvb2dsZS5wcm90b2J1Zi5FbnVtRGVzY3JpcHRvclByb3RvLnRvT2JqZWN0KGUuZW51bVR5cGVbb10sdCl9aWYoZS5zZXJ2aWNlJiZlLnNlcnZpY2UubGVuZ3RoKXtuLnNlcnZpY2U9W107Zm9yKG89MDtvPGUuc2VydmljZS5sZW5ndGg7KytvKW4uc2VydmljZVtvXT1jLmdvb2dsZS5wcm90b2J1Zi5TZXJ2aWNlRGVzY3JpcHRvclByb3RvLnRvT2JqZWN0KGUuc2VydmljZVtvXSx0KX1pZihlLmV4dGVuc2lvbiYmZS5leHRlbnNpb24ubGVuZ3RoKXtuLmV4dGVuc2lvbj1bXTtmb3Iobz0wO288ZS5leHRlbnNpb24ubGVuZ3RoOysrbyluLmV4dGVuc2lvbltvXT1jLmdvb2dsZS5wcm90b2J1Zi5GaWVsZERlc2NyaXB0b3JQcm90by50b09iamVjdChlLmV4dGVuc2lvbltvXSx0KX1pZihudWxsIT1lLm9wdGlvbnMmJmUuaGFzT3duUHJvcGVydHkoXCJvcHRpb25zXCIpJiYobi5vcHRpb25zPWMuZ29vZ2xlLnByb3RvYnVmLkZpbGVPcHRpb25zLnRvT2JqZWN0KGUub3B0aW9ucyx0KSksbnVsbCE9ZS5zb3VyY2VDb2RlSW5mbyYmZS5oYXNPd25Qcm9wZXJ0eShcInNvdXJjZUNvZGVJbmZvXCIpJiYobi5zb3VyY2VDb2RlSW5mbz1jLmdvb2dsZS5wcm90b2J1Zi5Tb3VyY2VDb2RlSW5mby50b09iamVjdChlLnNvdXJjZUNvZGVJbmZvLHQpKSxlLnB1YmxpY0RlcGVuZGVuY3kmJmUucHVibGljRGVwZW5kZW5jeS5sZW5ndGgpe24ucHVibGljRGVwZW5kZW5jeT1bXTtmb3Iobz0wO288ZS5wdWJsaWNEZXBlbmRlbmN5Lmxlbmd0aDsrK28pbi5wdWJsaWNEZXBlbmRlbmN5W29dPWUucHVibGljRGVwZW5kZW5jeVtvXX1pZihlLndlYWtEZXBlbmRlbmN5JiZlLndlYWtEZXBlbmRlbmN5Lmxlbmd0aCl7bi53ZWFrRGVwZW5kZW5jeT1bXTtmb3Iobz0wO288ZS53ZWFrRGVwZW5kZW5jeS5sZW5ndGg7KytvKW4ud2Vha0RlcGVuZGVuY3lbb109ZS53ZWFrRGVwZW5kZW5jeVtvXX1yZXR1cm4gbnVsbCE9ZS5zeW50YXgmJmUuaGFzT3duUHJvcGVydHkoXCJzeW50YXhcIikmJihuLnN5bnRheD1lLnN5bnRheCksbn0sZi5wcm90b3R5cGUudG9KU09OPWZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMuY29uc3RydWN0b3IudG9PYmplY3QodGhpcyxvLnV0aWwudG9KU09OT3B0aW9ucyl9LGYpLG4uRGVzY3JpcHRvclByb3RvPSh5LnByb3RvdHlwZS5uYW1lPVwiXCIseS5wcm90b3R5cGUuZmllbGQ9dS5lbXB0eUFycmF5LHkucHJvdG90eXBlLmV4dGVuc2lvbj11LmVtcHR5QXJyYXkseS5wcm90b3R5cGUubmVzdGVkVHlwZT11LmVtcHR5QXJyYXkseS5wcm90b3R5cGUuZW51bVR5cGU9dS5lbXB0eUFycmF5LHkucHJvdG90eXBlLmV4dGVuc2lvblJhbmdlPXUuZW1wdHlBcnJheSx5LnByb3RvdHlwZS5vbmVvZkRlY2w9dS5lbXB0eUFycmF5LHkucHJvdG90eXBlLm9wdGlvbnM9bnVsbCx5LnByb3RvdHlwZS5yZXNlcnZlZFJhbmdlPXUuZW1wdHlBcnJheSx5LnByb3RvdHlwZS5yZXNlcnZlZE5hbWU9dS5lbXB0eUFycmF5LHkuY3JlYXRlPWZ1bmN0aW9uKGUpe3JldHVybiBuZXcgeShlKX0seS5lbmNvZGU9ZnVuY3Rpb24oZSx0KXtpZih0PXR8fHIuY3JlYXRlKCksbnVsbCE9ZS5uYW1lJiZPYmplY3QuaGFzT3duUHJvcGVydHkuY2FsbChlLFwibmFtZVwiKSYmdC51aW50MzIoMTApLnN0cmluZyhlLm5hbWUpLG51bGwhPWUuZmllbGQmJmUuZmllbGQubGVuZ3RoKWZvcih2YXIgbj0wO248ZS5maWVsZC5sZW5ndGg7KytuKWMuZ29vZ2xlLnByb3RvYnVmLkZpZWxkRGVzY3JpcHRvclByb3RvLmVuY29kZShlLmZpZWxkW25dLHQudWludDMyKDE4KS5mb3JrKCkpLmxkZWxpbSgpO2lmKG51bGwhPWUubmVzdGVkVHlwZSYmZS5uZXN0ZWRUeXBlLmxlbmd0aClmb3Iobj0wO248ZS5uZXN0ZWRUeXBlLmxlbmd0aDsrK24pYy5nb29nbGUucHJvdG9idWYuRGVzY3JpcHRvclByb3RvLmVuY29kZShlLm5lc3RlZFR5cGVbbl0sdC51aW50MzIoMjYpLmZvcmsoKSkubGRlbGltKCk7aWYobnVsbCE9ZS5lbnVtVHlwZSYmZS5lbnVtVHlwZS5sZW5ndGgpZm9yKG49MDtuPGUuZW51bVR5cGUubGVuZ3RoOysrbiljLmdvb2dsZS5wcm90b2J1Zi5FbnVtRGVzY3JpcHRvclByb3RvLmVuY29kZShlLmVudW1UeXBlW25dLHQudWludDMyKDM0KS5mb3JrKCkpLmxkZWxpbSgpO2lmKG51bGwhPWUuZXh0ZW5zaW9uUmFuZ2UmJmUuZXh0ZW5zaW9uUmFuZ2UubGVuZ3RoKWZvcihuPTA7bjxlLmV4dGVuc2lvblJhbmdlLmxlbmd0aDsrK24pYy5nb29nbGUucHJvdG9idWYuRGVzY3JpcHRvclByb3RvLkV4dGVuc2lvblJhbmdlLmVuY29kZShlLmV4dGVuc2lvblJhbmdlW25dLHQudWludDMyKDQyKS5mb3JrKCkpLmxkZWxpbSgpO2lmKG51bGwhPWUuZXh0ZW5zaW9uJiZlLmV4dGVuc2lvbi5sZW5ndGgpZm9yKG49MDtuPGUuZXh0ZW5zaW9uLmxlbmd0aDsrK24pYy5nb29nbGUucHJvdG9idWYuRmllbGREZXNjcmlwdG9yUHJvdG8uZW5jb2RlKGUuZXh0ZW5zaW9uW25dLHQudWludDMyKDUwKS5mb3JrKCkpLmxkZWxpbSgpO2lmKG51bGwhPWUub3B0aW9ucyYmT2JqZWN0Lmhhc093blByb3BlcnR5LmNhbGwoZSxcIm9wdGlvbnNcIikmJmMuZ29vZ2xlLnByb3RvYnVmLk1lc3NhZ2VPcHRpb25zLmVuY29kZShlLm9wdGlvbnMsdC51aW50MzIoNTgpLmZvcmsoKSkubGRlbGltKCksbnVsbCE9ZS5vbmVvZkRlY2wmJmUub25lb2ZEZWNsLmxlbmd0aClmb3Iobj0wO248ZS5vbmVvZkRlY2wubGVuZ3RoOysrbiljLmdvb2dsZS5wcm90b2J1Zi5PbmVvZkRlc2NyaXB0b3JQcm90by5lbmNvZGUoZS5vbmVvZkRlY2xbbl0sdC51aW50MzIoNjYpLmZvcmsoKSkubGRlbGltKCk7aWYobnVsbCE9ZS5yZXNlcnZlZFJhbmdlJiZlLnJlc2VydmVkUmFuZ2UubGVuZ3RoKWZvcihuPTA7bjxlLnJlc2VydmVkUmFuZ2UubGVuZ3RoOysrbiljLmdvb2dsZS5wcm90b2J1Zi5EZXNjcmlwdG9yUHJvdG8uUmVzZXJ2ZWRSYW5nZS5lbmNvZGUoZS5yZXNlcnZlZFJhbmdlW25dLHQudWludDMyKDc0KS5mb3JrKCkpLmxkZWxpbSgpO2lmKG51bGwhPWUucmVzZXJ2ZWROYW1lJiZlLnJlc2VydmVkTmFtZS5sZW5ndGgpZm9yKG49MDtuPGUucmVzZXJ2ZWROYW1lLmxlbmd0aDsrK24pdC51aW50MzIoODIpLnN0cmluZyhlLnJlc2VydmVkTmFtZVtuXSk7cmV0dXJuIHR9LHkuZW5jb2RlRGVsaW1pdGVkPWZ1bmN0aW9uKGUsdCl7cmV0dXJuIHRoaXMuZW5jb2RlKGUsdCkubGRlbGltKCl9LHkuZGVjb2RlPWZ1bmN0aW9uKGUsdCl7ZSBpbnN0YW5jZW9mIHN8fChlPXMuY3JlYXRlKGUpKTtmb3IodmFyIG49dm9pZCAwPT09dD9lLmxlbjplLnBvcyt0LG89bmV3IGMuZ29vZ2xlLnByb3RvYnVmLkRlc2NyaXB0b3JQcm90bztlLnBvczxuOyl7dmFyIHI9ZS51aW50MzIoKTtzd2l0Y2gocj4+PjMpe2Nhc2UgMTpvLm5hbWU9ZS5zdHJpbmcoKTticmVhaztjYXNlIDI6by5maWVsZCYmby5maWVsZC5sZW5ndGh8fChvLmZpZWxkPVtdKSxvLmZpZWxkLnB1c2goYy5nb29nbGUucHJvdG9idWYuRmllbGREZXNjcmlwdG9yUHJvdG8uZGVjb2RlKGUsZS51aW50MzIoKSkpO2JyZWFrO2Nhc2UgNjpvLmV4dGVuc2lvbiYmby5leHRlbnNpb24ubGVuZ3RofHwoby5leHRlbnNpb249W10pLG8uZXh0ZW5zaW9uLnB1c2goYy5nb29nbGUucHJvdG9idWYuRmllbGREZXNjcmlwdG9yUHJvdG8uZGVjb2RlKGUsZS51aW50MzIoKSkpO2JyZWFrO2Nhc2UgMzpvLm5lc3RlZFR5cGUmJm8ubmVzdGVkVHlwZS5sZW5ndGh8fChvLm5lc3RlZFR5cGU9W10pLG8ubmVzdGVkVHlwZS5wdXNoKGMuZ29vZ2xlLnByb3RvYnVmLkRlc2NyaXB0b3JQcm90by5kZWNvZGUoZSxlLnVpbnQzMigpKSk7YnJlYWs7Y2FzZSA0Om8uZW51bVR5cGUmJm8uZW51bVR5cGUubGVuZ3RofHwoby5lbnVtVHlwZT1bXSksby5lbnVtVHlwZS5wdXNoKGMuZ29vZ2xlLnByb3RvYnVmLkVudW1EZXNjcmlwdG9yUHJvdG8uZGVjb2RlKGUsZS51aW50MzIoKSkpO2JyZWFrO2Nhc2UgNTpvLmV4dGVuc2lvblJhbmdlJiZvLmV4dGVuc2lvblJhbmdlLmxlbmd0aHx8KG8uZXh0ZW5zaW9uUmFuZ2U9W10pLG8uZXh0ZW5zaW9uUmFuZ2UucHVzaChjLmdvb2dsZS5wcm90b2J1Zi5EZXNjcmlwdG9yUHJvdG8uRXh0ZW5zaW9uUmFuZ2UuZGVjb2RlKGUsZS51aW50MzIoKSkpO2JyZWFrO2Nhc2UgODpvLm9uZW9mRGVjbCYmby5vbmVvZkRlY2wubGVuZ3RofHwoby5vbmVvZkRlY2w9W10pLG8ub25lb2ZEZWNsLnB1c2goYy5nb29nbGUucHJvdG9idWYuT25lb2ZEZXNjcmlwdG9yUHJvdG8uZGVjb2RlKGUsZS51aW50MzIoKSkpO2JyZWFrO2Nhc2UgNzpvLm9wdGlvbnM9Yy5nb29nbGUucHJvdG9idWYuTWVzc2FnZU9wdGlvbnMuZGVjb2RlKGUsZS51aW50MzIoKSk7YnJlYWs7Y2FzZSA5Om8ucmVzZXJ2ZWRSYW5nZSYmby5yZXNlcnZlZFJhbmdlLmxlbmd0aHx8KG8ucmVzZXJ2ZWRSYW5nZT1bXSksby5yZXNlcnZlZFJhbmdlLnB1c2goYy5nb29nbGUucHJvdG9idWYuRGVzY3JpcHRvclByb3RvLlJlc2VydmVkUmFuZ2UuZGVjb2RlKGUsZS51aW50MzIoKSkpO2JyZWFrO2Nhc2UgMTA6by5yZXNlcnZlZE5hbWUmJm8ucmVzZXJ2ZWROYW1lLmxlbmd0aHx8KG8ucmVzZXJ2ZWROYW1lPVtdKSxvLnJlc2VydmVkTmFtZS5wdXNoKGUuc3RyaW5nKCkpO2JyZWFrO2RlZmF1bHQ6ZS5za2lwVHlwZSg3JnIpfX1yZXR1cm4gb30seS5kZWNvZGVEZWxpbWl0ZWQ9ZnVuY3Rpb24oZSl7cmV0dXJuIGUgaW5zdGFuY2VvZiBzfHwoZT1uZXcgcyhlKSksdGhpcy5kZWNvZGUoZSxlLnVpbnQzMigpKX0seS52ZXJpZnk9ZnVuY3Rpb24oZSl7aWYoXCJvYmplY3RcIiE9dHlwZW9mIGV8fG51bGw9PT1lKXJldHVyblwib2JqZWN0IGV4cGVjdGVkXCI7aWYobnVsbCE9ZS5uYW1lJiZlLmhhc093blByb3BlcnR5KFwibmFtZVwiKSYmIXUuaXNTdHJpbmcoZS5uYW1lKSlyZXR1cm5cIm5hbWU6IHN0cmluZyBleHBlY3RlZFwiO2lmKG51bGwhPWUuZmllbGQmJmUuaGFzT3duUHJvcGVydHkoXCJmaWVsZFwiKSl7aWYoIUFycmF5LmlzQXJyYXkoZS5maWVsZCkpcmV0dXJuXCJmaWVsZDogYXJyYXkgZXhwZWN0ZWRcIjtmb3IodmFyIHQ9MDt0PGUuZmllbGQubGVuZ3RoOysrdClpZihuPWMuZ29vZ2xlLnByb3RvYnVmLkZpZWxkRGVzY3JpcHRvclByb3RvLnZlcmlmeShlLmZpZWxkW3RdKSlyZXR1cm5cImZpZWxkLlwiK259aWYobnVsbCE9ZS5leHRlbnNpb24mJmUuaGFzT3duUHJvcGVydHkoXCJleHRlbnNpb25cIikpe2lmKCFBcnJheS5pc0FycmF5KGUuZXh0ZW5zaW9uKSlyZXR1cm5cImV4dGVuc2lvbjogYXJyYXkgZXhwZWN0ZWRcIjtmb3IodD0wO3Q8ZS5leHRlbnNpb24ubGVuZ3RoOysrdClpZihuPWMuZ29vZ2xlLnByb3RvYnVmLkZpZWxkRGVzY3JpcHRvclByb3RvLnZlcmlmeShlLmV4dGVuc2lvblt0XSkpcmV0dXJuXCJleHRlbnNpb24uXCIrbn1pZihudWxsIT1lLm5lc3RlZFR5cGUmJmUuaGFzT3duUHJvcGVydHkoXCJuZXN0ZWRUeXBlXCIpKXtpZighQXJyYXkuaXNBcnJheShlLm5lc3RlZFR5cGUpKXJldHVyblwibmVzdGVkVHlwZTogYXJyYXkgZXhwZWN0ZWRcIjtmb3IodD0wO3Q8ZS5uZXN0ZWRUeXBlLmxlbmd0aDsrK3QpaWYobj1jLmdvb2dsZS5wcm90b2J1Zi5EZXNjcmlwdG9yUHJvdG8udmVyaWZ5KGUubmVzdGVkVHlwZVt0XSkpcmV0dXJuXCJuZXN0ZWRUeXBlLlwiK259aWYobnVsbCE9ZS5lbnVtVHlwZSYmZS5oYXNPd25Qcm9wZXJ0eShcImVudW1UeXBlXCIpKXtpZighQXJyYXkuaXNBcnJheShlLmVudW1UeXBlKSlyZXR1cm5cImVudW1UeXBlOiBhcnJheSBleHBlY3RlZFwiO2Zvcih0PTA7dDxlLmVudW1UeXBlLmxlbmd0aDsrK3QpaWYobj1jLmdvb2dsZS5wcm90b2J1Zi5FbnVtRGVzY3JpcHRvclByb3RvLnZlcmlmeShlLmVudW1UeXBlW3RdKSlyZXR1cm5cImVudW1UeXBlLlwiK259aWYobnVsbCE9ZS5leHRlbnNpb25SYW5nZSYmZS5oYXNPd25Qcm9wZXJ0eShcImV4dGVuc2lvblJhbmdlXCIpKXtpZighQXJyYXkuaXNBcnJheShlLmV4dGVuc2lvblJhbmdlKSlyZXR1cm5cImV4dGVuc2lvblJhbmdlOiBhcnJheSBleHBlY3RlZFwiO2Zvcih0PTA7dDxlLmV4dGVuc2lvblJhbmdlLmxlbmd0aDsrK3QpaWYobj1jLmdvb2dsZS5wcm90b2J1Zi5EZXNjcmlwdG9yUHJvdG8uRXh0ZW5zaW9uUmFuZ2UudmVyaWZ5KGUuZXh0ZW5zaW9uUmFuZ2VbdF0pKXJldHVyblwiZXh0ZW5zaW9uUmFuZ2UuXCIrbn1pZihudWxsIT1lLm9uZW9mRGVjbCYmZS5oYXNPd25Qcm9wZXJ0eShcIm9uZW9mRGVjbFwiKSl7aWYoIUFycmF5LmlzQXJyYXkoZS5vbmVvZkRlY2wpKXJldHVyblwib25lb2ZEZWNsOiBhcnJheSBleHBlY3RlZFwiO2Zvcih0PTA7dDxlLm9uZW9mRGVjbC5sZW5ndGg7Kyt0KWlmKG49Yy5nb29nbGUucHJvdG9idWYuT25lb2ZEZXNjcmlwdG9yUHJvdG8udmVyaWZ5KGUub25lb2ZEZWNsW3RdKSlyZXR1cm5cIm9uZW9mRGVjbC5cIitufWlmKG51bGwhPWUub3B0aW9ucyYmZS5oYXNPd25Qcm9wZXJ0eShcIm9wdGlvbnNcIikmJihuPWMuZ29vZ2xlLnByb3RvYnVmLk1lc3NhZ2VPcHRpb25zLnZlcmlmeShlLm9wdGlvbnMpKSlyZXR1cm5cIm9wdGlvbnMuXCIrbjtpZihudWxsIT1lLnJlc2VydmVkUmFuZ2UmJmUuaGFzT3duUHJvcGVydHkoXCJyZXNlcnZlZFJhbmdlXCIpKXtpZighQXJyYXkuaXNBcnJheShlLnJlc2VydmVkUmFuZ2UpKXJldHVyblwicmVzZXJ2ZWRSYW5nZTogYXJyYXkgZXhwZWN0ZWRcIjtmb3IodmFyIG4sdD0wO3Q8ZS5yZXNlcnZlZFJhbmdlLmxlbmd0aDsrK3QpaWYobj1jLmdvb2dsZS5wcm90b2J1Zi5EZXNjcmlwdG9yUHJvdG8uUmVzZXJ2ZWRSYW5nZS52ZXJpZnkoZS5yZXNlcnZlZFJhbmdlW3RdKSlyZXR1cm5cInJlc2VydmVkUmFuZ2UuXCIrbn1pZihudWxsIT1lLnJlc2VydmVkTmFtZSYmZS5oYXNPd25Qcm9wZXJ0eShcInJlc2VydmVkTmFtZVwiKSl7aWYoIUFycmF5LmlzQXJyYXkoZS5yZXNlcnZlZE5hbWUpKXJldHVyblwicmVzZXJ2ZWROYW1lOiBhcnJheSBleHBlY3RlZFwiO2Zvcih0PTA7dDxlLnJlc2VydmVkTmFtZS5sZW5ndGg7Kyt0KWlmKCF1LmlzU3RyaW5nKGUucmVzZXJ2ZWROYW1lW3RdKSlyZXR1cm5cInJlc2VydmVkTmFtZTogc3RyaW5nW10gZXhwZWN0ZWRcIn1yZXR1cm4gbnVsbH0seS5mcm9tT2JqZWN0PWZ1bmN0aW9uKGUpe2lmKGUgaW5zdGFuY2VvZiBjLmdvb2dsZS5wcm90b2J1Zi5EZXNjcmlwdG9yUHJvdG8pcmV0dXJuIGU7dmFyIHQ9bmV3IGMuZ29vZ2xlLnByb3RvYnVmLkRlc2NyaXB0b3JQcm90bztpZihudWxsIT1lLm5hbWUmJih0Lm5hbWU9U3RyaW5nKGUubmFtZSkpLGUuZmllbGQpe2lmKCFBcnJheS5pc0FycmF5KGUuZmllbGQpKXRocm93IFR5cGVFcnJvcihcIi5nb29nbGUucHJvdG9idWYuRGVzY3JpcHRvclByb3RvLmZpZWxkOiBhcnJheSBleHBlY3RlZFwiKTt0LmZpZWxkPVtdO2Zvcih2YXIgbj0wO248ZS5maWVsZC5sZW5ndGg7KytuKXtpZihcIm9iamVjdFwiIT10eXBlb2YgZS5maWVsZFtuXSl0aHJvdyBUeXBlRXJyb3IoXCIuZ29vZ2xlLnByb3RvYnVmLkRlc2NyaXB0b3JQcm90by5maWVsZDogb2JqZWN0IGV4cGVjdGVkXCIpO3QuZmllbGRbbl09Yy5nb29nbGUucHJvdG9idWYuRmllbGREZXNjcmlwdG9yUHJvdG8uZnJvbU9iamVjdChlLmZpZWxkW25dKX19aWYoZS5leHRlbnNpb24pe2lmKCFBcnJheS5pc0FycmF5KGUuZXh0ZW5zaW9uKSl0aHJvdyBUeXBlRXJyb3IoXCIuZ29vZ2xlLnByb3RvYnVmLkRlc2NyaXB0b3JQcm90by5leHRlbnNpb246IGFycmF5IGV4cGVjdGVkXCIpO3QuZXh0ZW5zaW9uPVtdO2ZvcihuPTA7bjxlLmV4dGVuc2lvbi5sZW5ndGg7KytuKXtpZihcIm9iamVjdFwiIT10eXBlb2YgZS5leHRlbnNpb25bbl0pdGhyb3cgVHlwZUVycm9yKFwiLmdvb2dsZS5wcm90b2J1Zi5EZXNjcmlwdG9yUHJvdG8uZXh0ZW5zaW9uOiBvYmplY3QgZXhwZWN0ZWRcIik7dC5leHRlbnNpb25bbl09Yy5nb29nbGUucHJvdG9idWYuRmllbGREZXNjcmlwdG9yUHJvdG8uZnJvbU9iamVjdChlLmV4dGVuc2lvbltuXSl9fWlmKGUubmVzdGVkVHlwZSl7aWYoIUFycmF5LmlzQXJyYXkoZS5uZXN0ZWRUeXBlKSl0aHJvdyBUeXBlRXJyb3IoXCIuZ29vZ2xlLnByb3RvYnVmLkRlc2NyaXB0b3JQcm90by5uZXN0ZWRUeXBlOiBhcnJheSBleHBlY3RlZFwiKTt0Lm5lc3RlZFR5cGU9W107Zm9yKG49MDtuPGUubmVzdGVkVHlwZS5sZW5ndGg7KytuKXtpZihcIm9iamVjdFwiIT10eXBlb2YgZS5uZXN0ZWRUeXBlW25dKXRocm93IFR5cGVFcnJvcihcIi5nb29nbGUucHJvdG9idWYuRGVzY3JpcHRvclByb3RvLm5lc3RlZFR5cGU6IG9iamVjdCBleHBlY3RlZFwiKTt0Lm5lc3RlZFR5cGVbbl09Yy5nb29nbGUucHJvdG9idWYuRGVzY3JpcHRvclByb3RvLmZyb21PYmplY3QoZS5uZXN0ZWRUeXBlW25dKX19aWYoZS5lbnVtVHlwZSl7aWYoIUFycmF5LmlzQXJyYXkoZS5lbnVtVHlwZSkpdGhyb3cgVHlwZUVycm9yKFwiLmdvb2dsZS5wcm90b2J1Zi5EZXNjcmlwdG9yUHJvdG8uZW51bVR5cGU6IGFycmF5IGV4cGVjdGVkXCIpO3QuZW51bVR5cGU9W107Zm9yKG49MDtuPGUuZW51bVR5cGUubGVuZ3RoOysrbil7aWYoXCJvYmplY3RcIiE9dHlwZW9mIGUuZW51bVR5cGVbbl0pdGhyb3cgVHlwZUVycm9yKFwiLmdvb2dsZS5wcm90b2J1Zi5EZXNjcmlwdG9yUHJvdG8uZW51bVR5cGU6IG9iamVjdCBleHBlY3RlZFwiKTt0LmVudW1UeXBlW25dPWMuZ29vZ2xlLnByb3RvYnVmLkVudW1EZXNjcmlwdG9yUHJvdG8uZnJvbU9iamVjdChlLmVudW1UeXBlW25dKX19aWYoZS5leHRlbnNpb25SYW5nZSl7aWYoIUFycmF5LmlzQXJyYXkoZS5leHRlbnNpb25SYW5nZSkpdGhyb3cgVHlwZUVycm9yKFwiLmdvb2dsZS5wcm90b2J1Zi5EZXNjcmlwdG9yUHJvdG8uZXh0ZW5zaW9uUmFuZ2U6IGFycmF5IGV4cGVjdGVkXCIpO3QuZXh0ZW5zaW9uUmFuZ2U9W107Zm9yKG49MDtuPGUuZXh0ZW5zaW9uUmFuZ2UubGVuZ3RoOysrbil7aWYoXCJvYmplY3RcIiE9dHlwZW9mIGUuZXh0ZW5zaW9uUmFuZ2Vbbl0pdGhyb3cgVHlwZUVycm9yKFwiLmdvb2dsZS5wcm90b2J1Zi5EZXNjcmlwdG9yUHJvdG8uZXh0ZW5zaW9uUmFuZ2U6IG9iamVjdCBleHBlY3RlZFwiKTt0LmV4dGVuc2lvblJhbmdlW25dPWMuZ29vZ2xlLnByb3RvYnVmLkRlc2NyaXB0b3JQcm90by5FeHRlbnNpb25SYW5nZS5mcm9tT2JqZWN0KGUuZXh0ZW5zaW9uUmFuZ2Vbbl0pfX1pZihlLm9uZW9mRGVjbCl7aWYoIUFycmF5LmlzQXJyYXkoZS5vbmVvZkRlY2wpKXRocm93IFR5cGVFcnJvcihcIi5nb29nbGUucHJvdG9idWYuRGVzY3JpcHRvclByb3RvLm9uZW9mRGVjbDogYXJyYXkgZXhwZWN0ZWRcIik7dC5vbmVvZkRlY2w9W107Zm9yKG49MDtuPGUub25lb2ZEZWNsLmxlbmd0aDsrK24pe2lmKFwib2JqZWN0XCIhPXR5cGVvZiBlLm9uZW9mRGVjbFtuXSl0aHJvdyBUeXBlRXJyb3IoXCIuZ29vZ2xlLnByb3RvYnVmLkRlc2NyaXB0b3JQcm90by5vbmVvZkRlY2w6IG9iamVjdCBleHBlY3RlZFwiKTt0Lm9uZW9mRGVjbFtuXT1jLmdvb2dsZS5wcm90b2J1Zi5PbmVvZkRlc2NyaXB0b3JQcm90by5mcm9tT2JqZWN0KGUub25lb2ZEZWNsW25dKX19aWYobnVsbCE9ZS5vcHRpb25zKXtpZihcIm9iamVjdFwiIT10eXBlb2YgZS5vcHRpb25zKXRocm93IFR5cGVFcnJvcihcIi5nb29nbGUucHJvdG9idWYuRGVzY3JpcHRvclByb3RvLm9wdGlvbnM6IG9iamVjdCBleHBlY3RlZFwiKTt0Lm9wdGlvbnM9Yy5nb29nbGUucHJvdG9idWYuTWVzc2FnZU9wdGlvbnMuZnJvbU9iamVjdChlLm9wdGlvbnMpfWlmKGUucmVzZXJ2ZWRSYW5nZSl7aWYoIUFycmF5LmlzQXJyYXkoZS5yZXNlcnZlZFJhbmdlKSl0aHJvdyBUeXBlRXJyb3IoXCIuZ29vZ2xlLnByb3RvYnVmLkRlc2NyaXB0b3JQcm90by5yZXNlcnZlZFJhbmdlOiBhcnJheSBleHBlY3RlZFwiKTt0LnJlc2VydmVkUmFuZ2U9W107Zm9yKG49MDtuPGUucmVzZXJ2ZWRSYW5nZS5sZW5ndGg7KytuKXtpZihcIm9iamVjdFwiIT10eXBlb2YgZS5yZXNlcnZlZFJhbmdlW25dKXRocm93IFR5cGVFcnJvcihcIi5nb29nbGUucHJvdG9idWYuRGVzY3JpcHRvclByb3RvLnJlc2VydmVkUmFuZ2U6IG9iamVjdCBleHBlY3RlZFwiKTt0LnJlc2VydmVkUmFuZ2Vbbl09Yy5nb29nbGUucHJvdG9idWYuRGVzY3JpcHRvclByb3RvLlJlc2VydmVkUmFuZ2UuZnJvbU9iamVjdChlLnJlc2VydmVkUmFuZ2Vbbl0pfX1pZihlLnJlc2VydmVkTmFtZSl7aWYoIUFycmF5LmlzQXJyYXkoZS5yZXNlcnZlZE5hbWUpKXRocm93IFR5cGVFcnJvcihcIi5nb29nbGUucHJvdG9idWYuRGVzY3JpcHRvclByb3RvLnJlc2VydmVkTmFtZTogYXJyYXkgZXhwZWN0ZWRcIik7dC5yZXNlcnZlZE5hbWU9W107Zm9yKG49MDtuPGUucmVzZXJ2ZWROYW1lLmxlbmd0aDsrK24pdC5yZXNlcnZlZE5hbWVbbl09U3RyaW5nKGUucmVzZXJ2ZWROYW1lW25dKX1yZXR1cm4gdH0seS50b09iamVjdD1mdW5jdGlvbihlLHQpe3ZhciBuPXt9O2lmKCgodD10fHx7fSkuYXJyYXlzfHx0LmRlZmF1bHRzKSYmKG4uZmllbGQ9W10sbi5uZXN0ZWRUeXBlPVtdLG4uZW51bVR5cGU9W10sbi5leHRlbnNpb25SYW5nZT1bXSxuLmV4dGVuc2lvbj1bXSxuLm9uZW9mRGVjbD1bXSxuLnJlc2VydmVkUmFuZ2U9W10sbi5yZXNlcnZlZE5hbWU9W10pLHQuZGVmYXVsdHMmJihuLm5hbWU9XCJcIixuLm9wdGlvbnM9bnVsbCksbnVsbCE9ZS5uYW1lJiZlLmhhc093blByb3BlcnR5KFwibmFtZVwiKSYmKG4ubmFtZT1lLm5hbWUpLGUuZmllbGQmJmUuZmllbGQubGVuZ3RoKXtuLmZpZWxkPVtdO2Zvcih2YXIgbz0wO288ZS5maWVsZC5sZW5ndGg7KytvKW4uZmllbGRbb109Yy5nb29nbGUucHJvdG9idWYuRmllbGREZXNjcmlwdG9yUHJvdG8udG9PYmplY3QoZS5maWVsZFtvXSx0KX1pZihlLm5lc3RlZFR5cGUmJmUubmVzdGVkVHlwZS5sZW5ndGgpe24ubmVzdGVkVHlwZT1bXTtmb3Iobz0wO288ZS5uZXN0ZWRUeXBlLmxlbmd0aDsrK28pbi5uZXN0ZWRUeXBlW29dPWMuZ29vZ2xlLnByb3RvYnVmLkRlc2NyaXB0b3JQcm90by50b09iamVjdChlLm5lc3RlZFR5cGVbb10sdCl9aWYoZS5lbnVtVHlwZSYmZS5lbnVtVHlwZS5sZW5ndGgpe24uZW51bVR5cGU9W107Zm9yKG89MDtvPGUuZW51bVR5cGUubGVuZ3RoOysrbyluLmVudW1UeXBlW29dPWMuZ29vZ2xlLnByb3RvYnVmLkVudW1EZXNjcmlwdG9yUHJvdG8udG9PYmplY3QoZS5lbnVtVHlwZVtvXSx0KX1pZihlLmV4dGVuc2lvblJhbmdlJiZlLmV4dGVuc2lvblJhbmdlLmxlbmd0aCl7bi5leHRlbnNpb25SYW5nZT1bXTtmb3Iobz0wO288ZS5leHRlbnNpb25SYW5nZS5sZW5ndGg7KytvKW4uZXh0ZW5zaW9uUmFuZ2Vbb109Yy5nb29nbGUucHJvdG9idWYuRGVzY3JpcHRvclByb3RvLkV4dGVuc2lvblJhbmdlLnRvT2JqZWN0KGUuZXh0ZW5zaW9uUmFuZ2Vbb10sdCl9aWYoZS5leHRlbnNpb24mJmUuZXh0ZW5zaW9uLmxlbmd0aCl7bi5leHRlbnNpb249W107Zm9yKG89MDtvPGUuZXh0ZW5zaW9uLmxlbmd0aDsrK28pbi5leHRlbnNpb25bb109Yy5nb29nbGUucHJvdG9idWYuRmllbGREZXNjcmlwdG9yUHJvdG8udG9PYmplY3QoZS5leHRlbnNpb25bb10sdCl9aWYobnVsbCE9ZS5vcHRpb25zJiZlLmhhc093blByb3BlcnR5KFwib3B0aW9uc1wiKSYmKG4ub3B0aW9ucz1jLmdvb2dsZS5wcm90b2J1Zi5NZXNzYWdlT3B0aW9ucy50b09iamVjdChlLm9wdGlvbnMsdCkpLGUub25lb2ZEZWNsJiZlLm9uZW9mRGVjbC5sZW5ndGgpe24ub25lb2ZEZWNsPVtdO2ZvcihvPTA7bzxlLm9uZW9mRGVjbC5sZW5ndGg7KytvKW4ub25lb2ZEZWNsW29dPWMuZ29vZ2xlLnByb3RvYnVmLk9uZW9mRGVzY3JpcHRvclByb3RvLnRvT2JqZWN0KGUub25lb2ZEZWNsW29dLHQpfWlmKGUucmVzZXJ2ZWRSYW5nZSYmZS5yZXNlcnZlZFJhbmdlLmxlbmd0aCl7bi5yZXNlcnZlZFJhbmdlPVtdO2ZvcihvPTA7bzxlLnJlc2VydmVkUmFuZ2UubGVuZ3RoOysrbyluLnJlc2VydmVkUmFuZ2Vbb109Yy5nb29nbGUucHJvdG9idWYuRGVzY3JpcHRvclByb3RvLlJlc2VydmVkUmFuZ2UudG9PYmplY3QoZS5yZXNlcnZlZFJhbmdlW29dLHQpfWlmKGUucmVzZXJ2ZWROYW1lJiZlLnJlc2VydmVkTmFtZS5sZW5ndGgpe24ucmVzZXJ2ZWROYW1lPVtdO2ZvcihvPTA7bzxlLnJlc2VydmVkTmFtZS5sZW5ndGg7KytvKW4ucmVzZXJ2ZWROYW1lW29dPWUucmVzZXJ2ZWROYW1lW29dfXJldHVybiBufSx5LnByb3RvdHlwZS50b0pTT049ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5jb25zdHJ1Y3Rvci50b09iamVjdCh0aGlzLG8udXRpbC50b0pTT05PcHRpb25zKX0seS5FeHRlbnNpb25SYW5nZT0oaC5wcm90b3R5cGUuc3RhcnQ9MCxoLnByb3RvdHlwZS5lbmQ9MCxoLnByb3RvdHlwZS5vcHRpb25zPW51bGwsaC5jcmVhdGU9ZnVuY3Rpb24oZSl7cmV0dXJuIG5ldyBoKGUpfSxoLmVuY29kZT1mdW5jdGlvbihlLHQpe3JldHVybiB0PXR8fHIuY3JlYXRlKCksbnVsbCE9ZS5zdGFydCYmT2JqZWN0Lmhhc093blByb3BlcnR5LmNhbGwoZSxcInN0YXJ0XCIpJiZ0LnVpbnQzMig4KS5pbnQzMihlLnN0YXJ0KSxudWxsIT1lLmVuZCYmT2JqZWN0Lmhhc093blByb3BlcnR5LmNhbGwoZSxcImVuZFwiKSYmdC51aW50MzIoMTYpLmludDMyKGUuZW5kKSxudWxsIT1lLm9wdGlvbnMmJk9iamVjdC5oYXNPd25Qcm9wZXJ0eS5jYWxsKGUsXCJvcHRpb25zXCIpJiZjLmdvb2dsZS5wcm90b2J1Zi5FeHRlbnNpb25SYW5nZU9wdGlvbnMuZW5jb2RlKGUub3B0aW9ucyx0LnVpbnQzMigyNikuZm9yaygpKS5sZGVsaW0oKSx0fSxoLmVuY29kZURlbGltaXRlZD1mdW5jdGlvbihlLHQpe3JldHVybiB0aGlzLmVuY29kZShlLHQpLmxkZWxpbSgpfSxoLmRlY29kZT1mdW5jdGlvbihlLHQpe2UgaW5zdGFuY2VvZiBzfHwoZT1zLmNyZWF0ZShlKSk7Zm9yKHZhciBuPXZvaWQgMD09PXQ/ZS5sZW46ZS5wb3MrdCxvPW5ldyBjLmdvb2dsZS5wcm90b2J1Zi5EZXNjcmlwdG9yUHJvdG8uRXh0ZW5zaW9uUmFuZ2U7ZS5wb3M8bjspe3ZhciByPWUudWludDMyKCk7c3dpdGNoKHI+Pj4zKXtjYXNlIDE6by5zdGFydD1lLmludDMyKCk7YnJlYWs7Y2FzZSAyOm8uZW5kPWUuaW50MzIoKTticmVhaztjYXNlIDM6by5vcHRpb25zPWMuZ29vZ2xlLnByb3RvYnVmLkV4dGVuc2lvblJhbmdlT3B0aW9ucy5kZWNvZGUoZSxlLnVpbnQzMigpKTticmVhaztkZWZhdWx0OmUuc2tpcFR5cGUoNyZyKX19cmV0dXJuIG99LGguZGVjb2RlRGVsaW1pdGVkPWZ1bmN0aW9uKGUpe3JldHVybiBlIGluc3RhbmNlb2Ygc3x8KGU9bmV3IHMoZSkpLHRoaXMuZGVjb2RlKGUsZS51aW50MzIoKSl9LGgudmVyaWZ5PWZ1bmN0aW9uKGUpe2lmKFwib2JqZWN0XCIhPXR5cGVvZiBlfHxudWxsPT09ZSlyZXR1cm5cIm9iamVjdCBleHBlY3RlZFwiO2lmKG51bGwhPWUuc3RhcnQmJmUuaGFzT3duUHJvcGVydHkoXCJzdGFydFwiKSYmIXUuaXNJbnRlZ2VyKGUuc3RhcnQpKXJldHVyblwic3RhcnQ6IGludGVnZXIgZXhwZWN0ZWRcIjtpZihudWxsIT1lLmVuZCYmZS5oYXNPd25Qcm9wZXJ0eShcImVuZFwiKSYmIXUuaXNJbnRlZ2VyKGUuZW5kKSlyZXR1cm5cImVuZDogaW50ZWdlciBleHBlY3RlZFwiO2lmKG51bGwhPWUub3B0aW9ucyYmZS5oYXNPd25Qcm9wZXJ0eShcIm9wdGlvbnNcIikpe2U9Yy5nb29nbGUucHJvdG9idWYuRXh0ZW5zaW9uUmFuZ2VPcHRpb25zLnZlcmlmeShlLm9wdGlvbnMpO2lmKGUpcmV0dXJuXCJvcHRpb25zLlwiK2V9cmV0dXJuIG51bGx9LGguZnJvbU9iamVjdD1mdW5jdGlvbihlKXtpZihlIGluc3RhbmNlb2YgYy5nb29nbGUucHJvdG9idWYuRGVzY3JpcHRvclByb3RvLkV4dGVuc2lvblJhbmdlKXJldHVybiBlO3ZhciB0PW5ldyBjLmdvb2dsZS5wcm90b2J1Zi5EZXNjcmlwdG9yUHJvdG8uRXh0ZW5zaW9uUmFuZ2U7aWYobnVsbCE9ZS5zdGFydCYmKHQuc3RhcnQ9MHxlLnN0YXJ0KSxudWxsIT1lLmVuZCYmKHQuZW5kPTB8ZS5lbmQpLG51bGwhPWUub3B0aW9ucyl7aWYoXCJvYmplY3RcIiE9dHlwZW9mIGUub3B0aW9ucyl0aHJvdyBUeXBlRXJyb3IoXCIuZ29vZ2xlLnByb3RvYnVmLkRlc2NyaXB0b3JQcm90by5FeHRlbnNpb25SYW5nZS5vcHRpb25zOiBvYmplY3QgZXhwZWN0ZWRcIik7dC5vcHRpb25zPWMuZ29vZ2xlLnByb3RvYnVmLkV4dGVuc2lvblJhbmdlT3B0aW9ucy5mcm9tT2JqZWN0KGUub3B0aW9ucyl9cmV0dXJuIHR9LGgudG9PYmplY3Q9ZnVuY3Rpb24oZSx0KXt2YXIgbj17fTtyZXR1cm4odD10fHx7fSkuZGVmYXVsdHMmJihuLnN0YXJ0PTAsbi5lbmQ9MCxuLm9wdGlvbnM9bnVsbCksbnVsbCE9ZS5zdGFydCYmZS5oYXNPd25Qcm9wZXJ0eShcInN0YXJ0XCIpJiYobi5zdGFydD1lLnN0YXJ0KSxudWxsIT1lLmVuZCYmZS5oYXNPd25Qcm9wZXJ0eShcImVuZFwiKSYmKG4uZW5kPWUuZW5kKSxudWxsIT1lLm9wdGlvbnMmJmUuaGFzT3duUHJvcGVydHkoXCJvcHRpb25zXCIpJiYobi5vcHRpb25zPWMuZ29vZ2xlLnByb3RvYnVmLkV4dGVuc2lvblJhbmdlT3B0aW9ucy50b09iamVjdChlLm9wdGlvbnMsdCkpLG59LGgucHJvdG90eXBlLnRvSlNPTj1mdW5jdGlvbigpe3JldHVybiB0aGlzLmNvbnN0cnVjdG9yLnRvT2JqZWN0KHRoaXMsby51dGlsLnRvSlNPTk9wdGlvbnMpfSxoKSx5LlJlc2VydmVkUmFuZ2U9KGIucHJvdG90eXBlLnN0YXJ0PTAsYi5wcm90b3R5cGUuZW5kPTAsYi5jcmVhdGU9ZnVuY3Rpb24oZSl7cmV0dXJuIG5ldyBiKGUpfSxiLmVuY29kZT1mdW5jdGlvbihlLHQpe3JldHVybiB0PXR8fHIuY3JlYXRlKCksbnVsbCE9ZS5zdGFydCYmT2JqZWN0Lmhhc093blByb3BlcnR5LmNhbGwoZSxcInN0YXJ0XCIpJiZ0LnVpbnQzMig4KS5pbnQzMihlLnN0YXJ0KSxudWxsIT1lLmVuZCYmT2JqZWN0Lmhhc093blByb3BlcnR5LmNhbGwoZSxcImVuZFwiKSYmdC51aW50MzIoMTYpLmludDMyKGUuZW5kKSx0fSxiLmVuY29kZURlbGltaXRlZD1mdW5jdGlvbihlLHQpe3JldHVybiB0aGlzLmVuY29kZShlLHQpLmxkZWxpbSgpfSxiLmRlY29kZT1mdW5jdGlvbihlLHQpe2UgaW5zdGFuY2VvZiBzfHwoZT1zLmNyZWF0ZShlKSk7Zm9yKHZhciBuPXZvaWQgMD09PXQ/ZS5sZW46ZS5wb3MrdCxvPW5ldyBjLmdvb2dsZS5wcm90b2J1Zi5EZXNjcmlwdG9yUHJvdG8uUmVzZXJ2ZWRSYW5nZTtlLnBvczxuOyl7dmFyIHI9ZS51aW50MzIoKTtzd2l0Y2gocj4+PjMpe2Nhc2UgMTpvLnN0YXJ0PWUuaW50MzIoKTticmVhaztjYXNlIDI6by5lbmQ9ZS5pbnQzMigpO2JyZWFrO2RlZmF1bHQ6ZS5za2lwVHlwZSg3JnIpfX1yZXR1cm4gb30sYi5kZWNvZGVEZWxpbWl0ZWQ9ZnVuY3Rpb24oZSl7cmV0dXJuIGUgaW5zdGFuY2VvZiBzfHwoZT1uZXcgcyhlKSksdGhpcy5kZWNvZGUoZSxlLnVpbnQzMigpKX0sYi52ZXJpZnk9ZnVuY3Rpb24oZSl7cmV0dXJuXCJvYmplY3RcIiE9dHlwZW9mIGV8fG51bGw9PT1lP1wib2JqZWN0IGV4cGVjdGVkXCI6bnVsbCE9ZS5zdGFydCYmZS5oYXNPd25Qcm9wZXJ0eShcInN0YXJ0XCIpJiYhdS5pc0ludGVnZXIoZS5zdGFydCk/XCJzdGFydDogaW50ZWdlciBleHBlY3RlZFwiOm51bGwhPWUuZW5kJiZlLmhhc093blByb3BlcnR5KFwiZW5kXCIpJiYhdS5pc0ludGVnZXIoZS5lbmQpP1wiZW5kOiBpbnRlZ2VyIGV4cGVjdGVkXCI6bnVsbH0sYi5mcm9tT2JqZWN0PWZ1bmN0aW9uKGUpe3ZhciB0O3JldHVybiBlIGluc3RhbmNlb2YgYy5nb29nbGUucHJvdG9idWYuRGVzY3JpcHRvclByb3RvLlJlc2VydmVkUmFuZ2U/ZToodD1uZXcgYy5nb29nbGUucHJvdG9idWYuRGVzY3JpcHRvclByb3RvLlJlc2VydmVkUmFuZ2UsbnVsbCE9ZS5zdGFydCYmKHQuc3RhcnQ9MHxlLnN0YXJ0KSxudWxsIT1lLmVuZCYmKHQuZW5kPTB8ZS5lbmQpLHQpfSxiLnRvT2JqZWN0PWZ1bmN0aW9uKGUsdCl7dmFyIG49e307cmV0dXJuKHQ9dHx8e30pLmRlZmF1bHRzJiYobi5zdGFydD0wLG4uZW5kPTApLG51bGwhPWUuc3RhcnQmJmUuaGFzT3duUHJvcGVydHkoXCJzdGFydFwiKSYmKG4uc3RhcnQ9ZS5zdGFydCksbnVsbCE9ZS5lbmQmJmUuaGFzT3duUHJvcGVydHkoXCJlbmRcIikmJihuLmVuZD1lLmVuZCksbn0sYi5wcm90b3R5cGUudG9KU09OPWZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMuY29uc3RydWN0b3IudG9PYmplY3QodGhpcyxvLnV0aWwudG9KU09OT3B0aW9ucyl9LGIpLHkpLG4uRXh0ZW5zaW9uUmFuZ2VPcHRpb25zPShVLnByb3RvdHlwZS51bmludGVycHJldGVkT3B0aW9uPXUuZW1wdHlBcnJheSxVLmNyZWF0ZT1mdW5jdGlvbihlKXtyZXR1cm4gbmV3IFUoZSl9LFUuZW5jb2RlPWZ1bmN0aW9uKGUsdCl7aWYodD10fHxyLmNyZWF0ZSgpLG51bGwhPWUudW5pbnRlcnByZXRlZE9wdGlvbiYmZS51bmludGVycHJldGVkT3B0aW9uLmxlbmd0aClmb3IodmFyIG49MDtuPGUudW5pbnRlcnByZXRlZE9wdGlvbi5sZW5ndGg7KytuKWMuZ29vZ2xlLnByb3RvYnVmLlVuaW50ZXJwcmV0ZWRPcHRpb24uZW5jb2RlKGUudW5pbnRlcnByZXRlZE9wdGlvbltuXSx0LnVpbnQzMig3OTk0KS5mb3JrKCkpLmxkZWxpbSgpO3JldHVybiB0fSxVLmVuY29kZURlbGltaXRlZD1mdW5jdGlvbihlLHQpe3JldHVybiB0aGlzLmVuY29kZShlLHQpLmxkZWxpbSgpfSxVLmRlY29kZT1mdW5jdGlvbihlLHQpe2UgaW5zdGFuY2VvZiBzfHwoZT1zLmNyZWF0ZShlKSk7Zm9yKHZhciBuPXZvaWQgMD09PXQ/ZS5sZW46ZS5wb3MrdCxvPW5ldyBjLmdvb2dsZS5wcm90b2J1Zi5FeHRlbnNpb25SYW5nZU9wdGlvbnM7ZS5wb3M8bjspe3ZhciByPWUudWludDMyKCk7cj4+PjM9PTk5OT8oby51bmludGVycHJldGVkT3B0aW9uJiZvLnVuaW50ZXJwcmV0ZWRPcHRpb24ubGVuZ3RofHwoby51bmludGVycHJldGVkT3B0aW9uPVtdKSxvLnVuaW50ZXJwcmV0ZWRPcHRpb24ucHVzaChjLmdvb2dsZS5wcm90b2J1Zi5VbmludGVycHJldGVkT3B0aW9uLmRlY29kZShlLGUudWludDMyKCkpKSk6ZS5za2lwVHlwZSg3JnIpfXJldHVybiBvfSxVLmRlY29kZURlbGltaXRlZD1mdW5jdGlvbihlKXtyZXR1cm4gZSBpbnN0YW5jZW9mIHN8fChlPW5ldyBzKGUpKSx0aGlzLmRlY29kZShlLGUudWludDMyKCkpfSxVLnZlcmlmeT1mdW5jdGlvbihlKXtpZihcIm9iamVjdFwiIT10eXBlb2YgZXx8bnVsbD09PWUpcmV0dXJuXCJvYmplY3QgZXhwZWN0ZWRcIjtpZihudWxsIT1lLnVuaW50ZXJwcmV0ZWRPcHRpb24mJmUuaGFzT3duUHJvcGVydHkoXCJ1bmludGVycHJldGVkT3B0aW9uXCIpKXtpZighQXJyYXkuaXNBcnJheShlLnVuaW50ZXJwcmV0ZWRPcHRpb24pKXJldHVyblwidW5pbnRlcnByZXRlZE9wdGlvbjogYXJyYXkgZXhwZWN0ZWRcIjtmb3IodmFyIHQ9MDt0PGUudW5pbnRlcnByZXRlZE9wdGlvbi5sZW5ndGg7Kyt0KXt2YXIgbj1jLmdvb2dsZS5wcm90b2J1Zi5VbmludGVycHJldGVkT3B0aW9uLnZlcmlmeShlLnVuaW50ZXJwcmV0ZWRPcHRpb25bdF0pO2lmKG4pcmV0dXJuXCJ1bmludGVycHJldGVkT3B0aW9uLlwiK259fXJldHVybiBudWxsfSxVLmZyb21PYmplY3Q9ZnVuY3Rpb24oZSl7aWYoZSBpbnN0YW5jZW9mIGMuZ29vZ2xlLnByb3RvYnVmLkV4dGVuc2lvblJhbmdlT3B0aW9ucylyZXR1cm4gZTt2YXIgdD1uZXcgYy5nb29nbGUucHJvdG9idWYuRXh0ZW5zaW9uUmFuZ2VPcHRpb25zO2lmKGUudW5pbnRlcnByZXRlZE9wdGlvbil7aWYoIUFycmF5LmlzQXJyYXkoZS51bmludGVycHJldGVkT3B0aW9uKSl0aHJvdyBUeXBlRXJyb3IoXCIuZ29vZ2xlLnByb3RvYnVmLkV4dGVuc2lvblJhbmdlT3B0aW9ucy51bmludGVycHJldGVkT3B0aW9uOiBhcnJheSBleHBlY3RlZFwiKTt0LnVuaW50ZXJwcmV0ZWRPcHRpb249W107Zm9yKHZhciBuPTA7bjxlLnVuaW50ZXJwcmV0ZWRPcHRpb24ubGVuZ3RoOysrbil7aWYoXCJvYmplY3RcIiE9dHlwZW9mIGUudW5pbnRlcnByZXRlZE9wdGlvbltuXSl0aHJvdyBUeXBlRXJyb3IoXCIuZ29vZ2xlLnByb3RvYnVmLkV4dGVuc2lvblJhbmdlT3B0aW9ucy51bmludGVycHJldGVkT3B0aW9uOiBvYmplY3QgZXhwZWN0ZWRcIik7dC51bmludGVycHJldGVkT3B0aW9uW25dPWMuZ29vZ2xlLnByb3RvYnVmLlVuaW50ZXJwcmV0ZWRPcHRpb24uZnJvbU9iamVjdChlLnVuaW50ZXJwcmV0ZWRPcHRpb25bbl0pfX1yZXR1cm4gdH0sVS50b09iamVjdD1mdW5jdGlvbihlLHQpe3ZhciBuPXt9O2lmKCgodD10fHx7fSkuYXJyYXlzfHx0LmRlZmF1bHRzKSYmKG4udW5pbnRlcnByZXRlZE9wdGlvbj1bXSksZS51bmludGVycHJldGVkT3B0aW9uJiZlLnVuaW50ZXJwcmV0ZWRPcHRpb24ubGVuZ3RoKXtuLnVuaW50ZXJwcmV0ZWRPcHRpb249W107Zm9yKHZhciBvPTA7bzxlLnVuaW50ZXJwcmV0ZWRPcHRpb24ubGVuZ3RoOysrbyluLnVuaW50ZXJwcmV0ZWRPcHRpb25bb109Yy5nb29nbGUucHJvdG9idWYuVW5pbnRlcnByZXRlZE9wdGlvbi50b09iamVjdChlLnVuaW50ZXJwcmV0ZWRPcHRpb25bb10sdCl9cmV0dXJuIG59LFUucHJvdG90eXBlLnRvSlNPTj1mdW5jdGlvbigpe3JldHVybiB0aGlzLmNvbnN0cnVjdG9yLnRvT2JqZWN0KHRoaXMsby51dGlsLnRvSlNPTk9wdGlvbnMpfSxVKSxuLkZpZWxkRGVzY3JpcHRvclByb3RvPShPLnByb3RvdHlwZS5uYW1lPVwiXCIsTy5wcm90b3R5cGUubnVtYmVyPTAsTy5wcm90b3R5cGUubGFiZWw9MSxPLnByb3RvdHlwZS50eXBlPTEsTy5wcm90b3R5cGUudHlwZU5hbWU9XCJcIixPLnByb3RvdHlwZS5leHRlbmRlZT1cIlwiLE8ucHJvdG90eXBlLmRlZmF1bHRWYWx1ZT1cIlwiLE8ucHJvdG90eXBlLm9uZW9mSW5kZXg9MCxPLnByb3RvdHlwZS5qc29uTmFtZT1cIlwiLE8ucHJvdG90eXBlLm9wdGlvbnM9bnVsbCxPLnByb3RvdHlwZS5wcm90bzNPcHRpb25hbD0hMSxPLmNyZWF0ZT1mdW5jdGlvbihlKXtyZXR1cm4gbmV3IE8oZSl9LE8uZW5jb2RlPWZ1bmN0aW9uKGUsdCl7cmV0dXJuIHQ9dHx8ci5jcmVhdGUoKSxudWxsIT1lLm5hbWUmJk9iamVjdC5oYXNPd25Qcm9wZXJ0eS5jYWxsKGUsXCJuYW1lXCIpJiZ0LnVpbnQzMigxMCkuc3RyaW5nKGUubmFtZSksbnVsbCE9ZS5leHRlbmRlZSYmT2JqZWN0Lmhhc093blByb3BlcnR5LmNhbGwoZSxcImV4dGVuZGVlXCIpJiZ0LnVpbnQzMigxOCkuc3RyaW5nKGUuZXh0ZW5kZWUpLG51bGwhPWUubnVtYmVyJiZPYmplY3QuaGFzT3duUHJvcGVydHkuY2FsbChlLFwibnVtYmVyXCIpJiZ0LnVpbnQzMigyNCkuaW50MzIoZS5udW1iZXIpLG51bGwhPWUubGFiZWwmJk9iamVjdC5oYXNPd25Qcm9wZXJ0eS5jYWxsKGUsXCJsYWJlbFwiKSYmdC51aW50MzIoMzIpLmludDMyKGUubGFiZWwpLG51bGwhPWUudHlwZSYmT2JqZWN0Lmhhc093blByb3BlcnR5LmNhbGwoZSxcInR5cGVcIikmJnQudWludDMyKDQwKS5pbnQzMihlLnR5cGUpLG51bGwhPWUudHlwZU5hbWUmJk9iamVjdC5oYXNPd25Qcm9wZXJ0eS5jYWxsKGUsXCJ0eXBlTmFtZVwiKSYmdC51aW50MzIoNTApLnN0cmluZyhlLnR5cGVOYW1lKSxudWxsIT1lLmRlZmF1bHRWYWx1ZSYmT2JqZWN0Lmhhc093blByb3BlcnR5LmNhbGwoZSxcImRlZmF1bHRWYWx1ZVwiKSYmdC51aW50MzIoNTgpLnN0cmluZyhlLmRlZmF1bHRWYWx1ZSksbnVsbCE9ZS5vcHRpb25zJiZPYmplY3QuaGFzT3duUHJvcGVydHkuY2FsbChlLFwib3B0aW9uc1wiKSYmYy5nb29nbGUucHJvdG9idWYuRmllbGRPcHRpb25zLmVuY29kZShlLm9wdGlvbnMsdC51aW50MzIoNjYpLmZvcmsoKSkubGRlbGltKCksbnVsbCE9ZS5vbmVvZkluZGV4JiZPYmplY3QuaGFzT3duUHJvcGVydHkuY2FsbChlLFwib25lb2ZJbmRleFwiKSYmdC51aW50MzIoNzIpLmludDMyKGUub25lb2ZJbmRleCksbnVsbCE9ZS5qc29uTmFtZSYmT2JqZWN0Lmhhc093blByb3BlcnR5LmNhbGwoZSxcImpzb25OYW1lXCIpJiZ0LnVpbnQzMig4Mikuc3RyaW5nKGUuanNvbk5hbWUpLG51bGwhPWUucHJvdG8zT3B0aW9uYWwmJk9iamVjdC5oYXNPd25Qcm9wZXJ0eS5jYWxsKGUsXCJwcm90bzNPcHRpb25hbFwiKSYmdC51aW50MzIoMTM2KS5ib29sKGUucHJvdG8zT3B0aW9uYWwpLHR9LE8uZW5jb2RlRGVsaW1pdGVkPWZ1bmN0aW9uKGUsdCl7cmV0dXJuIHRoaXMuZW5jb2RlKGUsdCkubGRlbGltKCl9LE8uZGVjb2RlPWZ1bmN0aW9uKGUsdCl7ZSBpbnN0YW5jZW9mIHN8fChlPXMuY3JlYXRlKGUpKTtmb3IodmFyIG49dm9pZCAwPT09dD9lLmxlbjplLnBvcyt0LG89bmV3IGMuZ29vZ2xlLnByb3RvYnVmLkZpZWxkRGVzY3JpcHRvclByb3RvO2UucG9zPG47KXt2YXIgcj1lLnVpbnQzMigpO3N3aXRjaChyPj4+Myl7Y2FzZSAxOm8ubmFtZT1lLnN0cmluZygpO2JyZWFrO2Nhc2UgMzpvLm51bWJlcj1lLmludDMyKCk7YnJlYWs7Y2FzZSA0Om8ubGFiZWw9ZS5pbnQzMigpO2JyZWFrO2Nhc2UgNTpvLnR5cGU9ZS5pbnQzMigpO2JyZWFrO2Nhc2UgNjpvLnR5cGVOYW1lPWUuc3RyaW5nKCk7YnJlYWs7Y2FzZSAyOm8uZXh0ZW5kZWU9ZS5zdHJpbmcoKTticmVhaztjYXNlIDc6by5kZWZhdWx0VmFsdWU9ZS5zdHJpbmcoKTticmVhaztjYXNlIDk6by5vbmVvZkluZGV4PWUuaW50MzIoKTticmVhaztjYXNlIDEwOm8uanNvbk5hbWU9ZS5zdHJpbmcoKTticmVhaztjYXNlIDg6by5vcHRpb25zPWMuZ29vZ2xlLnByb3RvYnVmLkZpZWxkT3B0aW9ucy5kZWNvZGUoZSxlLnVpbnQzMigpKTticmVhaztjYXNlIDE3Om8ucHJvdG8zT3B0aW9uYWw9ZS5ib29sKCk7YnJlYWs7ZGVmYXVsdDplLnNraXBUeXBlKDcmcil9fXJldHVybiBvfSxPLmRlY29kZURlbGltaXRlZD1mdW5jdGlvbihlKXtyZXR1cm4gZSBpbnN0YW5jZW9mIHN8fChlPW5ldyBzKGUpKSx0aGlzLmRlY29kZShlLGUudWludDMyKCkpfSxPLnZlcmlmeT1mdW5jdGlvbihlKXtpZihcIm9iamVjdFwiIT10eXBlb2YgZXx8bnVsbD09PWUpcmV0dXJuXCJvYmplY3QgZXhwZWN0ZWRcIjtpZihudWxsIT1lLm5hbWUmJmUuaGFzT3duUHJvcGVydHkoXCJuYW1lXCIpJiYhdS5pc1N0cmluZyhlLm5hbWUpKXJldHVyblwibmFtZTogc3RyaW5nIGV4cGVjdGVkXCI7aWYobnVsbCE9ZS5udW1iZXImJmUuaGFzT3duUHJvcGVydHkoXCJudW1iZXJcIikmJiF1LmlzSW50ZWdlcihlLm51bWJlcikpcmV0dXJuXCJudW1iZXI6IGludGVnZXIgZXhwZWN0ZWRcIjtpZihudWxsIT1lLmxhYmVsJiZlLmhhc093blByb3BlcnR5KFwibGFiZWxcIikpc3dpdGNoKGUubGFiZWwpe2RlZmF1bHQ6cmV0dXJuXCJsYWJlbDogZW51bSB2YWx1ZSBleHBlY3RlZFwiO2Nhc2UgMTpjYXNlIDI6Y2FzZSAzOn1pZihudWxsIT1lLnR5cGUmJmUuaGFzT3duUHJvcGVydHkoXCJ0eXBlXCIpKXN3aXRjaChlLnR5cGUpe2RlZmF1bHQ6cmV0dXJuXCJ0eXBlOiBlbnVtIHZhbHVlIGV4cGVjdGVkXCI7Y2FzZSAxOmNhc2UgMjpjYXNlIDM6Y2FzZSA0OmNhc2UgNTpjYXNlIDY6Y2FzZSA3OmNhc2UgODpjYXNlIDk6Y2FzZSAxMDpjYXNlIDExOmNhc2UgMTI6Y2FzZSAxMzpjYXNlIDE0OmNhc2UgMTU6Y2FzZSAxNjpjYXNlIDE3OmNhc2UgMTg6fWlmKG51bGwhPWUudHlwZU5hbWUmJmUuaGFzT3duUHJvcGVydHkoXCJ0eXBlTmFtZVwiKSYmIXUuaXNTdHJpbmcoZS50eXBlTmFtZSkpcmV0dXJuXCJ0eXBlTmFtZTogc3RyaW5nIGV4cGVjdGVkXCI7aWYobnVsbCE9ZS5leHRlbmRlZSYmZS5oYXNPd25Qcm9wZXJ0eShcImV4dGVuZGVlXCIpJiYhdS5pc1N0cmluZyhlLmV4dGVuZGVlKSlyZXR1cm5cImV4dGVuZGVlOiBzdHJpbmcgZXhwZWN0ZWRcIjtpZihudWxsIT1lLmRlZmF1bHRWYWx1ZSYmZS5oYXNPd25Qcm9wZXJ0eShcImRlZmF1bHRWYWx1ZVwiKSYmIXUuaXNTdHJpbmcoZS5kZWZhdWx0VmFsdWUpKXJldHVyblwiZGVmYXVsdFZhbHVlOiBzdHJpbmcgZXhwZWN0ZWRcIjtpZihudWxsIT1lLm9uZW9mSW5kZXgmJmUuaGFzT3duUHJvcGVydHkoXCJvbmVvZkluZGV4XCIpJiYhdS5pc0ludGVnZXIoZS5vbmVvZkluZGV4KSlyZXR1cm5cIm9uZW9mSW5kZXg6IGludGVnZXIgZXhwZWN0ZWRcIjtpZihudWxsIT1lLmpzb25OYW1lJiZlLmhhc093blByb3BlcnR5KFwianNvbk5hbWVcIikmJiF1LmlzU3RyaW5nKGUuanNvbk5hbWUpKXJldHVyblwianNvbk5hbWU6IHN0cmluZyBleHBlY3RlZFwiO2lmKG51bGwhPWUub3B0aW9ucyYmZS5oYXNPd25Qcm9wZXJ0eShcIm9wdGlvbnNcIikpe3ZhciB0PWMuZ29vZ2xlLnByb3RvYnVmLkZpZWxkT3B0aW9ucy52ZXJpZnkoZS5vcHRpb25zKTtpZih0KXJldHVyblwib3B0aW9ucy5cIit0fXJldHVybiBudWxsIT1lLnByb3RvM09wdGlvbmFsJiZlLmhhc093blByb3BlcnR5KFwicHJvdG8zT3B0aW9uYWxcIikmJlwiYm9vbGVhblwiIT10eXBlb2YgZS5wcm90bzNPcHRpb25hbD9cInByb3RvM09wdGlvbmFsOiBib29sZWFuIGV4cGVjdGVkXCI6bnVsbH0sTy5mcm9tT2JqZWN0PWZ1bmN0aW9uKGUpe2lmKGUgaW5zdGFuY2VvZiBjLmdvb2dsZS5wcm90b2J1Zi5GaWVsZERlc2NyaXB0b3JQcm90bylyZXR1cm4gZTt2YXIgdD1uZXcgYy5nb29nbGUucHJvdG9idWYuRmllbGREZXNjcmlwdG9yUHJvdG87c3dpdGNoKG51bGwhPWUubmFtZSYmKHQubmFtZT1TdHJpbmcoZS5uYW1lKSksbnVsbCE9ZS5udW1iZXImJih0Lm51bWJlcj0wfGUubnVtYmVyKSxlLmxhYmVsKXtjYXNlXCJMQUJFTF9PUFRJT05BTFwiOmNhc2UgMTp0LmxhYmVsPTE7YnJlYWs7Y2FzZVwiTEFCRUxfUkVRVUlSRURcIjpjYXNlIDI6dC5sYWJlbD0yO2JyZWFrO2Nhc2VcIkxBQkVMX1JFUEVBVEVEXCI6Y2FzZSAzOnQubGFiZWw9M31zd2l0Y2goZS50eXBlKXtjYXNlXCJUWVBFX0RPVUJMRVwiOmNhc2UgMTp0LnR5cGU9MTticmVhaztjYXNlXCJUWVBFX0ZMT0FUXCI6Y2FzZSAyOnQudHlwZT0yO2JyZWFrO2Nhc2VcIlRZUEVfSU5UNjRcIjpjYXNlIDM6dC50eXBlPTM7YnJlYWs7Y2FzZVwiVFlQRV9VSU5UNjRcIjpjYXNlIDQ6dC50eXBlPTQ7YnJlYWs7Y2FzZVwiVFlQRV9JTlQzMlwiOmNhc2UgNTp0LnR5cGU9NTticmVhaztjYXNlXCJUWVBFX0ZJWEVENjRcIjpjYXNlIDY6dC50eXBlPTY7YnJlYWs7Y2FzZVwiVFlQRV9GSVhFRDMyXCI6Y2FzZSA3OnQudHlwZT03O2JyZWFrO2Nhc2VcIlRZUEVfQk9PTFwiOmNhc2UgODp0LnR5cGU9ODticmVhaztjYXNlXCJUWVBFX1NUUklOR1wiOmNhc2UgOTp0LnR5cGU9OTticmVhaztjYXNlXCJUWVBFX0dST1VQXCI6Y2FzZSAxMDp0LnR5cGU9MTA7YnJlYWs7Y2FzZVwiVFlQRV9NRVNTQUdFXCI6Y2FzZSAxMTp0LnR5cGU9MTE7YnJlYWs7Y2FzZVwiVFlQRV9CWVRFU1wiOmNhc2UgMTI6dC50eXBlPTEyO2JyZWFrO2Nhc2VcIlRZUEVfVUlOVDMyXCI6Y2FzZSAxMzp0LnR5cGU9MTM7YnJlYWs7Y2FzZVwiVFlQRV9FTlVNXCI6Y2FzZSAxNDp0LnR5cGU9MTQ7YnJlYWs7Y2FzZVwiVFlQRV9TRklYRUQzMlwiOmNhc2UgMTU6dC50eXBlPTE1O2JyZWFrO2Nhc2VcIlRZUEVfU0ZJWEVENjRcIjpjYXNlIDE2OnQudHlwZT0xNjticmVhaztjYXNlXCJUWVBFX1NJTlQzMlwiOmNhc2UgMTc6dC50eXBlPTE3O2JyZWFrO2Nhc2VcIlRZUEVfU0lOVDY0XCI6Y2FzZSAxODp0LnR5cGU9MTh9aWYobnVsbCE9ZS50eXBlTmFtZSYmKHQudHlwZU5hbWU9U3RyaW5nKGUudHlwZU5hbWUpKSxudWxsIT1lLmV4dGVuZGVlJiYodC5leHRlbmRlZT1TdHJpbmcoZS5leHRlbmRlZSkpLG51bGwhPWUuZGVmYXVsdFZhbHVlJiYodC5kZWZhdWx0VmFsdWU9U3RyaW5nKGUuZGVmYXVsdFZhbHVlKSksbnVsbCE9ZS5vbmVvZkluZGV4JiYodC5vbmVvZkluZGV4PTB8ZS5vbmVvZkluZGV4KSxudWxsIT1lLmpzb25OYW1lJiYodC5qc29uTmFtZT1TdHJpbmcoZS5qc29uTmFtZSkpLG51bGwhPWUub3B0aW9ucyl7aWYoXCJvYmplY3RcIiE9dHlwZW9mIGUub3B0aW9ucyl0aHJvdyBUeXBlRXJyb3IoXCIuZ29vZ2xlLnByb3RvYnVmLkZpZWxkRGVzY3JpcHRvclByb3RvLm9wdGlvbnM6IG9iamVjdCBleHBlY3RlZFwiKTt0Lm9wdGlvbnM9Yy5nb29nbGUucHJvdG9idWYuRmllbGRPcHRpb25zLmZyb21PYmplY3QoZS5vcHRpb25zKX1yZXR1cm4gbnVsbCE9ZS5wcm90bzNPcHRpb25hbCYmKHQucHJvdG8zT3B0aW9uYWw9Qm9vbGVhbihlLnByb3RvM09wdGlvbmFsKSksdH0sTy50b09iamVjdD1mdW5jdGlvbihlLHQpe3ZhciBuPXt9O3JldHVybih0PXR8fHt9KS5kZWZhdWx0cyYmKG4ubmFtZT1cIlwiLG4uZXh0ZW5kZWU9XCJcIixuLm51bWJlcj0wLG4ubGFiZWw9dC5lbnVtcz09PVN0cmluZz9cIkxBQkVMX09QVElPTkFMXCI6MSxuLnR5cGU9dC5lbnVtcz09PVN0cmluZz9cIlRZUEVfRE9VQkxFXCI6MSxuLnR5cGVOYW1lPVwiXCIsbi5kZWZhdWx0VmFsdWU9XCJcIixuLm9wdGlvbnM9bnVsbCxuLm9uZW9mSW5kZXg9MCxuLmpzb25OYW1lPVwiXCIsbi5wcm90bzNPcHRpb25hbD0hMSksbnVsbCE9ZS5uYW1lJiZlLmhhc093blByb3BlcnR5KFwibmFtZVwiKSYmKG4ubmFtZT1lLm5hbWUpLG51bGwhPWUuZXh0ZW5kZWUmJmUuaGFzT3duUHJvcGVydHkoXCJleHRlbmRlZVwiKSYmKG4uZXh0ZW5kZWU9ZS5leHRlbmRlZSksbnVsbCE9ZS5udW1iZXImJmUuaGFzT3duUHJvcGVydHkoXCJudW1iZXJcIikmJihuLm51bWJlcj1lLm51bWJlciksbnVsbCE9ZS5sYWJlbCYmZS5oYXNPd25Qcm9wZXJ0eShcImxhYmVsXCIpJiYobi5sYWJlbD10LmVudW1zPT09U3RyaW5nP2MuZ29vZ2xlLnByb3RvYnVmLkZpZWxkRGVzY3JpcHRvclByb3RvLkxhYmVsW2UubGFiZWxdOmUubGFiZWwpLG51bGwhPWUudHlwZSYmZS5oYXNPd25Qcm9wZXJ0eShcInR5cGVcIikmJihuLnR5cGU9dC5lbnVtcz09PVN0cmluZz9jLmdvb2dsZS5wcm90b2J1Zi5GaWVsZERlc2NyaXB0b3JQcm90by5UeXBlW2UudHlwZV06ZS50eXBlKSxudWxsIT1lLnR5cGVOYW1lJiZlLmhhc093blByb3BlcnR5KFwidHlwZU5hbWVcIikmJihuLnR5cGVOYW1lPWUudHlwZU5hbWUpLG51bGwhPWUuZGVmYXVsdFZhbHVlJiZlLmhhc093blByb3BlcnR5KFwiZGVmYXVsdFZhbHVlXCIpJiYobi5kZWZhdWx0VmFsdWU9ZS5kZWZhdWx0VmFsdWUpLG51bGwhPWUub3B0aW9ucyYmZS5oYXNPd25Qcm9wZXJ0eShcIm9wdGlvbnNcIikmJihuLm9wdGlvbnM9Yy5nb29nbGUucHJvdG9idWYuRmllbGRPcHRpb25zLnRvT2JqZWN0KGUub3B0aW9ucyx0KSksbnVsbCE9ZS5vbmVvZkluZGV4JiZlLmhhc093blByb3BlcnR5KFwib25lb2ZJbmRleFwiKSYmKG4ub25lb2ZJbmRleD1lLm9uZW9mSW5kZXgpLG51bGwhPWUuanNvbk5hbWUmJmUuaGFzT3duUHJvcGVydHkoXCJqc29uTmFtZVwiKSYmKG4uanNvbk5hbWU9ZS5qc29uTmFtZSksbnVsbCE9ZS5wcm90bzNPcHRpb25hbCYmZS5oYXNPd25Qcm9wZXJ0eShcInByb3RvM09wdGlvbmFsXCIpJiYobi5wcm90bzNPcHRpb25hbD1lLnByb3RvM09wdGlvbmFsKSxufSxPLnByb3RvdHlwZS50b0pTT049ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5jb25zdHJ1Y3Rvci50b09iamVjdCh0aGlzLG8udXRpbC50b0pTT05PcHRpb25zKX0sTy5UeXBlPShlPXt9LCh0PU9iamVjdC5jcmVhdGUoZSkpW2VbMV09XCJUWVBFX0RPVUJMRVwiXT0xLHRbZVsyXT1cIlRZUEVfRkxPQVRcIl09Mix0W2VbM109XCJUWVBFX0lOVDY0XCJdPTMsdFtlWzRdPVwiVFlQRV9VSU5UNjRcIl09NCx0W2VbNV09XCJUWVBFX0lOVDMyXCJdPTUsdFtlWzZdPVwiVFlQRV9GSVhFRDY0XCJdPTYsdFtlWzddPVwiVFlQRV9GSVhFRDMyXCJdPTcsdFtlWzhdPVwiVFlQRV9CT09MXCJdPTgsdFtlWzldPVwiVFlQRV9TVFJJTkdcIl09OSx0W2VbMTBdPVwiVFlQRV9HUk9VUFwiXT0xMCx0W2VbMTFdPVwiVFlQRV9NRVNTQUdFXCJdPTExLHRbZVsxMl09XCJUWVBFX0JZVEVTXCJdPTEyLHRbZVsxM109XCJUWVBFX1VJTlQzMlwiXT0xMyx0W2VbMTRdPVwiVFlQRV9FTlVNXCJdPTE0LHRbZVsxNV09XCJUWVBFX1NGSVhFRDMyXCJdPTE1LHRbZVsxNl09XCJUWVBFX1NGSVhFRDY0XCJdPTE2LHRbZVsxN109XCJUWVBFX1NJTlQzMlwiXT0xNyx0W2VbMThdPVwiVFlQRV9TSU5UNjRcIl09MTgsdCksTy5MYWJlbD0oZT17fSwodD1PYmplY3QuY3JlYXRlKGUpKVtlWzFdPVwiTEFCRUxfT1BUSU9OQUxcIl09MSx0W2VbMl09XCJMQUJFTF9SRVFVSVJFRFwiXT0yLHRbZVszXT1cIkxBQkVMX1JFUEVBVEVEXCJdPTMsdCksTyksbi5PbmVvZkRlc2NyaXB0b3JQcm90bz0obS5wcm90b3R5cGUubmFtZT1cIlwiLG0ucHJvdG90eXBlLm9wdGlvbnM9bnVsbCxtLmNyZWF0ZT1mdW5jdGlvbihlKXtyZXR1cm4gbmV3IG0oZSl9LG0uZW5jb2RlPWZ1bmN0aW9uKGUsdCl7cmV0dXJuIHQ9dHx8ci5jcmVhdGUoKSxudWxsIT1lLm5hbWUmJk9iamVjdC5oYXNPd25Qcm9wZXJ0eS5jYWxsKGUsXCJuYW1lXCIpJiZ0LnVpbnQzMigxMCkuc3RyaW5nKGUubmFtZSksbnVsbCE9ZS5vcHRpb25zJiZPYmplY3QuaGFzT3duUHJvcGVydHkuY2FsbChlLFwib3B0aW9uc1wiKSYmYy5nb29nbGUucHJvdG9idWYuT25lb2ZPcHRpb25zLmVuY29kZShlLm9wdGlvbnMsdC51aW50MzIoMTgpLmZvcmsoKSkubGRlbGltKCksdH0sbS5lbmNvZGVEZWxpbWl0ZWQ9ZnVuY3Rpb24oZSx0KXtyZXR1cm4gdGhpcy5lbmNvZGUoZSx0KS5sZGVsaW0oKX0sbS5kZWNvZGU9ZnVuY3Rpb24oZSx0KXtlIGluc3RhbmNlb2Ygc3x8KGU9cy5jcmVhdGUoZSkpO2Zvcih2YXIgbj12b2lkIDA9PT10P2UubGVuOmUucG9zK3Qsbz1uZXcgYy5nb29nbGUucHJvdG9idWYuT25lb2ZEZXNjcmlwdG9yUHJvdG87ZS5wb3M8bjspe3ZhciByPWUudWludDMyKCk7c3dpdGNoKHI+Pj4zKXtjYXNlIDE6by5uYW1lPWUuc3RyaW5nKCk7YnJlYWs7Y2FzZSAyOm8ub3B0aW9ucz1jLmdvb2dsZS5wcm90b2J1Zi5PbmVvZk9wdGlvbnMuZGVjb2RlKGUsZS51aW50MzIoKSk7YnJlYWs7ZGVmYXVsdDplLnNraXBUeXBlKDcmcil9fXJldHVybiBvfSxtLmRlY29kZURlbGltaXRlZD1mdW5jdGlvbihlKXtyZXR1cm4gZSBpbnN0YW5jZW9mIHN8fChlPW5ldyBzKGUpKSx0aGlzLmRlY29kZShlLGUudWludDMyKCkpfSxtLnZlcmlmeT1mdW5jdGlvbihlKXtpZihcIm9iamVjdFwiIT10eXBlb2YgZXx8bnVsbD09PWUpcmV0dXJuXCJvYmplY3QgZXhwZWN0ZWRcIjtpZihudWxsIT1lLm5hbWUmJmUuaGFzT3duUHJvcGVydHkoXCJuYW1lXCIpJiYhdS5pc1N0cmluZyhlLm5hbWUpKXJldHVyblwibmFtZTogc3RyaW5nIGV4cGVjdGVkXCI7aWYobnVsbCE9ZS5vcHRpb25zJiZlLmhhc093blByb3BlcnR5KFwib3B0aW9uc1wiKSl7ZT1jLmdvb2dsZS5wcm90b2J1Zi5PbmVvZk9wdGlvbnMudmVyaWZ5KGUub3B0aW9ucyk7aWYoZSlyZXR1cm5cIm9wdGlvbnMuXCIrZX1yZXR1cm4gbnVsbH0sbS5mcm9tT2JqZWN0PWZ1bmN0aW9uKGUpe2lmKGUgaW5zdGFuY2VvZiBjLmdvb2dsZS5wcm90b2J1Zi5PbmVvZkRlc2NyaXB0b3JQcm90bylyZXR1cm4gZTt2YXIgdD1uZXcgYy5nb29nbGUucHJvdG9idWYuT25lb2ZEZXNjcmlwdG9yUHJvdG87aWYobnVsbCE9ZS5uYW1lJiYodC5uYW1lPVN0cmluZyhlLm5hbWUpKSxudWxsIT1lLm9wdGlvbnMpe2lmKFwib2JqZWN0XCIhPXR5cGVvZiBlLm9wdGlvbnMpdGhyb3cgVHlwZUVycm9yKFwiLmdvb2dsZS5wcm90b2J1Zi5PbmVvZkRlc2NyaXB0b3JQcm90by5vcHRpb25zOiBvYmplY3QgZXhwZWN0ZWRcIik7dC5vcHRpb25zPWMuZ29vZ2xlLnByb3RvYnVmLk9uZW9mT3B0aW9ucy5mcm9tT2JqZWN0KGUub3B0aW9ucyl9cmV0dXJuIHR9LG0udG9PYmplY3Q9ZnVuY3Rpb24oZSx0KXt2YXIgbj17fTtyZXR1cm4odD10fHx7fSkuZGVmYXVsdHMmJihuLm5hbWU9XCJcIixuLm9wdGlvbnM9bnVsbCksbnVsbCE9ZS5uYW1lJiZlLmhhc093blByb3BlcnR5KFwibmFtZVwiKSYmKG4ubmFtZT1lLm5hbWUpLG51bGwhPWUub3B0aW9ucyYmZS5oYXNPd25Qcm9wZXJ0eShcIm9wdGlvbnNcIikmJihuLm9wdGlvbnM9Yy5nb29nbGUucHJvdG9idWYuT25lb2ZPcHRpb25zLnRvT2JqZWN0KGUub3B0aW9ucyx0KSksbn0sbS5wcm90b3R5cGUudG9KU09OPWZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMuY29uc3RydWN0b3IudG9PYmplY3QodGhpcyxvLnV0aWwudG9KU09OT3B0aW9ucyl9LG0pLG4uRW51bURlc2NyaXB0b3JQcm90bz0odi5wcm90b3R5cGUubmFtZT1cIlwiLHYucHJvdG90eXBlLnZhbHVlPXUuZW1wdHlBcnJheSx2LnByb3RvdHlwZS5vcHRpb25zPW51bGwsdi5wcm90b3R5cGUucmVzZXJ2ZWRSYW5nZT11LmVtcHR5QXJyYXksdi5wcm90b3R5cGUucmVzZXJ2ZWROYW1lPXUuZW1wdHlBcnJheSx2LmNyZWF0ZT1mdW5jdGlvbihlKXtyZXR1cm4gbmV3IHYoZSl9LHYuZW5jb2RlPWZ1bmN0aW9uKGUsdCl7aWYodD10fHxyLmNyZWF0ZSgpLG51bGwhPWUubmFtZSYmT2JqZWN0Lmhhc093blByb3BlcnR5LmNhbGwoZSxcIm5hbWVcIikmJnQudWludDMyKDEwKS5zdHJpbmcoZS5uYW1lKSxudWxsIT1lLnZhbHVlJiZlLnZhbHVlLmxlbmd0aClmb3IodmFyIG49MDtuPGUudmFsdWUubGVuZ3RoOysrbiljLmdvb2dsZS5wcm90b2J1Zi5FbnVtVmFsdWVEZXNjcmlwdG9yUHJvdG8uZW5jb2RlKGUudmFsdWVbbl0sdC51aW50MzIoMTgpLmZvcmsoKSkubGRlbGltKCk7aWYobnVsbCE9ZS5vcHRpb25zJiZPYmplY3QuaGFzT3duUHJvcGVydHkuY2FsbChlLFwib3B0aW9uc1wiKSYmYy5nb29nbGUucHJvdG9idWYuRW51bU9wdGlvbnMuZW5jb2RlKGUub3B0aW9ucyx0LnVpbnQzMigyNikuZm9yaygpKS5sZGVsaW0oKSxudWxsIT1lLnJlc2VydmVkUmFuZ2UmJmUucmVzZXJ2ZWRSYW5nZS5sZW5ndGgpZm9yKG49MDtuPGUucmVzZXJ2ZWRSYW5nZS5sZW5ndGg7KytuKWMuZ29vZ2xlLnByb3RvYnVmLkVudW1EZXNjcmlwdG9yUHJvdG8uRW51bVJlc2VydmVkUmFuZ2UuZW5jb2RlKGUucmVzZXJ2ZWRSYW5nZVtuXSx0LnVpbnQzMigzNCkuZm9yaygpKS5sZGVsaW0oKTtpZihudWxsIT1lLnJlc2VydmVkTmFtZSYmZS5yZXNlcnZlZE5hbWUubGVuZ3RoKWZvcihuPTA7bjxlLnJlc2VydmVkTmFtZS5sZW5ndGg7KytuKXQudWludDMyKDQyKS5zdHJpbmcoZS5yZXNlcnZlZE5hbWVbbl0pO3JldHVybiB0fSx2LmVuY29kZURlbGltaXRlZD1mdW5jdGlvbihlLHQpe3JldHVybiB0aGlzLmVuY29kZShlLHQpLmxkZWxpbSgpfSx2LmRlY29kZT1mdW5jdGlvbihlLHQpe2UgaW5zdGFuY2VvZiBzfHwoZT1zLmNyZWF0ZShlKSk7Zm9yKHZhciBuPXZvaWQgMD09PXQ/ZS5sZW46ZS5wb3MrdCxvPW5ldyBjLmdvb2dsZS5wcm90b2J1Zi5FbnVtRGVzY3JpcHRvclByb3RvO2UucG9zPG47KXt2YXIgcj1lLnVpbnQzMigpO3N3aXRjaChyPj4+Myl7Y2FzZSAxOm8ubmFtZT1lLnN0cmluZygpO2JyZWFrO2Nhc2UgMjpvLnZhbHVlJiZvLnZhbHVlLmxlbmd0aHx8KG8udmFsdWU9W10pLG8udmFsdWUucHVzaChjLmdvb2dsZS5wcm90b2J1Zi5FbnVtVmFsdWVEZXNjcmlwdG9yUHJvdG8uZGVjb2RlKGUsZS51aW50MzIoKSkpO2JyZWFrO2Nhc2UgMzpvLm9wdGlvbnM9Yy5nb29nbGUucHJvdG9idWYuRW51bU9wdGlvbnMuZGVjb2RlKGUsZS51aW50MzIoKSk7YnJlYWs7Y2FzZSA0Om8ucmVzZXJ2ZWRSYW5nZSYmby5yZXNlcnZlZFJhbmdlLmxlbmd0aHx8KG8ucmVzZXJ2ZWRSYW5nZT1bXSksby5yZXNlcnZlZFJhbmdlLnB1c2goYy5nb29nbGUucHJvdG9idWYuRW51bURlc2NyaXB0b3JQcm90by5FbnVtUmVzZXJ2ZWRSYW5nZS5kZWNvZGUoZSxlLnVpbnQzMigpKSk7YnJlYWs7Y2FzZSA1Om8ucmVzZXJ2ZWROYW1lJiZvLnJlc2VydmVkTmFtZS5sZW5ndGh8fChvLnJlc2VydmVkTmFtZT1bXSksby5yZXNlcnZlZE5hbWUucHVzaChlLnN0cmluZygpKTticmVhaztkZWZhdWx0OmUuc2tpcFR5cGUoNyZyKX19cmV0dXJuIG99LHYuZGVjb2RlRGVsaW1pdGVkPWZ1bmN0aW9uKGUpe3JldHVybiBlIGluc3RhbmNlb2Ygc3x8KGU9bmV3IHMoZSkpLHRoaXMuZGVjb2RlKGUsZS51aW50MzIoKSl9LHYudmVyaWZ5PWZ1bmN0aW9uKGUpe2lmKFwib2JqZWN0XCIhPXR5cGVvZiBlfHxudWxsPT09ZSlyZXR1cm5cIm9iamVjdCBleHBlY3RlZFwiO2lmKG51bGwhPWUubmFtZSYmZS5oYXNPd25Qcm9wZXJ0eShcIm5hbWVcIikmJiF1LmlzU3RyaW5nKGUubmFtZSkpcmV0dXJuXCJuYW1lOiBzdHJpbmcgZXhwZWN0ZWRcIjtpZihudWxsIT1lLnZhbHVlJiZlLmhhc093blByb3BlcnR5KFwidmFsdWVcIikpe2lmKCFBcnJheS5pc0FycmF5KGUudmFsdWUpKXJldHVyblwidmFsdWU6IGFycmF5IGV4cGVjdGVkXCI7Zm9yKHZhciB0PTA7dDxlLnZhbHVlLmxlbmd0aDsrK3QpaWYobj1jLmdvb2dsZS5wcm90b2J1Zi5FbnVtVmFsdWVEZXNjcmlwdG9yUHJvdG8udmVyaWZ5KGUudmFsdWVbdF0pKXJldHVyblwidmFsdWUuXCIrbn1pZihudWxsIT1lLm9wdGlvbnMmJmUuaGFzT3duUHJvcGVydHkoXCJvcHRpb25zXCIpJiYobj1jLmdvb2dsZS5wcm90b2J1Zi5FbnVtT3B0aW9ucy52ZXJpZnkoZS5vcHRpb25zKSkpcmV0dXJuXCJvcHRpb25zLlwiK247aWYobnVsbCE9ZS5yZXNlcnZlZFJhbmdlJiZlLmhhc093blByb3BlcnR5KFwicmVzZXJ2ZWRSYW5nZVwiKSl7aWYoIUFycmF5LmlzQXJyYXkoZS5yZXNlcnZlZFJhbmdlKSlyZXR1cm5cInJlc2VydmVkUmFuZ2U6IGFycmF5IGV4cGVjdGVkXCI7Zm9yKHZhciBuLHQ9MDt0PGUucmVzZXJ2ZWRSYW5nZS5sZW5ndGg7Kyt0KWlmKG49Yy5nb29nbGUucHJvdG9idWYuRW51bURlc2NyaXB0b3JQcm90by5FbnVtUmVzZXJ2ZWRSYW5nZS52ZXJpZnkoZS5yZXNlcnZlZFJhbmdlW3RdKSlyZXR1cm5cInJlc2VydmVkUmFuZ2UuXCIrbn1pZihudWxsIT1lLnJlc2VydmVkTmFtZSYmZS5oYXNPd25Qcm9wZXJ0eShcInJlc2VydmVkTmFtZVwiKSl7aWYoIUFycmF5LmlzQXJyYXkoZS5yZXNlcnZlZE5hbWUpKXJldHVyblwicmVzZXJ2ZWROYW1lOiBhcnJheSBleHBlY3RlZFwiO2Zvcih0PTA7dDxlLnJlc2VydmVkTmFtZS5sZW5ndGg7Kyt0KWlmKCF1LmlzU3RyaW5nKGUucmVzZXJ2ZWROYW1lW3RdKSlyZXR1cm5cInJlc2VydmVkTmFtZTogc3RyaW5nW10gZXhwZWN0ZWRcIn1yZXR1cm4gbnVsbH0sdi5mcm9tT2JqZWN0PWZ1bmN0aW9uKGUpe2lmKGUgaW5zdGFuY2VvZiBjLmdvb2dsZS5wcm90b2J1Zi5FbnVtRGVzY3JpcHRvclByb3RvKXJldHVybiBlO3ZhciB0PW5ldyBjLmdvb2dsZS5wcm90b2J1Zi5FbnVtRGVzY3JpcHRvclByb3RvO2lmKG51bGwhPWUubmFtZSYmKHQubmFtZT1TdHJpbmcoZS5uYW1lKSksZS52YWx1ZSl7aWYoIUFycmF5LmlzQXJyYXkoZS52YWx1ZSkpdGhyb3cgVHlwZUVycm9yKFwiLmdvb2dsZS5wcm90b2J1Zi5FbnVtRGVzY3JpcHRvclByb3RvLnZhbHVlOiBhcnJheSBleHBlY3RlZFwiKTt0LnZhbHVlPVtdO2Zvcih2YXIgbj0wO248ZS52YWx1ZS5sZW5ndGg7KytuKXtpZihcIm9iamVjdFwiIT10eXBlb2YgZS52YWx1ZVtuXSl0aHJvdyBUeXBlRXJyb3IoXCIuZ29vZ2xlLnByb3RvYnVmLkVudW1EZXNjcmlwdG9yUHJvdG8udmFsdWU6IG9iamVjdCBleHBlY3RlZFwiKTt0LnZhbHVlW25dPWMuZ29vZ2xlLnByb3RvYnVmLkVudW1WYWx1ZURlc2NyaXB0b3JQcm90by5mcm9tT2JqZWN0KGUudmFsdWVbbl0pfX1pZihudWxsIT1lLm9wdGlvbnMpe2lmKFwib2JqZWN0XCIhPXR5cGVvZiBlLm9wdGlvbnMpdGhyb3cgVHlwZUVycm9yKFwiLmdvb2dsZS5wcm90b2J1Zi5FbnVtRGVzY3JpcHRvclByb3RvLm9wdGlvbnM6IG9iamVjdCBleHBlY3RlZFwiKTt0Lm9wdGlvbnM9Yy5nb29nbGUucHJvdG9idWYuRW51bU9wdGlvbnMuZnJvbU9iamVjdChlLm9wdGlvbnMpfWlmKGUucmVzZXJ2ZWRSYW5nZSl7aWYoIUFycmF5LmlzQXJyYXkoZS5yZXNlcnZlZFJhbmdlKSl0aHJvdyBUeXBlRXJyb3IoXCIuZ29vZ2xlLnByb3RvYnVmLkVudW1EZXNjcmlwdG9yUHJvdG8ucmVzZXJ2ZWRSYW5nZTogYXJyYXkgZXhwZWN0ZWRcIik7dC5yZXNlcnZlZFJhbmdlPVtdO2ZvcihuPTA7bjxlLnJlc2VydmVkUmFuZ2UubGVuZ3RoOysrbil7aWYoXCJvYmplY3RcIiE9dHlwZW9mIGUucmVzZXJ2ZWRSYW5nZVtuXSl0aHJvdyBUeXBlRXJyb3IoXCIuZ29vZ2xlLnByb3RvYnVmLkVudW1EZXNjcmlwdG9yUHJvdG8ucmVzZXJ2ZWRSYW5nZTogb2JqZWN0IGV4cGVjdGVkXCIpO3QucmVzZXJ2ZWRSYW5nZVtuXT1jLmdvb2dsZS5wcm90b2J1Zi5FbnVtRGVzY3JpcHRvclByb3RvLkVudW1SZXNlcnZlZFJhbmdlLmZyb21PYmplY3QoZS5yZXNlcnZlZFJhbmdlW25dKX19aWYoZS5yZXNlcnZlZE5hbWUpe2lmKCFBcnJheS5pc0FycmF5KGUucmVzZXJ2ZWROYW1lKSl0aHJvdyBUeXBlRXJyb3IoXCIuZ29vZ2xlLnByb3RvYnVmLkVudW1EZXNjcmlwdG9yUHJvdG8ucmVzZXJ2ZWROYW1lOiBhcnJheSBleHBlY3RlZFwiKTt0LnJlc2VydmVkTmFtZT1bXTtmb3Iobj0wO248ZS5yZXNlcnZlZE5hbWUubGVuZ3RoOysrbil0LnJlc2VydmVkTmFtZVtuXT1TdHJpbmcoZS5yZXNlcnZlZE5hbWVbbl0pfXJldHVybiB0fSx2LnRvT2JqZWN0PWZ1bmN0aW9uKGUsdCl7dmFyIG49e307aWYoKCh0PXR8fHt9KS5hcnJheXN8fHQuZGVmYXVsdHMpJiYobi52YWx1ZT1bXSxuLnJlc2VydmVkUmFuZ2U9W10sbi5yZXNlcnZlZE5hbWU9W10pLHQuZGVmYXVsdHMmJihuLm5hbWU9XCJcIixuLm9wdGlvbnM9bnVsbCksbnVsbCE9ZS5uYW1lJiZlLmhhc093blByb3BlcnR5KFwibmFtZVwiKSYmKG4ubmFtZT1lLm5hbWUpLGUudmFsdWUmJmUudmFsdWUubGVuZ3RoKXtuLnZhbHVlPVtdO2Zvcih2YXIgbz0wO288ZS52YWx1ZS5sZW5ndGg7KytvKW4udmFsdWVbb109Yy5nb29nbGUucHJvdG9idWYuRW51bVZhbHVlRGVzY3JpcHRvclByb3RvLnRvT2JqZWN0KGUudmFsdWVbb10sdCl9aWYobnVsbCE9ZS5vcHRpb25zJiZlLmhhc093blByb3BlcnR5KFwib3B0aW9uc1wiKSYmKG4ub3B0aW9ucz1jLmdvb2dsZS5wcm90b2J1Zi5FbnVtT3B0aW9ucy50b09iamVjdChlLm9wdGlvbnMsdCkpLGUucmVzZXJ2ZWRSYW5nZSYmZS5yZXNlcnZlZFJhbmdlLmxlbmd0aCl7bi5yZXNlcnZlZFJhbmdlPVtdO2ZvcihvPTA7bzxlLnJlc2VydmVkUmFuZ2UubGVuZ3RoOysrbyluLnJlc2VydmVkUmFuZ2Vbb109Yy5nb29nbGUucHJvdG9idWYuRW51bURlc2NyaXB0b3JQcm90by5FbnVtUmVzZXJ2ZWRSYW5nZS50b09iamVjdChlLnJlc2VydmVkUmFuZ2Vbb10sdCl9aWYoZS5yZXNlcnZlZE5hbWUmJmUucmVzZXJ2ZWROYW1lLmxlbmd0aCl7bi5yZXNlcnZlZE5hbWU9W107Zm9yKG89MDtvPGUucmVzZXJ2ZWROYW1lLmxlbmd0aDsrK28pbi5yZXNlcnZlZE5hbWVbb109ZS5yZXNlcnZlZE5hbWVbb119cmV0dXJuIG59LHYucHJvdG90eXBlLnRvSlNPTj1mdW5jdGlvbigpe3JldHVybiB0aGlzLmNvbnN0cnVjdG9yLnRvT2JqZWN0KHRoaXMsby51dGlsLnRvSlNPTk9wdGlvbnMpfSx2LkVudW1SZXNlcnZlZFJhbmdlPShQLnByb3RvdHlwZS5zdGFydD0wLFAucHJvdG90eXBlLmVuZD0wLFAuY3JlYXRlPWZ1bmN0aW9uKGUpe3JldHVybiBuZXcgUChlKX0sUC5lbmNvZGU9ZnVuY3Rpb24oZSx0KXtyZXR1cm4gdD10fHxyLmNyZWF0ZSgpLG51bGwhPWUuc3RhcnQmJk9iamVjdC5oYXNPd25Qcm9wZXJ0eS5jYWxsKGUsXCJzdGFydFwiKSYmdC51aW50MzIoOCkuaW50MzIoZS5zdGFydCksbnVsbCE9ZS5lbmQmJk9iamVjdC5oYXNPd25Qcm9wZXJ0eS5jYWxsKGUsXCJlbmRcIikmJnQudWludDMyKDE2KS5pbnQzMihlLmVuZCksdH0sUC5lbmNvZGVEZWxpbWl0ZWQ9ZnVuY3Rpb24oZSx0KXtyZXR1cm4gdGhpcy5lbmNvZGUoZSx0KS5sZGVsaW0oKX0sUC5kZWNvZGU9ZnVuY3Rpb24oZSx0KXtlIGluc3RhbmNlb2Ygc3x8KGU9cy5jcmVhdGUoZSkpO2Zvcih2YXIgbj12b2lkIDA9PT10P2UubGVuOmUucG9zK3Qsbz1uZXcgYy5nb29nbGUucHJvdG9idWYuRW51bURlc2NyaXB0b3JQcm90by5FbnVtUmVzZXJ2ZWRSYW5nZTtlLnBvczxuOyl7dmFyIHI9ZS51aW50MzIoKTtzd2l0Y2gocj4+PjMpe2Nhc2UgMTpvLnN0YXJ0PWUuaW50MzIoKTticmVhaztjYXNlIDI6by5lbmQ9ZS5pbnQzMigpO2JyZWFrO2RlZmF1bHQ6ZS5za2lwVHlwZSg3JnIpfX1yZXR1cm4gb30sUC5kZWNvZGVEZWxpbWl0ZWQ9ZnVuY3Rpb24oZSl7cmV0dXJuIGUgaW5zdGFuY2VvZiBzfHwoZT1uZXcgcyhlKSksdGhpcy5kZWNvZGUoZSxlLnVpbnQzMigpKX0sUC52ZXJpZnk9ZnVuY3Rpb24oZSl7cmV0dXJuXCJvYmplY3RcIiE9dHlwZW9mIGV8fG51bGw9PT1lP1wib2JqZWN0IGV4cGVjdGVkXCI6bnVsbCE9ZS5zdGFydCYmZS5oYXNPd25Qcm9wZXJ0eShcInN0YXJ0XCIpJiYhdS5pc0ludGVnZXIoZS5zdGFydCk/XCJzdGFydDogaW50ZWdlciBleHBlY3RlZFwiOm51bGwhPWUuZW5kJiZlLmhhc093blByb3BlcnR5KFwiZW5kXCIpJiYhdS5pc0ludGVnZXIoZS5lbmQpP1wiZW5kOiBpbnRlZ2VyIGV4cGVjdGVkXCI6bnVsbH0sUC5mcm9tT2JqZWN0PWZ1bmN0aW9uKGUpe3ZhciB0O3JldHVybiBlIGluc3RhbmNlb2YgYy5nb29nbGUucHJvdG9idWYuRW51bURlc2NyaXB0b3JQcm90by5FbnVtUmVzZXJ2ZWRSYW5nZT9lOih0PW5ldyBjLmdvb2dsZS5wcm90b2J1Zi5FbnVtRGVzY3JpcHRvclByb3RvLkVudW1SZXNlcnZlZFJhbmdlLG51bGwhPWUuc3RhcnQmJih0LnN0YXJ0PTB8ZS5zdGFydCksbnVsbCE9ZS5lbmQmJih0LmVuZD0wfGUuZW5kKSx0KX0sUC50b09iamVjdD1mdW5jdGlvbihlLHQpe3ZhciBuPXt9O3JldHVybih0PXR8fHt9KS5kZWZhdWx0cyYmKG4uc3RhcnQ9MCxuLmVuZD0wKSxudWxsIT1lLnN0YXJ0JiZlLmhhc093blByb3BlcnR5KFwic3RhcnRcIikmJihuLnN0YXJ0PWUuc3RhcnQpLG51bGwhPWUuZW5kJiZlLmhhc093blByb3BlcnR5KFwiZW5kXCIpJiYobi5lbmQ9ZS5lbmQpLG59LFAucHJvdG90eXBlLnRvSlNPTj1mdW5jdGlvbigpe3JldHVybiB0aGlzLmNvbnN0cnVjdG9yLnRvT2JqZWN0KHRoaXMsby51dGlsLnRvSlNPTk9wdGlvbnMpfSxQKSx2KSxuLkVudW1WYWx1ZURlc2NyaXB0b3JQcm90bz0ody5wcm90b3R5cGUubmFtZT1cIlwiLHcucHJvdG90eXBlLm51bWJlcj0wLHcucHJvdG90eXBlLm9wdGlvbnM9bnVsbCx3LmNyZWF0ZT1mdW5jdGlvbihlKXtyZXR1cm4gbmV3IHcoZSl9LHcuZW5jb2RlPWZ1bmN0aW9uKGUsdCl7cmV0dXJuIHQ9dHx8ci5jcmVhdGUoKSxudWxsIT1lLm5hbWUmJk9iamVjdC5oYXNPd25Qcm9wZXJ0eS5jYWxsKGUsXCJuYW1lXCIpJiZ0LnVpbnQzMigxMCkuc3RyaW5nKGUubmFtZSksbnVsbCE9ZS5udW1iZXImJk9iamVjdC5oYXNPd25Qcm9wZXJ0eS5jYWxsKGUsXCJudW1iZXJcIikmJnQudWludDMyKDE2KS5pbnQzMihlLm51bWJlciksbnVsbCE9ZS5vcHRpb25zJiZPYmplY3QuaGFzT3duUHJvcGVydHkuY2FsbChlLFwib3B0aW9uc1wiKSYmYy5nb29nbGUucHJvdG9idWYuRW51bVZhbHVlT3B0aW9ucy5lbmNvZGUoZS5vcHRpb25zLHQudWludDMyKDI2KS5mb3JrKCkpLmxkZWxpbSgpLHR9LHcuZW5jb2RlRGVsaW1pdGVkPWZ1bmN0aW9uKGUsdCl7cmV0dXJuIHRoaXMuZW5jb2RlKGUsdCkubGRlbGltKCl9LHcuZGVjb2RlPWZ1bmN0aW9uKGUsdCl7ZSBpbnN0YW5jZW9mIHN8fChlPXMuY3JlYXRlKGUpKTtmb3IodmFyIG49dm9pZCAwPT09dD9lLmxlbjplLnBvcyt0LG89bmV3IGMuZ29vZ2xlLnByb3RvYnVmLkVudW1WYWx1ZURlc2NyaXB0b3JQcm90bztlLnBvczxuOyl7dmFyIHI9ZS51aW50MzIoKTtzd2l0Y2gocj4+PjMpe2Nhc2UgMTpvLm5hbWU9ZS5zdHJpbmcoKTticmVhaztjYXNlIDI6by5udW1iZXI9ZS5pbnQzMigpO2JyZWFrO2Nhc2UgMzpvLm9wdGlvbnM9Yy5nb29nbGUucHJvdG9idWYuRW51bVZhbHVlT3B0aW9ucy5kZWNvZGUoZSxlLnVpbnQzMigpKTticmVhaztkZWZhdWx0OmUuc2tpcFR5cGUoNyZyKX19cmV0dXJuIG99LHcuZGVjb2RlRGVsaW1pdGVkPWZ1bmN0aW9uKGUpe3JldHVybiBlIGluc3RhbmNlb2Ygc3x8KGU9bmV3IHMoZSkpLHRoaXMuZGVjb2RlKGUsZS51aW50MzIoKSl9LHcudmVyaWZ5PWZ1bmN0aW9uKGUpe2lmKFwib2JqZWN0XCIhPXR5cGVvZiBlfHxudWxsPT09ZSlyZXR1cm5cIm9iamVjdCBleHBlY3RlZFwiO2lmKG51bGwhPWUubmFtZSYmZS5oYXNPd25Qcm9wZXJ0eShcIm5hbWVcIikmJiF1LmlzU3RyaW5nKGUubmFtZSkpcmV0dXJuXCJuYW1lOiBzdHJpbmcgZXhwZWN0ZWRcIjtpZihudWxsIT1lLm51bWJlciYmZS5oYXNPd25Qcm9wZXJ0eShcIm51bWJlclwiKSYmIXUuaXNJbnRlZ2VyKGUubnVtYmVyKSlyZXR1cm5cIm51bWJlcjogaW50ZWdlciBleHBlY3RlZFwiO2lmKG51bGwhPWUub3B0aW9ucyYmZS5oYXNPd25Qcm9wZXJ0eShcIm9wdGlvbnNcIikpe2U9Yy5nb29nbGUucHJvdG9idWYuRW51bVZhbHVlT3B0aW9ucy52ZXJpZnkoZS5vcHRpb25zKTtpZihlKXJldHVyblwib3B0aW9ucy5cIitlfXJldHVybiBudWxsfSx3LmZyb21PYmplY3Q9ZnVuY3Rpb24oZSl7aWYoZSBpbnN0YW5jZW9mIGMuZ29vZ2xlLnByb3RvYnVmLkVudW1WYWx1ZURlc2NyaXB0b3JQcm90bylyZXR1cm4gZTt2YXIgdD1uZXcgYy5nb29nbGUucHJvdG9idWYuRW51bVZhbHVlRGVzY3JpcHRvclByb3RvO2lmKG51bGwhPWUubmFtZSYmKHQubmFtZT1TdHJpbmcoZS5uYW1lKSksbnVsbCE9ZS5udW1iZXImJih0Lm51bWJlcj0wfGUubnVtYmVyKSxudWxsIT1lLm9wdGlvbnMpe2lmKFwib2JqZWN0XCIhPXR5cGVvZiBlLm9wdGlvbnMpdGhyb3cgVHlwZUVycm9yKFwiLmdvb2dsZS5wcm90b2J1Zi5FbnVtVmFsdWVEZXNjcmlwdG9yUHJvdG8ub3B0aW9uczogb2JqZWN0IGV4cGVjdGVkXCIpO3Qub3B0aW9ucz1jLmdvb2dsZS5wcm90b2J1Zi5FbnVtVmFsdWVPcHRpb25zLmZyb21PYmplY3QoZS5vcHRpb25zKX1yZXR1cm4gdH0sdy50b09iamVjdD1mdW5jdGlvbihlLHQpe3ZhciBuPXt9O3JldHVybih0PXR8fHt9KS5kZWZhdWx0cyYmKG4ubmFtZT1cIlwiLG4ubnVtYmVyPTAsbi5vcHRpb25zPW51bGwpLG51bGwhPWUubmFtZSYmZS5oYXNPd25Qcm9wZXJ0eShcIm5hbWVcIikmJihuLm5hbWU9ZS5uYW1lKSxudWxsIT1lLm51bWJlciYmZS5oYXNPd25Qcm9wZXJ0eShcIm51bWJlclwiKSYmKG4ubnVtYmVyPWUubnVtYmVyKSxudWxsIT1lLm9wdGlvbnMmJmUuaGFzT3duUHJvcGVydHkoXCJvcHRpb25zXCIpJiYobi5vcHRpb25zPWMuZ29vZ2xlLnByb3RvYnVmLkVudW1WYWx1ZU9wdGlvbnMudG9PYmplY3QoZS5vcHRpb25zLHQpKSxufSx3LnByb3RvdHlwZS50b0pTT049ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5jb25zdHJ1Y3Rvci50b09iamVjdCh0aGlzLG8udXRpbC50b0pTT05PcHRpb25zKX0sdyksbi5TZXJ2aWNlRGVzY3JpcHRvclByb3RvPShqLnByb3RvdHlwZS5uYW1lPVwiXCIsai5wcm90b3R5cGUubWV0aG9kPXUuZW1wdHlBcnJheSxqLnByb3RvdHlwZS5vcHRpb25zPW51bGwsai5jcmVhdGU9ZnVuY3Rpb24oZSl7cmV0dXJuIG5ldyBqKGUpfSxqLmVuY29kZT1mdW5jdGlvbihlLHQpe2lmKHQ9dHx8ci5jcmVhdGUoKSxudWxsIT1lLm5hbWUmJk9iamVjdC5oYXNPd25Qcm9wZXJ0eS5jYWxsKGUsXCJuYW1lXCIpJiZ0LnVpbnQzMigxMCkuc3RyaW5nKGUubmFtZSksbnVsbCE9ZS5tZXRob2QmJmUubWV0aG9kLmxlbmd0aClmb3IodmFyIG49MDtuPGUubWV0aG9kLmxlbmd0aDsrK24pYy5nb29nbGUucHJvdG9idWYuTWV0aG9kRGVzY3JpcHRvclByb3RvLmVuY29kZShlLm1ldGhvZFtuXSx0LnVpbnQzMigxOCkuZm9yaygpKS5sZGVsaW0oKTtyZXR1cm4gbnVsbCE9ZS5vcHRpb25zJiZPYmplY3QuaGFzT3duUHJvcGVydHkuY2FsbChlLFwib3B0aW9uc1wiKSYmYy5nb29nbGUucHJvdG9idWYuU2VydmljZU9wdGlvbnMuZW5jb2RlKGUub3B0aW9ucyx0LnVpbnQzMigyNikuZm9yaygpKS5sZGVsaW0oKSx0fSxqLmVuY29kZURlbGltaXRlZD1mdW5jdGlvbihlLHQpe3JldHVybiB0aGlzLmVuY29kZShlLHQpLmxkZWxpbSgpfSxqLmRlY29kZT1mdW5jdGlvbihlLHQpe2UgaW5zdGFuY2VvZiBzfHwoZT1zLmNyZWF0ZShlKSk7Zm9yKHZhciBuPXZvaWQgMD09PXQ/ZS5sZW46ZS5wb3MrdCxvPW5ldyBjLmdvb2dsZS5wcm90b2J1Zi5TZXJ2aWNlRGVzY3JpcHRvclByb3RvO2UucG9zPG47KXt2YXIgcj1lLnVpbnQzMigpO3N3aXRjaChyPj4+Myl7Y2FzZSAxOm8ubmFtZT1lLnN0cmluZygpO2JyZWFrO2Nhc2UgMjpvLm1ldGhvZCYmby5tZXRob2QubGVuZ3RofHwoby5tZXRob2Q9W10pLG8ubWV0aG9kLnB1c2goYy5nb29nbGUucHJvdG9idWYuTWV0aG9kRGVzY3JpcHRvclByb3RvLmRlY29kZShlLGUudWludDMyKCkpKTticmVhaztjYXNlIDM6by5vcHRpb25zPWMuZ29vZ2xlLnByb3RvYnVmLlNlcnZpY2VPcHRpb25zLmRlY29kZShlLGUudWludDMyKCkpO2JyZWFrO2RlZmF1bHQ6ZS5za2lwVHlwZSg3JnIpfX1yZXR1cm4gb30sai5kZWNvZGVEZWxpbWl0ZWQ9ZnVuY3Rpb24oZSl7cmV0dXJuIGUgaW5zdGFuY2VvZiBzfHwoZT1uZXcgcyhlKSksdGhpcy5kZWNvZGUoZSxlLnVpbnQzMigpKX0sai52ZXJpZnk9ZnVuY3Rpb24oZSl7aWYoXCJvYmplY3RcIiE9dHlwZW9mIGV8fG51bGw9PT1lKXJldHVyblwib2JqZWN0IGV4cGVjdGVkXCI7aWYobnVsbCE9ZS5uYW1lJiZlLmhhc093blByb3BlcnR5KFwibmFtZVwiKSYmIXUuaXNTdHJpbmcoZS5uYW1lKSlyZXR1cm5cIm5hbWU6IHN0cmluZyBleHBlY3RlZFwiO2lmKG51bGwhPWUubWV0aG9kJiZlLmhhc093blByb3BlcnR5KFwibWV0aG9kXCIpKXtpZighQXJyYXkuaXNBcnJheShlLm1ldGhvZCkpcmV0dXJuXCJtZXRob2Q6IGFycmF5IGV4cGVjdGVkXCI7Zm9yKHZhciB0PTA7dDxlLm1ldGhvZC5sZW5ndGg7Kyt0KWlmKG49Yy5nb29nbGUucHJvdG9idWYuTWV0aG9kRGVzY3JpcHRvclByb3RvLnZlcmlmeShlLm1ldGhvZFt0XSkpcmV0dXJuXCJtZXRob2QuXCIrbn12YXIgbjtpZihudWxsIT1lLm9wdGlvbnMmJmUuaGFzT3duUHJvcGVydHkoXCJvcHRpb25zXCIpJiYobj1jLmdvb2dsZS5wcm90b2J1Zi5TZXJ2aWNlT3B0aW9ucy52ZXJpZnkoZS5vcHRpb25zKSkpcmV0dXJuXCJvcHRpb25zLlwiK247cmV0dXJuIG51bGx9LGouZnJvbU9iamVjdD1mdW5jdGlvbihlKXtpZihlIGluc3RhbmNlb2YgYy5nb29nbGUucHJvdG9idWYuU2VydmljZURlc2NyaXB0b3JQcm90bylyZXR1cm4gZTt2YXIgdD1uZXcgYy5nb29nbGUucHJvdG9idWYuU2VydmljZURlc2NyaXB0b3JQcm90bztpZihudWxsIT1lLm5hbWUmJih0Lm5hbWU9U3RyaW5nKGUubmFtZSkpLGUubWV0aG9kKXtpZighQXJyYXkuaXNBcnJheShlLm1ldGhvZCkpdGhyb3cgVHlwZUVycm9yKFwiLmdvb2dsZS5wcm90b2J1Zi5TZXJ2aWNlRGVzY3JpcHRvclByb3RvLm1ldGhvZDogYXJyYXkgZXhwZWN0ZWRcIik7dC5tZXRob2Q9W107Zm9yKHZhciBuPTA7bjxlLm1ldGhvZC5sZW5ndGg7KytuKXtpZihcIm9iamVjdFwiIT10eXBlb2YgZS5tZXRob2Rbbl0pdGhyb3cgVHlwZUVycm9yKFwiLmdvb2dsZS5wcm90b2J1Zi5TZXJ2aWNlRGVzY3JpcHRvclByb3RvLm1ldGhvZDogb2JqZWN0IGV4cGVjdGVkXCIpO3QubWV0aG9kW25dPWMuZ29vZ2xlLnByb3RvYnVmLk1ldGhvZERlc2NyaXB0b3JQcm90by5mcm9tT2JqZWN0KGUubWV0aG9kW25dKX19aWYobnVsbCE9ZS5vcHRpb25zKXtpZihcIm9iamVjdFwiIT10eXBlb2YgZS5vcHRpb25zKXRocm93IFR5cGVFcnJvcihcIi5nb29nbGUucHJvdG9idWYuU2VydmljZURlc2NyaXB0b3JQcm90by5vcHRpb25zOiBvYmplY3QgZXhwZWN0ZWRcIik7dC5vcHRpb25zPWMuZ29vZ2xlLnByb3RvYnVmLlNlcnZpY2VPcHRpb25zLmZyb21PYmplY3QoZS5vcHRpb25zKX1yZXR1cm4gdH0sai50b09iamVjdD1mdW5jdGlvbihlLHQpe3ZhciBuPXt9O2lmKCgodD10fHx7fSkuYXJyYXlzfHx0LmRlZmF1bHRzKSYmKG4ubWV0aG9kPVtdKSx0LmRlZmF1bHRzJiYobi5uYW1lPVwiXCIsbi5vcHRpb25zPW51bGwpLG51bGwhPWUubmFtZSYmZS5oYXNPd25Qcm9wZXJ0eShcIm5hbWVcIikmJihuLm5hbWU9ZS5uYW1lKSxlLm1ldGhvZCYmZS5tZXRob2QubGVuZ3RoKXtuLm1ldGhvZD1bXTtmb3IodmFyIG89MDtvPGUubWV0aG9kLmxlbmd0aDsrK28pbi5tZXRob2Rbb109Yy5nb29nbGUucHJvdG9idWYuTWV0aG9kRGVzY3JpcHRvclByb3RvLnRvT2JqZWN0KGUubWV0aG9kW29dLHQpfXJldHVybiBudWxsIT1lLm9wdGlvbnMmJmUuaGFzT3duUHJvcGVydHkoXCJvcHRpb25zXCIpJiYobi5vcHRpb25zPWMuZ29vZ2xlLnByb3RvYnVmLlNlcnZpY2VPcHRpb25zLnRvT2JqZWN0KGUub3B0aW9ucyx0KSksbn0sai5wcm90b3R5cGUudG9KU09OPWZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMuY29uc3RydWN0b3IudG9PYmplY3QodGhpcyxvLnV0aWwudG9KU09OT3B0aW9ucyl9LGopLG4uTWV0aG9kRGVzY3JpcHRvclByb3RvPSh4LnByb3RvdHlwZS5uYW1lPVwiXCIseC5wcm90b3R5cGUuaW5wdXRUeXBlPVwiXCIseC5wcm90b3R5cGUub3V0cHV0VHlwZT1cIlwiLHgucHJvdG90eXBlLm9wdGlvbnM9bnVsbCx4LnByb3RvdHlwZS5jbGllbnRTdHJlYW1pbmc9ITEseC5wcm90b3R5cGUuc2VydmVyU3RyZWFtaW5nPSExLHguY3JlYXRlPWZ1bmN0aW9uKGUpe3JldHVybiBuZXcgeChlKX0seC5lbmNvZGU9ZnVuY3Rpb24oZSx0KXtyZXR1cm4gdD10fHxyLmNyZWF0ZSgpLG51bGwhPWUubmFtZSYmT2JqZWN0Lmhhc093blByb3BlcnR5LmNhbGwoZSxcIm5hbWVcIikmJnQudWludDMyKDEwKS5zdHJpbmcoZS5uYW1lKSxudWxsIT1lLmlucHV0VHlwZSYmT2JqZWN0Lmhhc093blByb3BlcnR5LmNhbGwoZSxcImlucHV0VHlwZVwiKSYmdC51aW50MzIoMTgpLnN0cmluZyhlLmlucHV0VHlwZSksbnVsbCE9ZS5vdXRwdXRUeXBlJiZPYmplY3QuaGFzT3duUHJvcGVydHkuY2FsbChlLFwib3V0cHV0VHlwZVwiKSYmdC51aW50MzIoMjYpLnN0cmluZyhlLm91dHB1dFR5cGUpLG51bGwhPWUub3B0aW9ucyYmT2JqZWN0Lmhhc093blByb3BlcnR5LmNhbGwoZSxcIm9wdGlvbnNcIikmJmMuZ29vZ2xlLnByb3RvYnVmLk1ldGhvZE9wdGlvbnMuZW5jb2RlKGUub3B0aW9ucyx0LnVpbnQzMigzNCkuZm9yaygpKS5sZGVsaW0oKSxudWxsIT1lLmNsaWVudFN0cmVhbWluZyYmT2JqZWN0Lmhhc093blByb3BlcnR5LmNhbGwoZSxcImNsaWVudFN0cmVhbWluZ1wiKSYmdC51aW50MzIoNDApLmJvb2woZS5jbGllbnRTdHJlYW1pbmcpLG51bGwhPWUuc2VydmVyU3RyZWFtaW5nJiZPYmplY3QuaGFzT3duUHJvcGVydHkuY2FsbChlLFwic2VydmVyU3RyZWFtaW5nXCIpJiZ0LnVpbnQzMig0OCkuYm9vbChlLnNlcnZlclN0cmVhbWluZyksdH0seC5lbmNvZGVEZWxpbWl0ZWQ9ZnVuY3Rpb24oZSx0KXtyZXR1cm4gdGhpcy5lbmNvZGUoZSx0KS5sZGVsaW0oKX0seC5kZWNvZGU9ZnVuY3Rpb24oZSx0KXtlIGluc3RhbmNlb2Ygc3x8KGU9cy5jcmVhdGUoZSkpO2Zvcih2YXIgbj12b2lkIDA9PT10P2UubGVuOmUucG9zK3Qsbz1uZXcgYy5nb29nbGUucHJvdG9idWYuTWV0aG9kRGVzY3JpcHRvclByb3RvO2UucG9zPG47KXt2YXIgcj1lLnVpbnQzMigpO3N3aXRjaChyPj4+Myl7Y2FzZSAxOm8ubmFtZT1lLnN0cmluZygpO2JyZWFrO2Nhc2UgMjpvLmlucHV0VHlwZT1lLnN0cmluZygpO2JyZWFrO2Nhc2UgMzpvLm91dHB1dFR5cGU9ZS5zdHJpbmcoKTticmVhaztjYXNlIDQ6by5vcHRpb25zPWMuZ29vZ2xlLnByb3RvYnVmLk1ldGhvZE9wdGlvbnMuZGVjb2RlKGUsZS51aW50MzIoKSk7YnJlYWs7Y2FzZSA1Om8uY2xpZW50U3RyZWFtaW5nPWUuYm9vbCgpO2JyZWFrO2Nhc2UgNjpvLnNlcnZlclN0cmVhbWluZz1lLmJvb2woKTticmVhaztkZWZhdWx0OmUuc2tpcFR5cGUoNyZyKX19cmV0dXJuIG99LHguZGVjb2RlRGVsaW1pdGVkPWZ1bmN0aW9uKGUpe3JldHVybiBlIGluc3RhbmNlb2Ygc3x8KGU9bmV3IHMoZSkpLHRoaXMuZGVjb2RlKGUsZS51aW50MzIoKSl9LHgudmVyaWZ5PWZ1bmN0aW9uKGUpe2lmKFwib2JqZWN0XCIhPXR5cGVvZiBlfHxudWxsPT09ZSlyZXR1cm5cIm9iamVjdCBleHBlY3RlZFwiO2lmKG51bGwhPWUubmFtZSYmZS5oYXNPd25Qcm9wZXJ0eShcIm5hbWVcIikmJiF1LmlzU3RyaW5nKGUubmFtZSkpcmV0dXJuXCJuYW1lOiBzdHJpbmcgZXhwZWN0ZWRcIjtpZihudWxsIT1lLmlucHV0VHlwZSYmZS5oYXNPd25Qcm9wZXJ0eShcImlucHV0VHlwZVwiKSYmIXUuaXNTdHJpbmcoZS5pbnB1dFR5cGUpKXJldHVyblwiaW5wdXRUeXBlOiBzdHJpbmcgZXhwZWN0ZWRcIjtpZihudWxsIT1lLm91dHB1dFR5cGUmJmUuaGFzT3duUHJvcGVydHkoXCJvdXRwdXRUeXBlXCIpJiYhdS5pc1N0cmluZyhlLm91dHB1dFR5cGUpKXJldHVyblwib3V0cHV0VHlwZTogc3RyaW5nIGV4cGVjdGVkXCI7aWYobnVsbCE9ZS5vcHRpb25zJiZlLmhhc093blByb3BlcnR5KFwib3B0aW9uc1wiKSl7dmFyIHQ9Yy5nb29nbGUucHJvdG9idWYuTWV0aG9kT3B0aW9ucy52ZXJpZnkoZS5vcHRpb25zKTtpZih0KXJldHVyblwib3B0aW9ucy5cIit0fXJldHVybiBudWxsIT1lLmNsaWVudFN0cmVhbWluZyYmZS5oYXNPd25Qcm9wZXJ0eShcImNsaWVudFN0cmVhbWluZ1wiKSYmXCJib29sZWFuXCIhPXR5cGVvZiBlLmNsaWVudFN0cmVhbWluZz9cImNsaWVudFN0cmVhbWluZzogYm9vbGVhbiBleHBlY3RlZFwiOm51bGwhPWUuc2VydmVyU3RyZWFtaW5nJiZlLmhhc093blByb3BlcnR5KFwic2VydmVyU3RyZWFtaW5nXCIpJiZcImJvb2xlYW5cIiE9dHlwZW9mIGUuc2VydmVyU3RyZWFtaW5nP1wic2VydmVyU3RyZWFtaW5nOiBib29sZWFuIGV4cGVjdGVkXCI6bnVsbH0seC5mcm9tT2JqZWN0PWZ1bmN0aW9uKGUpe2lmKGUgaW5zdGFuY2VvZiBjLmdvb2dsZS5wcm90b2J1Zi5NZXRob2REZXNjcmlwdG9yUHJvdG8pcmV0dXJuIGU7dmFyIHQ9bmV3IGMuZ29vZ2xlLnByb3RvYnVmLk1ldGhvZERlc2NyaXB0b3JQcm90bztpZihudWxsIT1lLm5hbWUmJih0Lm5hbWU9U3RyaW5nKGUubmFtZSkpLG51bGwhPWUuaW5wdXRUeXBlJiYodC5pbnB1dFR5cGU9U3RyaW5nKGUuaW5wdXRUeXBlKSksbnVsbCE9ZS5vdXRwdXRUeXBlJiYodC5vdXRwdXRUeXBlPVN0cmluZyhlLm91dHB1dFR5cGUpKSxudWxsIT1lLm9wdGlvbnMpe2lmKFwib2JqZWN0XCIhPXR5cGVvZiBlLm9wdGlvbnMpdGhyb3cgVHlwZUVycm9yKFwiLmdvb2dsZS5wcm90b2J1Zi5NZXRob2REZXNjcmlwdG9yUHJvdG8ub3B0aW9uczogb2JqZWN0IGV4cGVjdGVkXCIpO3Qub3B0aW9ucz1jLmdvb2dsZS5wcm90b2J1Zi5NZXRob2RPcHRpb25zLmZyb21PYmplY3QoZS5vcHRpb25zKX1yZXR1cm4gbnVsbCE9ZS5jbGllbnRTdHJlYW1pbmcmJih0LmNsaWVudFN0cmVhbWluZz1Cb29sZWFuKGUuY2xpZW50U3RyZWFtaW5nKSksbnVsbCE9ZS5zZXJ2ZXJTdHJlYW1pbmcmJih0LnNlcnZlclN0cmVhbWluZz1Cb29sZWFuKGUuc2VydmVyU3RyZWFtaW5nKSksdH0seC50b09iamVjdD1mdW5jdGlvbihlLHQpe3ZhciBuPXt9O3JldHVybih0PXR8fHt9KS5kZWZhdWx0cyYmKG4ubmFtZT1cIlwiLG4uaW5wdXRUeXBlPVwiXCIsbi5vdXRwdXRUeXBlPVwiXCIsbi5vcHRpb25zPW51bGwsbi5jbGllbnRTdHJlYW1pbmc9ITEsbi5zZXJ2ZXJTdHJlYW1pbmc9ITEpLG51bGwhPWUubmFtZSYmZS5oYXNPd25Qcm9wZXJ0eShcIm5hbWVcIikmJihuLm5hbWU9ZS5uYW1lKSxudWxsIT1lLmlucHV0VHlwZSYmZS5oYXNPd25Qcm9wZXJ0eShcImlucHV0VHlwZVwiKSYmKG4uaW5wdXRUeXBlPWUuaW5wdXRUeXBlKSxudWxsIT1lLm91dHB1dFR5cGUmJmUuaGFzT3duUHJvcGVydHkoXCJvdXRwdXRUeXBlXCIpJiYobi5vdXRwdXRUeXBlPWUub3V0cHV0VHlwZSksbnVsbCE9ZS5vcHRpb25zJiZlLmhhc093blByb3BlcnR5KFwib3B0aW9uc1wiKSYmKG4ub3B0aW9ucz1jLmdvb2dsZS5wcm90b2J1Zi5NZXRob2RPcHRpb25zLnRvT2JqZWN0KGUub3B0aW9ucyx0KSksbnVsbCE9ZS5jbGllbnRTdHJlYW1pbmcmJmUuaGFzT3duUHJvcGVydHkoXCJjbGllbnRTdHJlYW1pbmdcIikmJihuLmNsaWVudFN0cmVhbWluZz1lLmNsaWVudFN0cmVhbWluZyksbnVsbCE9ZS5zZXJ2ZXJTdHJlYW1pbmcmJmUuaGFzT3duUHJvcGVydHkoXCJzZXJ2ZXJTdHJlYW1pbmdcIikmJihuLnNlcnZlclN0cmVhbWluZz1lLnNlcnZlclN0cmVhbWluZyksbn0seC5wcm90b3R5cGUudG9KU09OPWZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMuY29uc3RydWN0b3IudG9PYmplY3QodGhpcyxvLnV0aWwudG9KU09OT3B0aW9ucyl9LHgpLG4uRmlsZU9wdGlvbnM9KFMucHJvdG90eXBlLmphdmFQYWNrYWdlPVwiXCIsUy5wcm90b3R5cGUuamF2YU91dGVyQ2xhc3NuYW1lPVwiXCIsUy5wcm90b3R5cGUuamF2YU11bHRpcGxlRmlsZXM9ITEsUy5wcm90b3R5cGUuamF2YUdlbmVyYXRlRXF1YWxzQW5kSGFzaD0hMSxTLnByb3RvdHlwZS5qYXZhU3RyaW5nQ2hlY2tVdGY4PSExLFMucHJvdG90eXBlLm9wdGltaXplRm9yPTEsUy5wcm90b3R5cGUuZ29QYWNrYWdlPVwiXCIsUy5wcm90b3R5cGUuY2NHZW5lcmljU2VydmljZXM9ITEsUy5wcm90b3R5cGUuamF2YUdlbmVyaWNTZXJ2aWNlcz0hMSxTLnByb3RvdHlwZS5weUdlbmVyaWNTZXJ2aWNlcz0hMSxTLnByb3RvdHlwZS5waHBHZW5lcmljU2VydmljZXM9ITEsUy5wcm90b3R5cGUuZGVwcmVjYXRlZD0hMSxTLnByb3RvdHlwZS5jY0VuYWJsZUFyZW5hcz0hMCxTLnByb3RvdHlwZS5vYmpjQ2xhc3NQcmVmaXg9XCJcIixTLnByb3RvdHlwZS5jc2hhcnBOYW1lc3BhY2U9XCJcIixTLnByb3RvdHlwZS5zd2lmdFByZWZpeD1cIlwiLFMucHJvdG90eXBlLnBocENsYXNzUHJlZml4PVwiXCIsUy5wcm90b3R5cGUucGhwTmFtZXNwYWNlPVwiXCIsUy5wcm90b3R5cGUucGhwTWV0YWRhdGFOYW1lc3BhY2U9XCJcIixTLnByb3RvdHlwZS5ydWJ5UGFja2FnZT1cIlwiLFMucHJvdG90eXBlLnVuaW50ZXJwcmV0ZWRPcHRpb249dS5lbXB0eUFycmF5LFMuY3JlYXRlPWZ1bmN0aW9uKGUpe3JldHVybiBuZXcgUyhlKX0sUy5lbmNvZGU9ZnVuY3Rpb24oZSx0KXtpZih0PXR8fHIuY3JlYXRlKCksbnVsbCE9ZS5qYXZhUGFja2FnZSYmT2JqZWN0Lmhhc093blByb3BlcnR5LmNhbGwoZSxcImphdmFQYWNrYWdlXCIpJiZ0LnVpbnQzMigxMCkuc3RyaW5nKGUuamF2YVBhY2thZ2UpLG51bGwhPWUuamF2YU91dGVyQ2xhc3NuYW1lJiZPYmplY3QuaGFzT3duUHJvcGVydHkuY2FsbChlLFwiamF2YU91dGVyQ2xhc3NuYW1lXCIpJiZ0LnVpbnQzMig2Nikuc3RyaW5nKGUuamF2YU91dGVyQ2xhc3NuYW1lKSxudWxsIT1lLm9wdGltaXplRm9yJiZPYmplY3QuaGFzT3duUHJvcGVydHkuY2FsbChlLFwib3B0aW1pemVGb3JcIikmJnQudWludDMyKDcyKS5pbnQzMihlLm9wdGltaXplRm9yKSxudWxsIT1lLmphdmFNdWx0aXBsZUZpbGVzJiZPYmplY3QuaGFzT3duUHJvcGVydHkuY2FsbChlLFwiamF2YU11bHRpcGxlRmlsZXNcIikmJnQudWludDMyKDgwKS5ib29sKGUuamF2YU11bHRpcGxlRmlsZXMpLG51bGwhPWUuZ29QYWNrYWdlJiZPYmplY3QuaGFzT3duUHJvcGVydHkuY2FsbChlLFwiZ29QYWNrYWdlXCIpJiZ0LnVpbnQzMig5MCkuc3RyaW5nKGUuZ29QYWNrYWdlKSxudWxsIT1lLmNjR2VuZXJpY1NlcnZpY2VzJiZPYmplY3QuaGFzT3duUHJvcGVydHkuY2FsbChlLFwiY2NHZW5lcmljU2VydmljZXNcIikmJnQudWludDMyKDEyOCkuYm9vbChlLmNjR2VuZXJpY1NlcnZpY2VzKSxudWxsIT1lLmphdmFHZW5lcmljU2VydmljZXMmJk9iamVjdC5oYXNPd25Qcm9wZXJ0eS5jYWxsKGUsXCJqYXZhR2VuZXJpY1NlcnZpY2VzXCIpJiZ0LnVpbnQzMigxMzYpLmJvb2woZS5qYXZhR2VuZXJpY1NlcnZpY2VzKSxudWxsIT1lLnB5R2VuZXJpY1NlcnZpY2VzJiZPYmplY3QuaGFzT3duUHJvcGVydHkuY2FsbChlLFwicHlHZW5lcmljU2VydmljZXNcIikmJnQudWludDMyKDE0NCkuYm9vbChlLnB5R2VuZXJpY1NlcnZpY2VzKSxudWxsIT1lLmphdmFHZW5lcmF0ZUVxdWFsc0FuZEhhc2gmJk9iamVjdC5oYXNPd25Qcm9wZXJ0eS5jYWxsKGUsXCJqYXZhR2VuZXJhdGVFcXVhbHNBbmRIYXNoXCIpJiZ0LnVpbnQzMigxNjApLmJvb2woZS5qYXZhR2VuZXJhdGVFcXVhbHNBbmRIYXNoKSxudWxsIT1lLmRlcHJlY2F0ZWQmJk9iamVjdC5oYXNPd25Qcm9wZXJ0eS5jYWxsKGUsXCJkZXByZWNhdGVkXCIpJiZ0LnVpbnQzMigxODQpLmJvb2woZS5kZXByZWNhdGVkKSxudWxsIT1lLmphdmFTdHJpbmdDaGVja1V0ZjgmJk9iamVjdC5oYXNPd25Qcm9wZXJ0eS5jYWxsKGUsXCJqYXZhU3RyaW5nQ2hlY2tVdGY4XCIpJiZ0LnVpbnQzMigyMTYpLmJvb2woZS5qYXZhU3RyaW5nQ2hlY2tVdGY4KSxudWxsIT1lLmNjRW5hYmxlQXJlbmFzJiZPYmplY3QuaGFzT3duUHJvcGVydHkuY2FsbChlLFwiY2NFbmFibGVBcmVuYXNcIikmJnQudWludDMyKDI0OCkuYm9vbChlLmNjRW5hYmxlQXJlbmFzKSxudWxsIT1lLm9iamNDbGFzc1ByZWZpeCYmT2JqZWN0Lmhhc093blByb3BlcnR5LmNhbGwoZSxcIm9iamNDbGFzc1ByZWZpeFwiKSYmdC51aW50MzIoMjkwKS5zdHJpbmcoZS5vYmpjQ2xhc3NQcmVmaXgpLG51bGwhPWUuY3NoYXJwTmFtZXNwYWNlJiZPYmplY3QuaGFzT3duUHJvcGVydHkuY2FsbChlLFwiY3NoYXJwTmFtZXNwYWNlXCIpJiZ0LnVpbnQzMigyOTgpLnN0cmluZyhlLmNzaGFycE5hbWVzcGFjZSksbnVsbCE9ZS5zd2lmdFByZWZpeCYmT2JqZWN0Lmhhc093blByb3BlcnR5LmNhbGwoZSxcInN3aWZ0UHJlZml4XCIpJiZ0LnVpbnQzMigzMTQpLnN0cmluZyhlLnN3aWZ0UHJlZml4KSxudWxsIT1lLnBocENsYXNzUHJlZml4JiZPYmplY3QuaGFzT3duUHJvcGVydHkuY2FsbChlLFwicGhwQ2xhc3NQcmVmaXhcIikmJnQudWludDMyKDMyMikuc3RyaW5nKGUucGhwQ2xhc3NQcmVmaXgpLG51bGwhPWUucGhwTmFtZXNwYWNlJiZPYmplY3QuaGFzT3duUHJvcGVydHkuY2FsbChlLFwicGhwTmFtZXNwYWNlXCIpJiZ0LnVpbnQzMigzMzApLnN0cmluZyhlLnBocE5hbWVzcGFjZSksbnVsbCE9ZS5waHBHZW5lcmljU2VydmljZXMmJk9iamVjdC5oYXNPd25Qcm9wZXJ0eS5jYWxsKGUsXCJwaHBHZW5lcmljU2VydmljZXNcIikmJnQudWludDMyKDMzNikuYm9vbChlLnBocEdlbmVyaWNTZXJ2aWNlcyksbnVsbCE9ZS5waHBNZXRhZGF0YU5hbWVzcGFjZSYmT2JqZWN0Lmhhc093blByb3BlcnR5LmNhbGwoZSxcInBocE1ldGFkYXRhTmFtZXNwYWNlXCIpJiZ0LnVpbnQzMigzNTQpLnN0cmluZyhlLnBocE1ldGFkYXRhTmFtZXNwYWNlKSxudWxsIT1lLnJ1YnlQYWNrYWdlJiZPYmplY3QuaGFzT3duUHJvcGVydHkuY2FsbChlLFwicnVieVBhY2thZ2VcIikmJnQudWludDMyKDM2Mikuc3RyaW5nKGUucnVieVBhY2thZ2UpLG51bGwhPWUudW5pbnRlcnByZXRlZE9wdGlvbiYmZS51bmludGVycHJldGVkT3B0aW9uLmxlbmd0aClmb3IodmFyIG49MDtuPGUudW5pbnRlcnByZXRlZE9wdGlvbi5sZW5ndGg7KytuKWMuZ29vZ2xlLnByb3RvYnVmLlVuaW50ZXJwcmV0ZWRPcHRpb24uZW5jb2RlKGUudW5pbnRlcnByZXRlZE9wdGlvbltuXSx0LnVpbnQzMig3OTk0KS5mb3JrKCkpLmxkZWxpbSgpO3JldHVybiB0fSxTLmVuY29kZURlbGltaXRlZD1mdW5jdGlvbihlLHQpe3JldHVybiB0aGlzLmVuY29kZShlLHQpLmxkZWxpbSgpfSxTLmRlY29kZT1mdW5jdGlvbihlLHQpe2UgaW5zdGFuY2VvZiBzfHwoZT1zLmNyZWF0ZShlKSk7Zm9yKHZhciBuPXZvaWQgMD09PXQ/ZS5sZW46ZS5wb3MrdCxvPW5ldyBjLmdvb2dsZS5wcm90b2J1Zi5GaWxlT3B0aW9ucztlLnBvczxuOyl7dmFyIHI9ZS51aW50MzIoKTtzd2l0Y2gocj4+PjMpe2Nhc2UgMTpvLmphdmFQYWNrYWdlPWUuc3RyaW5nKCk7YnJlYWs7Y2FzZSA4Om8uamF2YU91dGVyQ2xhc3NuYW1lPWUuc3RyaW5nKCk7YnJlYWs7Y2FzZSAxMDpvLmphdmFNdWx0aXBsZUZpbGVzPWUuYm9vbCgpO2JyZWFrO2Nhc2UgMjA6by5qYXZhR2VuZXJhdGVFcXVhbHNBbmRIYXNoPWUuYm9vbCgpO2JyZWFrO2Nhc2UgMjc6by5qYXZhU3RyaW5nQ2hlY2tVdGY4PWUuYm9vbCgpO2JyZWFrO2Nhc2UgOTpvLm9wdGltaXplRm9yPWUuaW50MzIoKTticmVhaztjYXNlIDExOm8uZ29QYWNrYWdlPWUuc3RyaW5nKCk7YnJlYWs7Y2FzZSAxNjpvLmNjR2VuZXJpY1NlcnZpY2VzPWUuYm9vbCgpO2JyZWFrO2Nhc2UgMTc6by5qYXZhR2VuZXJpY1NlcnZpY2VzPWUuYm9vbCgpO2JyZWFrO2Nhc2UgMTg6by5weUdlbmVyaWNTZXJ2aWNlcz1lLmJvb2woKTticmVhaztjYXNlIDQyOm8ucGhwR2VuZXJpY1NlcnZpY2VzPWUuYm9vbCgpO2JyZWFrO2Nhc2UgMjM6by5kZXByZWNhdGVkPWUuYm9vbCgpO2JyZWFrO2Nhc2UgMzE6by5jY0VuYWJsZUFyZW5hcz1lLmJvb2woKTticmVhaztjYXNlIDM2Om8ub2JqY0NsYXNzUHJlZml4PWUuc3RyaW5nKCk7YnJlYWs7Y2FzZSAzNzpvLmNzaGFycE5hbWVzcGFjZT1lLnN0cmluZygpO2JyZWFrO2Nhc2UgMzk6by5zd2lmdFByZWZpeD1lLnN0cmluZygpO2JyZWFrO2Nhc2UgNDA6by5waHBDbGFzc1ByZWZpeD1lLnN0cmluZygpO2JyZWFrO2Nhc2UgNDE6by5waHBOYW1lc3BhY2U9ZS5zdHJpbmcoKTticmVhaztjYXNlIDQ0Om8ucGhwTWV0YWRhdGFOYW1lc3BhY2U9ZS5zdHJpbmcoKTticmVhaztjYXNlIDQ1Om8ucnVieVBhY2thZ2U9ZS5zdHJpbmcoKTticmVhaztjYXNlIDk5OTpvLnVuaW50ZXJwcmV0ZWRPcHRpb24mJm8udW5pbnRlcnByZXRlZE9wdGlvbi5sZW5ndGh8fChvLnVuaW50ZXJwcmV0ZWRPcHRpb249W10pLG8udW5pbnRlcnByZXRlZE9wdGlvbi5wdXNoKGMuZ29vZ2xlLnByb3RvYnVmLlVuaW50ZXJwcmV0ZWRPcHRpb24uZGVjb2RlKGUsZS51aW50MzIoKSkpO2JyZWFrO2RlZmF1bHQ6ZS5za2lwVHlwZSg3JnIpfX1yZXR1cm4gb30sUy5kZWNvZGVEZWxpbWl0ZWQ9ZnVuY3Rpb24oZSl7cmV0dXJuIGUgaW5zdGFuY2VvZiBzfHwoZT1uZXcgcyhlKSksdGhpcy5kZWNvZGUoZSxlLnVpbnQzMigpKX0sUy52ZXJpZnk9ZnVuY3Rpb24oZSl7aWYoXCJvYmplY3RcIiE9dHlwZW9mIGV8fG51bGw9PT1lKXJldHVyblwib2JqZWN0IGV4cGVjdGVkXCI7aWYobnVsbCE9ZS5qYXZhUGFja2FnZSYmZS5oYXNPd25Qcm9wZXJ0eShcImphdmFQYWNrYWdlXCIpJiYhdS5pc1N0cmluZyhlLmphdmFQYWNrYWdlKSlyZXR1cm5cImphdmFQYWNrYWdlOiBzdHJpbmcgZXhwZWN0ZWRcIjtpZihudWxsIT1lLmphdmFPdXRlckNsYXNzbmFtZSYmZS5oYXNPd25Qcm9wZXJ0eShcImphdmFPdXRlckNsYXNzbmFtZVwiKSYmIXUuaXNTdHJpbmcoZS5qYXZhT3V0ZXJDbGFzc25hbWUpKXJldHVyblwiamF2YU91dGVyQ2xhc3NuYW1lOiBzdHJpbmcgZXhwZWN0ZWRcIjtpZihudWxsIT1lLmphdmFNdWx0aXBsZUZpbGVzJiZlLmhhc093blByb3BlcnR5KFwiamF2YU11bHRpcGxlRmlsZXNcIikmJlwiYm9vbGVhblwiIT10eXBlb2YgZS5qYXZhTXVsdGlwbGVGaWxlcylyZXR1cm5cImphdmFNdWx0aXBsZUZpbGVzOiBib29sZWFuIGV4cGVjdGVkXCI7aWYobnVsbCE9ZS5qYXZhR2VuZXJhdGVFcXVhbHNBbmRIYXNoJiZlLmhhc093blByb3BlcnR5KFwiamF2YUdlbmVyYXRlRXF1YWxzQW5kSGFzaFwiKSYmXCJib29sZWFuXCIhPXR5cGVvZiBlLmphdmFHZW5lcmF0ZUVxdWFsc0FuZEhhc2gpcmV0dXJuXCJqYXZhR2VuZXJhdGVFcXVhbHNBbmRIYXNoOiBib29sZWFuIGV4cGVjdGVkXCI7aWYobnVsbCE9ZS5qYXZhU3RyaW5nQ2hlY2tVdGY4JiZlLmhhc093blByb3BlcnR5KFwiamF2YVN0cmluZ0NoZWNrVXRmOFwiKSYmXCJib29sZWFuXCIhPXR5cGVvZiBlLmphdmFTdHJpbmdDaGVja1V0ZjgpcmV0dXJuXCJqYXZhU3RyaW5nQ2hlY2tVdGY4OiBib29sZWFuIGV4cGVjdGVkXCI7aWYobnVsbCE9ZS5vcHRpbWl6ZUZvciYmZS5oYXNPd25Qcm9wZXJ0eShcIm9wdGltaXplRm9yXCIpKXN3aXRjaChlLm9wdGltaXplRm9yKXtkZWZhdWx0OnJldHVyblwib3B0aW1pemVGb3I6IGVudW0gdmFsdWUgZXhwZWN0ZWRcIjtjYXNlIDE6Y2FzZSAyOmNhc2UgMzp9aWYobnVsbCE9ZS5nb1BhY2thZ2UmJmUuaGFzT3duUHJvcGVydHkoXCJnb1BhY2thZ2VcIikmJiF1LmlzU3RyaW5nKGUuZ29QYWNrYWdlKSlyZXR1cm5cImdvUGFja2FnZTogc3RyaW5nIGV4cGVjdGVkXCI7aWYobnVsbCE9ZS5jY0dlbmVyaWNTZXJ2aWNlcyYmZS5oYXNPd25Qcm9wZXJ0eShcImNjR2VuZXJpY1NlcnZpY2VzXCIpJiZcImJvb2xlYW5cIiE9dHlwZW9mIGUuY2NHZW5lcmljU2VydmljZXMpcmV0dXJuXCJjY0dlbmVyaWNTZXJ2aWNlczogYm9vbGVhbiBleHBlY3RlZFwiO2lmKG51bGwhPWUuamF2YUdlbmVyaWNTZXJ2aWNlcyYmZS5oYXNPd25Qcm9wZXJ0eShcImphdmFHZW5lcmljU2VydmljZXNcIikmJlwiYm9vbGVhblwiIT10eXBlb2YgZS5qYXZhR2VuZXJpY1NlcnZpY2VzKXJldHVyblwiamF2YUdlbmVyaWNTZXJ2aWNlczogYm9vbGVhbiBleHBlY3RlZFwiO2lmKG51bGwhPWUucHlHZW5lcmljU2VydmljZXMmJmUuaGFzT3duUHJvcGVydHkoXCJweUdlbmVyaWNTZXJ2aWNlc1wiKSYmXCJib29sZWFuXCIhPXR5cGVvZiBlLnB5R2VuZXJpY1NlcnZpY2VzKXJldHVyblwicHlHZW5lcmljU2VydmljZXM6IGJvb2xlYW4gZXhwZWN0ZWRcIjtpZihudWxsIT1lLnBocEdlbmVyaWNTZXJ2aWNlcyYmZS5oYXNPd25Qcm9wZXJ0eShcInBocEdlbmVyaWNTZXJ2aWNlc1wiKSYmXCJib29sZWFuXCIhPXR5cGVvZiBlLnBocEdlbmVyaWNTZXJ2aWNlcylyZXR1cm5cInBocEdlbmVyaWNTZXJ2aWNlczogYm9vbGVhbiBleHBlY3RlZFwiO2lmKG51bGwhPWUuZGVwcmVjYXRlZCYmZS5oYXNPd25Qcm9wZXJ0eShcImRlcHJlY2F0ZWRcIikmJlwiYm9vbGVhblwiIT10eXBlb2YgZS5kZXByZWNhdGVkKXJldHVyblwiZGVwcmVjYXRlZDogYm9vbGVhbiBleHBlY3RlZFwiO2lmKG51bGwhPWUuY2NFbmFibGVBcmVuYXMmJmUuaGFzT3duUHJvcGVydHkoXCJjY0VuYWJsZUFyZW5hc1wiKSYmXCJib29sZWFuXCIhPXR5cGVvZiBlLmNjRW5hYmxlQXJlbmFzKXJldHVyblwiY2NFbmFibGVBcmVuYXM6IGJvb2xlYW4gZXhwZWN0ZWRcIjtpZihudWxsIT1lLm9iamNDbGFzc1ByZWZpeCYmZS5oYXNPd25Qcm9wZXJ0eShcIm9iamNDbGFzc1ByZWZpeFwiKSYmIXUuaXNTdHJpbmcoZS5vYmpjQ2xhc3NQcmVmaXgpKXJldHVyblwib2JqY0NsYXNzUHJlZml4OiBzdHJpbmcgZXhwZWN0ZWRcIjtpZihudWxsIT1lLmNzaGFycE5hbWVzcGFjZSYmZS5oYXNPd25Qcm9wZXJ0eShcImNzaGFycE5hbWVzcGFjZVwiKSYmIXUuaXNTdHJpbmcoZS5jc2hhcnBOYW1lc3BhY2UpKXJldHVyblwiY3NoYXJwTmFtZXNwYWNlOiBzdHJpbmcgZXhwZWN0ZWRcIjtpZihudWxsIT1lLnN3aWZ0UHJlZml4JiZlLmhhc093blByb3BlcnR5KFwic3dpZnRQcmVmaXhcIikmJiF1LmlzU3RyaW5nKGUuc3dpZnRQcmVmaXgpKXJldHVyblwic3dpZnRQcmVmaXg6IHN0cmluZyBleHBlY3RlZFwiO2lmKG51bGwhPWUucGhwQ2xhc3NQcmVmaXgmJmUuaGFzT3duUHJvcGVydHkoXCJwaHBDbGFzc1ByZWZpeFwiKSYmIXUuaXNTdHJpbmcoZS5waHBDbGFzc1ByZWZpeCkpcmV0dXJuXCJwaHBDbGFzc1ByZWZpeDogc3RyaW5nIGV4cGVjdGVkXCI7aWYobnVsbCE9ZS5waHBOYW1lc3BhY2UmJmUuaGFzT3duUHJvcGVydHkoXCJwaHBOYW1lc3BhY2VcIikmJiF1LmlzU3RyaW5nKGUucGhwTmFtZXNwYWNlKSlyZXR1cm5cInBocE5hbWVzcGFjZTogc3RyaW5nIGV4cGVjdGVkXCI7aWYobnVsbCE9ZS5waHBNZXRhZGF0YU5hbWVzcGFjZSYmZS5oYXNPd25Qcm9wZXJ0eShcInBocE1ldGFkYXRhTmFtZXNwYWNlXCIpJiYhdS5pc1N0cmluZyhlLnBocE1ldGFkYXRhTmFtZXNwYWNlKSlyZXR1cm5cInBocE1ldGFkYXRhTmFtZXNwYWNlOiBzdHJpbmcgZXhwZWN0ZWRcIjtpZihudWxsIT1lLnJ1YnlQYWNrYWdlJiZlLmhhc093blByb3BlcnR5KFwicnVieVBhY2thZ2VcIikmJiF1LmlzU3RyaW5nKGUucnVieVBhY2thZ2UpKXJldHVyblwicnVieVBhY2thZ2U6IHN0cmluZyBleHBlY3RlZFwiO2lmKG51bGwhPWUudW5pbnRlcnByZXRlZE9wdGlvbiYmZS5oYXNPd25Qcm9wZXJ0eShcInVuaW50ZXJwcmV0ZWRPcHRpb25cIikpe2lmKCFBcnJheS5pc0FycmF5KGUudW5pbnRlcnByZXRlZE9wdGlvbikpcmV0dXJuXCJ1bmludGVycHJldGVkT3B0aW9uOiBhcnJheSBleHBlY3RlZFwiO2Zvcih2YXIgdD0wO3Q8ZS51bmludGVycHJldGVkT3B0aW9uLmxlbmd0aDsrK3Qpe3ZhciBuPWMuZ29vZ2xlLnByb3RvYnVmLlVuaW50ZXJwcmV0ZWRPcHRpb24udmVyaWZ5KGUudW5pbnRlcnByZXRlZE9wdGlvblt0XSk7aWYobilyZXR1cm5cInVuaW50ZXJwcmV0ZWRPcHRpb24uXCIrbn19cmV0dXJuIG51bGx9LFMuZnJvbU9iamVjdD1mdW5jdGlvbihlKXtpZihlIGluc3RhbmNlb2YgYy5nb29nbGUucHJvdG9idWYuRmlsZU9wdGlvbnMpcmV0dXJuIGU7dmFyIHQ9bmV3IGMuZ29vZ2xlLnByb3RvYnVmLkZpbGVPcHRpb25zO3N3aXRjaChudWxsIT1lLmphdmFQYWNrYWdlJiYodC5qYXZhUGFja2FnZT1TdHJpbmcoZS5qYXZhUGFja2FnZSkpLG51bGwhPWUuamF2YU91dGVyQ2xhc3NuYW1lJiYodC5qYXZhT3V0ZXJDbGFzc25hbWU9U3RyaW5nKGUuamF2YU91dGVyQ2xhc3NuYW1lKSksbnVsbCE9ZS5qYXZhTXVsdGlwbGVGaWxlcyYmKHQuamF2YU11bHRpcGxlRmlsZXM9Qm9vbGVhbihlLmphdmFNdWx0aXBsZUZpbGVzKSksbnVsbCE9ZS5qYXZhR2VuZXJhdGVFcXVhbHNBbmRIYXNoJiYodC5qYXZhR2VuZXJhdGVFcXVhbHNBbmRIYXNoPUJvb2xlYW4oZS5qYXZhR2VuZXJhdGVFcXVhbHNBbmRIYXNoKSksbnVsbCE9ZS5qYXZhU3RyaW5nQ2hlY2tVdGY4JiYodC5qYXZhU3RyaW5nQ2hlY2tVdGY4PUJvb2xlYW4oZS5qYXZhU3RyaW5nQ2hlY2tVdGY4KSksZS5vcHRpbWl6ZUZvcil7Y2FzZVwiU1BFRURcIjpjYXNlIDE6dC5vcHRpbWl6ZUZvcj0xO2JyZWFrO2Nhc2VcIkNPREVfU0laRVwiOmNhc2UgMjp0Lm9wdGltaXplRm9yPTI7YnJlYWs7Y2FzZVwiTElURV9SVU5USU1FXCI6Y2FzZSAzOnQub3B0aW1pemVGb3I9M31pZihudWxsIT1lLmdvUGFja2FnZSYmKHQuZ29QYWNrYWdlPVN0cmluZyhlLmdvUGFja2FnZSkpLG51bGwhPWUuY2NHZW5lcmljU2VydmljZXMmJih0LmNjR2VuZXJpY1NlcnZpY2VzPUJvb2xlYW4oZS5jY0dlbmVyaWNTZXJ2aWNlcykpLG51bGwhPWUuamF2YUdlbmVyaWNTZXJ2aWNlcyYmKHQuamF2YUdlbmVyaWNTZXJ2aWNlcz1Cb29sZWFuKGUuamF2YUdlbmVyaWNTZXJ2aWNlcykpLG51bGwhPWUucHlHZW5lcmljU2VydmljZXMmJih0LnB5R2VuZXJpY1NlcnZpY2VzPUJvb2xlYW4oZS5weUdlbmVyaWNTZXJ2aWNlcykpLG51bGwhPWUucGhwR2VuZXJpY1NlcnZpY2VzJiYodC5waHBHZW5lcmljU2VydmljZXM9Qm9vbGVhbihlLnBocEdlbmVyaWNTZXJ2aWNlcykpLG51bGwhPWUuZGVwcmVjYXRlZCYmKHQuZGVwcmVjYXRlZD1Cb29sZWFuKGUuZGVwcmVjYXRlZCkpLG51bGwhPWUuY2NFbmFibGVBcmVuYXMmJih0LmNjRW5hYmxlQXJlbmFzPUJvb2xlYW4oZS5jY0VuYWJsZUFyZW5hcykpLG51bGwhPWUub2JqY0NsYXNzUHJlZml4JiYodC5vYmpjQ2xhc3NQcmVmaXg9U3RyaW5nKGUub2JqY0NsYXNzUHJlZml4KSksbnVsbCE9ZS5jc2hhcnBOYW1lc3BhY2UmJih0LmNzaGFycE5hbWVzcGFjZT1TdHJpbmcoZS5jc2hhcnBOYW1lc3BhY2UpKSxudWxsIT1lLnN3aWZ0UHJlZml4JiYodC5zd2lmdFByZWZpeD1TdHJpbmcoZS5zd2lmdFByZWZpeCkpLG51bGwhPWUucGhwQ2xhc3NQcmVmaXgmJih0LnBocENsYXNzUHJlZml4PVN0cmluZyhlLnBocENsYXNzUHJlZml4KSksbnVsbCE9ZS5waHBOYW1lc3BhY2UmJih0LnBocE5hbWVzcGFjZT1TdHJpbmcoZS5waHBOYW1lc3BhY2UpKSxudWxsIT1lLnBocE1ldGFkYXRhTmFtZXNwYWNlJiYodC5waHBNZXRhZGF0YU5hbWVzcGFjZT1TdHJpbmcoZS5waHBNZXRhZGF0YU5hbWVzcGFjZSkpLG51bGwhPWUucnVieVBhY2thZ2UmJih0LnJ1YnlQYWNrYWdlPVN0cmluZyhlLnJ1YnlQYWNrYWdlKSksZS51bmludGVycHJldGVkT3B0aW9uKXtpZighQXJyYXkuaXNBcnJheShlLnVuaW50ZXJwcmV0ZWRPcHRpb24pKXRocm93IFR5cGVFcnJvcihcIi5nb29nbGUucHJvdG9idWYuRmlsZU9wdGlvbnMudW5pbnRlcnByZXRlZE9wdGlvbjogYXJyYXkgZXhwZWN0ZWRcIik7dC51bmludGVycHJldGVkT3B0aW9uPVtdO2Zvcih2YXIgbj0wO248ZS51bmludGVycHJldGVkT3B0aW9uLmxlbmd0aDsrK24pe2lmKFwib2JqZWN0XCIhPXR5cGVvZiBlLnVuaW50ZXJwcmV0ZWRPcHRpb25bbl0pdGhyb3cgVHlwZUVycm9yKFwiLmdvb2dsZS5wcm90b2J1Zi5GaWxlT3B0aW9ucy51bmludGVycHJldGVkT3B0aW9uOiBvYmplY3QgZXhwZWN0ZWRcIik7dC51bmludGVycHJldGVkT3B0aW9uW25dPWMuZ29vZ2xlLnByb3RvYnVmLlVuaW50ZXJwcmV0ZWRPcHRpb24uZnJvbU9iamVjdChlLnVuaW50ZXJwcmV0ZWRPcHRpb25bbl0pfX1yZXR1cm4gdH0sUy50b09iamVjdD1mdW5jdGlvbihlLHQpe3ZhciBuPXt9O2lmKCgodD10fHx7fSkuYXJyYXlzfHx0LmRlZmF1bHRzKSYmKG4udW5pbnRlcnByZXRlZE9wdGlvbj1bXSksdC5kZWZhdWx0cyYmKG4uamF2YVBhY2thZ2U9XCJcIixuLmphdmFPdXRlckNsYXNzbmFtZT1cIlwiLG4ub3B0aW1pemVGb3I9dC5lbnVtcz09PVN0cmluZz9cIlNQRUVEXCI6MSxuLmphdmFNdWx0aXBsZUZpbGVzPSExLG4uZ29QYWNrYWdlPVwiXCIsbi5jY0dlbmVyaWNTZXJ2aWNlcz0hMSxuLmphdmFHZW5lcmljU2VydmljZXM9ITEsbi5weUdlbmVyaWNTZXJ2aWNlcz0hMSxuLmphdmFHZW5lcmF0ZUVxdWFsc0FuZEhhc2g9ITEsbi5kZXByZWNhdGVkPSExLG4uamF2YVN0cmluZ0NoZWNrVXRmOD0hMSxuLmNjRW5hYmxlQXJlbmFzPSEwLG4ub2JqY0NsYXNzUHJlZml4PVwiXCIsbi5jc2hhcnBOYW1lc3BhY2U9XCJcIixuLnN3aWZ0UHJlZml4PVwiXCIsbi5waHBDbGFzc1ByZWZpeD1cIlwiLG4ucGhwTmFtZXNwYWNlPVwiXCIsbi5waHBHZW5lcmljU2VydmljZXM9ITEsbi5waHBNZXRhZGF0YU5hbWVzcGFjZT1cIlwiLG4ucnVieVBhY2thZ2U9XCJcIiksbnVsbCE9ZS5qYXZhUGFja2FnZSYmZS5oYXNPd25Qcm9wZXJ0eShcImphdmFQYWNrYWdlXCIpJiYobi5qYXZhUGFja2FnZT1lLmphdmFQYWNrYWdlKSxudWxsIT1lLmphdmFPdXRlckNsYXNzbmFtZSYmZS5oYXNPd25Qcm9wZXJ0eShcImphdmFPdXRlckNsYXNzbmFtZVwiKSYmKG4uamF2YU91dGVyQ2xhc3NuYW1lPWUuamF2YU91dGVyQ2xhc3NuYW1lKSxudWxsIT1lLm9wdGltaXplRm9yJiZlLmhhc093blByb3BlcnR5KFwib3B0aW1pemVGb3JcIikmJihuLm9wdGltaXplRm9yPXQuZW51bXM9PT1TdHJpbmc/Yy5nb29nbGUucHJvdG9idWYuRmlsZU9wdGlvbnMuT3B0aW1pemVNb2RlW2Uub3B0aW1pemVGb3JdOmUub3B0aW1pemVGb3IpLG51bGwhPWUuamF2YU11bHRpcGxlRmlsZXMmJmUuaGFzT3duUHJvcGVydHkoXCJqYXZhTXVsdGlwbGVGaWxlc1wiKSYmKG4uamF2YU11bHRpcGxlRmlsZXM9ZS5qYXZhTXVsdGlwbGVGaWxlcyksbnVsbCE9ZS5nb1BhY2thZ2UmJmUuaGFzT3duUHJvcGVydHkoXCJnb1BhY2thZ2VcIikmJihuLmdvUGFja2FnZT1lLmdvUGFja2FnZSksbnVsbCE9ZS5jY0dlbmVyaWNTZXJ2aWNlcyYmZS5oYXNPd25Qcm9wZXJ0eShcImNjR2VuZXJpY1NlcnZpY2VzXCIpJiYobi5jY0dlbmVyaWNTZXJ2aWNlcz1lLmNjR2VuZXJpY1NlcnZpY2VzKSxudWxsIT1lLmphdmFHZW5lcmljU2VydmljZXMmJmUuaGFzT3duUHJvcGVydHkoXCJqYXZhR2VuZXJpY1NlcnZpY2VzXCIpJiYobi5qYXZhR2VuZXJpY1NlcnZpY2VzPWUuamF2YUdlbmVyaWNTZXJ2aWNlcyksbnVsbCE9ZS5weUdlbmVyaWNTZXJ2aWNlcyYmZS5oYXNPd25Qcm9wZXJ0eShcInB5R2VuZXJpY1NlcnZpY2VzXCIpJiYobi5weUdlbmVyaWNTZXJ2aWNlcz1lLnB5R2VuZXJpY1NlcnZpY2VzKSxudWxsIT1lLmphdmFHZW5lcmF0ZUVxdWFsc0FuZEhhc2gmJmUuaGFzT3duUHJvcGVydHkoXCJqYXZhR2VuZXJhdGVFcXVhbHNBbmRIYXNoXCIpJiYobi5qYXZhR2VuZXJhdGVFcXVhbHNBbmRIYXNoPWUuamF2YUdlbmVyYXRlRXF1YWxzQW5kSGFzaCksbnVsbCE9ZS5kZXByZWNhdGVkJiZlLmhhc093blByb3BlcnR5KFwiZGVwcmVjYXRlZFwiKSYmKG4uZGVwcmVjYXRlZD1lLmRlcHJlY2F0ZWQpLG51bGwhPWUuamF2YVN0cmluZ0NoZWNrVXRmOCYmZS5oYXNPd25Qcm9wZXJ0eShcImphdmFTdHJpbmdDaGVja1V0ZjhcIikmJihuLmphdmFTdHJpbmdDaGVja1V0Zjg9ZS5qYXZhU3RyaW5nQ2hlY2tVdGY4KSxudWxsIT1lLmNjRW5hYmxlQXJlbmFzJiZlLmhhc093blByb3BlcnR5KFwiY2NFbmFibGVBcmVuYXNcIikmJihuLmNjRW5hYmxlQXJlbmFzPWUuY2NFbmFibGVBcmVuYXMpLG51bGwhPWUub2JqY0NsYXNzUHJlZml4JiZlLmhhc093blByb3BlcnR5KFwib2JqY0NsYXNzUHJlZml4XCIpJiYobi5vYmpjQ2xhc3NQcmVmaXg9ZS5vYmpjQ2xhc3NQcmVmaXgpLG51bGwhPWUuY3NoYXJwTmFtZXNwYWNlJiZlLmhhc093blByb3BlcnR5KFwiY3NoYXJwTmFtZXNwYWNlXCIpJiYobi5jc2hhcnBOYW1lc3BhY2U9ZS5jc2hhcnBOYW1lc3BhY2UpLG51bGwhPWUuc3dpZnRQcmVmaXgmJmUuaGFzT3duUHJvcGVydHkoXCJzd2lmdFByZWZpeFwiKSYmKG4uc3dpZnRQcmVmaXg9ZS5zd2lmdFByZWZpeCksbnVsbCE9ZS5waHBDbGFzc1ByZWZpeCYmZS5oYXNPd25Qcm9wZXJ0eShcInBocENsYXNzUHJlZml4XCIpJiYobi5waHBDbGFzc1ByZWZpeD1lLnBocENsYXNzUHJlZml4KSxudWxsIT1lLnBocE5hbWVzcGFjZSYmZS5oYXNPd25Qcm9wZXJ0eShcInBocE5hbWVzcGFjZVwiKSYmKG4ucGhwTmFtZXNwYWNlPWUucGhwTmFtZXNwYWNlKSxudWxsIT1lLnBocEdlbmVyaWNTZXJ2aWNlcyYmZS5oYXNPd25Qcm9wZXJ0eShcInBocEdlbmVyaWNTZXJ2aWNlc1wiKSYmKG4ucGhwR2VuZXJpY1NlcnZpY2VzPWUucGhwR2VuZXJpY1NlcnZpY2VzKSxudWxsIT1lLnBocE1ldGFkYXRhTmFtZXNwYWNlJiZlLmhhc093blByb3BlcnR5KFwicGhwTWV0YWRhdGFOYW1lc3BhY2VcIikmJihuLnBocE1ldGFkYXRhTmFtZXNwYWNlPWUucGhwTWV0YWRhdGFOYW1lc3BhY2UpLG51bGwhPWUucnVieVBhY2thZ2UmJmUuaGFzT3duUHJvcGVydHkoXCJydWJ5UGFja2FnZVwiKSYmKG4ucnVieVBhY2thZ2U9ZS5ydWJ5UGFja2FnZSksZS51bmludGVycHJldGVkT3B0aW9uJiZlLnVuaW50ZXJwcmV0ZWRPcHRpb24ubGVuZ3RoKXtuLnVuaW50ZXJwcmV0ZWRPcHRpb249W107Zm9yKHZhciBvPTA7bzxlLnVuaW50ZXJwcmV0ZWRPcHRpb24ubGVuZ3RoOysrbyluLnVuaW50ZXJwcmV0ZWRPcHRpb25bb109Yy5nb29nbGUucHJvdG9idWYuVW5pbnRlcnByZXRlZE9wdGlvbi50b09iamVjdChlLnVuaW50ZXJwcmV0ZWRPcHRpb25bb10sdCl9cmV0dXJuIG59LFMucHJvdG90eXBlLnRvSlNPTj1mdW5jdGlvbigpe3JldHVybiB0aGlzLmNvbnN0cnVjdG9yLnRvT2JqZWN0KHRoaXMsby51dGlsLnRvSlNPTk9wdGlvbnMpfSxTLk9wdGltaXplTW9kZT0oZT17fSwodD1PYmplY3QuY3JlYXRlKGUpKVtlWzFdPVwiU1BFRURcIl09MSx0W2VbMl09XCJDT0RFX1NJWkVcIl09Mix0W2VbM109XCJMSVRFX1JVTlRJTUVcIl09Myx0KSxTKSxuLk1lc3NhZ2VPcHRpb25zPShrLnByb3RvdHlwZS5tZXNzYWdlU2V0V2lyZUZvcm1hdD0hMSxrLnByb3RvdHlwZS5ub1N0YW5kYXJkRGVzY3JpcHRvckFjY2Vzc29yPSExLGsucHJvdG90eXBlLmRlcHJlY2F0ZWQ9ITEsay5wcm90b3R5cGUubWFwRW50cnk9ITEsay5wcm90b3R5cGUudW5pbnRlcnByZXRlZE9wdGlvbj11LmVtcHR5QXJyYXksay5jcmVhdGU9ZnVuY3Rpb24oZSl7cmV0dXJuIG5ldyBrKGUpfSxrLmVuY29kZT1mdW5jdGlvbihlLHQpe2lmKHQ9dHx8ci5jcmVhdGUoKSxudWxsIT1lLm1lc3NhZ2VTZXRXaXJlRm9ybWF0JiZPYmplY3QuaGFzT3duUHJvcGVydHkuY2FsbChlLFwibWVzc2FnZVNldFdpcmVGb3JtYXRcIikmJnQudWludDMyKDgpLmJvb2woZS5tZXNzYWdlU2V0V2lyZUZvcm1hdCksbnVsbCE9ZS5ub1N0YW5kYXJkRGVzY3JpcHRvckFjY2Vzc29yJiZPYmplY3QuaGFzT3duUHJvcGVydHkuY2FsbChlLFwibm9TdGFuZGFyZERlc2NyaXB0b3JBY2Nlc3NvclwiKSYmdC51aW50MzIoMTYpLmJvb2woZS5ub1N0YW5kYXJkRGVzY3JpcHRvckFjY2Vzc29yKSxudWxsIT1lLmRlcHJlY2F0ZWQmJk9iamVjdC5oYXNPd25Qcm9wZXJ0eS5jYWxsKGUsXCJkZXByZWNhdGVkXCIpJiZ0LnVpbnQzMigyNCkuYm9vbChlLmRlcHJlY2F0ZWQpLG51bGwhPWUubWFwRW50cnkmJk9iamVjdC5oYXNPd25Qcm9wZXJ0eS5jYWxsKGUsXCJtYXBFbnRyeVwiKSYmdC51aW50MzIoNTYpLmJvb2woZS5tYXBFbnRyeSksbnVsbCE9ZS51bmludGVycHJldGVkT3B0aW9uJiZlLnVuaW50ZXJwcmV0ZWRPcHRpb24ubGVuZ3RoKWZvcih2YXIgbj0wO248ZS51bmludGVycHJldGVkT3B0aW9uLmxlbmd0aDsrK24pYy5nb29nbGUucHJvdG9idWYuVW5pbnRlcnByZXRlZE9wdGlvbi5lbmNvZGUoZS51bmludGVycHJldGVkT3B0aW9uW25dLHQudWludDMyKDc5OTQpLmZvcmsoKSkubGRlbGltKCk7cmV0dXJuIHR9LGsuZW5jb2RlRGVsaW1pdGVkPWZ1bmN0aW9uKGUsdCl7cmV0dXJuIHRoaXMuZW5jb2RlKGUsdCkubGRlbGltKCl9LGsuZGVjb2RlPWZ1bmN0aW9uKGUsdCl7ZSBpbnN0YW5jZW9mIHN8fChlPXMuY3JlYXRlKGUpKTtmb3IodmFyIG49dm9pZCAwPT09dD9lLmxlbjplLnBvcyt0LG89bmV3IGMuZ29vZ2xlLnByb3RvYnVmLk1lc3NhZ2VPcHRpb25zO2UucG9zPG47KXt2YXIgcj1lLnVpbnQzMigpO3N3aXRjaChyPj4+Myl7Y2FzZSAxOm8ubWVzc2FnZVNldFdpcmVGb3JtYXQ9ZS5ib29sKCk7YnJlYWs7Y2FzZSAyOm8ubm9TdGFuZGFyZERlc2NyaXB0b3JBY2Nlc3Nvcj1lLmJvb2woKTticmVhaztjYXNlIDM6by5kZXByZWNhdGVkPWUuYm9vbCgpO2JyZWFrO2Nhc2UgNzpvLm1hcEVudHJ5PWUuYm9vbCgpO2JyZWFrO2Nhc2UgOTk5Om8udW5pbnRlcnByZXRlZE9wdGlvbiYmby51bmludGVycHJldGVkT3B0aW9uLmxlbmd0aHx8KG8udW5pbnRlcnByZXRlZE9wdGlvbj1bXSksby51bmludGVycHJldGVkT3B0aW9uLnB1c2goYy5nb29nbGUucHJvdG9idWYuVW5pbnRlcnByZXRlZE9wdGlvbi5kZWNvZGUoZSxlLnVpbnQzMigpKSk7YnJlYWs7ZGVmYXVsdDplLnNraXBUeXBlKDcmcil9fXJldHVybiBvfSxrLmRlY29kZURlbGltaXRlZD1mdW5jdGlvbihlKXtyZXR1cm4gZSBpbnN0YW5jZW9mIHN8fChlPW5ldyBzKGUpKSx0aGlzLmRlY29kZShlLGUudWludDMyKCkpfSxrLnZlcmlmeT1mdW5jdGlvbihlKXtpZihcIm9iamVjdFwiIT10eXBlb2YgZXx8bnVsbD09PWUpcmV0dXJuXCJvYmplY3QgZXhwZWN0ZWRcIjtpZihudWxsIT1lLm1lc3NhZ2VTZXRXaXJlRm9ybWF0JiZlLmhhc093blByb3BlcnR5KFwibWVzc2FnZVNldFdpcmVGb3JtYXRcIikmJlwiYm9vbGVhblwiIT10eXBlb2YgZS5tZXNzYWdlU2V0V2lyZUZvcm1hdClyZXR1cm5cIm1lc3NhZ2VTZXRXaXJlRm9ybWF0OiBib29sZWFuIGV4cGVjdGVkXCI7aWYobnVsbCE9ZS5ub1N0YW5kYXJkRGVzY3JpcHRvckFjY2Vzc29yJiZlLmhhc093blByb3BlcnR5KFwibm9TdGFuZGFyZERlc2NyaXB0b3JBY2Nlc3NvclwiKSYmXCJib29sZWFuXCIhPXR5cGVvZiBlLm5vU3RhbmRhcmREZXNjcmlwdG9yQWNjZXNzb3IpcmV0dXJuXCJub1N0YW5kYXJkRGVzY3JpcHRvckFjY2Vzc29yOiBib29sZWFuIGV4cGVjdGVkXCI7aWYobnVsbCE9ZS5kZXByZWNhdGVkJiZlLmhhc093blByb3BlcnR5KFwiZGVwcmVjYXRlZFwiKSYmXCJib29sZWFuXCIhPXR5cGVvZiBlLmRlcHJlY2F0ZWQpcmV0dXJuXCJkZXByZWNhdGVkOiBib29sZWFuIGV4cGVjdGVkXCI7aWYobnVsbCE9ZS5tYXBFbnRyeSYmZS5oYXNPd25Qcm9wZXJ0eShcIm1hcEVudHJ5XCIpJiZcImJvb2xlYW5cIiE9dHlwZW9mIGUubWFwRW50cnkpcmV0dXJuXCJtYXBFbnRyeTogYm9vbGVhbiBleHBlY3RlZFwiO2lmKG51bGwhPWUudW5pbnRlcnByZXRlZE9wdGlvbiYmZS5oYXNPd25Qcm9wZXJ0eShcInVuaW50ZXJwcmV0ZWRPcHRpb25cIikpe2lmKCFBcnJheS5pc0FycmF5KGUudW5pbnRlcnByZXRlZE9wdGlvbikpcmV0dXJuXCJ1bmludGVycHJldGVkT3B0aW9uOiBhcnJheSBleHBlY3RlZFwiO2Zvcih2YXIgdD0wO3Q8ZS51bmludGVycHJldGVkT3B0aW9uLmxlbmd0aDsrK3Qpe3ZhciBuPWMuZ29vZ2xlLnByb3RvYnVmLlVuaW50ZXJwcmV0ZWRPcHRpb24udmVyaWZ5KGUudW5pbnRlcnByZXRlZE9wdGlvblt0XSk7aWYobilyZXR1cm5cInVuaW50ZXJwcmV0ZWRPcHRpb24uXCIrbn19cmV0dXJuIG51bGx9LGsuZnJvbU9iamVjdD1mdW5jdGlvbihlKXtpZihlIGluc3RhbmNlb2YgYy5nb29nbGUucHJvdG9idWYuTWVzc2FnZU9wdGlvbnMpcmV0dXJuIGU7dmFyIHQ9bmV3IGMuZ29vZ2xlLnByb3RvYnVmLk1lc3NhZ2VPcHRpb25zO2lmKG51bGwhPWUubWVzc2FnZVNldFdpcmVGb3JtYXQmJih0Lm1lc3NhZ2VTZXRXaXJlRm9ybWF0PUJvb2xlYW4oZS5tZXNzYWdlU2V0V2lyZUZvcm1hdCkpLG51bGwhPWUubm9TdGFuZGFyZERlc2NyaXB0b3JBY2Nlc3NvciYmKHQubm9TdGFuZGFyZERlc2NyaXB0b3JBY2Nlc3Nvcj1Cb29sZWFuKGUubm9TdGFuZGFyZERlc2NyaXB0b3JBY2Nlc3NvcikpLG51bGwhPWUuZGVwcmVjYXRlZCYmKHQuZGVwcmVjYXRlZD1Cb29sZWFuKGUuZGVwcmVjYXRlZCkpLG51bGwhPWUubWFwRW50cnkmJih0Lm1hcEVudHJ5PUJvb2xlYW4oZS5tYXBFbnRyeSkpLGUudW5pbnRlcnByZXRlZE9wdGlvbil7aWYoIUFycmF5LmlzQXJyYXkoZS51bmludGVycHJldGVkT3B0aW9uKSl0aHJvdyBUeXBlRXJyb3IoXCIuZ29vZ2xlLnByb3RvYnVmLk1lc3NhZ2VPcHRpb25zLnVuaW50ZXJwcmV0ZWRPcHRpb246IGFycmF5IGV4cGVjdGVkXCIpO3QudW5pbnRlcnByZXRlZE9wdGlvbj1bXTtmb3IodmFyIG49MDtuPGUudW5pbnRlcnByZXRlZE9wdGlvbi5sZW5ndGg7KytuKXtpZihcIm9iamVjdFwiIT10eXBlb2YgZS51bmludGVycHJldGVkT3B0aW9uW25dKXRocm93IFR5cGVFcnJvcihcIi5nb29nbGUucHJvdG9idWYuTWVzc2FnZU9wdGlvbnMudW5pbnRlcnByZXRlZE9wdGlvbjogb2JqZWN0IGV4cGVjdGVkXCIpO3QudW5pbnRlcnByZXRlZE9wdGlvbltuXT1jLmdvb2dsZS5wcm90b2J1Zi5VbmludGVycHJldGVkT3B0aW9uLmZyb21PYmplY3QoZS51bmludGVycHJldGVkT3B0aW9uW25dKX19cmV0dXJuIHR9LGsudG9PYmplY3Q9ZnVuY3Rpb24oZSx0KXt2YXIgbj17fTtpZigoKHQ9dHx8e30pLmFycmF5c3x8dC5kZWZhdWx0cykmJihuLnVuaW50ZXJwcmV0ZWRPcHRpb249W10pLHQuZGVmYXVsdHMmJihuLm1lc3NhZ2VTZXRXaXJlRm9ybWF0PSExLG4ubm9TdGFuZGFyZERlc2NyaXB0b3JBY2Nlc3Nvcj0hMSxuLmRlcHJlY2F0ZWQ9ITEsbi5tYXBFbnRyeT0hMSksbnVsbCE9ZS5tZXNzYWdlU2V0V2lyZUZvcm1hdCYmZS5oYXNPd25Qcm9wZXJ0eShcIm1lc3NhZ2VTZXRXaXJlRm9ybWF0XCIpJiYobi5tZXNzYWdlU2V0V2lyZUZvcm1hdD1lLm1lc3NhZ2VTZXRXaXJlRm9ybWF0KSxudWxsIT1lLm5vU3RhbmRhcmREZXNjcmlwdG9yQWNjZXNzb3ImJmUuaGFzT3duUHJvcGVydHkoXCJub1N0YW5kYXJkRGVzY3JpcHRvckFjY2Vzc29yXCIpJiYobi5ub1N0YW5kYXJkRGVzY3JpcHRvckFjY2Vzc29yPWUubm9TdGFuZGFyZERlc2NyaXB0b3JBY2Nlc3NvciksbnVsbCE9ZS5kZXByZWNhdGVkJiZlLmhhc093blByb3BlcnR5KFwiZGVwcmVjYXRlZFwiKSYmKG4uZGVwcmVjYXRlZD1lLmRlcHJlY2F0ZWQpLG51bGwhPWUubWFwRW50cnkmJmUuaGFzT3duUHJvcGVydHkoXCJtYXBFbnRyeVwiKSYmKG4ubWFwRW50cnk9ZS5tYXBFbnRyeSksZS51bmludGVycHJldGVkT3B0aW9uJiZlLnVuaW50ZXJwcmV0ZWRPcHRpb24ubGVuZ3RoKXtuLnVuaW50ZXJwcmV0ZWRPcHRpb249W107Zm9yKHZhciBvPTA7bzxlLnVuaW50ZXJwcmV0ZWRPcHRpb24ubGVuZ3RoOysrbyluLnVuaW50ZXJwcmV0ZWRPcHRpb25bb109Yy5nb29nbGUucHJvdG9idWYuVW5pbnRlcnByZXRlZE9wdGlvbi50b09iamVjdChlLnVuaW50ZXJwcmV0ZWRPcHRpb25bb10sdCl9cmV0dXJuIG59LGsucHJvdG90eXBlLnRvSlNPTj1mdW5jdGlvbigpe3JldHVybiB0aGlzLmNvbnN0cnVjdG9yLnRvT2JqZWN0KHRoaXMsby51dGlsLnRvSlNPTk9wdGlvbnMpfSxrKSxuLkZpZWxkT3B0aW9ucz0oRC5wcm90b3R5cGUuY3R5cGU9MCxELnByb3RvdHlwZS5wYWNrZWQ9ITEsRC5wcm90b3R5cGUuanN0eXBlPTAsRC5wcm90b3R5cGUubGF6eT0hMSxELnByb3RvdHlwZS5kZXByZWNhdGVkPSExLEQucHJvdG90eXBlLndlYWs9ITEsRC5wcm90b3R5cGUudW5pbnRlcnByZXRlZE9wdGlvbj11LmVtcHR5QXJyYXksRC5jcmVhdGU9ZnVuY3Rpb24oZSl7cmV0dXJuIG5ldyBEKGUpfSxELmVuY29kZT1mdW5jdGlvbihlLHQpe2lmKHQ9dHx8ci5jcmVhdGUoKSxudWxsIT1lLmN0eXBlJiZPYmplY3QuaGFzT3duUHJvcGVydHkuY2FsbChlLFwiY3R5cGVcIikmJnQudWludDMyKDgpLmludDMyKGUuY3R5cGUpLG51bGwhPWUucGFja2VkJiZPYmplY3QuaGFzT3duUHJvcGVydHkuY2FsbChlLFwicGFja2VkXCIpJiZ0LnVpbnQzMigxNikuYm9vbChlLnBhY2tlZCksbnVsbCE9ZS5kZXByZWNhdGVkJiZPYmplY3QuaGFzT3duUHJvcGVydHkuY2FsbChlLFwiZGVwcmVjYXRlZFwiKSYmdC51aW50MzIoMjQpLmJvb2woZS5kZXByZWNhdGVkKSxudWxsIT1lLmxhenkmJk9iamVjdC5oYXNPd25Qcm9wZXJ0eS5jYWxsKGUsXCJsYXp5XCIpJiZ0LnVpbnQzMig0MCkuYm9vbChlLmxhenkpLG51bGwhPWUuanN0eXBlJiZPYmplY3QuaGFzT3duUHJvcGVydHkuY2FsbChlLFwianN0eXBlXCIpJiZ0LnVpbnQzMig0OCkuaW50MzIoZS5qc3R5cGUpLG51bGwhPWUud2VhayYmT2JqZWN0Lmhhc093blByb3BlcnR5LmNhbGwoZSxcIndlYWtcIikmJnQudWludDMyKDgwKS5ib29sKGUud2VhayksbnVsbCE9ZS51bmludGVycHJldGVkT3B0aW9uJiZlLnVuaW50ZXJwcmV0ZWRPcHRpb24ubGVuZ3RoKWZvcih2YXIgbj0wO248ZS51bmludGVycHJldGVkT3B0aW9uLmxlbmd0aDsrK24pYy5nb29nbGUucHJvdG9idWYuVW5pbnRlcnByZXRlZE9wdGlvbi5lbmNvZGUoZS51bmludGVycHJldGVkT3B0aW9uW25dLHQudWludDMyKDc5OTQpLmZvcmsoKSkubGRlbGltKCk7cmV0dXJuIHR9LEQuZW5jb2RlRGVsaW1pdGVkPWZ1bmN0aW9uKGUsdCl7cmV0dXJuIHRoaXMuZW5jb2RlKGUsdCkubGRlbGltKCl9LEQuZGVjb2RlPWZ1bmN0aW9uKGUsdCl7ZSBpbnN0YW5jZW9mIHN8fChlPXMuY3JlYXRlKGUpKTtmb3IodmFyIG49dm9pZCAwPT09dD9lLmxlbjplLnBvcyt0LG89bmV3IGMuZ29vZ2xlLnByb3RvYnVmLkZpZWxkT3B0aW9ucztlLnBvczxuOyl7dmFyIHI9ZS51aW50MzIoKTtzd2l0Y2gocj4+PjMpe2Nhc2UgMTpvLmN0eXBlPWUuaW50MzIoKTticmVhaztjYXNlIDI6by5wYWNrZWQ9ZS5ib29sKCk7YnJlYWs7Y2FzZSA2Om8uanN0eXBlPWUuaW50MzIoKTticmVhaztjYXNlIDU6by5sYXp5PWUuYm9vbCgpO2JyZWFrO2Nhc2UgMzpvLmRlcHJlY2F0ZWQ9ZS5ib29sKCk7YnJlYWs7Y2FzZSAxMDpvLndlYWs9ZS5ib29sKCk7YnJlYWs7Y2FzZSA5OTk6by51bmludGVycHJldGVkT3B0aW9uJiZvLnVuaW50ZXJwcmV0ZWRPcHRpb24ubGVuZ3RofHwoby51bmludGVycHJldGVkT3B0aW9uPVtdKSxvLnVuaW50ZXJwcmV0ZWRPcHRpb24ucHVzaChjLmdvb2dsZS5wcm90b2J1Zi5VbmludGVycHJldGVkT3B0aW9uLmRlY29kZShlLGUudWludDMyKCkpKTticmVhaztkZWZhdWx0OmUuc2tpcFR5cGUoNyZyKX19cmV0dXJuIG99LEQuZGVjb2RlRGVsaW1pdGVkPWZ1bmN0aW9uKGUpe3JldHVybiBlIGluc3RhbmNlb2Ygc3x8KGU9bmV3IHMoZSkpLHRoaXMuZGVjb2RlKGUsZS51aW50MzIoKSl9LEQudmVyaWZ5PWZ1bmN0aW9uKGUpe2lmKFwib2JqZWN0XCIhPXR5cGVvZiBlfHxudWxsPT09ZSlyZXR1cm5cIm9iamVjdCBleHBlY3RlZFwiO2lmKG51bGwhPWUuY3R5cGUmJmUuaGFzT3duUHJvcGVydHkoXCJjdHlwZVwiKSlzd2l0Y2goZS5jdHlwZSl7ZGVmYXVsdDpyZXR1cm5cImN0eXBlOiBlbnVtIHZhbHVlIGV4cGVjdGVkXCI7Y2FzZSAwOmNhc2UgMTpjYXNlIDI6fWlmKG51bGwhPWUucGFja2VkJiZlLmhhc093blByb3BlcnR5KFwicGFja2VkXCIpJiZcImJvb2xlYW5cIiE9dHlwZW9mIGUucGFja2VkKXJldHVyblwicGFja2VkOiBib29sZWFuIGV4cGVjdGVkXCI7aWYobnVsbCE9ZS5qc3R5cGUmJmUuaGFzT3duUHJvcGVydHkoXCJqc3R5cGVcIikpc3dpdGNoKGUuanN0eXBlKXtkZWZhdWx0OnJldHVyblwianN0eXBlOiBlbnVtIHZhbHVlIGV4cGVjdGVkXCI7Y2FzZSAwOmNhc2UgMTpjYXNlIDI6fWlmKG51bGwhPWUubGF6eSYmZS5oYXNPd25Qcm9wZXJ0eShcImxhenlcIikmJlwiYm9vbGVhblwiIT10eXBlb2YgZS5sYXp5KXJldHVyblwibGF6eTogYm9vbGVhbiBleHBlY3RlZFwiO2lmKG51bGwhPWUuZGVwcmVjYXRlZCYmZS5oYXNPd25Qcm9wZXJ0eShcImRlcHJlY2F0ZWRcIikmJlwiYm9vbGVhblwiIT10eXBlb2YgZS5kZXByZWNhdGVkKXJldHVyblwiZGVwcmVjYXRlZDogYm9vbGVhbiBleHBlY3RlZFwiO2lmKG51bGwhPWUud2VhayYmZS5oYXNPd25Qcm9wZXJ0eShcIndlYWtcIikmJlwiYm9vbGVhblwiIT10eXBlb2YgZS53ZWFrKXJldHVyblwid2VhazogYm9vbGVhbiBleHBlY3RlZFwiO2lmKG51bGwhPWUudW5pbnRlcnByZXRlZE9wdGlvbiYmZS5oYXNPd25Qcm9wZXJ0eShcInVuaW50ZXJwcmV0ZWRPcHRpb25cIikpe2lmKCFBcnJheS5pc0FycmF5KGUudW5pbnRlcnByZXRlZE9wdGlvbikpcmV0dXJuXCJ1bmludGVycHJldGVkT3B0aW9uOiBhcnJheSBleHBlY3RlZFwiO2Zvcih2YXIgdD0wO3Q8ZS51bmludGVycHJldGVkT3B0aW9uLmxlbmd0aDsrK3Qpe3ZhciBuPWMuZ29vZ2xlLnByb3RvYnVmLlVuaW50ZXJwcmV0ZWRPcHRpb24udmVyaWZ5KGUudW5pbnRlcnByZXRlZE9wdGlvblt0XSk7aWYobilyZXR1cm5cInVuaW50ZXJwcmV0ZWRPcHRpb24uXCIrbn19cmV0dXJuIG51bGx9LEQuZnJvbU9iamVjdD1mdW5jdGlvbihlKXtpZihlIGluc3RhbmNlb2YgYy5nb29nbGUucHJvdG9idWYuRmllbGRPcHRpb25zKXJldHVybiBlO3ZhciB0PW5ldyBjLmdvb2dsZS5wcm90b2J1Zi5GaWVsZE9wdGlvbnM7c3dpdGNoKGUuY3R5cGUpe2Nhc2VcIlNUUklOR1wiOmNhc2UgMDp0LmN0eXBlPTA7YnJlYWs7Y2FzZVwiQ09SRFwiOmNhc2UgMTp0LmN0eXBlPTE7YnJlYWs7Y2FzZVwiU1RSSU5HX1BJRUNFXCI6Y2FzZSAyOnQuY3R5cGU9Mn1zd2l0Y2gobnVsbCE9ZS5wYWNrZWQmJih0LnBhY2tlZD1Cb29sZWFuKGUucGFja2VkKSksZS5qc3R5cGUpe2Nhc2VcIkpTX05PUk1BTFwiOmNhc2UgMDp0LmpzdHlwZT0wO2JyZWFrO2Nhc2VcIkpTX1NUUklOR1wiOmNhc2UgMTp0LmpzdHlwZT0xO2JyZWFrO2Nhc2VcIkpTX05VTUJFUlwiOmNhc2UgMjp0LmpzdHlwZT0yfWlmKG51bGwhPWUubGF6eSYmKHQubGF6eT1Cb29sZWFuKGUubGF6eSkpLG51bGwhPWUuZGVwcmVjYXRlZCYmKHQuZGVwcmVjYXRlZD1Cb29sZWFuKGUuZGVwcmVjYXRlZCkpLG51bGwhPWUud2VhayYmKHQud2Vhaz1Cb29sZWFuKGUud2VhaykpLGUudW5pbnRlcnByZXRlZE9wdGlvbil7aWYoIUFycmF5LmlzQXJyYXkoZS51bmludGVycHJldGVkT3B0aW9uKSl0aHJvdyBUeXBlRXJyb3IoXCIuZ29vZ2xlLnByb3RvYnVmLkZpZWxkT3B0aW9ucy51bmludGVycHJldGVkT3B0aW9uOiBhcnJheSBleHBlY3RlZFwiKTt0LnVuaW50ZXJwcmV0ZWRPcHRpb249W107Zm9yKHZhciBuPTA7bjxlLnVuaW50ZXJwcmV0ZWRPcHRpb24ubGVuZ3RoOysrbil7aWYoXCJvYmplY3RcIiE9dHlwZW9mIGUudW5pbnRlcnByZXRlZE9wdGlvbltuXSl0aHJvdyBUeXBlRXJyb3IoXCIuZ29vZ2xlLnByb3RvYnVmLkZpZWxkT3B0aW9ucy51bmludGVycHJldGVkT3B0aW9uOiBvYmplY3QgZXhwZWN0ZWRcIik7dC51bmludGVycHJldGVkT3B0aW9uW25dPWMuZ29vZ2xlLnByb3RvYnVmLlVuaW50ZXJwcmV0ZWRPcHRpb24uZnJvbU9iamVjdChlLnVuaW50ZXJwcmV0ZWRPcHRpb25bbl0pfX1yZXR1cm4gdH0sRC50b09iamVjdD1mdW5jdGlvbihlLHQpe3ZhciBuPXt9O2lmKCgodD10fHx7fSkuYXJyYXlzfHx0LmRlZmF1bHRzKSYmKG4udW5pbnRlcnByZXRlZE9wdGlvbj1bXSksdC5kZWZhdWx0cyYmKG4uY3R5cGU9dC5lbnVtcz09PVN0cmluZz9cIlNUUklOR1wiOjAsbi5wYWNrZWQ9ITEsbi5kZXByZWNhdGVkPSExLG4ubGF6eT0hMSxuLmpzdHlwZT10LmVudW1zPT09U3RyaW5nP1wiSlNfTk9STUFMXCI6MCxuLndlYWs9ITEpLG51bGwhPWUuY3R5cGUmJmUuaGFzT3duUHJvcGVydHkoXCJjdHlwZVwiKSYmKG4uY3R5cGU9dC5lbnVtcz09PVN0cmluZz9jLmdvb2dsZS5wcm90b2J1Zi5GaWVsZE9wdGlvbnMuQ1R5cGVbZS5jdHlwZV06ZS5jdHlwZSksbnVsbCE9ZS5wYWNrZWQmJmUuaGFzT3duUHJvcGVydHkoXCJwYWNrZWRcIikmJihuLnBhY2tlZD1lLnBhY2tlZCksbnVsbCE9ZS5kZXByZWNhdGVkJiZlLmhhc093blByb3BlcnR5KFwiZGVwcmVjYXRlZFwiKSYmKG4uZGVwcmVjYXRlZD1lLmRlcHJlY2F0ZWQpLG51bGwhPWUubGF6eSYmZS5oYXNPd25Qcm9wZXJ0eShcImxhenlcIikmJihuLmxhenk9ZS5sYXp5KSxudWxsIT1lLmpzdHlwZSYmZS5oYXNPd25Qcm9wZXJ0eShcImpzdHlwZVwiKSYmKG4uanN0eXBlPXQuZW51bXM9PT1TdHJpbmc/Yy5nb29nbGUucHJvdG9idWYuRmllbGRPcHRpb25zLkpTVHlwZVtlLmpzdHlwZV06ZS5qc3R5cGUpLG51bGwhPWUud2VhayYmZS5oYXNPd25Qcm9wZXJ0eShcIndlYWtcIikmJihuLndlYWs9ZS53ZWFrKSxlLnVuaW50ZXJwcmV0ZWRPcHRpb24mJmUudW5pbnRlcnByZXRlZE9wdGlvbi5sZW5ndGgpe24udW5pbnRlcnByZXRlZE9wdGlvbj1bXTtmb3IodmFyIG89MDtvPGUudW5pbnRlcnByZXRlZE9wdGlvbi5sZW5ndGg7KytvKW4udW5pbnRlcnByZXRlZE9wdGlvbltvXT1jLmdvb2dsZS5wcm90b2J1Zi5VbmludGVycHJldGVkT3B0aW9uLnRvT2JqZWN0KGUudW5pbnRlcnByZXRlZE9wdGlvbltvXSx0KX1yZXR1cm4gbn0sRC5wcm90b3R5cGUudG9KU09OPWZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMuY29uc3RydWN0b3IudG9PYmplY3QodGhpcyxvLnV0aWwudG9KU09OT3B0aW9ucyl9LEQuQ1R5cGU9KGU9e30sKHQ9T2JqZWN0LmNyZWF0ZShlKSlbZVswXT1cIlNUUklOR1wiXT0wLHRbZVsxXT1cIkNPUkRcIl09MSx0W2VbMl09XCJTVFJJTkdfUElFQ0VcIl09Mix0KSxELkpTVHlwZT0oZT17fSwodD1PYmplY3QuY3JlYXRlKGUpKVtlWzBdPVwiSlNfTk9STUFMXCJdPTAsdFtlWzFdPVwiSlNfU1RSSU5HXCJdPTEsdFtlWzJdPVwiSlNfTlVNQkVSXCJdPTIsdCksRCksbi5PbmVvZk9wdGlvbnM9KE0ucHJvdG90eXBlLnVuaW50ZXJwcmV0ZWRPcHRpb249dS5lbXB0eUFycmF5LE0uY3JlYXRlPWZ1bmN0aW9uKGUpe3JldHVybiBuZXcgTShlKX0sTS5lbmNvZGU9ZnVuY3Rpb24oZSx0KXtpZih0PXR8fHIuY3JlYXRlKCksbnVsbCE9ZS51bmludGVycHJldGVkT3B0aW9uJiZlLnVuaW50ZXJwcmV0ZWRPcHRpb24ubGVuZ3RoKWZvcih2YXIgbj0wO248ZS51bmludGVycHJldGVkT3B0aW9uLmxlbmd0aDsrK24pYy5nb29nbGUucHJvdG9idWYuVW5pbnRlcnByZXRlZE9wdGlvbi5lbmNvZGUoZS51bmludGVycHJldGVkT3B0aW9uW25dLHQudWludDMyKDc5OTQpLmZvcmsoKSkubGRlbGltKCk7cmV0dXJuIHR9LE0uZW5jb2RlRGVsaW1pdGVkPWZ1bmN0aW9uKGUsdCl7cmV0dXJuIHRoaXMuZW5jb2RlKGUsdCkubGRlbGltKCl9LE0uZGVjb2RlPWZ1bmN0aW9uKGUsdCl7ZSBpbnN0YW5jZW9mIHN8fChlPXMuY3JlYXRlKGUpKTtmb3IodmFyIG49dm9pZCAwPT09dD9lLmxlbjplLnBvcyt0LG89bmV3IGMuZ29vZ2xlLnByb3RvYnVmLk9uZW9mT3B0aW9ucztlLnBvczxuOyl7dmFyIHI9ZS51aW50MzIoKTtyPj4+Mz09OTk5PyhvLnVuaW50ZXJwcmV0ZWRPcHRpb24mJm8udW5pbnRlcnByZXRlZE9wdGlvbi5sZW5ndGh8fChvLnVuaW50ZXJwcmV0ZWRPcHRpb249W10pLG8udW5pbnRlcnByZXRlZE9wdGlvbi5wdXNoKGMuZ29vZ2xlLnByb3RvYnVmLlVuaW50ZXJwcmV0ZWRPcHRpb24uZGVjb2RlKGUsZS51aW50MzIoKSkpKTplLnNraXBUeXBlKDcmcil9cmV0dXJuIG99LE0uZGVjb2RlRGVsaW1pdGVkPWZ1bmN0aW9uKGUpe3JldHVybiBlIGluc3RhbmNlb2Ygc3x8KGU9bmV3IHMoZSkpLHRoaXMuZGVjb2RlKGUsZS51aW50MzIoKSl9LE0udmVyaWZ5PWZ1bmN0aW9uKGUpe2lmKFwib2JqZWN0XCIhPXR5cGVvZiBlfHxudWxsPT09ZSlyZXR1cm5cIm9iamVjdCBleHBlY3RlZFwiO2lmKG51bGwhPWUudW5pbnRlcnByZXRlZE9wdGlvbiYmZS5oYXNPd25Qcm9wZXJ0eShcInVuaW50ZXJwcmV0ZWRPcHRpb25cIikpe2lmKCFBcnJheS5pc0FycmF5KGUudW5pbnRlcnByZXRlZE9wdGlvbikpcmV0dXJuXCJ1bmludGVycHJldGVkT3B0aW9uOiBhcnJheSBleHBlY3RlZFwiO2Zvcih2YXIgdD0wO3Q8ZS51bmludGVycHJldGVkT3B0aW9uLmxlbmd0aDsrK3Qpe3ZhciBuPWMuZ29vZ2xlLnByb3RvYnVmLlVuaW50ZXJwcmV0ZWRPcHRpb24udmVyaWZ5KGUudW5pbnRlcnByZXRlZE9wdGlvblt0XSk7aWYobilyZXR1cm5cInVuaW50ZXJwcmV0ZWRPcHRpb24uXCIrbn19cmV0dXJuIG51bGx9LE0uZnJvbU9iamVjdD1mdW5jdGlvbihlKXtpZihlIGluc3RhbmNlb2YgYy5nb29nbGUucHJvdG9idWYuT25lb2ZPcHRpb25zKXJldHVybiBlO3ZhciB0PW5ldyBjLmdvb2dsZS5wcm90b2J1Zi5PbmVvZk9wdGlvbnM7aWYoZS51bmludGVycHJldGVkT3B0aW9uKXtpZighQXJyYXkuaXNBcnJheShlLnVuaW50ZXJwcmV0ZWRPcHRpb24pKXRocm93IFR5cGVFcnJvcihcIi5nb29nbGUucHJvdG9idWYuT25lb2ZPcHRpb25zLnVuaW50ZXJwcmV0ZWRPcHRpb246IGFycmF5IGV4cGVjdGVkXCIpO3QudW5pbnRlcnByZXRlZE9wdGlvbj1bXTtmb3IodmFyIG49MDtuPGUudW5pbnRlcnByZXRlZE9wdGlvbi5sZW5ndGg7KytuKXtpZihcIm9iamVjdFwiIT10eXBlb2YgZS51bmludGVycHJldGVkT3B0aW9uW25dKXRocm93IFR5cGVFcnJvcihcIi5nb29nbGUucHJvdG9idWYuT25lb2ZPcHRpb25zLnVuaW50ZXJwcmV0ZWRPcHRpb246IG9iamVjdCBleHBlY3RlZFwiKTt0LnVuaW50ZXJwcmV0ZWRPcHRpb25bbl09Yy5nb29nbGUucHJvdG9idWYuVW5pbnRlcnByZXRlZE9wdGlvbi5mcm9tT2JqZWN0KGUudW5pbnRlcnByZXRlZE9wdGlvbltuXSl9fXJldHVybiB0fSxNLnRvT2JqZWN0PWZ1bmN0aW9uKGUsdCl7dmFyIG49e307aWYoKCh0PXR8fHt9KS5hcnJheXN8fHQuZGVmYXVsdHMpJiYobi51bmludGVycHJldGVkT3B0aW9uPVtdKSxlLnVuaW50ZXJwcmV0ZWRPcHRpb24mJmUudW5pbnRlcnByZXRlZE9wdGlvbi5sZW5ndGgpe24udW5pbnRlcnByZXRlZE9wdGlvbj1bXTtmb3IodmFyIG89MDtvPGUudW5pbnRlcnByZXRlZE9wdGlvbi5sZW5ndGg7KytvKW4udW5pbnRlcnByZXRlZE9wdGlvbltvXT1jLmdvb2dsZS5wcm90b2J1Zi5VbmludGVycHJldGVkT3B0aW9uLnRvT2JqZWN0KGUudW5pbnRlcnByZXRlZE9wdGlvbltvXSx0KX1yZXR1cm4gbn0sTS5wcm90b3R5cGUudG9KU09OPWZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMuY29uc3RydWN0b3IudG9PYmplY3QodGhpcyxvLnV0aWwudG9KU09OT3B0aW9ucyl9LE0pLG4uRW51bU9wdGlvbnM9KFQucHJvdG90eXBlLmFsbG93QWxpYXM9ITEsVC5wcm90b3R5cGUuZGVwcmVjYXRlZD0hMSxULnByb3RvdHlwZS51bmludGVycHJldGVkT3B0aW9uPXUuZW1wdHlBcnJheSxULmNyZWF0ZT1mdW5jdGlvbihlKXtyZXR1cm4gbmV3IFQoZSl9LFQuZW5jb2RlPWZ1bmN0aW9uKGUsdCl7aWYodD10fHxyLmNyZWF0ZSgpLG51bGwhPWUuYWxsb3dBbGlhcyYmT2JqZWN0Lmhhc093blByb3BlcnR5LmNhbGwoZSxcImFsbG93QWxpYXNcIikmJnQudWludDMyKDE2KS5ib29sKGUuYWxsb3dBbGlhcyksbnVsbCE9ZS5kZXByZWNhdGVkJiZPYmplY3QuaGFzT3duUHJvcGVydHkuY2FsbChlLFwiZGVwcmVjYXRlZFwiKSYmdC51aW50MzIoMjQpLmJvb2woZS5kZXByZWNhdGVkKSxudWxsIT1lLnVuaW50ZXJwcmV0ZWRPcHRpb24mJmUudW5pbnRlcnByZXRlZE9wdGlvbi5sZW5ndGgpZm9yKHZhciBuPTA7bjxlLnVuaW50ZXJwcmV0ZWRPcHRpb24ubGVuZ3RoOysrbiljLmdvb2dsZS5wcm90b2J1Zi5VbmludGVycHJldGVkT3B0aW9uLmVuY29kZShlLnVuaW50ZXJwcmV0ZWRPcHRpb25bbl0sdC51aW50MzIoNzk5NCkuZm9yaygpKS5sZGVsaW0oKTtyZXR1cm4gdH0sVC5lbmNvZGVEZWxpbWl0ZWQ9ZnVuY3Rpb24oZSx0KXtyZXR1cm4gdGhpcy5lbmNvZGUoZSx0KS5sZGVsaW0oKX0sVC5kZWNvZGU9ZnVuY3Rpb24oZSx0KXtlIGluc3RhbmNlb2Ygc3x8KGU9cy5jcmVhdGUoZSkpO2Zvcih2YXIgbj12b2lkIDA9PT10P2UubGVuOmUucG9zK3Qsbz1uZXcgYy5nb29nbGUucHJvdG9idWYuRW51bU9wdGlvbnM7ZS5wb3M8bjspe3ZhciByPWUudWludDMyKCk7c3dpdGNoKHI+Pj4zKXtjYXNlIDI6by5hbGxvd0FsaWFzPWUuYm9vbCgpO2JyZWFrO2Nhc2UgMzpvLmRlcHJlY2F0ZWQ9ZS5ib29sKCk7YnJlYWs7Y2FzZSA5OTk6by51bmludGVycHJldGVkT3B0aW9uJiZvLnVuaW50ZXJwcmV0ZWRPcHRpb24ubGVuZ3RofHwoby51bmludGVycHJldGVkT3B0aW9uPVtdKSxvLnVuaW50ZXJwcmV0ZWRPcHRpb24ucHVzaChjLmdvb2dsZS5wcm90b2J1Zi5VbmludGVycHJldGVkT3B0aW9uLmRlY29kZShlLGUudWludDMyKCkpKTticmVhaztkZWZhdWx0OmUuc2tpcFR5cGUoNyZyKX19cmV0dXJuIG99LFQuZGVjb2RlRGVsaW1pdGVkPWZ1bmN0aW9uKGUpe3JldHVybiBlIGluc3RhbmNlb2Ygc3x8KGU9bmV3IHMoZSkpLHRoaXMuZGVjb2RlKGUsZS51aW50MzIoKSl9LFQudmVyaWZ5PWZ1bmN0aW9uKGUpe2lmKFwib2JqZWN0XCIhPXR5cGVvZiBlfHxudWxsPT09ZSlyZXR1cm5cIm9iamVjdCBleHBlY3RlZFwiO2lmKG51bGwhPWUuYWxsb3dBbGlhcyYmZS5oYXNPd25Qcm9wZXJ0eShcImFsbG93QWxpYXNcIikmJlwiYm9vbGVhblwiIT10eXBlb2YgZS5hbGxvd0FsaWFzKXJldHVyblwiYWxsb3dBbGlhczogYm9vbGVhbiBleHBlY3RlZFwiO2lmKG51bGwhPWUuZGVwcmVjYXRlZCYmZS5oYXNPd25Qcm9wZXJ0eShcImRlcHJlY2F0ZWRcIikmJlwiYm9vbGVhblwiIT10eXBlb2YgZS5kZXByZWNhdGVkKXJldHVyblwiZGVwcmVjYXRlZDogYm9vbGVhbiBleHBlY3RlZFwiO2lmKG51bGwhPWUudW5pbnRlcnByZXRlZE9wdGlvbiYmZS5oYXNPd25Qcm9wZXJ0eShcInVuaW50ZXJwcmV0ZWRPcHRpb25cIikpe2lmKCFBcnJheS5pc0FycmF5KGUudW5pbnRlcnByZXRlZE9wdGlvbikpcmV0dXJuXCJ1bmludGVycHJldGVkT3B0aW9uOiBhcnJheSBleHBlY3RlZFwiO2Zvcih2YXIgdD0wO3Q8ZS51bmludGVycHJldGVkT3B0aW9uLmxlbmd0aDsrK3Qpe3ZhciBuPWMuZ29vZ2xlLnByb3RvYnVmLlVuaW50ZXJwcmV0ZWRPcHRpb24udmVyaWZ5KGUudW5pbnRlcnByZXRlZE9wdGlvblt0XSk7aWYobilyZXR1cm5cInVuaW50ZXJwcmV0ZWRPcHRpb24uXCIrbn19cmV0dXJuIG51bGx9LFQuZnJvbU9iamVjdD1mdW5jdGlvbihlKXtpZihlIGluc3RhbmNlb2YgYy5nb29nbGUucHJvdG9idWYuRW51bU9wdGlvbnMpcmV0dXJuIGU7dmFyIHQ9bmV3IGMuZ29vZ2xlLnByb3RvYnVmLkVudW1PcHRpb25zO2lmKG51bGwhPWUuYWxsb3dBbGlhcyYmKHQuYWxsb3dBbGlhcz1Cb29sZWFuKGUuYWxsb3dBbGlhcykpLG51bGwhPWUuZGVwcmVjYXRlZCYmKHQuZGVwcmVjYXRlZD1Cb29sZWFuKGUuZGVwcmVjYXRlZCkpLGUudW5pbnRlcnByZXRlZE9wdGlvbil7aWYoIUFycmF5LmlzQXJyYXkoZS51bmludGVycHJldGVkT3B0aW9uKSl0aHJvdyBUeXBlRXJyb3IoXCIuZ29vZ2xlLnByb3RvYnVmLkVudW1PcHRpb25zLnVuaW50ZXJwcmV0ZWRPcHRpb246IGFycmF5IGV4cGVjdGVkXCIpO3QudW5pbnRlcnByZXRlZE9wdGlvbj1bXTtmb3IodmFyIG49MDtuPGUudW5pbnRlcnByZXRlZE9wdGlvbi5sZW5ndGg7KytuKXtpZihcIm9iamVjdFwiIT10eXBlb2YgZS51bmludGVycHJldGVkT3B0aW9uW25dKXRocm93IFR5cGVFcnJvcihcIi5nb29nbGUucHJvdG9idWYuRW51bU9wdGlvbnMudW5pbnRlcnByZXRlZE9wdGlvbjogb2JqZWN0IGV4cGVjdGVkXCIpO3QudW5pbnRlcnByZXRlZE9wdGlvbltuXT1jLmdvb2dsZS5wcm90b2J1Zi5VbmludGVycHJldGVkT3B0aW9uLmZyb21PYmplY3QoZS51bmludGVycHJldGVkT3B0aW9uW25dKX19cmV0dXJuIHR9LFQudG9PYmplY3Q9ZnVuY3Rpb24oZSx0KXt2YXIgbj17fTtpZigoKHQ9dHx8e30pLmFycmF5c3x8dC5kZWZhdWx0cykmJihuLnVuaW50ZXJwcmV0ZWRPcHRpb249W10pLHQuZGVmYXVsdHMmJihuLmFsbG93QWxpYXM9ITEsbi5kZXByZWNhdGVkPSExKSxudWxsIT1lLmFsbG93QWxpYXMmJmUuaGFzT3duUHJvcGVydHkoXCJhbGxvd0FsaWFzXCIpJiYobi5hbGxvd0FsaWFzPWUuYWxsb3dBbGlhcyksbnVsbCE9ZS5kZXByZWNhdGVkJiZlLmhhc093blByb3BlcnR5KFwiZGVwcmVjYXRlZFwiKSYmKG4uZGVwcmVjYXRlZD1lLmRlcHJlY2F0ZWQpLGUudW5pbnRlcnByZXRlZE9wdGlvbiYmZS51bmludGVycHJldGVkT3B0aW9uLmxlbmd0aCl7bi51bmludGVycHJldGVkT3B0aW9uPVtdO2Zvcih2YXIgbz0wO288ZS51bmludGVycHJldGVkT3B0aW9uLmxlbmd0aDsrK28pbi51bmludGVycHJldGVkT3B0aW9uW29dPWMuZ29vZ2xlLnByb3RvYnVmLlVuaW50ZXJwcmV0ZWRPcHRpb24udG9PYmplY3QoZS51bmludGVycHJldGVkT3B0aW9uW29dLHQpfXJldHVybiBufSxULnByb3RvdHlwZS50b0pTT049ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5jb25zdHJ1Y3Rvci50b09iamVjdCh0aGlzLG8udXRpbC50b0pTT05PcHRpb25zKX0sVCksbi5FbnVtVmFsdWVPcHRpb25zPShFLnByb3RvdHlwZS5kZXByZWNhdGVkPSExLEUucHJvdG90eXBlLnVuaW50ZXJwcmV0ZWRPcHRpb249dS5lbXB0eUFycmF5LEUuY3JlYXRlPWZ1bmN0aW9uKGUpe3JldHVybiBuZXcgRShlKX0sRS5lbmNvZGU9ZnVuY3Rpb24oZSx0KXtpZih0PXR8fHIuY3JlYXRlKCksbnVsbCE9ZS5kZXByZWNhdGVkJiZPYmplY3QuaGFzT3duUHJvcGVydHkuY2FsbChlLFwiZGVwcmVjYXRlZFwiKSYmdC51aW50MzIoOCkuYm9vbChlLmRlcHJlY2F0ZWQpLG51bGwhPWUudW5pbnRlcnByZXRlZE9wdGlvbiYmZS51bmludGVycHJldGVkT3B0aW9uLmxlbmd0aClmb3IodmFyIG49MDtuPGUudW5pbnRlcnByZXRlZE9wdGlvbi5sZW5ndGg7KytuKWMuZ29vZ2xlLnByb3RvYnVmLlVuaW50ZXJwcmV0ZWRPcHRpb24uZW5jb2RlKGUudW5pbnRlcnByZXRlZE9wdGlvbltuXSx0LnVpbnQzMig3OTk0KS5mb3JrKCkpLmxkZWxpbSgpO3JldHVybiB0fSxFLmVuY29kZURlbGltaXRlZD1mdW5jdGlvbihlLHQpe3JldHVybiB0aGlzLmVuY29kZShlLHQpLmxkZWxpbSgpfSxFLmRlY29kZT1mdW5jdGlvbihlLHQpe2UgaW5zdGFuY2VvZiBzfHwoZT1zLmNyZWF0ZShlKSk7Zm9yKHZhciBuPXZvaWQgMD09PXQ/ZS5sZW46ZS5wb3MrdCxvPW5ldyBjLmdvb2dsZS5wcm90b2J1Zi5FbnVtVmFsdWVPcHRpb25zO2UucG9zPG47KXt2YXIgcj1lLnVpbnQzMigpO3N3aXRjaChyPj4+Myl7Y2FzZSAxOm8uZGVwcmVjYXRlZD1lLmJvb2woKTticmVhaztjYXNlIDk5OTpvLnVuaW50ZXJwcmV0ZWRPcHRpb24mJm8udW5pbnRlcnByZXRlZE9wdGlvbi5sZW5ndGh8fChvLnVuaW50ZXJwcmV0ZWRPcHRpb249W10pLG8udW5pbnRlcnByZXRlZE9wdGlvbi5wdXNoKGMuZ29vZ2xlLnByb3RvYnVmLlVuaW50ZXJwcmV0ZWRPcHRpb24uZGVjb2RlKGUsZS51aW50MzIoKSkpO2JyZWFrO2RlZmF1bHQ6ZS5za2lwVHlwZSg3JnIpfX1yZXR1cm4gb30sRS5kZWNvZGVEZWxpbWl0ZWQ9ZnVuY3Rpb24oZSl7cmV0dXJuIGUgaW5zdGFuY2VvZiBzfHwoZT1uZXcgcyhlKSksdGhpcy5kZWNvZGUoZSxlLnVpbnQzMigpKX0sRS52ZXJpZnk9ZnVuY3Rpb24oZSl7aWYoXCJvYmplY3RcIiE9dHlwZW9mIGV8fG51bGw9PT1lKXJldHVyblwib2JqZWN0IGV4cGVjdGVkXCI7aWYobnVsbCE9ZS5kZXByZWNhdGVkJiZlLmhhc093blByb3BlcnR5KFwiZGVwcmVjYXRlZFwiKSYmXCJib29sZWFuXCIhPXR5cGVvZiBlLmRlcHJlY2F0ZWQpcmV0dXJuXCJkZXByZWNhdGVkOiBib29sZWFuIGV4cGVjdGVkXCI7aWYobnVsbCE9ZS51bmludGVycHJldGVkT3B0aW9uJiZlLmhhc093blByb3BlcnR5KFwidW5pbnRlcnByZXRlZE9wdGlvblwiKSl7aWYoIUFycmF5LmlzQXJyYXkoZS51bmludGVycHJldGVkT3B0aW9uKSlyZXR1cm5cInVuaW50ZXJwcmV0ZWRPcHRpb246IGFycmF5IGV4cGVjdGVkXCI7Zm9yKHZhciB0PTA7dDxlLnVuaW50ZXJwcmV0ZWRPcHRpb24ubGVuZ3RoOysrdCl7dmFyIG49Yy5nb29nbGUucHJvdG9idWYuVW5pbnRlcnByZXRlZE9wdGlvbi52ZXJpZnkoZS51bmludGVycHJldGVkT3B0aW9uW3RdKTtpZihuKXJldHVyblwidW5pbnRlcnByZXRlZE9wdGlvbi5cIitufX1yZXR1cm4gbnVsbH0sRS5mcm9tT2JqZWN0PWZ1bmN0aW9uKGUpe2lmKGUgaW5zdGFuY2VvZiBjLmdvb2dsZS5wcm90b2J1Zi5FbnVtVmFsdWVPcHRpb25zKXJldHVybiBlO3ZhciB0PW5ldyBjLmdvb2dsZS5wcm90b2J1Zi5FbnVtVmFsdWVPcHRpb25zO2lmKG51bGwhPWUuZGVwcmVjYXRlZCYmKHQuZGVwcmVjYXRlZD1Cb29sZWFuKGUuZGVwcmVjYXRlZCkpLGUudW5pbnRlcnByZXRlZE9wdGlvbil7aWYoIUFycmF5LmlzQXJyYXkoZS51bmludGVycHJldGVkT3B0aW9uKSl0aHJvdyBUeXBlRXJyb3IoXCIuZ29vZ2xlLnByb3RvYnVmLkVudW1WYWx1ZU9wdGlvbnMudW5pbnRlcnByZXRlZE9wdGlvbjogYXJyYXkgZXhwZWN0ZWRcIik7dC51bmludGVycHJldGVkT3B0aW9uPVtdO2Zvcih2YXIgbj0wO248ZS51bmludGVycHJldGVkT3B0aW9uLmxlbmd0aDsrK24pe2lmKFwib2JqZWN0XCIhPXR5cGVvZiBlLnVuaW50ZXJwcmV0ZWRPcHRpb25bbl0pdGhyb3cgVHlwZUVycm9yKFwiLmdvb2dsZS5wcm90b2J1Zi5FbnVtVmFsdWVPcHRpb25zLnVuaW50ZXJwcmV0ZWRPcHRpb246IG9iamVjdCBleHBlY3RlZFwiKTt0LnVuaW50ZXJwcmV0ZWRPcHRpb25bbl09Yy5nb29nbGUucHJvdG9idWYuVW5pbnRlcnByZXRlZE9wdGlvbi5mcm9tT2JqZWN0KGUudW5pbnRlcnByZXRlZE9wdGlvbltuXSl9fXJldHVybiB0fSxFLnRvT2JqZWN0PWZ1bmN0aW9uKGUsdCl7dmFyIG49e307aWYoKCh0PXR8fHt9KS5hcnJheXN8fHQuZGVmYXVsdHMpJiYobi51bmludGVycHJldGVkT3B0aW9uPVtdKSx0LmRlZmF1bHRzJiYobi5kZXByZWNhdGVkPSExKSxudWxsIT1lLmRlcHJlY2F0ZWQmJmUuaGFzT3duUHJvcGVydHkoXCJkZXByZWNhdGVkXCIpJiYobi5kZXByZWNhdGVkPWUuZGVwcmVjYXRlZCksZS51bmludGVycHJldGVkT3B0aW9uJiZlLnVuaW50ZXJwcmV0ZWRPcHRpb24ubGVuZ3RoKXtuLnVuaW50ZXJwcmV0ZWRPcHRpb249W107Zm9yKHZhciBvPTA7bzxlLnVuaW50ZXJwcmV0ZWRPcHRpb24ubGVuZ3RoOysrbyluLnVuaW50ZXJwcmV0ZWRPcHRpb25bb109Yy5nb29nbGUucHJvdG9idWYuVW5pbnRlcnByZXRlZE9wdGlvbi50b09iamVjdChlLnVuaW50ZXJwcmV0ZWRPcHRpb25bb10sdCl9cmV0dXJuIG59LEUucHJvdG90eXBlLnRvSlNPTj1mdW5jdGlvbigpe3JldHVybiB0aGlzLmNvbnN0cnVjdG9yLnRvT2JqZWN0KHRoaXMsby51dGlsLnRvSlNPTk9wdGlvbnMpfSxFKSxuLlNlcnZpY2VPcHRpb25zPShBLnByb3RvdHlwZS5kZXByZWNhdGVkPSExLEEucHJvdG90eXBlLnVuaW50ZXJwcmV0ZWRPcHRpb249dS5lbXB0eUFycmF5LEEucHJvdG90eXBlW1wiLmdvb2dsZS5hcGkuZGVmYXVsdEhvc3RcIl09XCJcIixBLnByb3RvdHlwZVtcIi5nb29nbGUuYXBpLm9hdXRoU2NvcGVzXCJdPVwiXCIsQS5jcmVhdGU9ZnVuY3Rpb24oZSl7cmV0dXJuIG5ldyBBKGUpfSxBLmVuY29kZT1mdW5jdGlvbihlLHQpe2lmKHQ9dHx8ci5jcmVhdGUoKSxudWxsIT1lLmRlcHJlY2F0ZWQmJk9iamVjdC5oYXNPd25Qcm9wZXJ0eS5jYWxsKGUsXCJkZXByZWNhdGVkXCIpJiZ0LnVpbnQzMigyNjQpLmJvb2woZS5kZXByZWNhdGVkKSxudWxsIT1lLnVuaW50ZXJwcmV0ZWRPcHRpb24mJmUudW5pbnRlcnByZXRlZE9wdGlvbi5sZW5ndGgpZm9yKHZhciBuPTA7bjxlLnVuaW50ZXJwcmV0ZWRPcHRpb24ubGVuZ3RoOysrbiljLmdvb2dsZS5wcm90b2J1Zi5VbmludGVycHJldGVkT3B0aW9uLmVuY29kZShlLnVuaW50ZXJwcmV0ZWRPcHRpb25bbl0sdC51aW50MzIoNzk5NCkuZm9yaygpKS5sZGVsaW0oKTtyZXR1cm4gbnVsbCE9ZVtcIi5nb29nbGUuYXBpLmRlZmF1bHRIb3N0XCJdJiZPYmplY3QuaGFzT3duUHJvcGVydHkuY2FsbChlLFwiLmdvb2dsZS5hcGkuZGVmYXVsdEhvc3RcIikmJnQudWludDMyKDgzOTQpLnN0cmluZyhlW1wiLmdvb2dsZS5hcGkuZGVmYXVsdEhvc3RcIl0pLG51bGwhPWVbXCIuZ29vZ2xlLmFwaS5vYXV0aFNjb3Blc1wiXSYmT2JqZWN0Lmhhc093blByb3BlcnR5LmNhbGwoZSxcIi5nb29nbGUuYXBpLm9hdXRoU2NvcGVzXCIpJiZ0LnVpbnQzMig4NDAyKS5zdHJpbmcoZVtcIi5nb29nbGUuYXBpLm9hdXRoU2NvcGVzXCJdKSx0fSxBLmVuY29kZURlbGltaXRlZD1mdW5jdGlvbihlLHQpe3JldHVybiB0aGlzLmVuY29kZShlLHQpLmxkZWxpbSgpfSxBLmRlY29kZT1mdW5jdGlvbihlLHQpe2UgaW5zdGFuY2VvZiBzfHwoZT1zLmNyZWF0ZShlKSk7Zm9yKHZhciBuPXZvaWQgMD09PXQ/ZS5sZW46ZS5wb3MrdCxvPW5ldyBjLmdvb2dsZS5wcm90b2J1Zi5TZXJ2aWNlT3B0aW9ucztlLnBvczxuOyl7dmFyIHI9ZS51aW50MzIoKTtzd2l0Y2gocj4+PjMpe2Nhc2UgMzM6by5kZXByZWNhdGVkPWUuYm9vbCgpO2JyZWFrO2Nhc2UgOTk5Om8udW5pbnRlcnByZXRlZE9wdGlvbiYmby51bmludGVycHJldGVkT3B0aW9uLmxlbmd0aHx8KG8udW5pbnRlcnByZXRlZE9wdGlvbj1bXSksby51bmludGVycHJldGVkT3B0aW9uLnB1c2goYy5nb29nbGUucHJvdG9idWYuVW5pbnRlcnByZXRlZE9wdGlvbi5kZWNvZGUoZSxlLnVpbnQzMigpKSk7YnJlYWs7Y2FzZSAxMDQ5Om9bXCIuZ29vZ2xlLmFwaS5kZWZhdWx0SG9zdFwiXT1lLnN0cmluZygpO2JyZWFrO2Nhc2UgMTA1MDpvW1wiLmdvb2dsZS5hcGkub2F1dGhTY29wZXNcIl09ZS5zdHJpbmcoKTticmVhaztkZWZhdWx0OmUuc2tpcFR5cGUoNyZyKX19cmV0dXJuIG99LEEuZGVjb2RlRGVsaW1pdGVkPWZ1bmN0aW9uKGUpe3JldHVybiBlIGluc3RhbmNlb2Ygc3x8KGU9bmV3IHMoZSkpLHRoaXMuZGVjb2RlKGUsZS51aW50MzIoKSl9LEEudmVyaWZ5PWZ1bmN0aW9uKGUpe2lmKFwib2JqZWN0XCIhPXR5cGVvZiBlfHxudWxsPT09ZSlyZXR1cm5cIm9iamVjdCBleHBlY3RlZFwiO2lmKG51bGwhPWUuZGVwcmVjYXRlZCYmZS5oYXNPd25Qcm9wZXJ0eShcImRlcHJlY2F0ZWRcIikmJlwiYm9vbGVhblwiIT10eXBlb2YgZS5kZXByZWNhdGVkKXJldHVyblwiZGVwcmVjYXRlZDogYm9vbGVhbiBleHBlY3RlZFwiO2lmKG51bGwhPWUudW5pbnRlcnByZXRlZE9wdGlvbiYmZS5oYXNPd25Qcm9wZXJ0eShcInVuaW50ZXJwcmV0ZWRPcHRpb25cIikpe2lmKCFBcnJheS5pc0FycmF5KGUudW5pbnRlcnByZXRlZE9wdGlvbikpcmV0dXJuXCJ1bmludGVycHJldGVkT3B0aW9uOiBhcnJheSBleHBlY3RlZFwiO2Zvcih2YXIgdD0wO3Q8ZS51bmludGVycHJldGVkT3B0aW9uLmxlbmd0aDsrK3Qpe3ZhciBuPWMuZ29vZ2xlLnByb3RvYnVmLlVuaW50ZXJwcmV0ZWRPcHRpb24udmVyaWZ5KGUudW5pbnRlcnByZXRlZE9wdGlvblt0XSk7aWYobilyZXR1cm5cInVuaW50ZXJwcmV0ZWRPcHRpb24uXCIrbn19cmV0dXJuIG51bGwhPWVbXCIuZ29vZ2xlLmFwaS5kZWZhdWx0SG9zdFwiXSYmZS5oYXNPd25Qcm9wZXJ0eShcIi5nb29nbGUuYXBpLmRlZmF1bHRIb3N0XCIpJiYhdS5pc1N0cmluZyhlW1wiLmdvb2dsZS5hcGkuZGVmYXVsdEhvc3RcIl0pP1wiLmdvb2dsZS5hcGkuZGVmYXVsdEhvc3Q6IHN0cmluZyBleHBlY3RlZFwiOm51bGwhPWVbXCIuZ29vZ2xlLmFwaS5vYXV0aFNjb3Blc1wiXSYmZS5oYXNPd25Qcm9wZXJ0eShcIi5nb29nbGUuYXBpLm9hdXRoU2NvcGVzXCIpJiYhdS5pc1N0cmluZyhlW1wiLmdvb2dsZS5hcGkub2F1dGhTY29wZXNcIl0pP1wiLmdvb2dsZS5hcGkub2F1dGhTY29wZXM6IHN0cmluZyBleHBlY3RlZFwiOm51bGx9LEEuZnJvbU9iamVjdD1mdW5jdGlvbihlKXtpZihlIGluc3RhbmNlb2YgYy5nb29nbGUucHJvdG9idWYuU2VydmljZU9wdGlvbnMpcmV0dXJuIGU7dmFyIHQ9bmV3IGMuZ29vZ2xlLnByb3RvYnVmLlNlcnZpY2VPcHRpb25zO2lmKG51bGwhPWUuZGVwcmVjYXRlZCYmKHQuZGVwcmVjYXRlZD1Cb29sZWFuKGUuZGVwcmVjYXRlZCkpLGUudW5pbnRlcnByZXRlZE9wdGlvbil7aWYoIUFycmF5LmlzQXJyYXkoZS51bmludGVycHJldGVkT3B0aW9uKSl0aHJvdyBUeXBlRXJyb3IoXCIuZ29vZ2xlLnByb3RvYnVmLlNlcnZpY2VPcHRpb25zLnVuaW50ZXJwcmV0ZWRPcHRpb246IGFycmF5IGV4cGVjdGVkXCIpO3QudW5pbnRlcnByZXRlZE9wdGlvbj1bXTtmb3IodmFyIG49MDtuPGUudW5pbnRlcnByZXRlZE9wdGlvbi5sZW5ndGg7KytuKXtpZihcIm9iamVjdFwiIT10eXBlb2YgZS51bmludGVycHJldGVkT3B0aW9uW25dKXRocm93IFR5cGVFcnJvcihcIi5nb29nbGUucHJvdG9idWYuU2VydmljZU9wdGlvbnMudW5pbnRlcnByZXRlZE9wdGlvbjogb2JqZWN0IGV4cGVjdGVkXCIpO3QudW5pbnRlcnByZXRlZE9wdGlvbltuXT1jLmdvb2dsZS5wcm90b2J1Zi5VbmludGVycHJldGVkT3B0aW9uLmZyb21PYmplY3QoZS51bmludGVycHJldGVkT3B0aW9uW25dKX19cmV0dXJuIG51bGwhPWVbXCIuZ29vZ2xlLmFwaS5kZWZhdWx0SG9zdFwiXSYmKHRbXCIuZ29vZ2xlLmFwaS5kZWZhdWx0SG9zdFwiXT1TdHJpbmcoZVtcIi5nb29nbGUuYXBpLmRlZmF1bHRIb3N0XCJdKSksbnVsbCE9ZVtcIi5nb29nbGUuYXBpLm9hdXRoU2NvcGVzXCJdJiYodFtcIi5nb29nbGUuYXBpLm9hdXRoU2NvcGVzXCJdPVN0cmluZyhlW1wiLmdvb2dsZS5hcGkub2F1dGhTY29wZXNcIl0pKSx0fSxBLnRvT2JqZWN0PWZ1bmN0aW9uKGUsdCl7dmFyIG49e307aWYoKCh0PXR8fHt9KS5hcnJheXN8fHQuZGVmYXVsdHMpJiYobi51bmludGVycHJldGVkT3B0aW9uPVtdKSx0LmRlZmF1bHRzJiYobi5kZXByZWNhdGVkPSExLG5bXCIuZ29vZ2xlLmFwaS5kZWZhdWx0SG9zdFwiXT1cIlwiLG5bXCIuZ29vZ2xlLmFwaS5vYXV0aFNjb3Blc1wiXT1cIlwiKSxudWxsIT1lLmRlcHJlY2F0ZWQmJmUuaGFzT3duUHJvcGVydHkoXCJkZXByZWNhdGVkXCIpJiYobi5kZXByZWNhdGVkPWUuZGVwcmVjYXRlZCksZS51bmludGVycHJldGVkT3B0aW9uJiZlLnVuaW50ZXJwcmV0ZWRPcHRpb24ubGVuZ3RoKXtuLnVuaW50ZXJwcmV0ZWRPcHRpb249W107Zm9yKHZhciBvPTA7bzxlLnVuaW50ZXJwcmV0ZWRPcHRpb24ubGVuZ3RoOysrbyluLnVuaW50ZXJwcmV0ZWRPcHRpb25bb109Yy5nb29nbGUucHJvdG9idWYuVW5pbnRlcnByZXRlZE9wdGlvbi50b09iamVjdChlLnVuaW50ZXJwcmV0ZWRPcHRpb25bb10sdCl9cmV0dXJuIG51bGwhPWVbXCIuZ29vZ2xlLmFwaS5kZWZhdWx0SG9zdFwiXSYmZS5oYXNPd25Qcm9wZXJ0eShcIi5nb29nbGUuYXBpLmRlZmF1bHRIb3N0XCIpJiYobltcIi5nb29nbGUuYXBpLmRlZmF1bHRIb3N0XCJdPWVbXCIuZ29vZ2xlLmFwaS5kZWZhdWx0SG9zdFwiXSksbnVsbCE9ZVtcIi5nb29nbGUuYXBpLm9hdXRoU2NvcGVzXCJdJiZlLmhhc093blByb3BlcnR5KFwiLmdvb2dsZS5hcGkub2F1dGhTY29wZXNcIikmJihuW1wiLmdvb2dsZS5hcGkub2F1dGhTY29wZXNcIl09ZVtcIi5nb29nbGUuYXBpLm9hdXRoU2NvcGVzXCJdKSxufSxBLnByb3RvdHlwZS50b0pTT049ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5jb25zdHJ1Y3Rvci50b09iamVjdCh0aGlzLG8udXRpbC50b0pTT05PcHRpb25zKX0sQSksbi5NZXRob2RPcHRpb25zPShOLnByb3RvdHlwZS5kZXByZWNhdGVkPSExLE4ucHJvdG90eXBlLmlkZW1wb3RlbmN5TGV2ZWw9MCxOLnByb3RvdHlwZS51bmludGVycHJldGVkT3B0aW9uPXUuZW1wdHlBcnJheSxOLnByb3RvdHlwZVtcIi5nb29nbGUuYXBpLmh0dHBcIl09bnVsbCxOLnByb3RvdHlwZVtcIi5nb29nbGUuYXBpLm1ldGhvZFNpZ25hdHVyZVwiXT11LmVtcHR5QXJyYXksTi5jcmVhdGU9ZnVuY3Rpb24oZSl7cmV0dXJuIG5ldyBOKGUpfSxOLmVuY29kZT1mdW5jdGlvbihlLHQpe2lmKHQ9dHx8ci5jcmVhdGUoKSxudWxsIT1lLmRlcHJlY2F0ZWQmJk9iamVjdC5oYXNPd25Qcm9wZXJ0eS5jYWxsKGUsXCJkZXByZWNhdGVkXCIpJiZ0LnVpbnQzMigyNjQpLmJvb2woZS5kZXByZWNhdGVkKSxudWxsIT1lLmlkZW1wb3RlbmN5TGV2ZWwmJk9iamVjdC5oYXNPd25Qcm9wZXJ0eS5jYWxsKGUsXCJpZGVtcG90ZW5jeUxldmVsXCIpJiZ0LnVpbnQzMigyNzIpLmludDMyKGUuaWRlbXBvdGVuY3lMZXZlbCksbnVsbCE9ZS51bmludGVycHJldGVkT3B0aW9uJiZlLnVuaW50ZXJwcmV0ZWRPcHRpb24ubGVuZ3RoKWZvcih2YXIgbj0wO248ZS51bmludGVycHJldGVkT3B0aW9uLmxlbmd0aDsrK24pYy5nb29nbGUucHJvdG9idWYuVW5pbnRlcnByZXRlZE9wdGlvbi5lbmNvZGUoZS51bmludGVycHJldGVkT3B0aW9uW25dLHQudWludDMyKDc5OTQpLmZvcmsoKSkubGRlbGltKCk7aWYobnVsbCE9ZVtcIi5nb29nbGUuYXBpLm1ldGhvZFNpZ25hdHVyZVwiXSYmZVtcIi5nb29nbGUuYXBpLm1ldGhvZFNpZ25hdHVyZVwiXS5sZW5ndGgpZm9yKG49MDtuPGVbXCIuZ29vZ2xlLmFwaS5tZXRob2RTaWduYXR1cmVcIl0ubGVuZ3RoOysrbil0LnVpbnQzMig4NDEwKS5zdHJpbmcoZVtcIi5nb29nbGUuYXBpLm1ldGhvZFNpZ25hdHVyZVwiXVtuXSk7cmV0dXJuIG51bGwhPWVbXCIuZ29vZ2xlLmFwaS5odHRwXCJdJiZPYmplY3QuaGFzT3duUHJvcGVydHkuY2FsbChlLFwiLmdvb2dsZS5hcGkuaHR0cFwiKSYmYy5nb29nbGUuYXBpLkh0dHBSdWxlLmVuY29kZShlW1wiLmdvb2dsZS5hcGkuaHR0cFwiXSx0LnVpbnQzMig1NzgzNjU4MjYpLmZvcmsoKSkubGRlbGltKCksdH0sTi5lbmNvZGVEZWxpbWl0ZWQ9ZnVuY3Rpb24oZSx0KXtyZXR1cm4gdGhpcy5lbmNvZGUoZSx0KS5sZGVsaW0oKX0sTi5kZWNvZGU9ZnVuY3Rpb24oZSx0KXtlIGluc3RhbmNlb2Ygc3x8KGU9cy5jcmVhdGUoZSkpO2Zvcih2YXIgbj12b2lkIDA9PT10P2UubGVuOmUucG9zK3Qsbz1uZXcgYy5nb29nbGUucHJvdG9idWYuTWV0aG9kT3B0aW9ucztlLnBvczxuOyl7dmFyIHI9ZS51aW50MzIoKTtzd2l0Y2gocj4+PjMpe2Nhc2UgMzM6by5kZXByZWNhdGVkPWUuYm9vbCgpO2JyZWFrO2Nhc2UgMzQ6by5pZGVtcG90ZW5jeUxldmVsPWUuaW50MzIoKTticmVhaztjYXNlIDk5OTpvLnVuaW50ZXJwcmV0ZWRPcHRpb24mJm8udW5pbnRlcnByZXRlZE9wdGlvbi5sZW5ndGh8fChvLnVuaW50ZXJwcmV0ZWRPcHRpb249W10pLG8udW5pbnRlcnByZXRlZE9wdGlvbi5wdXNoKGMuZ29vZ2xlLnByb3RvYnVmLlVuaW50ZXJwcmV0ZWRPcHRpb24uZGVjb2RlKGUsZS51aW50MzIoKSkpO2JyZWFrO2Nhc2UgNzIyOTU3Mjg6b1tcIi5nb29nbGUuYXBpLmh0dHBcIl09Yy5nb29nbGUuYXBpLkh0dHBSdWxlLmRlY29kZShlLGUudWludDMyKCkpO2JyZWFrO2Nhc2UgMTA1MTpvW1wiLmdvb2dsZS5hcGkubWV0aG9kU2lnbmF0dXJlXCJdJiZvW1wiLmdvb2dsZS5hcGkubWV0aG9kU2lnbmF0dXJlXCJdLmxlbmd0aHx8KG9bXCIuZ29vZ2xlLmFwaS5tZXRob2RTaWduYXR1cmVcIl09W10pLG9bXCIuZ29vZ2xlLmFwaS5tZXRob2RTaWduYXR1cmVcIl0ucHVzaChlLnN0cmluZygpKTticmVhaztkZWZhdWx0OmUuc2tpcFR5cGUoNyZyKX19cmV0dXJuIG99LE4uZGVjb2RlRGVsaW1pdGVkPWZ1bmN0aW9uKGUpe3JldHVybiBlIGluc3RhbmNlb2Ygc3x8KGU9bmV3IHMoZSkpLHRoaXMuZGVjb2RlKGUsZS51aW50MzIoKSl9LE4udmVyaWZ5PWZ1bmN0aW9uKGUpe2lmKFwib2JqZWN0XCIhPXR5cGVvZiBlfHxudWxsPT09ZSlyZXR1cm5cIm9iamVjdCBleHBlY3RlZFwiO2lmKG51bGwhPWUuZGVwcmVjYXRlZCYmZS5oYXNPd25Qcm9wZXJ0eShcImRlcHJlY2F0ZWRcIikmJlwiYm9vbGVhblwiIT10eXBlb2YgZS5kZXByZWNhdGVkKXJldHVyblwiZGVwcmVjYXRlZDogYm9vbGVhbiBleHBlY3RlZFwiO2lmKG51bGwhPWUuaWRlbXBvdGVuY3lMZXZlbCYmZS5oYXNPd25Qcm9wZXJ0eShcImlkZW1wb3RlbmN5TGV2ZWxcIikpc3dpdGNoKGUuaWRlbXBvdGVuY3lMZXZlbCl7ZGVmYXVsdDpyZXR1cm5cImlkZW1wb3RlbmN5TGV2ZWw6IGVudW0gdmFsdWUgZXhwZWN0ZWRcIjtjYXNlIDA6Y2FzZSAxOmNhc2UgMjp9aWYobnVsbCE9ZS51bmludGVycHJldGVkT3B0aW9uJiZlLmhhc093blByb3BlcnR5KFwidW5pbnRlcnByZXRlZE9wdGlvblwiKSl7aWYoIUFycmF5LmlzQXJyYXkoZS51bmludGVycHJldGVkT3B0aW9uKSlyZXR1cm5cInVuaW50ZXJwcmV0ZWRPcHRpb246IGFycmF5IGV4cGVjdGVkXCI7Zm9yKHZhciB0PTA7dDxlLnVuaW50ZXJwcmV0ZWRPcHRpb24ubGVuZ3RoOysrdClpZihuPWMuZ29vZ2xlLnByb3RvYnVmLlVuaW50ZXJwcmV0ZWRPcHRpb24udmVyaWZ5KGUudW5pbnRlcnByZXRlZE9wdGlvblt0XSkpcmV0dXJuXCJ1bmludGVycHJldGVkT3B0aW9uLlwiK259dmFyIG47aWYobnVsbCE9ZVtcIi5nb29nbGUuYXBpLmh0dHBcIl0mJmUuaGFzT3duUHJvcGVydHkoXCIuZ29vZ2xlLmFwaS5odHRwXCIpJiYobj1jLmdvb2dsZS5hcGkuSHR0cFJ1bGUudmVyaWZ5KGVbXCIuZ29vZ2xlLmFwaS5odHRwXCJdKSkpcmV0dXJuXCIuZ29vZ2xlLmFwaS5odHRwLlwiK247aWYobnVsbCE9ZVtcIi5nb29nbGUuYXBpLm1ldGhvZFNpZ25hdHVyZVwiXSYmZS5oYXNPd25Qcm9wZXJ0eShcIi5nb29nbGUuYXBpLm1ldGhvZFNpZ25hdHVyZVwiKSl7aWYoIUFycmF5LmlzQXJyYXkoZVtcIi5nb29nbGUuYXBpLm1ldGhvZFNpZ25hdHVyZVwiXSkpcmV0dXJuXCIuZ29vZ2xlLmFwaS5tZXRob2RTaWduYXR1cmU6IGFycmF5IGV4cGVjdGVkXCI7Zm9yKHQ9MDt0PGVbXCIuZ29vZ2xlLmFwaS5tZXRob2RTaWduYXR1cmVcIl0ubGVuZ3RoOysrdClpZighdS5pc1N0cmluZyhlW1wiLmdvb2dsZS5hcGkubWV0aG9kU2lnbmF0dXJlXCJdW3RdKSlyZXR1cm5cIi5nb29nbGUuYXBpLm1ldGhvZFNpZ25hdHVyZTogc3RyaW5nW10gZXhwZWN0ZWRcIn1yZXR1cm4gbnVsbH0sTi5mcm9tT2JqZWN0PWZ1bmN0aW9uKGUpe2lmKGUgaW5zdGFuY2VvZiBjLmdvb2dsZS5wcm90b2J1Zi5NZXRob2RPcHRpb25zKXJldHVybiBlO3ZhciB0PW5ldyBjLmdvb2dsZS5wcm90b2J1Zi5NZXRob2RPcHRpb25zO3N3aXRjaChudWxsIT1lLmRlcHJlY2F0ZWQmJih0LmRlcHJlY2F0ZWQ9Qm9vbGVhbihlLmRlcHJlY2F0ZWQpKSxlLmlkZW1wb3RlbmN5TGV2ZWwpe2Nhc2VcIklERU1QT1RFTkNZX1VOS05PV05cIjpjYXNlIDA6dC5pZGVtcG90ZW5jeUxldmVsPTA7YnJlYWs7Y2FzZVwiTk9fU0lERV9FRkZFQ1RTXCI6Y2FzZSAxOnQuaWRlbXBvdGVuY3lMZXZlbD0xO2JyZWFrO2Nhc2VcIklERU1QT1RFTlRcIjpjYXNlIDI6dC5pZGVtcG90ZW5jeUxldmVsPTJ9aWYoZS51bmludGVycHJldGVkT3B0aW9uKXtpZighQXJyYXkuaXNBcnJheShlLnVuaW50ZXJwcmV0ZWRPcHRpb24pKXRocm93IFR5cGVFcnJvcihcIi5nb29nbGUucHJvdG9idWYuTWV0aG9kT3B0aW9ucy51bmludGVycHJldGVkT3B0aW9uOiBhcnJheSBleHBlY3RlZFwiKTt0LnVuaW50ZXJwcmV0ZWRPcHRpb249W107Zm9yKHZhciBuPTA7bjxlLnVuaW50ZXJwcmV0ZWRPcHRpb24ubGVuZ3RoOysrbil7aWYoXCJvYmplY3RcIiE9dHlwZW9mIGUudW5pbnRlcnByZXRlZE9wdGlvbltuXSl0aHJvdyBUeXBlRXJyb3IoXCIuZ29vZ2xlLnByb3RvYnVmLk1ldGhvZE9wdGlvbnMudW5pbnRlcnByZXRlZE9wdGlvbjogb2JqZWN0IGV4cGVjdGVkXCIpO3QudW5pbnRlcnByZXRlZE9wdGlvbltuXT1jLmdvb2dsZS5wcm90b2J1Zi5VbmludGVycHJldGVkT3B0aW9uLmZyb21PYmplY3QoZS51bmludGVycHJldGVkT3B0aW9uW25dKX19aWYobnVsbCE9ZVtcIi5nb29nbGUuYXBpLmh0dHBcIl0pe2lmKFwib2JqZWN0XCIhPXR5cGVvZiBlW1wiLmdvb2dsZS5hcGkuaHR0cFwiXSl0aHJvdyBUeXBlRXJyb3IoXCIuZ29vZ2xlLnByb3RvYnVmLk1ldGhvZE9wdGlvbnMuLmdvb2dsZS5hcGkuaHR0cDogb2JqZWN0IGV4cGVjdGVkXCIpO3RbXCIuZ29vZ2xlLmFwaS5odHRwXCJdPWMuZ29vZ2xlLmFwaS5IdHRwUnVsZS5mcm9tT2JqZWN0KGVbXCIuZ29vZ2xlLmFwaS5odHRwXCJdKX1pZihlW1wiLmdvb2dsZS5hcGkubWV0aG9kU2lnbmF0dXJlXCJdKXtpZighQXJyYXkuaXNBcnJheShlW1wiLmdvb2dsZS5hcGkubWV0aG9kU2lnbmF0dXJlXCJdKSl0aHJvdyBUeXBlRXJyb3IoXCIuZ29vZ2xlLnByb3RvYnVmLk1ldGhvZE9wdGlvbnMuLmdvb2dsZS5hcGkubWV0aG9kU2lnbmF0dXJlOiBhcnJheSBleHBlY3RlZFwiKTt0W1wiLmdvb2dsZS5hcGkubWV0aG9kU2lnbmF0dXJlXCJdPVtdO2ZvcihuPTA7bjxlW1wiLmdvb2dsZS5hcGkubWV0aG9kU2lnbmF0dXJlXCJdLmxlbmd0aDsrK24pdFtcIi5nb29nbGUuYXBpLm1ldGhvZFNpZ25hdHVyZVwiXVtuXT1TdHJpbmcoZVtcIi5nb29nbGUuYXBpLm1ldGhvZFNpZ25hdHVyZVwiXVtuXSl9cmV0dXJuIHR9LE4udG9PYmplY3Q9ZnVuY3Rpb24oZSx0KXt2YXIgbj17fTtpZigoKHQ9dHx8e30pLmFycmF5c3x8dC5kZWZhdWx0cykmJihuLnVuaW50ZXJwcmV0ZWRPcHRpb249W10sbltcIi5nb29nbGUuYXBpLm1ldGhvZFNpZ25hdHVyZVwiXT1bXSksdC5kZWZhdWx0cyYmKG4uZGVwcmVjYXRlZD0hMSxuLmlkZW1wb3RlbmN5TGV2ZWw9dC5lbnVtcz09PVN0cmluZz9cIklERU1QT1RFTkNZX1VOS05PV05cIjowLG5bXCIuZ29vZ2xlLmFwaS5odHRwXCJdPW51bGwpLG51bGwhPWUuZGVwcmVjYXRlZCYmZS5oYXNPd25Qcm9wZXJ0eShcImRlcHJlY2F0ZWRcIikmJihuLmRlcHJlY2F0ZWQ9ZS5kZXByZWNhdGVkKSxudWxsIT1lLmlkZW1wb3RlbmN5TGV2ZWwmJmUuaGFzT3duUHJvcGVydHkoXCJpZGVtcG90ZW5jeUxldmVsXCIpJiYobi5pZGVtcG90ZW5jeUxldmVsPXQuZW51bXM9PT1TdHJpbmc/Yy5nb29nbGUucHJvdG9idWYuTWV0aG9kT3B0aW9ucy5JZGVtcG90ZW5jeUxldmVsW2UuaWRlbXBvdGVuY3lMZXZlbF06ZS5pZGVtcG90ZW5jeUxldmVsKSxlLnVuaW50ZXJwcmV0ZWRPcHRpb24mJmUudW5pbnRlcnByZXRlZE9wdGlvbi5sZW5ndGgpe24udW5pbnRlcnByZXRlZE9wdGlvbj1bXTtmb3IodmFyIG89MDtvPGUudW5pbnRlcnByZXRlZE9wdGlvbi5sZW5ndGg7KytvKW4udW5pbnRlcnByZXRlZE9wdGlvbltvXT1jLmdvb2dsZS5wcm90b2J1Zi5VbmludGVycHJldGVkT3B0aW9uLnRvT2JqZWN0KGUudW5pbnRlcnByZXRlZE9wdGlvbltvXSx0KX1pZihlW1wiLmdvb2dsZS5hcGkubWV0aG9kU2lnbmF0dXJlXCJdJiZlW1wiLmdvb2dsZS5hcGkubWV0aG9kU2lnbmF0dXJlXCJdLmxlbmd0aCl7bltcIi5nb29nbGUuYXBpLm1ldGhvZFNpZ25hdHVyZVwiXT1bXTtmb3Iobz0wO288ZVtcIi5nb29nbGUuYXBpLm1ldGhvZFNpZ25hdHVyZVwiXS5sZW5ndGg7KytvKW5bXCIuZ29vZ2xlLmFwaS5tZXRob2RTaWduYXR1cmVcIl1bb109ZVtcIi5nb29nbGUuYXBpLm1ldGhvZFNpZ25hdHVyZVwiXVtvXX1yZXR1cm4gbnVsbCE9ZVtcIi5nb29nbGUuYXBpLmh0dHBcIl0mJmUuaGFzT3duUHJvcGVydHkoXCIuZ29vZ2xlLmFwaS5odHRwXCIpJiYobltcIi5nb29nbGUuYXBpLmh0dHBcIl09Yy5nb29nbGUuYXBpLkh0dHBSdWxlLnRvT2JqZWN0KGVbXCIuZ29vZ2xlLmFwaS5odHRwXCJdLHQpKSxufSxOLnByb3RvdHlwZS50b0pTT049ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5jb25zdHJ1Y3Rvci50b09iamVjdCh0aGlzLG8udXRpbC50b0pTT05PcHRpb25zKX0sTi5JZGVtcG90ZW5jeUxldmVsPShlPXt9LCh0PU9iamVjdC5jcmVhdGUoZSkpW2VbMF09XCJJREVNUE9URU5DWV9VTktOT1dOXCJdPTAsdFtlWzFdPVwiTk9fU0lERV9FRkZFQ1RTXCJdPTEsdFtlWzJdPVwiSURFTVBPVEVOVFwiXT0yLHQpLE4pLG4uVW5pbnRlcnByZXRlZE9wdGlvbj0oSS5wcm90b3R5cGUubmFtZT11LmVtcHR5QXJyYXksSS5wcm90b3R5cGUuaWRlbnRpZmllclZhbHVlPVwiXCIsSS5wcm90b3R5cGUucG9zaXRpdmVJbnRWYWx1ZT11Lkxvbmc/dS5Mb25nLmZyb21CaXRzKDAsMCwhMCk6MCxJLnByb3RvdHlwZS5uZWdhdGl2ZUludFZhbHVlPXUuTG9uZz91LkxvbmcuZnJvbUJpdHMoMCwwLCExKTowLEkucHJvdG90eXBlLmRvdWJsZVZhbHVlPTAsSS5wcm90b3R5cGUuc3RyaW5nVmFsdWU9dS5uZXdCdWZmZXIoW10pLEkucHJvdG90eXBlLmFnZ3JlZ2F0ZVZhbHVlPVwiXCIsSS5jcmVhdGU9ZnVuY3Rpb24oZSl7cmV0dXJuIG5ldyBJKGUpfSxJLmVuY29kZT1mdW5jdGlvbihlLHQpe2lmKHQ9dHx8ci5jcmVhdGUoKSxudWxsIT1lLm5hbWUmJmUubmFtZS5sZW5ndGgpZm9yKHZhciBuPTA7bjxlLm5hbWUubGVuZ3RoOysrbiljLmdvb2dsZS5wcm90b2J1Zi5VbmludGVycHJldGVkT3B0aW9uLk5hbWVQYXJ0LmVuY29kZShlLm5hbWVbbl0sdC51aW50MzIoMTgpLmZvcmsoKSkubGRlbGltKCk7cmV0dXJuIG51bGwhPWUuaWRlbnRpZmllclZhbHVlJiZPYmplY3QuaGFzT3duUHJvcGVydHkuY2FsbChlLFwiaWRlbnRpZmllclZhbHVlXCIpJiZ0LnVpbnQzMigyNikuc3RyaW5nKGUuaWRlbnRpZmllclZhbHVlKSxudWxsIT1lLnBvc2l0aXZlSW50VmFsdWUmJk9iamVjdC5oYXNPd25Qcm9wZXJ0eS5jYWxsKGUsXCJwb3NpdGl2ZUludFZhbHVlXCIpJiZ0LnVpbnQzMigzMikudWludDY0KGUucG9zaXRpdmVJbnRWYWx1ZSksbnVsbCE9ZS5uZWdhdGl2ZUludFZhbHVlJiZPYmplY3QuaGFzT3duUHJvcGVydHkuY2FsbChlLFwibmVnYXRpdmVJbnRWYWx1ZVwiKSYmdC51aW50MzIoNDApLmludDY0KGUubmVnYXRpdmVJbnRWYWx1ZSksbnVsbCE9ZS5kb3VibGVWYWx1ZSYmT2JqZWN0Lmhhc093blByb3BlcnR5LmNhbGwoZSxcImRvdWJsZVZhbHVlXCIpJiZ0LnVpbnQzMig0OSkuZG91YmxlKGUuZG91YmxlVmFsdWUpLG51bGwhPWUuc3RyaW5nVmFsdWUmJk9iamVjdC5oYXNPd25Qcm9wZXJ0eS5jYWxsKGUsXCJzdHJpbmdWYWx1ZVwiKSYmdC51aW50MzIoNTgpLmJ5dGVzKGUuc3RyaW5nVmFsdWUpLG51bGwhPWUuYWdncmVnYXRlVmFsdWUmJk9iamVjdC5oYXNPd25Qcm9wZXJ0eS5jYWxsKGUsXCJhZ2dyZWdhdGVWYWx1ZVwiKSYmdC51aW50MzIoNjYpLnN0cmluZyhlLmFnZ3JlZ2F0ZVZhbHVlKSx0fSxJLmVuY29kZURlbGltaXRlZD1mdW5jdGlvbihlLHQpe3JldHVybiB0aGlzLmVuY29kZShlLHQpLmxkZWxpbSgpfSxJLmRlY29kZT1mdW5jdGlvbihlLHQpe2UgaW5zdGFuY2VvZiBzfHwoZT1zLmNyZWF0ZShlKSk7Zm9yKHZhciBuPXZvaWQgMD09PXQ/ZS5sZW46ZS5wb3MrdCxvPW5ldyBjLmdvb2dsZS5wcm90b2J1Zi5VbmludGVycHJldGVkT3B0aW9uO2UucG9zPG47KXt2YXIgcj1lLnVpbnQzMigpO3N3aXRjaChyPj4+Myl7Y2FzZSAyOm8ubmFtZSYmby5uYW1lLmxlbmd0aHx8KG8ubmFtZT1bXSksby5uYW1lLnB1c2goYy5nb29nbGUucHJvdG9idWYuVW5pbnRlcnByZXRlZE9wdGlvbi5OYW1lUGFydC5kZWNvZGUoZSxlLnVpbnQzMigpKSk7YnJlYWs7Y2FzZSAzOm8uaWRlbnRpZmllclZhbHVlPWUuc3RyaW5nKCk7YnJlYWs7Y2FzZSA0Om8ucG9zaXRpdmVJbnRWYWx1ZT1lLnVpbnQ2NCgpO2JyZWFrO2Nhc2UgNTpvLm5lZ2F0aXZlSW50VmFsdWU9ZS5pbnQ2NCgpO2JyZWFrO2Nhc2UgNjpvLmRvdWJsZVZhbHVlPWUuZG91YmxlKCk7YnJlYWs7Y2FzZSA3Om8uc3RyaW5nVmFsdWU9ZS5ieXRlcygpO2JyZWFrO2Nhc2UgODpvLmFnZ3JlZ2F0ZVZhbHVlPWUuc3RyaW5nKCk7YnJlYWs7ZGVmYXVsdDplLnNraXBUeXBlKDcmcil9fXJldHVybiBvfSxJLmRlY29kZURlbGltaXRlZD1mdW5jdGlvbihlKXtyZXR1cm4gZSBpbnN0YW5jZW9mIHN8fChlPW5ldyBzKGUpKSx0aGlzLmRlY29kZShlLGUudWludDMyKCkpfSxJLnZlcmlmeT1mdW5jdGlvbihlKXtpZihcIm9iamVjdFwiIT10eXBlb2YgZXx8bnVsbD09PWUpcmV0dXJuXCJvYmplY3QgZXhwZWN0ZWRcIjtpZihudWxsIT1lLm5hbWUmJmUuaGFzT3duUHJvcGVydHkoXCJuYW1lXCIpKXtpZighQXJyYXkuaXNBcnJheShlLm5hbWUpKXJldHVyblwibmFtZTogYXJyYXkgZXhwZWN0ZWRcIjtmb3IodmFyIHQ9MDt0PGUubmFtZS5sZW5ndGg7Kyt0KXt2YXIgbj1jLmdvb2dsZS5wcm90b2J1Zi5VbmludGVycHJldGVkT3B0aW9uLk5hbWVQYXJ0LnZlcmlmeShlLm5hbWVbdF0pO2lmKG4pcmV0dXJuXCJuYW1lLlwiK259fXJldHVybiBudWxsIT1lLmlkZW50aWZpZXJWYWx1ZSYmZS5oYXNPd25Qcm9wZXJ0eShcImlkZW50aWZpZXJWYWx1ZVwiKSYmIXUuaXNTdHJpbmcoZS5pZGVudGlmaWVyVmFsdWUpP1wiaWRlbnRpZmllclZhbHVlOiBzdHJpbmcgZXhwZWN0ZWRcIjpudWxsIT1lLnBvc2l0aXZlSW50VmFsdWUmJmUuaGFzT3duUHJvcGVydHkoXCJwb3NpdGl2ZUludFZhbHVlXCIpJiYhKHUuaXNJbnRlZ2VyKGUucG9zaXRpdmVJbnRWYWx1ZSl8fGUucG9zaXRpdmVJbnRWYWx1ZSYmdS5pc0ludGVnZXIoZS5wb3NpdGl2ZUludFZhbHVlLmxvdykmJnUuaXNJbnRlZ2VyKGUucG9zaXRpdmVJbnRWYWx1ZS5oaWdoKSk/XCJwb3NpdGl2ZUludFZhbHVlOiBpbnRlZ2VyfExvbmcgZXhwZWN0ZWRcIjpudWxsIT1lLm5lZ2F0aXZlSW50VmFsdWUmJmUuaGFzT3duUHJvcGVydHkoXCJuZWdhdGl2ZUludFZhbHVlXCIpJiYhKHUuaXNJbnRlZ2VyKGUubmVnYXRpdmVJbnRWYWx1ZSl8fGUubmVnYXRpdmVJbnRWYWx1ZSYmdS5pc0ludGVnZXIoZS5uZWdhdGl2ZUludFZhbHVlLmxvdykmJnUuaXNJbnRlZ2VyKGUubmVnYXRpdmVJbnRWYWx1ZS5oaWdoKSk/XCJuZWdhdGl2ZUludFZhbHVlOiBpbnRlZ2VyfExvbmcgZXhwZWN0ZWRcIjpudWxsIT1lLmRvdWJsZVZhbHVlJiZlLmhhc093blByb3BlcnR5KFwiZG91YmxlVmFsdWVcIikmJlwibnVtYmVyXCIhPXR5cGVvZiBlLmRvdWJsZVZhbHVlP1wiZG91YmxlVmFsdWU6IG51bWJlciBleHBlY3RlZFwiOm51bGwhPWUuc3RyaW5nVmFsdWUmJmUuaGFzT3duUHJvcGVydHkoXCJzdHJpbmdWYWx1ZVwiKSYmIShlLnN0cmluZ1ZhbHVlJiZcIm51bWJlclwiPT10eXBlb2YgZS5zdHJpbmdWYWx1ZS5sZW5ndGh8fHUuaXNTdHJpbmcoZS5zdHJpbmdWYWx1ZSkpP1wic3RyaW5nVmFsdWU6IGJ1ZmZlciBleHBlY3RlZFwiOm51bGwhPWUuYWdncmVnYXRlVmFsdWUmJmUuaGFzT3duUHJvcGVydHkoXCJhZ2dyZWdhdGVWYWx1ZVwiKSYmIXUuaXNTdHJpbmcoZS5hZ2dyZWdhdGVWYWx1ZSk/XCJhZ2dyZWdhdGVWYWx1ZTogc3RyaW5nIGV4cGVjdGVkXCI6bnVsbH0sSS5mcm9tT2JqZWN0PWZ1bmN0aW9uKGUpe2lmKGUgaW5zdGFuY2VvZiBjLmdvb2dsZS5wcm90b2J1Zi5VbmludGVycHJldGVkT3B0aW9uKXJldHVybiBlO3ZhciB0PW5ldyBjLmdvb2dsZS5wcm90b2J1Zi5VbmludGVycHJldGVkT3B0aW9uO2lmKGUubmFtZSl7aWYoIUFycmF5LmlzQXJyYXkoZS5uYW1lKSl0aHJvdyBUeXBlRXJyb3IoXCIuZ29vZ2xlLnByb3RvYnVmLlVuaW50ZXJwcmV0ZWRPcHRpb24ubmFtZTogYXJyYXkgZXhwZWN0ZWRcIik7dC5uYW1lPVtdO2Zvcih2YXIgbj0wO248ZS5uYW1lLmxlbmd0aDsrK24pe2lmKFwib2JqZWN0XCIhPXR5cGVvZiBlLm5hbWVbbl0pdGhyb3cgVHlwZUVycm9yKFwiLmdvb2dsZS5wcm90b2J1Zi5VbmludGVycHJldGVkT3B0aW9uLm5hbWU6IG9iamVjdCBleHBlY3RlZFwiKTt0Lm5hbWVbbl09Yy5nb29nbGUucHJvdG9idWYuVW5pbnRlcnByZXRlZE9wdGlvbi5OYW1lUGFydC5mcm9tT2JqZWN0KGUubmFtZVtuXSl9fXJldHVybiBudWxsIT1lLmlkZW50aWZpZXJWYWx1ZSYmKHQuaWRlbnRpZmllclZhbHVlPVN0cmluZyhlLmlkZW50aWZpZXJWYWx1ZSkpLG51bGwhPWUucG9zaXRpdmVJbnRWYWx1ZSYmKHUuTG9uZz8odC5wb3NpdGl2ZUludFZhbHVlPXUuTG9uZy5mcm9tVmFsdWUoZS5wb3NpdGl2ZUludFZhbHVlKSkudW5zaWduZWQ9ITA6XCJzdHJpbmdcIj09dHlwZW9mIGUucG9zaXRpdmVJbnRWYWx1ZT90LnBvc2l0aXZlSW50VmFsdWU9cGFyc2VJbnQoZS5wb3NpdGl2ZUludFZhbHVlLDEwKTpcIm51bWJlclwiPT10eXBlb2YgZS5wb3NpdGl2ZUludFZhbHVlP3QucG9zaXRpdmVJbnRWYWx1ZT1lLnBvc2l0aXZlSW50VmFsdWU6XCJvYmplY3RcIj09dHlwZW9mIGUucG9zaXRpdmVJbnRWYWx1ZSYmKHQucG9zaXRpdmVJbnRWYWx1ZT1uZXcgdS5Mb25nQml0cyhlLnBvc2l0aXZlSW50VmFsdWUubG93Pj4+MCxlLnBvc2l0aXZlSW50VmFsdWUuaGlnaD4+PjApLnRvTnVtYmVyKCEwKSkpLG51bGwhPWUubmVnYXRpdmVJbnRWYWx1ZSYmKHUuTG9uZz8odC5uZWdhdGl2ZUludFZhbHVlPXUuTG9uZy5mcm9tVmFsdWUoZS5uZWdhdGl2ZUludFZhbHVlKSkudW5zaWduZWQ9ITE6XCJzdHJpbmdcIj09dHlwZW9mIGUubmVnYXRpdmVJbnRWYWx1ZT90Lm5lZ2F0aXZlSW50VmFsdWU9cGFyc2VJbnQoZS5uZWdhdGl2ZUludFZhbHVlLDEwKTpcIm51bWJlclwiPT10eXBlb2YgZS5uZWdhdGl2ZUludFZhbHVlP3QubmVnYXRpdmVJbnRWYWx1ZT1lLm5lZ2F0aXZlSW50VmFsdWU6XCJvYmplY3RcIj09dHlwZW9mIGUubmVnYXRpdmVJbnRWYWx1ZSYmKHQubmVnYXRpdmVJbnRWYWx1ZT1uZXcgdS5Mb25nQml0cyhlLm5lZ2F0aXZlSW50VmFsdWUubG93Pj4+MCxlLm5lZ2F0aXZlSW50VmFsdWUuaGlnaD4+PjApLnRvTnVtYmVyKCkpKSxudWxsIT1lLmRvdWJsZVZhbHVlJiYodC5kb3VibGVWYWx1ZT1OdW1iZXIoZS5kb3VibGVWYWx1ZSkpLG51bGwhPWUuc3RyaW5nVmFsdWUmJihcInN0cmluZ1wiPT10eXBlb2YgZS5zdHJpbmdWYWx1ZT91LmJhc2U2NC5kZWNvZGUoZS5zdHJpbmdWYWx1ZSx0LnN0cmluZ1ZhbHVlPXUubmV3QnVmZmVyKHUuYmFzZTY0Lmxlbmd0aChlLnN0cmluZ1ZhbHVlKSksMCk6ZS5zdHJpbmdWYWx1ZS5sZW5ndGgmJih0LnN0cmluZ1ZhbHVlPWUuc3RyaW5nVmFsdWUpKSxudWxsIT1lLmFnZ3JlZ2F0ZVZhbHVlJiYodC5hZ2dyZWdhdGVWYWx1ZT1TdHJpbmcoZS5hZ2dyZWdhdGVWYWx1ZSkpLHR9LEkudG9PYmplY3Q9ZnVuY3Rpb24oZSx0KXt2YXIgbixvPXt9O2lmKCgodD10fHx7fSkuYXJyYXlzfHx0LmRlZmF1bHRzKSYmKG8ubmFtZT1bXSksdC5kZWZhdWx0cyYmKG8uaWRlbnRpZmllclZhbHVlPVwiXCIsdS5Mb25nPyhuPW5ldyB1LkxvbmcoMCwwLCEwKSxvLnBvc2l0aXZlSW50VmFsdWU9dC5sb25ncz09PVN0cmluZz9uLnRvU3RyaW5nKCk6dC5sb25ncz09PU51bWJlcj9uLnRvTnVtYmVyKCk6bik6by5wb3NpdGl2ZUludFZhbHVlPXQubG9uZ3M9PT1TdHJpbmc/XCIwXCI6MCx1Lkxvbmc/KG49bmV3IHUuTG9uZygwLDAsITEpLG8ubmVnYXRpdmVJbnRWYWx1ZT10LmxvbmdzPT09U3RyaW5nP24udG9TdHJpbmcoKTp0LmxvbmdzPT09TnVtYmVyP24udG9OdW1iZXIoKTpuKTpvLm5lZ2F0aXZlSW50VmFsdWU9dC5sb25ncz09PVN0cmluZz9cIjBcIjowLG8uZG91YmxlVmFsdWU9MCx0LmJ5dGVzPT09U3RyaW5nP28uc3RyaW5nVmFsdWU9XCJcIjooby5zdHJpbmdWYWx1ZT1bXSx0LmJ5dGVzIT09QXJyYXkmJihvLnN0cmluZ1ZhbHVlPXUubmV3QnVmZmVyKG8uc3RyaW5nVmFsdWUpKSksby5hZ2dyZWdhdGVWYWx1ZT1cIlwiKSxlLm5hbWUmJmUubmFtZS5sZW5ndGgpe28ubmFtZT1bXTtmb3IodmFyIHI9MDtyPGUubmFtZS5sZW5ndGg7KytyKW8ubmFtZVtyXT1jLmdvb2dsZS5wcm90b2J1Zi5VbmludGVycHJldGVkT3B0aW9uLk5hbWVQYXJ0LnRvT2JqZWN0KGUubmFtZVtyXSx0KX1yZXR1cm4gbnVsbCE9ZS5pZGVudGlmaWVyVmFsdWUmJmUuaGFzT3duUHJvcGVydHkoXCJpZGVudGlmaWVyVmFsdWVcIikmJihvLmlkZW50aWZpZXJWYWx1ZT1lLmlkZW50aWZpZXJWYWx1ZSksbnVsbCE9ZS5wb3NpdGl2ZUludFZhbHVlJiZlLmhhc093blByb3BlcnR5KFwicG9zaXRpdmVJbnRWYWx1ZVwiKSYmKFwibnVtYmVyXCI9PXR5cGVvZiBlLnBvc2l0aXZlSW50VmFsdWU/by5wb3NpdGl2ZUludFZhbHVlPXQubG9uZ3M9PT1TdHJpbmc/U3RyaW5nKGUucG9zaXRpdmVJbnRWYWx1ZSk6ZS5wb3NpdGl2ZUludFZhbHVlOm8ucG9zaXRpdmVJbnRWYWx1ZT10LmxvbmdzPT09U3RyaW5nP3UuTG9uZy5wcm90b3R5cGUudG9TdHJpbmcuY2FsbChlLnBvc2l0aXZlSW50VmFsdWUpOnQubG9uZ3M9PT1OdW1iZXI/bmV3IHUuTG9uZ0JpdHMoZS5wb3NpdGl2ZUludFZhbHVlLmxvdz4+PjAsZS5wb3NpdGl2ZUludFZhbHVlLmhpZ2g+Pj4wKS50b051bWJlcighMCk6ZS5wb3NpdGl2ZUludFZhbHVlKSxudWxsIT1lLm5lZ2F0aXZlSW50VmFsdWUmJmUuaGFzT3duUHJvcGVydHkoXCJuZWdhdGl2ZUludFZhbHVlXCIpJiYoXCJudW1iZXJcIj09dHlwZW9mIGUubmVnYXRpdmVJbnRWYWx1ZT9vLm5lZ2F0aXZlSW50VmFsdWU9dC5sb25ncz09PVN0cmluZz9TdHJpbmcoZS5uZWdhdGl2ZUludFZhbHVlKTplLm5lZ2F0aXZlSW50VmFsdWU6by5uZWdhdGl2ZUludFZhbHVlPXQubG9uZ3M9PT1TdHJpbmc/dS5Mb25nLnByb3RvdHlwZS50b1N0cmluZy5jYWxsKGUubmVnYXRpdmVJbnRWYWx1ZSk6dC5sb25ncz09PU51bWJlcj9uZXcgdS5Mb25nQml0cyhlLm5lZ2F0aXZlSW50VmFsdWUubG93Pj4+MCxlLm5lZ2F0aXZlSW50VmFsdWUuaGlnaD4+PjApLnRvTnVtYmVyKCk6ZS5uZWdhdGl2ZUludFZhbHVlKSxudWxsIT1lLmRvdWJsZVZhbHVlJiZlLmhhc093blByb3BlcnR5KFwiZG91YmxlVmFsdWVcIikmJihvLmRvdWJsZVZhbHVlPXQuanNvbiYmIWlzRmluaXRlKGUuZG91YmxlVmFsdWUpP1N0cmluZyhlLmRvdWJsZVZhbHVlKTplLmRvdWJsZVZhbHVlKSxudWxsIT1lLnN0cmluZ1ZhbHVlJiZlLmhhc093blByb3BlcnR5KFwic3RyaW5nVmFsdWVcIikmJihvLnN0cmluZ1ZhbHVlPXQuYnl0ZXM9PT1TdHJpbmc/dS5iYXNlNjQuZW5jb2RlKGUuc3RyaW5nVmFsdWUsMCxlLnN0cmluZ1ZhbHVlLmxlbmd0aCk6dC5ieXRlcz09PUFycmF5P0FycmF5LnByb3RvdHlwZS5zbGljZS5jYWxsKGUuc3RyaW5nVmFsdWUpOmUuc3RyaW5nVmFsdWUpLG51bGwhPWUuYWdncmVnYXRlVmFsdWUmJmUuaGFzT3duUHJvcGVydHkoXCJhZ2dyZWdhdGVWYWx1ZVwiKSYmKG8uYWdncmVnYXRlVmFsdWU9ZS5hZ2dyZWdhdGVWYWx1ZSksb30sSS5wcm90b3R5cGUudG9KU09OPWZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMuY29uc3RydWN0b3IudG9PYmplY3QodGhpcyxvLnV0aWwudG9KU09OT3B0aW9ucyl9LEkuTmFtZVBhcnQ9KFIucHJvdG90eXBlLm5hbWVQYXJ0PVwiXCIsUi5wcm90b3R5cGUuaXNFeHRlbnNpb249ITEsUi5jcmVhdGU9ZnVuY3Rpb24oZSl7cmV0dXJuIG5ldyBSKGUpfSxSLmVuY29kZT1mdW5jdGlvbihlLHQpe3JldHVybih0PXR8fHIuY3JlYXRlKCkpLnVpbnQzMigxMCkuc3RyaW5nKGUubmFtZVBhcnQpLHQudWludDMyKDE2KS5ib29sKGUuaXNFeHRlbnNpb24pLHR9LFIuZW5jb2RlRGVsaW1pdGVkPWZ1bmN0aW9uKGUsdCl7cmV0dXJuIHRoaXMuZW5jb2RlKGUsdCkubGRlbGltKCl9LFIuZGVjb2RlPWZ1bmN0aW9uKGUsdCl7ZSBpbnN0YW5jZW9mIHN8fChlPXMuY3JlYXRlKGUpKTtmb3IodmFyIG49dm9pZCAwPT09dD9lLmxlbjplLnBvcyt0LG89bmV3IGMuZ29vZ2xlLnByb3RvYnVmLlVuaW50ZXJwcmV0ZWRPcHRpb24uTmFtZVBhcnQ7ZS5wb3M8bjspe3ZhciByPWUudWludDMyKCk7c3dpdGNoKHI+Pj4zKXtjYXNlIDE6by5uYW1lUGFydD1lLnN0cmluZygpO2JyZWFrO2Nhc2UgMjpvLmlzRXh0ZW5zaW9uPWUuYm9vbCgpO2JyZWFrO2RlZmF1bHQ6ZS5za2lwVHlwZSg3JnIpfX1pZighby5oYXNPd25Qcm9wZXJ0eShcIm5hbWVQYXJ0XCIpKXRocm93IHUuUHJvdG9jb2xFcnJvcihcIm1pc3NpbmcgcmVxdWlyZWQgJ25hbWVQYXJ0J1wiLHtpbnN0YW5jZTpvfSk7aWYoby5oYXNPd25Qcm9wZXJ0eShcImlzRXh0ZW5zaW9uXCIpKXJldHVybiBvO3Rocm93IHUuUHJvdG9jb2xFcnJvcihcIm1pc3NpbmcgcmVxdWlyZWQgJ2lzRXh0ZW5zaW9uJ1wiLHtpbnN0YW5jZTpvfSl9LFIuZGVjb2RlRGVsaW1pdGVkPWZ1bmN0aW9uKGUpe3JldHVybiBlIGluc3RhbmNlb2Ygc3x8KGU9bmV3IHMoZSkpLHRoaXMuZGVjb2RlKGUsZS51aW50MzIoKSl9LFIudmVyaWZ5PWZ1bmN0aW9uKGUpe3JldHVyblwib2JqZWN0XCIhPXR5cGVvZiBlfHxudWxsPT09ZT9cIm9iamVjdCBleHBlY3RlZFwiOnUuaXNTdHJpbmcoZS5uYW1lUGFydCk/XCJib29sZWFuXCIhPXR5cGVvZiBlLmlzRXh0ZW5zaW9uP1wiaXNFeHRlbnNpb246IGJvb2xlYW4gZXhwZWN0ZWRcIjpudWxsOlwibmFtZVBhcnQ6IHN0cmluZyBleHBlY3RlZFwifSxSLmZyb21PYmplY3Q9ZnVuY3Rpb24oZSl7dmFyIHQ7cmV0dXJuIGUgaW5zdGFuY2VvZiBjLmdvb2dsZS5wcm90b2J1Zi5VbmludGVycHJldGVkT3B0aW9uLk5hbWVQYXJ0P2U6KHQ9bmV3IGMuZ29vZ2xlLnByb3RvYnVmLlVuaW50ZXJwcmV0ZWRPcHRpb24uTmFtZVBhcnQsbnVsbCE9ZS5uYW1lUGFydCYmKHQubmFtZVBhcnQ9U3RyaW5nKGUubmFtZVBhcnQpKSxudWxsIT1lLmlzRXh0ZW5zaW9uJiYodC5pc0V4dGVuc2lvbj1Cb29sZWFuKGUuaXNFeHRlbnNpb24pKSx0KX0sUi50b09iamVjdD1mdW5jdGlvbihlLHQpe3ZhciBuPXt9O3JldHVybih0PXR8fHt9KS5kZWZhdWx0cyYmKG4ubmFtZVBhcnQ9XCJcIixuLmlzRXh0ZW5zaW9uPSExKSxudWxsIT1lLm5hbWVQYXJ0JiZlLmhhc093blByb3BlcnR5KFwibmFtZVBhcnRcIikmJihuLm5hbWVQYXJ0PWUubmFtZVBhcnQpLG51bGwhPWUuaXNFeHRlbnNpb24mJmUuaGFzT3duUHJvcGVydHkoXCJpc0V4dGVuc2lvblwiKSYmKG4uaXNFeHRlbnNpb249ZS5pc0V4dGVuc2lvbiksbn0sUi5wcm90b3R5cGUudG9KU09OPWZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMuY29uc3RydWN0b3IudG9PYmplY3QodGhpcyxvLnV0aWwudG9KU09OT3B0aW9ucyl9LFIpLEkpLG4uU291cmNlQ29kZUluZm89KF8ucHJvdG90eXBlLmxvY2F0aW9uPXUuZW1wdHlBcnJheSxfLmNyZWF0ZT1mdW5jdGlvbihlKXtyZXR1cm4gbmV3IF8oZSl9LF8uZW5jb2RlPWZ1bmN0aW9uKGUsdCl7aWYodD10fHxyLmNyZWF0ZSgpLG51bGwhPWUubG9jYXRpb24mJmUubG9jYXRpb24ubGVuZ3RoKWZvcih2YXIgbj0wO248ZS5sb2NhdGlvbi5sZW5ndGg7KytuKWMuZ29vZ2xlLnByb3RvYnVmLlNvdXJjZUNvZGVJbmZvLkxvY2F0aW9uLmVuY29kZShlLmxvY2F0aW9uW25dLHQudWludDMyKDEwKS5mb3JrKCkpLmxkZWxpbSgpO3JldHVybiB0fSxfLmVuY29kZURlbGltaXRlZD1mdW5jdGlvbihlLHQpe3JldHVybiB0aGlzLmVuY29kZShlLHQpLmxkZWxpbSgpfSxfLmRlY29kZT1mdW5jdGlvbihlLHQpe2UgaW5zdGFuY2VvZiBzfHwoZT1zLmNyZWF0ZShlKSk7Zm9yKHZhciBuPXZvaWQgMD09PXQ/ZS5sZW46ZS5wb3MrdCxvPW5ldyBjLmdvb2dsZS5wcm90b2J1Zi5Tb3VyY2VDb2RlSW5mbztlLnBvczxuOyl7dmFyIHI9ZS51aW50MzIoKTtyPj4+Mz09MT8oby5sb2NhdGlvbiYmby5sb2NhdGlvbi5sZW5ndGh8fChvLmxvY2F0aW9uPVtdKSxvLmxvY2F0aW9uLnB1c2goYy5nb29nbGUucHJvdG9idWYuU291cmNlQ29kZUluZm8uTG9jYXRpb24uZGVjb2RlKGUsZS51aW50MzIoKSkpKTplLnNraXBUeXBlKDcmcil9cmV0dXJuIG99LF8uZGVjb2RlRGVsaW1pdGVkPWZ1bmN0aW9uKGUpe3JldHVybiBlIGluc3RhbmNlb2Ygc3x8KGU9bmV3IHMoZSkpLHRoaXMuZGVjb2RlKGUsZS51aW50MzIoKSl9LF8udmVyaWZ5PWZ1bmN0aW9uKGUpe2lmKFwib2JqZWN0XCIhPXR5cGVvZiBlfHxudWxsPT09ZSlyZXR1cm5cIm9iamVjdCBleHBlY3RlZFwiO2lmKG51bGwhPWUubG9jYXRpb24mJmUuaGFzT3duUHJvcGVydHkoXCJsb2NhdGlvblwiKSl7aWYoIUFycmF5LmlzQXJyYXkoZS5sb2NhdGlvbikpcmV0dXJuXCJsb2NhdGlvbjogYXJyYXkgZXhwZWN0ZWRcIjtmb3IodmFyIHQ9MDt0PGUubG9jYXRpb24ubGVuZ3RoOysrdCl7dmFyIG49Yy5nb29nbGUucHJvdG9idWYuU291cmNlQ29kZUluZm8uTG9jYXRpb24udmVyaWZ5KGUubG9jYXRpb25bdF0pO2lmKG4pcmV0dXJuXCJsb2NhdGlvbi5cIitufX1yZXR1cm4gbnVsbH0sXy5mcm9tT2JqZWN0PWZ1bmN0aW9uKGUpe2lmKGUgaW5zdGFuY2VvZiBjLmdvb2dsZS5wcm90b2J1Zi5Tb3VyY2VDb2RlSW5mbylyZXR1cm4gZTt2YXIgdD1uZXcgYy5nb29nbGUucHJvdG9idWYuU291cmNlQ29kZUluZm87aWYoZS5sb2NhdGlvbil7aWYoIUFycmF5LmlzQXJyYXkoZS5sb2NhdGlvbikpdGhyb3cgVHlwZUVycm9yKFwiLmdvb2dsZS5wcm90b2J1Zi5Tb3VyY2VDb2RlSW5mby5sb2NhdGlvbjogYXJyYXkgZXhwZWN0ZWRcIik7dC5sb2NhdGlvbj1bXTtmb3IodmFyIG49MDtuPGUubG9jYXRpb24ubGVuZ3RoOysrbil7aWYoXCJvYmplY3RcIiE9dHlwZW9mIGUubG9jYXRpb25bbl0pdGhyb3cgVHlwZUVycm9yKFwiLmdvb2dsZS5wcm90b2J1Zi5Tb3VyY2VDb2RlSW5mby5sb2NhdGlvbjogb2JqZWN0IGV4cGVjdGVkXCIpO3QubG9jYXRpb25bbl09Yy5nb29nbGUucHJvdG9idWYuU291cmNlQ29kZUluZm8uTG9jYXRpb24uZnJvbU9iamVjdChlLmxvY2F0aW9uW25dKX19cmV0dXJuIHR9LF8udG9PYmplY3Q9ZnVuY3Rpb24oZSx0KXt2YXIgbj17fTtpZigoKHQ9dHx8e30pLmFycmF5c3x8dC5kZWZhdWx0cykmJihuLmxvY2F0aW9uPVtdKSxlLmxvY2F0aW9uJiZlLmxvY2F0aW9uLmxlbmd0aCl7bi5sb2NhdGlvbj1bXTtmb3IodmFyIG89MDtvPGUubG9jYXRpb24ubGVuZ3RoOysrbyluLmxvY2F0aW9uW29dPWMuZ29vZ2xlLnByb3RvYnVmLlNvdXJjZUNvZGVJbmZvLkxvY2F0aW9uLnRvT2JqZWN0KGUubG9jYXRpb25bb10sdCl9cmV0dXJuIG59LF8ucHJvdG90eXBlLnRvSlNPTj1mdW5jdGlvbigpe3JldHVybiB0aGlzLmNvbnN0cnVjdG9yLnRvT2JqZWN0KHRoaXMsby51dGlsLnRvSlNPTk9wdGlvbnMpfSxfLkxvY2F0aW9uPShDLnByb3RvdHlwZS5wYXRoPXUuZW1wdHlBcnJheSxDLnByb3RvdHlwZS5zcGFuPXUuZW1wdHlBcnJheSxDLnByb3RvdHlwZS5sZWFkaW5nQ29tbWVudHM9XCJcIixDLnByb3RvdHlwZS50cmFpbGluZ0NvbW1lbnRzPVwiXCIsQy5wcm90b3R5cGUubGVhZGluZ0RldGFjaGVkQ29tbWVudHM9dS5lbXB0eUFycmF5LEMuY3JlYXRlPWZ1bmN0aW9uKGUpe3JldHVybiBuZXcgQyhlKX0sQy5lbmNvZGU9ZnVuY3Rpb24oZSx0KXtpZih0PXR8fHIuY3JlYXRlKCksbnVsbCE9ZS5wYXRoJiZlLnBhdGgubGVuZ3RoKXt0LnVpbnQzMigxMCkuZm9yaygpO2Zvcih2YXIgbj0wO248ZS5wYXRoLmxlbmd0aDsrK24pdC5pbnQzMihlLnBhdGhbbl0pO3QubGRlbGltKCl9aWYobnVsbCE9ZS5zcGFuJiZlLnNwYW4ubGVuZ3RoKXt0LnVpbnQzMigxOCkuZm9yaygpO2ZvcihuPTA7bjxlLnNwYW4ubGVuZ3RoOysrbil0LmludDMyKGUuc3BhbltuXSk7dC5sZGVsaW0oKX1pZihudWxsIT1lLmxlYWRpbmdDb21tZW50cyYmT2JqZWN0Lmhhc093blByb3BlcnR5LmNhbGwoZSxcImxlYWRpbmdDb21tZW50c1wiKSYmdC51aW50MzIoMjYpLnN0cmluZyhlLmxlYWRpbmdDb21tZW50cyksbnVsbCE9ZS50cmFpbGluZ0NvbW1lbnRzJiZPYmplY3QuaGFzT3duUHJvcGVydHkuY2FsbChlLFwidHJhaWxpbmdDb21tZW50c1wiKSYmdC51aW50MzIoMzQpLnN0cmluZyhlLnRyYWlsaW5nQ29tbWVudHMpLG51bGwhPWUubGVhZGluZ0RldGFjaGVkQ29tbWVudHMmJmUubGVhZGluZ0RldGFjaGVkQ29tbWVudHMubGVuZ3RoKWZvcihuPTA7bjxlLmxlYWRpbmdEZXRhY2hlZENvbW1lbnRzLmxlbmd0aDsrK24pdC51aW50MzIoNTApLnN0cmluZyhlLmxlYWRpbmdEZXRhY2hlZENvbW1lbnRzW25dKTtyZXR1cm4gdH0sQy5lbmNvZGVEZWxpbWl0ZWQ9ZnVuY3Rpb24oZSx0KXtyZXR1cm4gdGhpcy5lbmNvZGUoZSx0KS5sZGVsaW0oKX0sQy5kZWNvZGU9ZnVuY3Rpb24oZSx0KXtlIGluc3RhbmNlb2Ygc3x8KGU9cy5jcmVhdGUoZSkpO2Zvcih2YXIgbj12b2lkIDA9PT10P2UubGVuOmUucG9zK3Qsbz1uZXcgYy5nb29nbGUucHJvdG9idWYuU291cmNlQ29kZUluZm8uTG9jYXRpb247ZS5wb3M8bjspe3ZhciByPWUudWludDMyKCk7c3dpdGNoKHI+Pj4zKXtjYXNlIDE6aWYoby5wYXRoJiZvLnBhdGgubGVuZ3RofHwoby5wYXRoPVtdKSwyPT0oNyZyKSlmb3IodmFyIGk9ZS51aW50MzIoKStlLnBvcztlLnBvczxpOylvLnBhdGgucHVzaChlLmludDMyKCkpO2Vsc2Ugby5wYXRoLnB1c2goZS5pbnQzMigpKTticmVhaztjYXNlIDI6aWYoby5zcGFuJiZvLnNwYW4ubGVuZ3RofHwoby5zcGFuPVtdKSwyPT0oNyZyKSlmb3IoaT1lLnVpbnQzMigpK2UucG9zO2UucG9zPGk7KW8uc3Bhbi5wdXNoKGUuaW50MzIoKSk7ZWxzZSBvLnNwYW4ucHVzaChlLmludDMyKCkpO2JyZWFrO2Nhc2UgMzpvLmxlYWRpbmdDb21tZW50cz1lLnN0cmluZygpO2JyZWFrO2Nhc2UgNDpvLnRyYWlsaW5nQ29tbWVudHM9ZS5zdHJpbmcoKTticmVhaztjYXNlIDY6by5sZWFkaW5nRGV0YWNoZWRDb21tZW50cyYmby5sZWFkaW5nRGV0YWNoZWRDb21tZW50cy5sZW5ndGh8fChvLmxlYWRpbmdEZXRhY2hlZENvbW1lbnRzPVtdKSxvLmxlYWRpbmdEZXRhY2hlZENvbW1lbnRzLnB1c2goZS5zdHJpbmcoKSk7YnJlYWs7ZGVmYXVsdDplLnNraXBUeXBlKDcmcil9fXJldHVybiBvfSxDLmRlY29kZURlbGltaXRlZD1mdW5jdGlvbihlKXtyZXR1cm4gZSBpbnN0YW5jZW9mIHN8fChlPW5ldyBzKGUpKSx0aGlzLmRlY29kZShlLGUudWludDMyKCkpfSxDLnZlcmlmeT1mdW5jdGlvbihlKXtpZihcIm9iamVjdFwiIT10eXBlb2YgZXx8bnVsbD09PWUpcmV0dXJuXCJvYmplY3QgZXhwZWN0ZWRcIjtpZihudWxsIT1lLnBhdGgmJmUuaGFzT3duUHJvcGVydHkoXCJwYXRoXCIpKXtpZighQXJyYXkuaXNBcnJheShlLnBhdGgpKXJldHVyblwicGF0aDogYXJyYXkgZXhwZWN0ZWRcIjtmb3IodmFyIHQ9MDt0PGUucGF0aC5sZW5ndGg7Kyt0KWlmKCF1LmlzSW50ZWdlcihlLnBhdGhbdF0pKXJldHVyblwicGF0aDogaW50ZWdlcltdIGV4cGVjdGVkXCJ9aWYobnVsbCE9ZS5zcGFuJiZlLmhhc093blByb3BlcnR5KFwic3BhblwiKSl7aWYoIUFycmF5LmlzQXJyYXkoZS5zcGFuKSlyZXR1cm5cInNwYW46IGFycmF5IGV4cGVjdGVkXCI7Zm9yKHQ9MDt0PGUuc3Bhbi5sZW5ndGg7Kyt0KWlmKCF1LmlzSW50ZWdlcihlLnNwYW5bdF0pKXJldHVyblwic3BhbjogaW50ZWdlcltdIGV4cGVjdGVkXCJ9aWYobnVsbCE9ZS5sZWFkaW5nQ29tbWVudHMmJmUuaGFzT3duUHJvcGVydHkoXCJsZWFkaW5nQ29tbWVudHNcIikmJiF1LmlzU3RyaW5nKGUubGVhZGluZ0NvbW1lbnRzKSlyZXR1cm5cImxlYWRpbmdDb21tZW50czogc3RyaW5nIGV4cGVjdGVkXCI7aWYobnVsbCE9ZS50cmFpbGluZ0NvbW1lbnRzJiZlLmhhc093blByb3BlcnR5KFwidHJhaWxpbmdDb21tZW50c1wiKSYmIXUuaXNTdHJpbmcoZS50cmFpbGluZ0NvbW1lbnRzKSlyZXR1cm5cInRyYWlsaW5nQ29tbWVudHM6IHN0cmluZyBleHBlY3RlZFwiO2lmKG51bGwhPWUubGVhZGluZ0RldGFjaGVkQ29tbWVudHMmJmUuaGFzT3duUHJvcGVydHkoXCJsZWFkaW5nRGV0YWNoZWRDb21tZW50c1wiKSl7aWYoIUFycmF5LmlzQXJyYXkoZS5sZWFkaW5nRGV0YWNoZWRDb21tZW50cykpcmV0dXJuXCJsZWFkaW5nRGV0YWNoZWRDb21tZW50czogYXJyYXkgZXhwZWN0ZWRcIjtmb3IodD0wO3Q8ZS5sZWFkaW5nRGV0YWNoZWRDb21tZW50cy5sZW5ndGg7Kyt0KWlmKCF1LmlzU3RyaW5nKGUubGVhZGluZ0RldGFjaGVkQ29tbWVudHNbdF0pKXJldHVyblwibGVhZGluZ0RldGFjaGVkQ29tbWVudHM6IHN0cmluZ1tdIGV4cGVjdGVkXCJ9cmV0dXJuIG51bGx9LEMuZnJvbU9iamVjdD1mdW5jdGlvbihlKXtpZihlIGluc3RhbmNlb2YgYy5nb29nbGUucHJvdG9idWYuU291cmNlQ29kZUluZm8uTG9jYXRpb24pcmV0dXJuIGU7dmFyIHQ9bmV3IGMuZ29vZ2xlLnByb3RvYnVmLlNvdXJjZUNvZGVJbmZvLkxvY2F0aW9uO2lmKGUucGF0aCl7aWYoIUFycmF5LmlzQXJyYXkoZS5wYXRoKSl0aHJvdyBUeXBlRXJyb3IoXCIuZ29vZ2xlLnByb3RvYnVmLlNvdXJjZUNvZGVJbmZvLkxvY2F0aW9uLnBhdGg6IGFycmF5IGV4cGVjdGVkXCIpO3QucGF0aD1bXTtmb3IodmFyIG49MDtuPGUucGF0aC5sZW5ndGg7KytuKXQucGF0aFtuXT0wfGUucGF0aFtuXX1pZihlLnNwYW4pe2lmKCFBcnJheS5pc0FycmF5KGUuc3BhbikpdGhyb3cgVHlwZUVycm9yKFwiLmdvb2dsZS5wcm90b2J1Zi5Tb3VyY2VDb2RlSW5mby5Mb2NhdGlvbi5zcGFuOiBhcnJheSBleHBlY3RlZFwiKTt0LnNwYW49W107Zm9yKG49MDtuPGUuc3Bhbi5sZW5ndGg7KytuKXQuc3BhbltuXT0wfGUuc3BhbltuXX1pZihudWxsIT1lLmxlYWRpbmdDb21tZW50cyYmKHQubGVhZGluZ0NvbW1lbnRzPVN0cmluZyhlLmxlYWRpbmdDb21tZW50cykpLG51bGwhPWUudHJhaWxpbmdDb21tZW50cyYmKHQudHJhaWxpbmdDb21tZW50cz1TdHJpbmcoZS50cmFpbGluZ0NvbW1lbnRzKSksZS5sZWFkaW5nRGV0YWNoZWRDb21tZW50cyl7aWYoIUFycmF5LmlzQXJyYXkoZS5sZWFkaW5nRGV0YWNoZWRDb21tZW50cykpdGhyb3cgVHlwZUVycm9yKFwiLmdvb2dsZS5wcm90b2J1Zi5Tb3VyY2VDb2RlSW5mby5Mb2NhdGlvbi5sZWFkaW5nRGV0YWNoZWRDb21tZW50czogYXJyYXkgZXhwZWN0ZWRcIik7dC5sZWFkaW5nRGV0YWNoZWRDb21tZW50cz1bXTtmb3Iobj0wO248ZS5sZWFkaW5nRGV0YWNoZWRDb21tZW50cy5sZW5ndGg7KytuKXQubGVhZGluZ0RldGFjaGVkQ29tbWVudHNbbl09U3RyaW5nKGUubGVhZGluZ0RldGFjaGVkQ29tbWVudHNbbl0pfXJldHVybiB0fSxDLnRvT2JqZWN0PWZ1bmN0aW9uKGUsdCl7dmFyIG49e307aWYoKCh0PXR8fHt9KS5hcnJheXN8fHQuZGVmYXVsdHMpJiYobi5wYXRoPVtdLG4uc3Bhbj1bXSxuLmxlYWRpbmdEZXRhY2hlZENvbW1lbnRzPVtdKSx0LmRlZmF1bHRzJiYobi5sZWFkaW5nQ29tbWVudHM9XCJcIixuLnRyYWlsaW5nQ29tbWVudHM9XCJcIiksZS5wYXRoJiZlLnBhdGgubGVuZ3RoKXtuLnBhdGg9W107Zm9yKHZhciBvPTA7bzxlLnBhdGgubGVuZ3RoOysrbyluLnBhdGhbb109ZS5wYXRoW29dfWlmKGUuc3BhbiYmZS5zcGFuLmxlbmd0aCl7bi5zcGFuPVtdO2ZvcihvPTA7bzxlLnNwYW4ubGVuZ3RoOysrbyluLnNwYW5bb109ZS5zcGFuW29dfWlmKG51bGwhPWUubGVhZGluZ0NvbW1lbnRzJiZlLmhhc093blByb3BlcnR5KFwibGVhZGluZ0NvbW1lbnRzXCIpJiYobi5sZWFkaW5nQ29tbWVudHM9ZS5sZWFkaW5nQ29tbWVudHMpLG51bGwhPWUudHJhaWxpbmdDb21tZW50cyYmZS5oYXNPd25Qcm9wZXJ0eShcInRyYWlsaW5nQ29tbWVudHNcIikmJihuLnRyYWlsaW5nQ29tbWVudHM9ZS50cmFpbGluZ0NvbW1lbnRzKSxlLmxlYWRpbmdEZXRhY2hlZENvbW1lbnRzJiZlLmxlYWRpbmdEZXRhY2hlZENvbW1lbnRzLmxlbmd0aCl7bi5sZWFkaW5nRGV0YWNoZWRDb21tZW50cz1bXTtmb3Iobz0wO288ZS5sZWFkaW5nRGV0YWNoZWRDb21tZW50cy5sZW5ndGg7KytvKW4ubGVhZGluZ0RldGFjaGVkQ29tbWVudHNbb109ZS5sZWFkaW5nRGV0YWNoZWRDb21tZW50c1tvXX1yZXR1cm4gbn0sQy5wcm90b3R5cGUudG9KU09OPWZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMuY29uc3RydWN0b3IudG9PYmplY3QodGhpcyxvLnV0aWwudG9KU09OT3B0aW9ucyl9LEMpLF8pLG4uR2VuZXJhdGVkQ29kZUluZm89KEoucHJvdG90eXBlLmFubm90YXRpb249dS5lbXB0eUFycmF5LEouY3JlYXRlPWZ1bmN0aW9uKGUpe3JldHVybiBuZXcgSihlKX0sSi5lbmNvZGU9ZnVuY3Rpb24oZSx0KXtpZih0PXR8fHIuY3JlYXRlKCksbnVsbCE9ZS5hbm5vdGF0aW9uJiZlLmFubm90YXRpb24ubGVuZ3RoKWZvcih2YXIgbj0wO248ZS5hbm5vdGF0aW9uLmxlbmd0aDsrK24pYy5nb29nbGUucHJvdG9idWYuR2VuZXJhdGVkQ29kZUluZm8uQW5ub3RhdGlvbi5lbmNvZGUoZS5hbm5vdGF0aW9uW25dLHQudWludDMyKDEwKS5mb3JrKCkpLmxkZWxpbSgpO3JldHVybiB0fSxKLmVuY29kZURlbGltaXRlZD1mdW5jdGlvbihlLHQpe3JldHVybiB0aGlzLmVuY29kZShlLHQpLmxkZWxpbSgpfSxKLmRlY29kZT1mdW5jdGlvbihlLHQpe2UgaW5zdGFuY2VvZiBzfHwoZT1zLmNyZWF0ZShlKSk7Zm9yKHZhciBuPXZvaWQgMD09PXQ/ZS5sZW46ZS5wb3MrdCxvPW5ldyBjLmdvb2dsZS5wcm90b2J1Zi5HZW5lcmF0ZWRDb2RlSW5mbztlLnBvczxuOyl7dmFyIHI9ZS51aW50MzIoKTtyPj4+Mz09MT8oby5hbm5vdGF0aW9uJiZvLmFubm90YXRpb24ubGVuZ3RofHwoby5hbm5vdGF0aW9uPVtdKSxvLmFubm90YXRpb24ucHVzaChjLmdvb2dsZS5wcm90b2J1Zi5HZW5lcmF0ZWRDb2RlSW5mby5Bbm5vdGF0aW9uLmRlY29kZShlLGUudWludDMyKCkpKSk6ZS5za2lwVHlwZSg3JnIpfXJldHVybiBvfSxKLmRlY29kZURlbGltaXRlZD1mdW5jdGlvbihlKXtyZXR1cm4gZSBpbnN0YW5jZW9mIHN8fChlPW5ldyBzKGUpKSx0aGlzLmRlY29kZShlLGUudWludDMyKCkpfSxKLnZlcmlmeT1mdW5jdGlvbihlKXtpZihcIm9iamVjdFwiIT10eXBlb2YgZXx8bnVsbD09PWUpcmV0dXJuXCJvYmplY3QgZXhwZWN0ZWRcIjtpZihudWxsIT1lLmFubm90YXRpb24mJmUuaGFzT3duUHJvcGVydHkoXCJhbm5vdGF0aW9uXCIpKXtpZighQXJyYXkuaXNBcnJheShlLmFubm90YXRpb24pKXJldHVyblwiYW5ub3RhdGlvbjogYXJyYXkgZXhwZWN0ZWRcIjtmb3IodmFyIHQ9MDt0PGUuYW5ub3RhdGlvbi5sZW5ndGg7Kyt0KXt2YXIgbj1jLmdvb2dsZS5wcm90b2J1Zi5HZW5lcmF0ZWRDb2RlSW5mby5Bbm5vdGF0aW9uLnZlcmlmeShlLmFubm90YXRpb25bdF0pO2lmKG4pcmV0dXJuXCJhbm5vdGF0aW9uLlwiK259fXJldHVybiBudWxsfSxKLmZyb21PYmplY3Q9ZnVuY3Rpb24oZSl7aWYoZSBpbnN0YW5jZW9mIGMuZ29vZ2xlLnByb3RvYnVmLkdlbmVyYXRlZENvZGVJbmZvKXJldHVybiBlO3ZhciB0PW5ldyBjLmdvb2dsZS5wcm90b2J1Zi5HZW5lcmF0ZWRDb2RlSW5mbztpZihlLmFubm90YXRpb24pe2lmKCFBcnJheS5pc0FycmF5KGUuYW5ub3RhdGlvbikpdGhyb3cgVHlwZUVycm9yKFwiLmdvb2dsZS5wcm90b2J1Zi5HZW5lcmF0ZWRDb2RlSW5mby5hbm5vdGF0aW9uOiBhcnJheSBleHBlY3RlZFwiKTt0LmFubm90YXRpb249W107Zm9yKHZhciBuPTA7bjxlLmFubm90YXRpb24ubGVuZ3RoOysrbil7aWYoXCJvYmplY3RcIiE9dHlwZW9mIGUuYW5ub3RhdGlvbltuXSl0aHJvdyBUeXBlRXJyb3IoXCIuZ29vZ2xlLnByb3RvYnVmLkdlbmVyYXRlZENvZGVJbmZvLmFubm90YXRpb246IG9iamVjdCBleHBlY3RlZFwiKTt0LmFubm90YXRpb25bbl09Yy5nb29nbGUucHJvdG9idWYuR2VuZXJhdGVkQ29kZUluZm8uQW5ub3RhdGlvbi5mcm9tT2JqZWN0KGUuYW5ub3RhdGlvbltuXSl9fXJldHVybiB0fSxKLnRvT2JqZWN0PWZ1bmN0aW9uKGUsdCl7dmFyIG49e307aWYoKCh0PXR8fHt9KS5hcnJheXN8fHQuZGVmYXVsdHMpJiYobi5hbm5vdGF0aW9uPVtdKSxlLmFubm90YXRpb24mJmUuYW5ub3RhdGlvbi5sZW5ndGgpe24uYW5ub3RhdGlvbj1bXTtmb3IodmFyIG89MDtvPGUuYW5ub3RhdGlvbi5sZW5ndGg7KytvKW4uYW5ub3RhdGlvbltvXT1jLmdvb2dsZS5wcm90b2J1Zi5HZW5lcmF0ZWRDb2RlSW5mby5Bbm5vdGF0aW9uLnRvT2JqZWN0KGUuYW5ub3RhdGlvbltvXSx0KX1yZXR1cm4gbn0sSi5wcm90b3R5cGUudG9KU09OPWZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMuY29uc3RydWN0b3IudG9PYmplY3QodGhpcyxvLnV0aWwudG9KU09OT3B0aW9ucyl9LEouQW5ub3RhdGlvbj0oVi5wcm90b3R5cGUucGF0aD11LmVtcHR5QXJyYXksVi5wcm90b3R5cGUuc291cmNlRmlsZT1cIlwiLFYucHJvdG90eXBlLmJlZ2luPTAsVi5wcm90b3R5cGUuZW5kPTAsVi5jcmVhdGU9ZnVuY3Rpb24oZSl7cmV0dXJuIG5ldyBWKGUpfSxWLmVuY29kZT1mdW5jdGlvbihlLHQpe2lmKHQ9dHx8ci5jcmVhdGUoKSxudWxsIT1lLnBhdGgmJmUucGF0aC5sZW5ndGgpe3QudWludDMyKDEwKS5mb3JrKCk7Zm9yKHZhciBuPTA7bjxlLnBhdGgubGVuZ3RoOysrbil0LmludDMyKGUucGF0aFtuXSk7dC5sZGVsaW0oKX1yZXR1cm4gbnVsbCE9ZS5zb3VyY2VGaWxlJiZPYmplY3QuaGFzT3duUHJvcGVydHkuY2FsbChlLFwic291cmNlRmlsZVwiKSYmdC51aW50MzIoMTgpLnN0cmluZyhlLnNvdXJjZUZpbGUpLG51bGwhPWUuYmVnaW4mJk9iamVjdC5oYXNPd25Qcm9wZXJ0eS5jYWxsKGUsXCJiZWdpblwiKSYmdC51aW50MzIoMjQpLmludDMyKGUuYmVnaW4pLG51bGwhPWUuZW5kJiZPYmplY3QuaGFzT3duUHJvcGVydHkuY2FsbChlLFwiZW5kXCIpJiZ0LnVpbnQzMigzMikuaW50MzIoZS5lbmQpLHR9LFYuZW5jb2RlRGVsaW1pdGVkPWZ1bmN0aW9uKGUsdCl7cmV0dXJuIHRoaXMuZW5jb2RlKGUsdCkubGRlbGltKCl9LFYuZGVjb2RlPWZ1bmN0aW9uKGUsdCl7ZSBpbnN0YW5jZW9mIHN8fChlPXMuY3JlYXRlKGUpKTtmb3IodmFyIG49dm9pZCAwPT09dD9lLmxlbjplLnBvcyt0LG89bmV3IGMuZ29vZ2xlLnByb3RvYnVmLkdlbmVyYXRlZENvZGVJbmZvLkFubm90YXRpb247ZS5wb3M8bjspe3ZhciByPWUudWludDMyKCk7c3dpdGNoKHI+Pj4zKXtjYXNlIDE6aWYoby5wYXRoJiZvLnBhdGgubGVuZ3RofHwoby5wYXRoPVtdKSwyPT0oNyZyKSlmb3IodmFyIGk9ZS51aW50MzIoKStlLnBvcztlLnBvczxpOylvLnBhdGgucHVzaChlLmludDMyKCkpO2Vsc2Ugby5wYXRoLnB1c2goZS5pbnQzMigpKTticmVhaztjYXNlIDI6by5zb3VyY2VGaWxlPWUuc3RyaW5nKCk7YnJlYWs7Y2FzZSAzOm8uYmVnaW49ZS5pbnQzMigpO2JyZWFrO2Nhc2UgNDpvLmVuZD1lLmludDMyKCk7YnJlYWs7ZGVmYXVsdDplLnNraXBUeXBlKDcmcil9fXJldHVybiBvfSxWLmRlY29kZURlbGltaXRlZD1mdW5jdGlvbihlKXtyZXR1cm4gZSBpbnN0YW5jZW9mIHN8fChlPW5ldyBzKGUpKSx0aGlzLmRlY29kZShlLGUudWludDMyKCkpfSxWLnZlcmlmeT1mdW5jdGlvbihlKXtpZihcIm9iamVjdFwiIT10eXBlb2YgZXx8bnVsbD09PWUpcmV0dXJuXCJvYmplY3QgZXhwZWN0ZWRcIjtpZihudWxsIT1lLnBhdGgmJmUuaGFzT3duUHJvcGVydHkoXCJwYXRoXCIpKXtpZighQXJyYXkuaXNBcnJheShlLnBhdGgpKXJldHVyblwicGF0aDogYXJyYXkgZXhwZWN0ZWRcIjtmb3IodmFyIHQ9MDt0PGUucGF0aC5sZW5ndGg7Kyt0KWlmKCF1LmlzSW50ZWdlcihlLnBhdGhbdF0pKXJldHVyblwicGF0aDogaW50ZWdlcltdIGV4cGVjdGVkXCJ9cmV0dXJuIG51bGwhPWUuc291cmNlRmlsZSYmZS5oYXNPd25Qcm9wZXJ0eShcInNvdXJjZUZpbGVcIikmJiF1LmlzU3RyaW5nKGUuc291cmNlRmlsZSk/XCJzb3VyY2VGaWxlOiBzdHJpbmcgZXhwZWN0ZWRcIjpudWxsIT1lLmJlZ2luJiZlLmhhc093blByb3BlcnR5KFwiYmVnaW5cIikmJiF1LmlzSW50ZWdlcihlLmJlZ2luKT9cImJlZ2luOiBpbnRlZ2VyIGV4cGVjdGVkXCI6bnVsbCE9ZS5lbmQmJmUuaGFzT3duUHJvcGVydHkoXCJlbmRcIikmJiF1LmlzSW50ZWdlcihlLmVuZCk/XCJlbmQ6IGludGVnZXIgZXhwZWN0ZWRcIjpudWxsfSxWLmZyb21PYmplY3Q9ZnVuY3Rpb24oZSl7aWYoZSBpbnN0YW5jZW9mIGMuZ29vZ2xlLnByb3RvYnVmLkdlbmVyYXRlZENvZGVJbmZvLkFubm90YXRpb24pcmV0dXJuIGU7dmFyIHQ9bmV3IGMuZ29vZ2xlLnByb3RvYnVmLkdlbmVyYXRlZENvZGVJbmZvLkFubm90YXRpb247aWYoZS5wYXRoKXtpZighQXJyYXkuaXNBcnJheShlLnBhdGgpKXRocm93IFR5cGVFcnJvcihcIi5nb29nbGUucHJvdG9idWYuR2VuZXJhdGVkQ29kZUluZm8uQW5ub3RhdGlvbi5wYXRoOiBhcnJheSBleHBlY3RlZFwiKTt0LnBhdGg9W107Zm9yKHZhciBuPTA7bjxlLnBhdGgubGVuZ3RoOysrbil0LnBhdGhbbl09MHxlLnBhdGhbbl19cmV0dXJuIG51bGwhPWUuc291cmNlRmlsZSYmKHQuc291cmNlRmlsZT1TdHJpbmcoZS5zb3VyY2VGaWxlKSksbnVsbCE9ZS5iZWdpbiYmKHQuYmVnaW49MHxlLmJlZ2luKSxudWxsIT1lLmVuZCYmKHQuZW5kPTB8ZS5lbmQpLHR9LFYudG9PYmplY3Q9ZnVuY3Rpb24oZSx0KXt2YXIgbj17fTtpZigoKHQ9dHx8e30pLmFycmF5c3x8dC5kZWZhdWx0cykmJihuLnBhdGg9W10pLHQuZGVmYXVsdHMmJihuLnNvdXJjZUZpbGU9XCJcIixuLmJlZ2luPTAsbi5lbmQ9MCksZS5wYXRoJiZlLnBhdGgubGVuZ3RoKXtuLnBhdGg9W107Zm9yKHZhciBvPTA7bzxlLnBhdGgubGVuZ3RoOysrbyluLnBhdGhbb109ZS5wYXRoW29dfXJldHVybiBudWxsIT1lLnNvdXJjZUZpbGUmJmUuaGFzT3duUHJvcGVydHkoXCJzb3VyY2VGaWxlXCIpJiYobi5zb3VyY2VGaWxlPWUuc291cmNlRmlsZSksbnVsbCE9ZS5iZWdpbiYmZS5oYXNPd25Qcm9wZXJ0eShcImJlZ2luXCIpJiYobi5iZWdpbj1lLmJlZ2luKSxudWxsIT1lLmVuZCYmZS5oYXNPd25Qcm9wZXJ0eShcImVuZFwiKSYmKG4uZW5kPWUuZW5kKSxufSxWLnByb3RvdHlwZS50b0pTT049ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5jb25zdHJ1Y3Rvci50b09iamVjdCh0aGlzLG8udXRpbC50b0pTT05PcHRpb25zKX0sViksSiksbi5Bbnk9KEgucHJvdG90eXBlLnR5cGVfdXJsPVwiXCIsSC5wcm90b3R5cGUudmFsdWU9dS5uZXdCdWZmZXIoW10pLEguY3JlYXRlPWZ1bmN0aW9uKGUpe3JldHVybiBuZXcgSChlKX0sSC5lbmNvZGU9ZnVuY3Rpb24oZSx0KXtyZXR1cm4gdD10fHxyLmNyZWF0ZSgpLG51bGwhPWUudHlwZV91cmwmJk9iamVjdC5oYXNPd25Qcm9wZXJ0eS5jYWxsKGUsXCJ0eXBlX3VybFwiKSYmdC51aW50MzIoMTApLnN0cmluZyhlLnR5cGVfdXJsKSxudWxsIT1lLnZhbHVlJiZPYmplY3QuaGFzT3duUHJvcGVydHkuY2FsbChlLFwidmFsdWVcIikmJnQudWludDMyKDE4KS5ieXRlcyhlLnZhbHVlKSx0fSxILmVuY29kZURlbGltaXRlZD1mdW5jdGlvbihlLHQpe3JldHVybiB0aGlzLmVuY29kZShlLHQpLmxkZWxpbSgpfSxILmRlY29kZT1mdW5jdGlvbihlLHQpe2UgaW5zdGFuY2VvZiBzfHwoZT1zLmNyZWF0ZShlKSk7Zm9yKHZhciBuPXZvaWQgMD09PXQ/ZS5sZW46ZS5wb3MrdCxvPW5ldyBjLmdvb2dsZS5wcm90b2J1Zi5Bbnk7ZS5wb3M8bjspe3ZhciByPWUudWludDMyKCk7c3dpdGNoKHI+Pj4zKXtjYXNlIDE6by50eXBlX3VybD1lLnN0cmluZygpO2JyZWFrO2Nhc2UgMjpvLnZhbHVlPWUuYnl0ZXMoKTticmVhaztkZWZhdWx0OmUuc2tpcFR5cGUoNyZyKX19cmV0dXJuIG99LEguZGVjb2RlRGVsaW1pdGVkPWZ1bmN0aW9uKGUpe3JldHVybiBlIGluc3RhbmNlb2Ygc3x8KGU9bmV3IHMoZSkpLHRoaXMuZGVjb2RlKGUsZS51aW50MzIoKSl9LEgudmVyaWZ5PWZ1bmN0aW9uKGUpe3JldHVyblwib2JqZWN0XCIhPXR5cGVvZiBlfHxudWxsPT09ZT9cIm9iamVjdCBleHBlY3RlZFwiOm51bGwhPWUudHlwZV91cmwmJmUuaGFzT3duUHJvcGVydHkoXCJ0eXBlX3VybFwiKSYmIXUuaXNTdHJpbmcoZS50eXBlX3VybCk/XCJ0eXBlX3VybDogc3RyaW5nIGV4cGVjdGVkXCI6bnVsbCE9ZS52YWx1ZSYmZS5oYXNPd25Qcm9wZXJ0eShcInZhbHVlXCIpJiYhKGUudmFsdWUmJlwibnVtYmVyXCI9PXR5cGVvZiBlLnZhbHVlLmxlbmd0aHx8dS5pc1N0cmluZyhlLnZhbHVlKSk/XCJ2YWx1ZTogYnVmZmVyIGV4cGVjdGVkXCI6bnVsbH0sSC5mcm9tT2JqZWN0PWZ1bmN0aW9uKGUpe3ZhciB0O3JldHVybiBlIGluc3RhbmNlb2YgYy5nb29nbGUucHJvdG9idWYuQW55P2U6KHQ9bmV3IGMuZ29vZ2xlLnByb3RvYnVmLkFueSxudWxsIT1lLnR5cGVfdXJsJiYodC50eXBlX3VybD1TdHJpbmcoZS50eXBlX3VybCkpLG51bGwhPWUudmFsdWUmJihcInN0cmluZ1wiPT10eXBlb2YgZS52YWx1ZT91LmJhc2U2NC5kZWNvZGUoZS52YWx1ZSx0LnZhbHVlPXUubmV3QnVmZmVyKHUuYmFzZTY0Lmxlbmd0aChlLnZhbHVlKSksMCk6ZS52YWx1ZS5sZW5ndGgmJih0LnZhbHVlPWUudmFsdWUpKSx0KX0sSC50b09iamVjdD1mdW5jdGlvbihlLHQpe3ZhciBuPXt9O3JldHVybih0PXR8fHt9KS5kZWZhdWx0cyYmKG4udHlwZV91cmw9XCJcIix0LmJ5dGVzPT09U3RyaW5nP24udmFsdWU9XCJcIjoobi52YWx1ZT1bXSx0LmJ5dGVzIT09QXJyYXkmJihuLnZhbHVlPXUubmV3QnVmZmVyKG4udmFsdWUpKSkpLG51bGwhPWUudHlwZV91cmwmJmUuaGFzT3duUHJvcGVydHkoXCJ0eXBlX3VybFwiKSYmKG4udHlwZV91cmw9ZS50eXBlX3VybCksbnVsbCE9ZS52YWx1ZSYmZS5oYXNPd25Qcm9wZXJ0eShcInZhbHVlXCIpJiYobi52YWx1ZT10LmJ5dGVzPT09U3RyaW5nP3UuYmFzZTY0LmVuY29kZShlLnZhbHVlLDAsZS52YWx1ZS5sZW5ndGgpOnQuYnl0ZXM9PT1BcnJheT9BcnJheS5wcm90b3R5cGUuc2xpY2UuY2FsbChlLnZhbHVlKTplLnZhbHVlKSxufSxILnByb3RvdHlwZS50b0pTT049ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5jb25zdHJ1Y3Rvci50b09iamVjdCh0aGlzLG8udXRpbC50b0pTT05PcHRpb25zKX0sSCksbiksRiksY30pOyJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/google-gax/build/protos/locations.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/google-gax/build/protos/locations.json":
/*!*************************************************************!*\
  !*** ./node_modules/google-gax/build/protos/locations.json ***!
  \*************************************************************/
/***/ ((module) => {

"use strict";
module.exports = /*#__PURE__*/JSON.parse('{"nested":{"google":{"nested":{"cloud":{"nested":{"location":{"options":{"cc_enable_arenas":true,"go_package":"google.golang.org/genproto/googleapis/cloud/location;location","java_multiple_files":true,"java_outer_classname":"LocationsProto","java_package":"com.google.cloud.location"},"nested":{"Locations":{"options":{"(google.api.default_host)":"cloud.googleapis.com","(google.api.oauth_scopes)":"https://www.googleapis.com/auth/cloud-platform"},"methods":{"ListLocations":{"requestType":"ListLocationsRequest","responseType":"ListLocationsResponse","options":{"(google.api.http).get":"/v1/{name=locations}","(google.api.http).additional_bindings.get":"/v1/{name=projects/*}/locations"},"parsedOptions":[{"(google.api.http)":{"get":"/v1/{name=locations}","additional_bindings":{"get":"/v1/{name=projects/*}/locations"}}}]},"GetLocation":{"requestType":"GetLocationRequest","responseType":"Location","options":{"(google.api.http).get":"/v1/{name=locations/*}","(google.api.http).additional_bindings.get":"/v1/{name=projects/*/locations/*}"},"parsedOptions":[{"(google.api.http)":{"get":"/v1/{name=locations/*}","additional_bindings":{"get":"/v1/{name=projects/*/locations/*}"}}}]}}},"ListLocationsRequest":{"fields":{"name":{"type":"string","id":1},"filter":{"type":"string","id":2},"pageSize":{"type":"int32","id":3},"pageToken":{"type":"string","id":4}}},"ListLocationsResponse":{"fields":{"locations":{"rule":"repeated","type":"Location","id":1},"nextPageToken":{"type":"string","id":2}}},"GetLocationRequest":{"fields":{"name":{"type":"string","id":1}}},"Location":{"fields":{"name":{"type":"string","id":1},"locationId":{"type":"string","id":4},"displayName":{"type":"string","id":5},"labels":{"keyType":"string","type":"string","id":2},"metadata":{"type":"google.protobuf.Any","id":3}}}}}}},"api":{"options":{"go_package":"google.golang.org/genproto/googleapis/api/annotations;annotations","java_multiple_files":true,"java_outer_classname":"ClientProto","java_package":"com.google.api","objc_class_prefix":"GAPI","cc_enable_arenas":true},"nested":{"http":{"type":"HttpRule","id":72295728,"extend":"google.protobuf.MethodOptions"},"Http":{"fields":{"rules":{"rule":"repeated","type":"HttpRule","id":1},"fullyDecodeReservedExpansion":{"type":"bool","id":2}}},"HttpRule":{"oneofs":{"pattern":{"oneof":["get","put","post","delete","patch","custom"]}},"fields":{"selector":{"type":"string","id":1},"get":{"type":"string","id":2},"put":{"type":"string","id":3},"post":{"type":"string","id":4},"delete":{"type":"string","id":5},"patch":{"type":"string","id":6},"custom":{"type":"CustomHttpPattern","id":8},"body":{"type":"string","id":7},"responseBody":{"type":"string","id":12},"additionalBindings":{"rule":"repeated","type":"HttpRule","id":11}}},"CustomHttpPattern":{"fields":{"kind":{"type":"string","id":1},"path":{"type":"string","id":2}}},"methodSignature":{"rule":"repeated","type":"string","id":1051,"extend":"google.protobuf.MethodOptions"},"defaultHost":{"type":"string","id":1049,"extend":"google.protobuf.ServiceOptions"},"oauthScopes":{"type":"string","id":1050,"extend":"google.protobuf.ServiceOptions"}}},"protobuf":{"options":{"go_package":"google.golang.org/protobuf/types/descriptorpb","java_package":"com.google.protobuf","java_outer_classname":"DescriptorProtos","csharp_namespace":"Google.Protobuf.Reflection","objc_class_prefix":"GPB","cc_enable_arenas":true,"optimize_for":"SPEED"},"nested":{"FileDescriptorSet":{"fields":{"file":{"rule":"repeated","type":"FileDescriptorProto","id":1}}},"FileDescriptorProto":{"fields":{"name":{"type":"string","id":1},"package":{"type":"string","id":2},"dependency":{"rule":"repeated","type":"string","id":3},"publicDependency":{"rule":"repeated","type":"int32","id":10,"options":{"packed":false}},"weakDependency":{"rule":"repeated","type":"int32","id":11,"options":{"packed":false}},"messageType":{"rule":"repeated","type":"DescriptorProto","id":4},"enumType":{"rule":"repeated","type":"EnumDescriptorProto","id":5},"service":{"rule":"repeated","type":"ServiceDescriptorProto","id":6},"extension":{"rule":"repeated","type":"FieldDescriptorProto","id":7},"options":{"type":"FileOptions","id":8},"sourceCodeInfo":{"type":"SourceCodeInfo","id":9},"syntax":{"type":"string","id":12}}},"DescriptorProto":{"fields":{"name":{"type":"string","id":1},"field":{"rule":"repeated","type":"FieldDescriptorProto","id":2},"extension":{"rule":"repeated","type":"FieldDescriptorProto","id":6},"nestedType":{"rule":"repeated","type":"DescriptorProto","id":3},"enumType":{"rule":"repeated","type":"EnumDescriptorProto","id":4},"extensionRange":{"rule":"repeated","type":"ExtensionRange","id":5},"oneofDecl":{"rule":"repeated","type":"OneofDescriptorProto","id":8},"options":{"type":"MessageOptions","id":7},"reservedRange":{"rule":"repeated","type":"ReservedRange","id":9},"reservedName":{"rule":"repeated","type":"string","id":10}},"nested":{"ExtensionRange":{"fields":{"start":{"type":"int32","id":1},"end":{"type":"int32","id":2},"options":{"type":"ExtensionRangeOptions","id":3}}},"ReservedRange":{"fields":{"start":{"type":"int32","id":1},"end":{"type":"int32","id":2}}}}},"ExtensionRangeOptions":{"fields":{"uninterpretedOption":{"rule":"repeated","type":"UninterpretedOption","id":999}},"extensions":[[1000,536870911]]},"FieldDescriptorProto":{"fields":{"name":{"type":"string","id":1},"number":{"type":"int32","id":3},"label":{"type":"Label","id":4},"type":{"type":"Type","id":5},"typeName":{"type":"string","id":6},"extendee":{"type":"string","id":2},"defaultValue":{"type":"string","id":7},"oneofIndex":{"type":"int32","id":9},"jsonName":{"type":"string","id":10},"options":{"type":"FieldOptions","id":8},"proto3Optional":{"type":"bool","id":17}},"nested":{"Type":{"values":{"TYPE_DOUBLE":1,"TYPE_FLOAT":2,"TYPE_INT64":3,"TYPE_UINT64":4,"TYPE_INT32":5,"TYPE_FIXED64":6,"TYPE_FIXED32":7,"TYPE_BOOL":8,"TYPE_STRING":9,"TYPE_GROUP":10,"TYPE_MESSAGE":11,"TYPE_BYTES":12,"TYPE_UINT32":13,"TYPE_ENUM":14,"TYPE_SFIXED32":15,"TYPE_SFIXED64":16,"TYPE_SINT32":17,"TYPE_SINT64":18}},"Label":{"values":{"LABEL_OPTIONAL":1,"LABEL_REQUIRED":2,"LABEL_REPEATED":3}}}},"OneofDescriptorProto":{"fields":{"name":{"type":"string","id":1},"options":{"type":"OneofOptions","id":2}}},"EnumDescriptorProto":{"fields":{"name":{"type":"string","id":1},"value":{"rule":"repeated","type":"EnumValueDescriptorProto","id":2},"options":{"type":"EnumOptions","id":3},"reservedRange":{"rule":"repeated","type":"EnumReservedRange","id":4},"reservedName":{"rule":"repeated","type":"string","id":5}},"nested":{"EnumReservedRange":{"fields":{"start":{"type":"int32","id":1},"end":{"type":"int32","id":2}}}}},"EnumValueDescriptorProto":{"fields":{"name":{"type":"string","id":1},"number":{"type":"int32","id":2},"options":{"type":"EnumValueOptions","id":3}}},"ServiceDescriptorProto":{"fields":{"name":{"type":"string","id":1},"method":{"rule":"repeated","type":"MethodDescriptorProto","id":2},"options":{"type":"ServiceOptions","id":3}}},"MethodDescriptorProto":{"fields":{"name":{"type":"string","id":1},"inputType":{"type":"string","id":2},"outputType":{"type":"string","id":3},"options":{"type":"MethodOptions","id":4},"clientStreaming":{"type":"bool","id":5,"options":{"default":false}},"serverStreaming":{"type":"bool","id":6,"options":{"default":false}}}},"FileOptions":{"fields":{"javaPackage":{"type":"string","id":1},"javaOuterClassname":{"type":"string","id":8},"javaMultipleFiles":{"type":"bool","id":10,"options":{"default":false}},"javaGenerateEqualsAndHash":{"type":"bool","id":20,"options":{"deprecated":true}},"javaStringCheckUtf8":{"type":"bool","id":27,"options":{"default":false}},"optimizeFor":{"type":"OptimizeMode","id":9,"options":{"default":"SPEED"}},"goPackage":{"type":"string","id":11},"ccGenericServices":{"type":"bool","id":16,"options":{"default":false}},"javaGenericServices":{"type":"bool","id":17,"options":{"default":false}},"pyGenericServices":{"type":"bool","id":18,"options":{"default":false}},"phpGenericServices":{"type":"bool","id":42,"options":{"default":false}},"deprecated":{"type":"bool","id":23,"options":{"default":false}},"ccEnableArenas":{"type":"bool","id":31,"options":{"default":true}},"objcClassPrefix":{"type":"string","id":36},"csharpNamespace":{"type":"string","id":37},"swiftPrefix":{"type":"string","id":39},"phpClassPrefix":{"type":"string","id":40},"phpNamespace":{"type":"string","id":41},"phpMetadataNamespace":{"type":"string","id":44},"rubyPackage":{"type":"string","id":45},"uninterpretedOption":{"rule":"repeated","type":"UninterpretedOption","id":999}},"extensions":[[1000,536870911]],"reserved":[[38,38]],"nested":{"OptimizeMode":{"values":{"SPEED":1,"CODE_SIZE":2,"LITE_RUNTIME":3}}}},"MessageOptions":{"fields":{"messageSetWireFormat":{"type":"bool","id":1,"options":{"default":false}},"noStandardDescriptorAccessor":{"type":"bool","id":2,"options":{"default":false}},"deprecated":{"type":"bool","id":3,"options":{"default":false}},"mapEntry":{"type":"bool","id":7},"uninterpretedOption":{"rule":"repeated","type":"UninterpretedOption","id":999}},"extensions":[[1000,536870911]],"reserved":[[8,8],[9,9]]},"FieldOptions":{"fields":{"ctype":{"type":"CType","id":1,"options":{"default":"STRING"}},"packed":{"type":"bool","id":2},"jstype":{"type":"JSType","id":6,"options":{"default":"JS_NORMAL"}},"lazy":{"type":"bool","id":5,"options":{"default":false}},"deprecated":{"type":"bool","id":3,"options":{"default":false}},"weak":{"type":"bool","id":10,"options":{"default":false}},"uninterpretedOption":{"rule":"repeated","type":"UninterpretedOption","id":999}},"extensions":[[1000,536870911]],"reserved":[[4,4]],"nested":{"CType":{"values":{"STRING":0,"CORD":1,"STRING_PIECE":2}},"JSType":{"values":{"JS_NORMAL":0,"JS_STRING":1,"JS_NUMBER":2}}}},"OneofOptions":{"fields":{"uninterpretedOption":{"rule":"repeated","type":"UninterpretedOption","id":999}},"extensions":[[1000,536870911]]},"EnumOptions":{"fields":{"allowAlias":{"type":"bool","id":2},"deprecated":{"type":"bool","id":3,"options":{"default":false}},"uninterpretedOption":{"rule":"repeated","type":"UninterpretedOption","id":999}},"extensions":[[1000,536870911]],"reserved":[[5,5]]},"EnumValueOptions":{"fields":{"deprecated":{"type":"bool","id":1,"options":{"default":false}},"uninterpretedOption":{"rule":"repeated","type":"UninterpretedOption","id":999}},"extensions":[[1000,536870911]]},"ServiceOptions":{"fields":{"deprecated":{"type":"bool","id":33,"options":{"default":false}},"uninterpretedOption":{"rule":"repeated","type":"UninterpretedOption","id":999}},"extensions":[[1000,536870911]]},"MethodOptions":{"fields":{"deprecated":{"type":"bool","id":33,"options":{"default":false}},"idempotencyLevel":{"type":"IdempotencyLevel","id":34,"options":{"default":"IDEMPOTENCY_UNKNOWN"}},"uninterpretedOption":{"rule":"repeated","type":"UninterpretedOption","id":999}},"extensions":[[1000,536870911]],"nested":{"IdempotencyLevel":{"values":{"IDEMPOTENCY_UNKNOWN":0,"NO_SIDE_EFFECTS":1,"IDEMPOTENT":2}}}},"UninterpretedOption":{"fields":{"name":{"rule":"repeated","type":"NamePart","id":2},"identifierValue":{"type":"string","id":3},"positiveIntValue":{"type":"uint64","id":4},"negativeIntValue":{"type":"int64","id":5},"doubleValue":{"type":"double","id":6},"stringValue":{"type":"bytes","id":7},"aggregateValue":{"type":"string","id":8}},"nested":{"NamePart":{"fields":{"namePart":{"rule":"required","type":"string","id":1},"isExtension":{"rule":"required","type":"bool","id":2}}}}},"SourceCodeInfo":{"fields":{"location":{"rule":"repeated","type":"Location","id":1}},"nested":{"Location":{"fields":{"path":{"rule":"repeated","type":"int32","id":1},"span":{"rule":"repeated","type":"int32","id":2},"leadingComments":{"type":"string","id":3},"trailingComments":{"type":"string","id":4},"leadingDetachedComments":{"rule":"repeated","type":"string","id":6}}}}},"GeneratedCodeInfo":{"fields":{"annotation":{"rule":"repeated","type":"Annotation","id":1}},"nested":{"Annotation":{"fields":{"path":{"rule":"repeated","type":"int32","id":1},"sourceFile":{"type":"string","id":2},"begin":{"type":"int32","id":3},"end":{"type":"int32","id":4}}}}},"Any":{"fields":{"type_url":{"type":"string","id":1},"value":{"type":"bytes","id":2}}}}}}}}}');

/***/ }),

/***/ "(rsc)/./node_modules/google-gax/build/protos/operations.js":
/*!************************************************************!*\
  !*** ./node_modules/google-gax/build/protos/operations.js ***!
  \************************************************************/
/***/ ((module, exports, __webpack_require__) => {

eval("var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;(e=>{ true?!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(/*! protobufjs/minimal */ \"(rsc)/./node_modules/protobufjs/minimal.js\")], __WEBPACK_AMD_DEFINE_FACTORY__ = (e),\n\t\t__WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ?\n\t\t(__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__),\n\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__)):0})(function(o){var e,t,n,F,a=o.Reader,r=o.Writer,i=o.util,p=o.roots.operations_protos||(o.roots.operations_protos={});function G(e,t,n){o.rpc.Service.call(this,e,t,n)}function l(e){if(e)for(var t=Object.keys(e),n=0;n<t.length;++n)null!=e[t[n]]&&(this[t[n]]=e[t[n]])}function B(e){if(e)for(var t=Object.keys(e),n=0;n<t.length;++n)null!=e[t[n]]&&(this[t[n]]=e[t[n]])}function s(e){if(e)for(var t=Object.keys(e),n=0;n<t.length;++n)null!=e[t[n]]&&(this[t[n]]=e[t[n]])}function u(e){if(this.operations=[],e)for(var t=Object.keys(e),n=0;n<t.length;++n)null!=e[t[n]]&&(this[t[n]]=e[t[n]])}function L(e){if(e)for(var t=Object.keys(e),n=0;n<t.length;++n)null!=e[t[n]]&&(this[t[n]]=e[t[n]])}function U(e){if(e)for(var t=Object.keys(e),n=0;n<t.length;++n)null!=e[t[n]]&&(this[t[n]]=e[t[n]])}function c(e){if(e)for(var t=Object.keys(e),n=0;n<t.length;++n)null!=e[t[n]]&&(this[t[n]]=e[t[n]])}function d(e){if(e)for(var t=Object.keys(e),n=0;n<t.length;++n)null!=e[t[n]]&&(this[t[n]]=e[t[n]])}function g(e){if(this.rules=[],e)for(var t=Object.keys(e),n=0;n<t.length;++n)null!=e[t[n]]&&(this[t[n]]=e[t[n]])}function f(e){if(this.additionalBindings=[],e)for(var t=Object.keys(e),n=0;n<t.length;++n)null!=e[t[n]]&&(this[t[n]]=e[t[n]])}function y(e){if(e)for(var t=Object.keys(e),n=0;n<t.length;++n)null!=e[t[n]]&&(this[t[n]]=e[t[n]])}function J(e){if(this.file=[],e)for(var t=Object.keys(e),n=0;n<t.length;++n)null!=e[t[n]]&&(this[t[n]]=e[t[n]])}function h(e){if(this.dependency=[],this.publicDependency=[],this.weakDependency=[],this.messageType=[],this.enumType=[],this.service=[],this.extension=[],e)for(var t=Object.keys(e),n=0;n<t.length;++n)null!=e[t[n]]&&(this[t[n]]=e[t[n]])}function O(e){if(this.field=[],this.extension=[],this.nestedType=[],this.enumType=[],this.extensionRange=[],this.oneofDecl=[],this.reservedRange=[],this.reservedName=[],e)for(var t=Object.keys(e),n=0;n<t.length;++n)null!=e[t[n]]&&(this[t[n]]=e[t[n]])}function b(e){if(e)for(var t=Object.keys(e),n=0;n<t.length;++n)null!=e[t[n]]&&(this[t[n]]=e[t[n]])}function m(e){if(e)for(var t=Object.keys(e),n=0;n<t.length;++n)null!=e[t[n]]&&(this[t[n]]=e[t[n]])}function M(e){if(this.uninterpretedOption=[],e)for(var t=Object.keys(e),n=0;n<t.length;++n)null!=e[t[n]]&&(this[t[n]]=e[t[n]])}function v(e){if(e)for(var t=Object.keys(e),n=0;n<t.length;++n)null!=e[t[n]]&&(this[t[n]]=e[t[n]])}function w(e){if(e)for(var t=Object.keys(e),n=0;n<t.length;++n)null!=e[t[n]]&&(this[t[n]]=e[t[n]])}function P(e){if(this.value=[],this.reservedRange=[],this.reservedName=[],e)for(var t=Object.keys(e),n=0;n<t.length;++n)null!=e[t[n]]&&(this[t[n]]=e[t[n]])}function _(e){if(e)for(var t=Object.keys(e),n=0;n<t.length;++n)null!=e[t[n]]&&(this[t[n]]=e[t[n]])}function j(e){if(e)for(var t=Object.keys(e),n=0;n<t.length;++n)null!=e[t[n]]&&(this[t[n]]=e[t[n]])}function S(e){if(this.method=[],e)for(var t=Object.keys(e),n=0;n<t.length;++n)null!=e[t[n]]&&(this[t[n]]=e[t[n]])}function x(e){if(e)for(var t=Object.keys(e),n=0;n<t.length;++n)null!=e[t[n]]&&(this[t[n]]=e[t[n]])}function k(e){if(this.uninterpretedOption=[],e)for(var t=Object.keys(e),n=0;n<t.length;++n)null!=e[t[n]]&&(this[t[n]]=e[t[n]])}function D(e){if(this.uninterpretedOption=[],e)for(var t=Object.keys(e),n=0;n<t.length;++n)null!=e[t[n]]&&(this[t[n]]=e[t[n]])}function T(e){if(this.uninterpretedOption=[],e)for(var t=Object.keys(e),n=0;n<t.length;++n)null!=e[t[n]]&&(this[t[n]]=e[t[n]])}function H(e){if(this.uninterpretedOption=[],e)for(var t=Object.keys(e),n=0;n<t.length;++n)null!=e[t[n]]&&(this[t[n]]=e[t[n]])}function E(e){if(this.uninterpretedOption=[],e)for(var t=Object.keys(e),n=0;n<t.length;++n)null!=e[t[n]]&&(this[t[n]]=e[t[n]])}function z(e){if(this.uninterpretedOption=[],e)for(var t=Object.keys(e),n=0;n<t.length;++n)null!=e[t[n]]&&(this[t[n]]=e[t[n]])}function A(e){if(this.uninterpretedOption=[],e)for(var t=Object.keys(e),n=0;n<t.length;++n)null!=e[t[n]]&&(this[t[n]]=e[t[n]])}function N(e){if(this.uninterpretedOption=[],this[\".google.api.methodSignature\"]=[],e)for(var t=Object.keys(e),n=0;n<t.length;++n)null!=e[t[n]]&&(this[t[n]]=e[t[n]])}function I(e){if(this.name=[],e)for(var t=Object.keys(e),n=0;n<t.length;++n)null!=e[t[n]]&&(this[t[n]]=e[t[n]])}function q(e){if(e)for(var t=Object.keys(e),n=0;n<t.length;++n)null!=e[t[n]]&&(this[t[n]]=e[t[n]])}function Y(e){if(this.location=[],e)for(var t=Object.keys(e),n=0;n<t.length;++n)null!=e[t[n]]&&(this[t[n]]=e[t[n]])}function R(e){if(this.path=[],this.span=[],this.leadingDetachedComments=[],e)for(var t=Object.keys(e),n=0;n<t.length;++n)null!=e[t[n]]&&(this[t[n]]=e[t[n]])}function W(e){if(this.annotation=[],e)for(var t=Object.keys(e),n=0;n<t.length;++n)null!=e[t[n]]&&(this[t[n]]=e[t[n]])}function C(e){if(this.path=[],e)for(var t=Object.keys(e),n=0;n<t.length;++n)null!=e[t[n]]&&(this[t[n]]=e[t[n]])}function X(e){if(e)for(var t=Object.keys(e),n=0;n<t.length;++n)null!=e[t[n]]&&(this[t[n]]=e[t[n]])}function K(e){if(e)for(var t=Object.keys(e),n=0;n<t.length;++n)null!=e[t[n]]&&(this[t[n]]=e[t[n]])}function Q(e){if(e)for(var t=Object.keys(e),n=0;n<t.length;++n)null!=e[t[n]]&&(this[t[n]]=e[t[n]])}function V(e){if(this.details=[],e)for(var t=Object.keys(e),n=0;n<t.length;++n)null!=e[t[n]]&&(this[t[n]]=e[t[n]])}return p.google=((F={}).longrunning=((t={}).Operations=(((G.prototype=Object.create(o.rpc.Service.prototype)).constructor=G).create=function(e,t,n){return new this(e,t,n)},Object.defineProperty(G.prototype.listOperations=function e(t,n){return this.rpcCall(e,p.google.longrunning.ListOperationsRequest,p.google.longrunning.ListOperationsResponse,t,n)},\"name\",{value:\"ListOperations\"}),Object.defineProperty(G.prototype.getOperation=function e(t,n){return this.rpcCall(e,p.google.longrunning.GetOperationRequest,p.google.longrunning.Operation,t,n)},\"name\",{value:\"GetOperation\"}),Object.defineProperty(G.prototype.deleteOperation=function e(t,n){return this.rpcCall(e,p.google.longrunning.DeleteOperationRequest,p.google.protobuf.Empty,t,n)},\"name\",{value:\"DeleteOperation\"}),Object.defineProperty(G.prototype.cancelOperation=function e(t,n){return this.rpcCall(e,p.google.longrunning.CancelOperationRequest,p.google.protobuf.Empty,t,n)},\"name\",{value:\"CancelOperation\"}),Object.defineProperty(G.prototype.waitOperation=function e(t,n){return this.rpcCall(e,p.google.longrunning.WaitOperationRequest,p.google.longrunning.Operation,t,n)},\"name\",{value:\"WaitOperation\"}),G),t.Operation=(l.prototype.name=\"\",l.prototype.metadata=null,l.prototype.done=!1,l.prototype.error=null,l.prototype.response=null,Object.defineProperty(l.prototype,\"result\",{get:i.oneOfGetter(n=[\"error\",\"response\"]),set:i.oneOfSetter(n)}),l.create=function(e){return new l(e)},l.encode=function(e,t){return t=t||r.create(),null!=e.name&&Object.hasOwnProperty.call(e,\"name\")&&t.uint32(10).string(e.name),null!=e.metadata&&Object.hasOwnProperty.call(e,\"metadata\")&&p.google.protobuf.Any.encode(e.metadata,t.uint32(18).fork()).ldelim(),null!=e.done&&Object.hasOwnProperty.call(e,\"done\")&&t.uint32(24).bool(e.done),null!=e.error&&Object.hasOwnProperty.call(e,\"error\")&&p.google.rpc.Status.encode(e.error,t.uint32(34).fork()).ldelim(),null!=e.response&&Object.hasOwnProperty.call(e,\"response\")&&p.google.protobuf.Any.encode(e.response,t.uint32(42).fork()).ldelim(),t},l.encodeDelimited=function(e,t){return this.encode(e,t).ldelim()},l.decode=function(e,t){e instanceof a||(e=a.create(e));for(var n=void 0===t?e.len:e.pos+t,o=new p.google.longrunning.Operation;e.pos<n;){var r=e.uint32();switch(r>>>3){case 1:o.name=e.string();break;case 2:o.metadata=p.google.protobuf.Any.decode(e,e.uint32());break;case 3:o.done=e.bool();break;case 4:o.error=p.google.rpc.Status.decode(e,e.uint32());break;case 5:o.response=p.google.protobuf.Any.decode(e,e.uint32());break;default:e.skipType(7&r)}}return o},l.decodeDelimited=function(e){return e instanceof a||(e=new a(e)),this.decode(e,e.uint32())},l.verify=function(e){if(\"object\"!=typeof e||null===e)return\"object expected\";var t,n={};if(null!=e.name&&e.hasOwnProperty(\"name\")&&!i.isString(e.name))return\"name: string expected\";if(null!=e.metadata&&e.hasOwnProperty(\"metadata\")&&(t=p.google.protobuf.Any.verify(e.metadata)))return\"metadata.\"+t;if(null!=e.done&&e.hasOwnProperty(\"done\")&&\"boolean\"!=typeof e.done)return\"done: boolean expected\";if(null!=e.error&&e.hasOwnProperty(\"error\")&&(n.result=1,t=p.google.rpc.Status.verify(e.error)))return\"error.\"+t;if(null!=e.response&&e.hasOwnProperty(\"response\")){if(1===n.result)return\"result: multiple values\";if(n.result=1,t=p.google.protobuf.Any.verify(e.response))return\"response.\"+t}return null},l.fromObject=function(e){if(e instanceof p.google.longrunning.Operation)return e;var t=new p.google.longrunning.Operation;if(null!=e.name&&(t.name=String(e.name)),null!=e.metadata){if(\"object\"!=typeof e.metadata)throw TypeError(\".google.longrunning.Operation.metadata: object expected\");t.metadata=p.google.protobuf.Any.fromObject(e.metadata)}if(null!=e.done&&(t.done=Boolean(e.done)),null!=e.error){if(\"object\"!=typeof e.error)throw TypeError(\".google.longrunning.Operation.error: object expected\");t.error=p.google.rpc.Status.fromObject(e.error)}if(null!=e.response){if(\"object\"!=typeof e.response)throw TypeError(\".google.longrunning.Operation.response: object expected\");t.response=p.google.protobuf.Any.fromObject(e.response)}return t},l.toObject=function(e,t){var n={};return(t=t||{}).defaults&&(n.name=\"\",n.metadata=null,n.done=!1),null!=e.name&&e.hasOwnProperty(\"name\")&&(n.name=e.name),null!=e.metadata&&e.hasOwnProperty(\"metadata\")&&(n.metadata=p.google.protobuf.Any.toObject(e.metadata,t)),null!=e.done&&e.hasOwnProperty(\"done\")&&(n.done=e.done),null!=e.error&&e.hasOwnProperty(\"error\")&&(n.error=p.google.rpc.Status.toObject(e.error,t),t.oneofs)&&(n.result=\"error\"),null!=e.response&&e.hasOwnProperty(\"response\")&&(n.response=p.google.protobuf.Any.toObject(e.response,t),t.oneofs)&&(n.result=\"response\"),n},l.prototype.toJSON=function(){return this.constructor.toObject(this,o.util.toJSONOptions)},l),t.GetOperationRequest=(B.prototype.name=\"\",B.create=function(e){return new B(e)},B.encode=function(e,t){return t=t||r.create(),null!=e.name&&Object.hasOwnProperty.call(e,\"name\")&&t.uint32(10).string(e.name),t},B.encodeDelimited=function(e,t){return this.encode(e,t).ldelim()},B.decode=function(e,t){e instanceof a||(e=a.create(e));for(var n=void 0===t?e.len:e.pos+t,o=new p.google.longrunning.GetOperationRequest;e.pos<n;){var r=e.uint32();r>>>3==1?o.name=e.string():e.skipType(7&r)}return o},B.decodeDelimited=function(e){return e instanceof a||(e=new a(e)),this.decode(e,e.uint32())},B.verify=function(e){return\"object\"!=typeof e||null===e?\"object expected\":null!=e.name&&e.hasOwnProperty(\"name\")&&!i.isString(e.name)?\"name: string expected\":null},B.fromObject=function(e){var t;return e instanceof p.google.longrunning.GetOperationRequest?e:(t=new p.google.longrunning.GetOperationRequest,null!=e.name&&(t.name=String(e.name)),t)},B.toObject=function(e,t){var n={};return(t=t||{}).defaults&&(n.name=\"\"),null!=e.name&&e.hasOwnProperty(\"name\")&&(n.name=e.name),n},B.prototype.toJSON=function(){return this.constructor.toObject(this,o.util.toJSONOptions)},B),t.ListOperationsRequest=(s.prototype.name=\"\",s.prototype.filter=\"\",s.prototype.pageSize=0,s.prototype.pageToken=\"\",s.create=function(e){return new s(e)},s.encode=function(e,t){return t=t||r.create(),null!=e.filter&&Object.hasOwnProperty.call(e,\"filter\")&&t.uint32(10).string(e.filter),null!=e.pageSize&&Object.hasOwnProperty.call(e,\"pageSize\")&&t.uint32(16).int32(e.pageSize),null!=e.pageToken&&Object.hasOwnProperty.call(e,\"pageToken\")&&t.uint32(26).string(e.pageToken),null!=e.name&&Object.hasOwnProperty.call(e,\"name\")&&t.uint32(34).string(e.name),t},s.encodeDelimited=function(e,t){return this.encode(e,t).ldelim()},s.decode=function(e,t){e instanceof a||(e=a.create(e));for(var n=void 0===t?e.len:e.pos+t,o=new p.google.longrunning.ListOperationsRequest;e.pos<n;){var r=e.uint32();switch(r>>>3){case 4:o.name=e.string();break;case 1:o.filter=e.string();break;case 2:o.pageSize=e.int32();break;case 3:o.pageToken=e.string();break;default:e.skipType(7&r)}}return o},s.decodeDelimited=function(e){return e instanceof a||(e=new a(e)),this.decode(e,e.uint32())},s.verify=function(e){return\"object\"!=typeof e||null===e?\"object expected\":null!=e.name&&e.hasOwnProperty(\"name\")&&!i.isString(e.name)?\"name: string expected\":null!=e.filter&&e.hasOwnProperty(\"filter\")&&!i.isString(e.filter)?\"filter: string expected\":null!=e.pageSize&&e.hasOwnProperty(\"pageSize\")&&!i.isInteger(e.pageSize)?\"pageSize: integer expected\":null!=e.pageToken&&e.hasOwnProperty(\"pageToken\")&&!i.isString(e.pageToken)?\"pageToken: string expected\":null},s.fromObject=function(e){var t;return e instanceof p.google.longrunning.ListOperationsRequest?e:(t=new p.google.longrunning.ListOperationsRequest,null!=e.name&&(t.name=String(e.name)),null!=e.filter&&(t.filter=String(e.filter)),null!=e.pageSize&&(t.pageSize=0|e.pageSize),null!=e.pageToken&&(t.pageToken=String(e.pageToken)),t)},s.toObject=function(e,t){var n={};return(t=t||{}).defaults&&(n.filter=\"\",n.pageSize=0,n.pageToken=\"\",n.name=\"\"),null!=e.filter&&e.hasOwnProperty(\"filter\")&&(n.filter=e.filter),null!=e.pageSize&&e.hasOwnProperty(\"pageSize\")&&(n.pageSize=e.pageSize),null!=e.pageToken&&e.hasOwnProperty(\"pageToken\")&&(n.pageToken=e.pageToken),null!=e.name&&e.hasOwnProperty(\"name\")&&(n.name=e.name),n},s.prototype.toJSON=function(){return this.constructor.toObject(this,o.util.toJSONOptions)},s),t.ListOperationsResponse=(u.prototype.operations=i.emptyArray,u.prototype.nextPageToken=\"\",u.create=function(e){return new u(e)},u.encode=function(e,t){if(t=t||r.create(),null!=e.operations&&e.operations.length)for(var n=0;n<e.operations.length;++n)p.google.longrunning.Operation.encode(e.operations[n],t.uint32(10).fork()).ldelim();return null!=e.nextPageToken&&Object.hasOwnProperty.call(e,\"nextPageToken\")&&t.uint32(18).string(e.nextPageToken),t},u.encodeDelimited=function(e,t){return this.encode(e,t).ldelim()},u.decode=function(e,t){e instanceof a||(e=a.create(e));for(var n=void 0===t?e.len:e.pos+t,o=new p.google.longrunning.ListOperationsResponse;e.pos<n;){var r=e.uint32();switch(r>>>3){case 1:o.operations&&o.operations.length||(o.operations=[]),o.operations.push(p.google.longrunning.Operation.decode(e,e.uint32()));break;case 2:o.nextPageToken=e.string();break;default:e.skipType(7&r)}}return o},u.decodeDelimited=function(e){return e instanceof a||(e=new a(e)),this.decode(e,e.uint32())},u.verify=function(e){if(\"object\"!=typeof e||null===e)return\"object expected\";if(null!=e.operations&&e.hasOwnProperty(\"operations\")){if(!Array.isArray(e.operations))return\"operations: array expected\";for(var t=0;t<e.operations.length;++t){var n=p.google.longrunning.Operation.verify(e.operations[t]);if(n)return\"operations.\"+n}}return null!=e.nextPageToken&&e.hasOwnProperty(\"nextPageToken\")&&!i.isString(e.nextPageToken)?\"nextPageToken: string expected\":null},u.fromObject=function(e){if(e instanceof p.google.longrunning.ListOperationsResponse)return e;var t=new p.google.longrunning.ListOperationsResponse;if(e.operations){if(!Array.isArray(e.operations))throw TypeError(\".google.longrunning.ListOperationsResponse.operations: array expected\");t.operations=[];for(var n=0;n<e.operations.length;++n){if(\"object\"!=typeof e.operations[n])throw TypeError(\".google.longrunning.ListOperationsResponse.operations: object expected\");t.operations[n]=p.google.longrunning.Operation.fromObject(e.operations[n])}}return null!=e.nextPageToken&&(t.nextPageToken=String(e.nextPageToken)),t},u.toObject=function(e,t){var n={};if(((t=t||{}).arrays||t.defaults)&&(n.operations=[]),t.defaults&&(n.nextPageToken=\"\"),e.operations&&e.operations.length){n.operations=[];for(var o=0;o<e.operations.length;++o)n.operations[o]=p.google.longrunning.Operation.toObject(e.operations[o],t)}return null!=e.nextPageToken&&e.hasOwnProperty(\"nextPageToken\")&&(n.nextPageToken=e.nextPageToken),n},u.prototype.toJSON=function(){return this.constructor.toObject(this,o.util.toJSONOptions)},u),t.CancelOperationRequest=(L.prototype.name=\"\",L.create=function(e){return new L(e)},L.encode=function(e,t){return t=t||r.create(),null!=e.name&&Object.hasOwnProperty.call(e,\"name\")&&t.uint32(10).string(e.name),t},L.encodeDelimited=function(e,t){return this.encode(e,t).ldelim()},L.decode=function(e,t){e instanceof a||(e=a.create(e));for(var n=void 0===t?e.len:e.pos+t,o=new p.google.longrunning.CancelOperationRequest;e.pos<n;){var r=e.uint32();r>>>3==1?o.name=e.string():e.skipType(7&r)}return o},L.decodeDelimited=function(e){return e instanceof a||(e=new a(e)),this.decode(e,e.uint32())},L.verify=function(e){return\"object\"!=typeof e||null===e?\"object expected\":null!=e.name&&e.hasOwnProperty(\"name\")&&!i.isString(e.name)?\"name: string expected\":null},L.fromObject=function(e){var t;return e instanceof p.google.longrunning.CancelOperationRequest?e:(t=new p.google.longrunning.CancelOperationRequest,null!=e.name&&(t.name=String(e.name)),t)},L.toObject=function(e,t){var n={};return(t=t||{}).defaults&&(n.name=\"\"),null!=e.name&&e.hasOwnProperty(\"name\")&&(n.name=e.name),n},L.prototype.toJSON=function(){return this.constructor.toObject(this,o.util.toJSONOptions)},L),t.DeleteOperationRequest=(U.prototype.name=\"\",U.create=function(e){return new U(e)},U.encode=function(e,t){return t=t||r.create(),null!=e.name&&Object.hasOwnProperty.call(e,\"name\")&&t.uint32(10).string(e.name),t},U.encodeDelimited=function(e,t){return this.encode(e,t).ldelim()},U.decode=function(e,t){e instanceof a||(e=a.create(e));for(var n=void 0===t?e.len:e.pos+t,o=new p.google.longrunning.DeleteOperationRequest;e.pos<n;){var r=e.uint32();r>>>3==1?o.name=e.string():e.skipType(7&r)}return o},U.decodeDelimited=function(e){return e instanceof a||(e=new a(e)),this.decode(e,e.uint32())},U.verify=function(e){return\"object\"!=typeof e||null===e?\"object expected\":null!=e.name&&e.hasOwnProperty(\"name\")&&!i.isString(e.name)?\"name: string expected\":null},U.fromObject=function(e){var t;return e instanceof p.google.longrunning.DeleteOperationRequest?e:(t=new p.google.longrunning.DeleteOperationRequest,null!=e.name&&(t.name=String(e.name)),t)},U.toObject=function(e,t){var n={};return(t=t||{}).defaults&&(n.name=\"\"),null!=e.name&&e.hasOwnProperty(\"name\")&&(n.name=e.name),n},U.prototype.toJSON=function(){return this.constructor.toObject(this,o.util.toJSONOptions)},U),t.WaitOperationRequest=(c.prototype.name=\"\",c.prototype.timeout=null,c.create=function(e){return new c(e)},c.encode=function(e,t){return t=t||r.create(),null!=e.name&&Object.hasOwnProperty.call(e,\"name\")&&t.uint32(10).string(e.name),null!=e.timeout&&Object.hasOwnProperty.call(e,\"timeout\")&&p.google.protobuf.Duration.encode(e.timeout,t.uint32(18).fork()).ldelim(),t},c.encodeDelimited=function(e,t){return this.encode(e,t).ldelim()},c.decode=function(e,t){e instanceof a||(e=a.create(e));for(var n=void 0===t?e.len:e.pos+t,o=new p.google.longrunning.WaitOperationRequest;e.pos<n;){var r=e.uint32();switch(r>>>3){case 1:o.name=e.string();break;case 2:o.timeout=p.google.protobuf.Duration.decode(e,e.uint32());break;default:e.skipType(7&r)}}return o},c.decodeDelimited=function(e){return e instanceof a||(e=new a(e)),this.decode(e,e.uint32())},c.verify=function(e){if(\"object\"!=typeof e||null===e)return\"object expected\";if(null!=e.name&&e.hasOwnProperty(\"name\")&&!i.isString(e.name))return\"name: string expected\";if(null!=e.timeout&&e.hasOwnProperty(\"timeout\")){e=p.google.protobuf.Duration.verify(e.timeout);if(e)return\"timeout.\"+e}return null},c.fromObject=function(e){if(e instanceof p.google.longrunning.WaitOperationRequest)return e;var t=new p.google.longrunning.WaitOperationRequest;if(null!=e.name&&(t.name=String(e.name)),null!=e.timeout){if(\"object\"!=typeof e.timeout)throw TypeError(\".google.longrunning.WaitOperationRequest.timeout: object expected\");t.timeout=p.google.protobuf.Duration.fromObject(e.timeout)}return t},c.toObject=function(e,t){var n={};return(t=t||{}).defaults&&(n.name=\"\",n.timeout=null),null!=e.name&&e.hasOwnProperty(\"name\")&&(n.name=e.name),null!=e.timeout&&e.hasOwnProperty(\"timeout\")&&(n.timeout=p.google.protobuf.Duration.toObject(e.timeout,t)),n},c.prototype.toJSON=function(){return this.constructor.toObject(this,o.util.toJSONOptions)},c),t.OperationInfo=(d.prototype.responseType=\"\",d.prototype.metadataType=\"\",d.create=function(e){return new d(e)},d.encode=function(e,t){return t=t||r.create(),null!=e.responseType&&Object.hasOwnProperty.call(e,\"responseType\")&&t.uint32(10).string(e.responseType),null!=e.metadataType&&Object.hasOwnProperty.call(e,\"metadataType\")&&t.uint32(18).string(e.metadataType),t},d.encodeDelimited=function(e,t){return this.encode(e,t).ldelim()},d.decode=function(e,t){e instanceof a||(e=a.create(e));for(var n=void 0===t?e.len:e.pos+t,o=new p.google.longrunning.OperationInfo;e.pos<n;){var r=e.uint32();switch(r>>>3){case 1:o.responseType=e.string();break;case 2:o.metadataType=e.string();break;default:e.skipType(7&r)}}return o},d.decodeDelimited=function(e){return e instanceof a||(e=new a(e)),this.decode(e,e.uint32())},d.verify=function(e){return\"object\"!=typeof e||null===e?\"object expected\":null!=e.responseType&&e.hasOwnProperty(\"responseType\")&&!i.isString(e.responseType)?\"responseType: string expected\":null!=e.metadataType&&e.hasOwnProperty(\"metadataType\")&&!i.isString(e.metadataType)?\"metadataType: string expected\":null},d.fromObject=function(e){var t;return e instanceof p.google.longrunning.OperationInfo?e:(t=new p.google.longrunning.OperationInfo,null!=e.responseType&&(t.responseType=String(e.responseType)),null!=e.metadataType&&(t.metadataType=String(e.metadataType)),t)},d.toObject=function(e,t){var n={};return(t=t||{}).defaults&&(n.responseType=\"\",n.metadataType=\"\"),null!=e.responseType&&e.hasOwnProperty(\"responseType\")&&(n.responseType=e.responseType),null!=e.metadataType&&e.hasOwnProperty(\"metadataType\")&&(n.metadataType=e.metadataType),n},d.prototype.toJSON=function(){return this.constructor.toObject(this,o.util.toJSONOptions)},d),t),F.api=((n={}).Http=(g.prototype.rules=i.emptyArray,g.prototype.fullyDecodeReservedExpansion=!1,g.create=function(e){return new g(e)},g.encode=function(e,t){if(t=t||r.create(),null!=e.rules&&e.rules.length)for(var n=0;n<e.rules.length;++n)p.google.api.HttpRule.encode(e.rules[n],t.uint32(10).fork()).ldelim();return null!=e.fullyDecodeReservedExpansion&&Object.hasOwnProperty.call(e,\"fullyDecodeReservedExpansion\")&&t.uint32(16).bool(e.fullyDecodeReservedExpansion),t},g.encodeDelimited=function(e,t){return this.encode(e,t).ldelim()},g.decode=function(e,t){e instanceof a||(e=a.create(e));for(var n=void 0===t?e.len:e.pos+t,o=new p.google.api.Http;e.pos<n;){var r=e.uint32();switch(r>>>3){case 1:o.rules&&o.rules.length||(o.rules=[]),o.rules.push(p.google.api.HttpRule.decode(e,e.uint32()));break;case 2:o.fullyDecodeReservedExpansion=e.bool();break;default:e.skipType(7&r)}}return o},g.decodeDelimited=function(e){return e instanceof a||(e=new a(e)),this.decode(e,e.uint32())},g.verify=function(e){if(\"object\"!=typeof e||null===e)return\"object expected\";if(null!=e.rules&&e.hasOwnProperty(\"rules\")){if(!Array.isArray(e.rules))return\"rules: array expected\";for(var t=0;t<e.rules.length;++t){var n=p.google.api.HttpRule.verify(e.rules[t]);if(n)return\"rules.\"+n}}return null!=e.fullyDecodeReservedExpansion&&e.hasOwnProperty(\"fullyDecodeReservedExpansion\")&&\"boolean\"!=typeof e.fullyDecodeReservedExpansion?\"fullyDecodeReservedExpansion: boolean expected\":null},g.fromObject=function(e){if(e instanceof p.google.api.Http)return e;var t=new p.google.api.Http;if(e.rules){if(!Array.isArray(e.rules))throw TypeError(\".google.api.Http.rules: array expected\");t.rules=[];for(var n=0;n<e.rules.length;++n){if(\"object\"!=typeof e.rules[n])throw TypeError(\".google.api.Http.rules: object expected\");t.rules[n]=p.google.api.HttpRule.fromObject(e.rules[n])}}return null!=e.fullyDecodeReservedExpansion&&(t.fullyDecodeReservedExpansion=Boolean(e.fullyDecodeReservedExpansion)),t},g.toObject=function(e,t){var n={};if(((t=t||{}).arrays||t.defaults)&&(n.rules=[]),t.defaults&&(n.fullyDecodeReservedExpansion=!1),e.rules&&e.rules.length){n.rules=[];for(var o=0;o<e.rules.length;++o)n.rules[o]=p.google.api.HttpRule.toObject(e.rules[o],t)}return null!=e.fullyDecodeReservedExpansion&&e.hasOwnProperty(\"fullyDecodeReservedExpansion\")&&(n.fullyDecodeReservedExpansion=e.fullyDecodeReservedExpansion),n},g.prototype.toJSON=function(){return this.constructor.toObject(this,o.util.toJSONOptions)},g),n.HttpRule=(f.prototype.selector=\"\",f.prototype.get=\"\",f.prototype.put=\"\",f.prototype.post=\"\",f.prototype.delete=\"\",f.prototype.patch=\"\",f.prototype.custom=null,f.prototype.body=\"\",f.prototype.responseBody=\"\",f.prototype.additionalBindings=i.emptyArray,Object.defineProperty(f.prototype,\"pattern\",{get:i.oneOfGetter(t=[\"get\",\"put\",\"post\",\"delete\",\"patch\",\"custom\"]),set:i.oneOfSetter(t)}),f.create=function(e){return new f(e)},f.encode=function(e,t){if(t=t||r.create(),null!=e.selector&&Object.hasOwnProperty.call(e,\"selector\")&&t.uint32(10).string(e.selector),null!=e.get&&Object.hasOwnProperty.call(e,\"get\")&&t.uint32(18).string(e.get),null!=e.put&&Object.hasOwnProperty.call(e,\"put\")&&t.uint32(26).string(e.put),null!=e.post&&Object.hasOwnProperty.call(e,\"post\")&&t.uint32(34).string(e.post),null!=e.delete&&Object.hasOwnProperty.call(e,\"delete\")&&t.uint32(42).string(e.delete),null!=e.patch&&Object.hasOwnProperty.call(e,\"patch\")&&t.uint32(50).string(e.patch),null!=e.body&&Object.hasOwnProperty.call(e,\"body\")&&t.uint32(58).string(e.body),null!=e.custom&&Object.hasOwnProperty.call(e,\"custom\")&&p.google.api.CustomHttpPattern.encode(e.custom,t.uint32(66).fork()).ldelim(),null!=e.additionalBindings&&e.additionalBindings.length)for(var n=0;n<e.additionalBindings.length;++n)p.google.api.HttpRule.encode(e.additionalBindings[n],t.uint32(90).fork()).ldelim();return null!=e.responseBody&&Object.hasOwnProperty.call(e,\"responseBody\")&&t.uint32(98).string(e.responseBody),t},f.encodeDelimited=function(e,t){return this.encode(e,t).ldelim()},f.decode=function(e,t){e instanceof a||(e=a.create(e));for(var n=void 0===t?e.len:e.pos+t,o=new p.google.api.HttpRule;e.pos<n;){var r=e.uint32();switch(r>>>3){case 1:o.selector=e.string();break;case 2:o.get=e.string();break;case 3:o.put=e.string();break;case 4:o.post=e.string();break;case 5:o.delete=e.string();break;case 6:o.patch=e.string();break;case 8:o.custom=p.google.api.CustomHttpPattern.decode(e,e.uint32());break;case 7:o.body=e.string();break;case 12:o.responseBody=e.string();break;case 11:o.additionalBindings&&o.additionalBindings.length||(o.additionalBindings=[]),o.additionalBindings.push(p.google.api.HttpRule.decode(e,e.uint32()));break;default:e.skipType(7&r)}}return o},f.decodeDelimited=function(e){return e instanceof a||(e=new a(e)),this.decode(e,e.uint32())},f.verify=function(e){if(\"object\"!=typeof e||null===e)return\"object expected\";var t={};if(null!=e.selector&&e.hasOwnProperty(\"selector\")&&!i.isString(e.selector))return\"selector: string expected\";if(null!=e.get&&e.hasOwnProperty(\"get\")&&(t.pattern=1,!i.isString(e.get)))return\"get: string expected\";if(null!=e.put&&e.hasOwnProperty(\"put\")){if(1===t.pattern)return\"pattern: multiple values\";if(t.pattern=1,!i.isString(e.put))return\"put: string expected\"}if(null!=e.post&&e.hasOwnProperty(\"post\")){if(1===t.pattern)return\"pattern: multiple values\";if(t.pattern=1,!i.isString(e.post))return\"post: string expected\"}if(null!=e.delete&&e.hasOwnProperty(\"delete\")){if(1===t.pattern)return\"pattern: multiple values\";if(t.pattern=1,!i.isString(e.delete))return\"delete: string expected\"}if(null!=e.patch&&e.hasOwnProperty(\"patch\")){if(1===t.pattern)return\"pattern: multiple values\";if(t.pattern=1,!i.isString(e.patch))return\"patch: string expected\"}if(null!=e.custom&&e.hasOwnProperty(\"custom\")){if(1===t.pattern)return\"pattern: multiple values\";if(t.pattern=1,n=p.google.api.CustomHttpPattern.verify(e.custom))return\"custom.\"+n}if(null!=e.body&&e.hasOwnProperty(\"body\")&&!i.isString(e.body))return\"body: string expected\";if(null!=e.responseBody&&e.hasOwnProperty(\"responseBody\")&&!i.isString(e.responseBody))return\"responseBody: string expected\";if(null!=e.additionalBindings&&e.hasOwnProperty(\"additionalBindings\")){if(!Array.isArray(e.additionalBindings))return\"additionalBindings: array expected\";for(var n,o=0;o<e.additionalBindings.length;++o)if(n=p.google.api.HttpRule.verify(e.additionalBindings[o]))return\"additionalBindings.\"+n}return null},f.fromObject=function(e){if(e instanceof p.google.api.HttpRule)return e;var t=new p.google.api.HttpRule;if(null!=e.selector&&(t.selector=String(e.selector)),null!=e.get&&(t.get=String(e.get)),null!=e.put&&(t.put=String(e.put)),null!=e.post&&(t.post=String(e.post)),null!=e.delete&&(t.delete=String(e.delete)),null!=e.patch&&(t.patch=String(e.patch)),null!=e.custom){if(\"object\"!=typeof e.custom)throw TypeError(\".google.api.HttpRule.custom: object expected\");t.custom=p.google.api.CustomHttpPattern.fromObject(e.custom)}if(null!=e.body&&(t.body=String(e.body)),null!=e.responseBody&&(t.responseBody=String(e.responseBody)),e.additionalBindings){if(!Array.isArray(e.additionalBindings))throw TypeError(\".google.api.HttpRule.additionalBindings: array expected\");t.additionalBindings=[];for(var n=0;n<e.additionalBindings.length;++n){if(\"object\"!=typeof e.additionalBindings[n])throw TypeError(\".google.api.HttpRule.additionalBindings: object expected\");t.additionalBindings[n]=p.google.api.HttpRule.fromObject(e.additionalBindings[n])}}return t},f.toObject=function(e,t){var n={};if(((t=t||{}).arrays||t.defaults)&&(n.additionalBindings=[]),t.defaults&&(n.selector=\"\",n.body=\"\",n.responseBody=\"\"),null!=e.selector&&e.hasOwnProperty(\"selector\")&&(n.selector=e.selector),null!=e.get&&e.hasOwnProperty(\"get\")&&(n.get=e.get,t.oneofs)&&(n.pattern=\"get\"),null!=e.put&&e.hasOwnProperty(\"put\")&&(n.put=e.put,t.oneofs)&&(n.pattern=\"put\"),null!=e.post&&e.hasOwnProperty(\"post\")&&(n.post=e.post,t.oneofs)&&(n.pattern=\"post\"),null!=e.delete&&e.hasOwnProperty(\"delete\")&&(n.delete=e.delete,t.oneofs)&&(n.pattern=\"delete\"),null!=e.patch&&e.hasOwnProperty(\"patch\")&&(n.patch=e.patch,t.oneofs)&&(n.pattern=\"patch\"),null!=e.body&&e.hasOwnProperty(\"body\")&&(n.body=e.body),null!=e.custom&&e.hasOwnProperty(\"custom\")&&(n.custom=p.google.api.CustomHttpPattern.toObject(e.custom,t),t.oneofs)&&(n.pattern=\"custom\"),e.additionalBindings&&e.additionalBindings.length){n.additionalBindings=[];for(var o=0;o<e.additionalBindings.length;++o)n.additionalBindings[o]=p.google.api.HttpRule.toObject(e.additionalBindings[o],t)}return null!=e.responseBody&&e.hasOwnProperty(\"responseBody\")&&(n.responseBody=e.responseBody),n},f.prototype.toJSON=function(){return this.constructor.toObject(this,o.util.toJSONOptions)},f),n.CustomHttpPattern=(y.prototype.kind=\"\",y.prototype.path=\"\",y.create=function(e){return new y(e)},y.encode=function(e,t){return t=t||r.create(),null!=e.kind&&Object.hasOwnProperty.call(e,\"kind\")&&t.uint32(10).string(e.kind),null!=e.path&&Object.hasOwnProperty.call(e,\"path\")&&t.uint32(18).string(e.path),t},y.encodeDelimited=function(e,t){return this.encode(e,t).ldelim()},y.decode=function(e,t){e instanceof a||(e=a.create(e));for(var n=void 0===t?e.len:e.pos+t,o=new p.google.api.CustomHttpPattern;e.pos<n;){var r=e.uint32();switch(r>>>3){case 1:o.kind=e.string();break;case 2:o.path=e.string();break;default:e.skipType(7&r)}}return o},y.decodeDelimited=function(e){return e instanceof a||(e=new a(e)),this.decode(e,e.uint32())},y.verify=function(e){return\"object\"!=typeof e||null===e?\"object expected\":null!=e.kind&&e.hasOwnProperty(\"kind\")&&!i.isString(e.kind)?\"kind: string expected\":null!=e.path&&e.hasOwnProperty(\"path\")&&!i.isString(e.path)?\"path: string expected\":null},y.fromObject=function(e){var t;return e instanceof p.google.api.CustomHttpPattern?e:(t=new p.google.api.CustomHttpPattern,null!=e.kind&&(t.kind=String(e.kind)),null!=e.path&&(t.path=String(e.path)),t)},y.toObject=function(e,t){var n={};return(t=t||{}).defaults&&(n.kind=\"\",n.path=\"\"),null!=e.kind&&e.hasOwnProperty(\"kind\")&&(n.kind=e.kind),null!=e.path&&e.hasOwnProperty(\"path\")&&(n.path=e.path),n},y.prototype.toJSON=function(){return this.constructor.toObject(this,o.util.toJSONOptions)},y),n),F.protobuf=((t={}).FileDescriptorSet=(J.prototype.file=i.emptyArray,J.create=function(e){return new J(e)},J.encode=function(e,t){if(t=t||r.create(),null!=e.file&&e.file.length)for(var n=0;n<e.file.length;++n)p.google.protobuf.FileDescriptorProto.encode(e.file[n],t.uint32(10).fork()).ldelim();return t},J.encodeDelimited=function(e,t){return this.encode(e,t).ldelim()},J.decode=function(e,t){e instanceof a||(e=a.create(e));for(var n=void 0===t?e.len:e.pos+t,o=new p.google.protobuf.FileDescriptorSet;e.pos<n;){var r=e.uint32();r>>>3==1?(o.file&&o.file.length||(o.file=[]),o.file.push(p.google.protobuf.FileDescriptorProto.decode(e,e.uint32()))):e.skipType(7&r)}return o},J.decodeDelimited=function(e){return e instanceof a||(e=new a(e)),this.decode(e,e.uint32())},J.verify=function(e){if(\"object\"!=typeof e||null===e)return\"object expected\";if(null!=e.file&&e.hasOwnProperty(\"file\")){if(!Array.isArray(e.file))return\"file: array expected\";for(var t=0;t<e.file.length;++t){var n=p.google.protobuf.FileDescriptorProto.verify(e.file[t]);if(n)return\"file.\"+n}}return null},J.fromObject=function(e){if(e instanceof p.google.protobuf.FileDescriptorSet)return e;var t=new p.google.protobuf.FileDescriptorSet;if(e.file){if(!Array.isArray(e.file))throw TypeError(\".google.protobuf.FileDescriptorSet.file: array expected\");t.file=[];for(var n=0;n<e.file.length;++n){if(\"object\"!=typeof e.file[n])throw TypeError(\".google.protobuf.FileDescriptorSet.file: object expected\");t.file[n]=p.google.protobuf.FileDescriptorProto.fromObject(e.file[n])}}return t},J.toObject=function(e,t){var n={};if(((t=t||{}).arrays||t.defaults)&&(n.file=[]),e.file&&e.file.length){n.file=[];for(var o=0;o<e.file.length;++o)n.file[o]=p.google.protobuf.FileDescriptorProto.toObject(e.file[o],t)}return n},J.prototype.toJSON=function(){return this.constructor.toObject(this,o.util.toJSONOptions)},J),t.FileDescriptorProto=(h.prototype.name=\"\",h.prototype.package=\"\",h.prototype.dependency=i.emptyArray,h.prototype.publicDependency=i.emptyArray,h.prototype.weakDependency=i.emptyArray,h.prototype.messageType=i.emptyArray,h.prototype.enumType=i.emptyArray,h.prototype.service=i.emptyArray,h.prototype.extension=i.emptyArray,h.prototype.options=null,h.prototype.sourceCodeInfo=null,h.prototype.syntax=\"\",h.create=function(e){return new h(e)},h.encode=function(e,t){if(t=t||r.create(),null!=e.name&&Object.hasOwnProperty.call(e,\"name\")&&t.uint32(10).string(e.name),null!=e.package&&Object.hasOwnProperty.call(e,\"package\")&&t.uint32(18).string(e.package),null!=e.dependency&&e.dependency.length)for(var n=0;n<e.dependency.length;++n)t.uint32(26).string(e.dependency[n]);if(null!=e.messageType&&e.messageType.length)for(n=0;n<e.messageType.length;++n)p.google.protobuf.DescriptorProto.encode(e.messageType[n],t.uint32(34).fork()).ldelim();if(null!=e.enumType&&e.enumType.length)for(n=0;n<e.enumType.length;++n)p.google.protobuf.EnumDescriptorProto.encode(e.enumType[n],t.uint32(42).fork()).ldelim();if(null!=e.service&&e.service.length)for(n=0;n<e.service.length;++n)p.google.protobuf.ServiceDescriptorProto.encode(e.service[n],t.uint32(50).fork()).ldelim();if(null!=e.extension&&e.extension.length)for(n=0;n<e.extension.length;++n)p.google.protobuf.FieldDescriptorProto.encode(e.extension[n],t.uint32(58).fork()).ldelim();if(null!=e.options&&Object.hasOwnProperty.call(e,\"options\")&&p.google.protobuf.FileOptions.encode(e.options,t.uint32(66).fork()).ldelim(),null!=e.sourceCodeInfo&&Object.hasOwnProperty.call(e,\"sourceCodeInfo\")&&p.google.protobuf.SourceCodeInfo.encode(e.sourceCodeInfo,t.uint32(74).fork()).ldelim(),null!=e.publicDependency&&e.publicDependency.length)for(n=0;n<e.publicDependency.length;++n)t.uint32(80).int32(e.publicDependency[n]);if(null!=e.weakDependency&&e.weakDependency.length)for(n=0;n<e.weakDependency.length;++n)t.uint32(88).int32(e.weakDependency[n]);return null!=e.syntax&&Object.hasOwnProperty.call(e,\"syntax\")&&t.uint32(98).string(e.syntax),t},h.encodeDelimited=function(e,t){return this.encode(e,t).ldelim()},h.decode=function(e,t){e instanceof a||(e=a.create(e));for(var n=void 0===t?e.len:e.pos+t,o=new p.google.protobuf.FileDescriptorProto;e.pos<n;){var r=e.uint32();switch(r>>>3){case 1:o.name=e.string();break;case 2:o.package=e.string();break;case 3:o.dependency&&o.dependency.length||(o.dependency=[]),o.dependency.push(e.string());break;case 10:if(o.publicDependency&&o.publicDependency.length||(o.publicDependency=[]),2==(7&r))for(var i=e.uint32()+e.pos;e.pos<i;)o.publicDependency.push(e.int32());else o.publicDependency.push(e.int32());break;case 11:if(o.weakDependency&&o.weakDependency.length||(o.weakDependency=[]),2==(7&r))for(i=e.uint32()+e.pos;e.pos<i;)o.weakDependency.push(e.int32());else o.weakDependency.push(e.int32());break;case 4:o.messageType&&o.messageType.length||(o.messageType=[]),o.messageType.push(p.google.protobuf.DescriptorProto.decode(e,e.uint32()));break;case 5:o.enumType&&o.enumType.length||(o.enumType=[]),o.enumType.push(p.google.protobuf.EnumDescriptorProto.decode(e,e.uint32()));break;case 6:o.service&&o.service.length||(o.service=[]),o.service.push(p.google.protobuf.ServiceDescriptorProto.decode(e,e.uint32()));break;case 7:o.extension&&o.extension.length||(o.extension=[]),o.extension.push(p.google.protobuf.FieldDescriptorProto.decode(e,e.uint32()));break;case 8:o.options=p.google.protobuf.FileOptions.decode(e,e.uint32());break;case 9:o.sourceCodeInfo=p.google.protobuf.SourceCodeInfo.decode(e,e.uint32());break;case 12:o.syntax=e.string();break;default:e.skipType(7&r)}}return o},h.decodeDelimited=function(e){return e instanceof a||(e=new a(e)),this.decode(e,e.uint32())},h.verify=function(e){if(\"object\"!=typeof e||null===e)return\"object expected\";if(null!=e.name&&e.hasOwnProperty(\"name\")&&!i.isString(e.name))return\"name: string expected\";if(null!=e.package&&e.hasOwnProperty(\"package\")&&!i.isString(e.package))return\"package: string expected\";if(null!=e.dependency&&e.hasOwnProperty(\"dependency\")){if(!Array.isArray(e.dependency))return\"dependency: array expected\";for(var t=0;t<e.dependency.length;++t)if(!i.isString(e.dependency[t]))return\"dependency: string[] expected\"}if(null!=e.publicDependency&&e.hasOwnProperty(\"publicDependency\")){if(!Array.isArray(e.publicDependency))return\"publicDependency: array expected\";for(t=0;t<e.publicDependency.length;++t)if(!i.isInteger(e.publicDependency[t]))return\"publicDependency: integer[] expected\"}if(null!=e.weakDependency&&e.hasOwnProperty(\"weakDependency\")){if(!Array.isArray(e.weakDependency))return\"weakDependency: array expected\";for(t=0;t<e.weakDependency.length;++t)if(!i.isInteger(e.weakDependency[t]))return\"weakDependency: integer[] expected\"}if(null!=e.messageType&&e.hasOwnProperty(\"messageType\")){if(!Array.isArray(e.messageType))return\"messageType: array expected\";for(t=0;t<e.messageType.length;++t)if(n=p.google.protobuf.DescriptorProto.verify(e.messageType[t]))return\"messageType.\"+n}if(null!=e.enumType&&e.hasOwnProperty(\"enumType\")){if(!Array.isArray(e.enumType))return\"enumType: array expected\";for(t=0;t<e.enumType.length;++t)if(n=p.google.protobuf.EnumDescriptorProto.verify(e.enumType[t]))return\"enumType.\"+n}if(null!=e.service&&e.hasOwnProperty(\"service\")){if(!Array.isArray(e.service))return\"service: array expected\";for(t=0;t<e.service.length;++t)if(n=p.google.protobuf.ServiceDescriptorProto.verify(e.service[t]))return\"service.\"+n}if(null!=e.extension&&e.hasOwnProperty(\"extension\")){if(!Array.isArray(e.extension))return\"extension: array expected\";for(t=0;t<e.extension.length;++t)if(n=p.google.protobuf.FieldDescriptorProto.verify(e.extension[t]))return\"extension.\"+n}var n;if(null!=e.options&&e.hasOwnProperty(\"options\")&&(n=p.google.protobuf.FileOptions.verify(e.options)))return\"options.\"+n;if(null!=e.sourceCodeInfo&&e.hasOwnProperty(\"sourceCodeInfo\")&&(n=p.google.protobuf.SourceCodeInfo.verify(e.sourceCodeInfo)))return\"sourceCodeInfo.\"+n;return null!=e.syntax&&e.hasOwnProperty(\"syntax\")&&!i.isString(e.syntax)?\"syntax: string expected\":null},h.fromObject=function(e){if(e instanceof p.google.protobuf.FileDescriptorProto)return e;var t=new p.google.protobuf.FileDescriptorProto;if(null!=e.name&&(t.name=String(e.name)),null!=e.package&&(t.package=String(e.package)),e.dependency){if(!Array.isArray(e.dependency))throw TypeError(\".google.protobuf.FileDescriptorProto.dependency: array expected\");t.dependency=[];for(var n=0;n<e.dependency.length;++n)t.dependency[n]=String(e.dependency[n])}if(e.publicDependency){if(!Array.isArray(e.publicDependency))throw TypeError(\".google.protobuf.FileDescriptorProto.publicDependency: array expected\");t.publicDependency=[];for(n=0;n<e.publicDependency.length;++n)t.publicDependency[n]=0|e.publicDependency[n]}if(e.weakDependency){if(!Array.isArray(e.weakDependency))throw TypeError(\".google.protobuf.FileDescriptorProto.weakDependency: array expected\");t.weakDependency=[];for(n=0;n<e.weakDependency.length;++n)t.weakDependency[n]=0|e.weakDependency[n]}if(e.messageType){if(!Array.isArray(e.messageType))throw TypeError(\".google.protobuf.FileDescriptorProto.messageType: array expected\");t.messageType=[];for(n=0;n<e.messageType.length;++n){if(\"object\"!=typeof e.messageType[n])throw TypeError(\".google.protobuf.FileDescriptorProto.messageType: object expected\");t.messageType[n]=p.google.protobuf.DescriptorProto.fromObject(e.messageType[n])}}if(e.enumType){if(!Array.isArray(e.enumType))throw TypeError(\".google.protobuf.FileDescriptorProto.enumType: array expected\");t.enumType=[];for(n=0;n<e.enumType.length;++n){if(\"object\"!=typeof e.enumType[n])throw TypeError(\".google.protobuf.FileDescriptorProto.enumType: object expected\");t.enumType[n]=p.google.protobuf.EnumDescriptorProto.fromObject(e.enumType[n])}}if(e.service){if(!Array.isArray(e.service))throw TypeError(\".google.protobuf.FileDescriptorProto.service: array expected\");t.service=[];for(n=0;n<e.service.length;++n){if(\"object\"!=typeof e.service[n])throw TypeError(\".google.protobuf.FileDescriptorProto.service: object expected\");t.service[n]=p.google.protobuf.ServiceDescriptorProto.fromObject(e.service[n])}}if(e.extension){if(!Array.isArray(e.extension))throw TypeError(\".google.protobuf.FileDescriptorProto.extension: array expected\");t.extension=[];for(n=0;n<e.extension.length;++n){if(\"object\"!=typeof e.extension[n])throw TypeError(\".google.protobuf.FileDescriptorProto.extension: object expected\");t.extension[n]=p.google.protobuf.FieldDescriptorProto.fromObject(e.extension[n])}}if(null!=e.options){if(\"object\"!=typeof e.options)throw TypeError(\".google.protobuf.FileDescriptorProto.options: object expected\");t.options=p.google.protobuf.FileOptions.fromObject(e.options)}if(null!=e.sourceCodeInfo){if(\"object\"!=typeof e.sourceCodeInfo)throw TypeError(\".google.protobuf.FileDescriptorProto.sourceCodeInfo: object expected\");t.sourceCodeInfo=p.google.protobuf.SourceCodeInfo.fromObject(e.sourceCodeInfo)}return null!=e.syntax&&(t.syntax=String(e.syntax)),t},h.toObject=function(e,t){var n={};if(((t=t||{}).arrays||t.defaults)&&(n.dependency=[],n.messageType=[],n.enumType=[],n.service=[],n.extension=[],n.publicDependency=[],n.weakDependency=[]),t.defaults&&(n.name=\"\",n.package=\"\",n.options=null,n.sourceCodeInfo=null,n.syntax=\"\"),null!=e.name&&e.hasOwnProperty(\"name\")&&(n.name=e.name),null!=e.package&&e.hasOwnProperty(\"package\")&&(n.package=e.package),e.dependency&&e.dependency.length){n.dependency=[];for(var o=0;o<e.dependency.length;++o)n.dependency[o]=e.dependency[o]}if(e.messageType&&e.messageType.length){n.messageType=[];for(o=0;o<e.messageType.length;++o)n.messageType[o]=p.google.protobuf.DescriptorProto.toObject(e.messageType[o],t)}if(e.enumType&&e.enumType.length){n.enumType=[];for(o=0;o<e.enumType.length;++o)n.enumType[o]=p.google.protobuf.EnumDescriptorProto.toObject(e.enumType[o],t)}if(e.service&&e.service.length){n.service=[];for(o=0;o<e.service.length;++o)n.service[o]=p.google.protobuf.ServiceDescriptorProto.toObject(e.service[o],t)}if(e.extension&&e.extension.length){n.extension=[];for(o=0;o<e.extension.length;++o)n.extension[o]=p.google.protobuf.FieldDescriptorProto.toObject(e.extension[o],t)}if(null!=e.options&&e.hasOwnProperty(\"options\")&&(n.options=p.google.protobuf.FileOptions.toObject(e.options,t)),null!=e.sourceCodeInfo&&e.hasOwnProperty(\"sourceCodeInfo\")&&(n.sourceCodeInfo=p.google.protobuf.SourceCodeInfo.toObject(e.sourceCodeInfo,t)),e.publicDependency&&e.publicDependency.length){n.publicDependency=[];for(o=0;o<e.publicDependency.length;++o)n.publicDependency[o]=e.publicDependency[o]}if(e.weakDependency&&e.weakDependency.length){n.weakDependency=[];for(o=0;o<e.weakDependency.length;++o)n.weakDependency[o]=e.weakDependency[o]}return null!=e.syntax&&e.hasOwnProperty(\"syntax\")&&(n.syntax=e.syntax),n},h.prototype.toJSON=function(){return this.constructor.toObject(this,o.util.toJSONOptions)},h),t.DescriptorProto=(O.prototype.name=\"\",O.prototype.field=i.emptyArray,O.prototype.extension=i.emptyArray,O.prototype.nestedType=i.emptyArray,O.prototype.enumType=i.emptyArray,O.prototype.extensionRange=i.emptyArray,O.prototype.oneofDecl=i.emptyArray,O.prototype.options=null,O.prototype.reservedRange=i.emptyArray,O.prototype.reservedName=i.emptyArray,O.create=function(e){return new O(e)},O.encode=function(e,t){if(t=t||r.create(),null!=e.name&&Object.hasOwnProperty.call(e,\"name\")&&t.uint32(10).string(e.name),null!=e.field&&e.field.length)for(var n=0;n<e.field.length;++n)p.google.protobuf.FieldDescriptorProto.encode(e.field[n],t.uint32(18).fork()).ldelim();if(null!=e.nestedType&&e.nestedType.length)for(n=0;n<e.nestedType.length;++n)p.google.protobuf.DescriptorProto.encode(e.nestedType[n],t.uint32(26).fork()).ldelim();if(null!=e.enumType&&e.enumType.length)for(n=0;n<e.enumType.length;++n)p.google.protobuf.EnumDescriptorProto.encode(e.enumType[n],t.uint32(34).fork()).ldelim();if(null!=e.extensionRange&&e.extensionRange.length)for(n=0;n<e.extensionRange.length;++n)p.google.protobuf.DescriptorProto.ExtensionRange.encode(e.extensionRange[n],t.uint32(42).fork()).ldelim();if(null!=e.extension&&e.extension.length)for(n=0;n<e.extension.length;++n)p.google.protobuf.FieldDescriptorProto.encode(e.extension[n],t.uint32(50).fork()).ldelim();if(null!=e.options&&Object.hasOwnProperty.call(e,\"options\")&&p.google.protobuf.MessageOptions.encode(e.options,t.uint32(58).fork()).ldelim(),null!=e.oneofDecl&&e.oneofDecl.length)for(n=0;n<e.oneofDecl.length;++n)p.google.protobuf.OneofDescriptorProto.encode(e.oneofDecl[n],t.uint32(66).fork()).ldelim();if(null!=e.reservedRange&&e.reservedRange.length)for(n=0;n<e.reservedRange.length;++n)p.google.protobuf.DescriptorProto.ReservedRange.encode(e.reservedRange[n],t.uint32(74).fork()).ldelim();if(null!=e.reservedName&&e.reservedName.length)for(n=0;n<e.reservedName.length;++n)t.uint32(82).string(e.reservedName[n]);return t},O.encodeDelimited=function(e,t){return this.encode(e,t).ldelim()},O.decode=function(e,t){e instanceof a||(e=a.create(e));for(var n=void 0===t?e.len:e.pos+t,o=new p.google.protobuf.DescriptorProto;e.pos<n;){var r=e.uint32();switch(r>>>3){case 1:o.name=e.string();break;case 2:o.field&&o.field.length||(o.field=[]),o.field.push(p.google.protobuf.FieldDescriptorProto.decode(e,e.uint32()));break;case 6:o.extension&&o.extension.length||(o.extension=[]),o.extension.push(p.google.protobuf.FieldDescriptorProto.decode(e,e.uint32()));break;case 3:o.nestedType&&o.nestedType.length||(o.nestedType=[]),o.nestedType.push(p.google.protobuf.DescriptorProto.decode(e,e.uint32()));break;case 4:o.enumType&&o.enumType.length||(o.enumType=[]),o.enumType.push(p.google.protobuf.EnumDescriptorProto.decode(e,e.uint32()));break;case 5:o.extensionRange&&o.extensionRange.length||(o.extensionRange=[]),o.extensionRange.push(p.google.protobuf.DescriptorProto.ExtensionRange.decode(e,e.uint32()));break;case 8:o.oneofDecl&&o.oneofDecl.length||(o.oneofDecl=[]),o.oneofDecl.push(p.google.protobuf.OneofDescriptorProto.decode(e,e.uint32()));break;case 7:o.options=p.google.protobuf.MessageOptions.decode(e,e.uint32());break;case 9:o.reservedRange&&o.reservedRange.length||(o.reservedRange=[]),o.reservedRange.push(p.google.protobuf.DescriptorProto.ReservedRange.decode(e,e.uint32()));break;case 10:o.reservedName&&o.reservedName.length||(o.reservedName=[]),o.reservedName.push(e.string());break;default:e.skipType(7&r)}}return o},O.decodeDelimited=function(e){return e instanceof a||(e=new a(e)),this.decode(e,e.uint32())},O.verify=function(e){if(\"object\"!=typeof e||null===e)return\"object expected\";if(null!=e.name&&e.hasOwnProperty(\"name\")&&!i.isString(e.name))return\"name: string expected\";if(null!=e.field&&e.hasOwnProperty(\"field\")){if(!Array.isArray(e.field))return\"field: array expected\";for(var t=0;t<e.field.length;++t)if(n=p.google.protobuf.FieldDescriptorProto.verify(e.field[t]))return\"field.\"+n}if(null!=e.extension&&e.hasOwnProperty(\"extension\")){if(!Array.isArray(e.extension))return\"extension: array expected\";for(t=0;t<e.extension.length;++t)if(n=p.google.protobuf.FieldDescriptorProto.verify(e.extension[t]))return\"extension.\"+n}if(null!=e.nestedType&&e.hasOwnProperty(\"nestedType\")){if(!Array.isArray(e.nestedType))return\"nestedType: array expected\";for(t=0;t<e.nestedType.length;++t)if(n=p.google.protobuf.DescriptorProto.verify(e.nestedType[t]))return\"nestedType.\"+n}if(null!=e.enumType&&e.hasOwnProperty(\"enumType\")){if(!Array.isArray(e.enumType))return\"enumType: array expected\";for(t=0;t<e.enumType.length;++t)if(n=p.google.protobuf.EnumDescriptorProto.verify(e.enumType[t]))return\"enumType.\"+n}if(null!=e.extensionRange&&e.hasOwnProperty(\"extensionRange\")){if(!Array.isArray(e.extensionRange))return\"extensionRange: array expected\";for(t=0;t<e.extensionRange.length;++t)if(n=p.google.protobuf.DescriptorProto.ExtensionRange.verify(e.extensionRange[t]))return\"extensionRange.\"+n}if(null!=e.oneofDecl&&e.hasOwnProperty(\"oneofDecl\")){if(!Array.isArray(e.oneofDecl))return\"oneofDecl: array expected\";for(t=0;t<e.oneofDecl.length;++t)if(n=p.google.protobuf.OneofDescriptorProto.verify(e.oneofDecl[t]))return\"oneofDecl.\"+n}if(null!=e.options&&e.hasOwnProperty(\"options\")&&(n=p.google.protobuf.MessageOptions.verify(e.options)))return\"options.\"+n;if(null!=e.reservedRange&&e.hasOwnProperty(\"reservedRange\")){if(!Array.isArray(e.reservedRange))return\"reservedRange: array expected\";for(var n,t=0;t<e.reservedRange.length;++t)if(n=p.google.protobuf.DescriptorProto.ReservedRange.verify(e.reservedRange[t]))return\"reservedRange.\"+n}if(null!=e.reservedName&&e.hasOwnProperty(\"reservedName\")){if(!Array.isArray(e.reservedName))return\"reservedName: array expected\";for(t=0;t<e.reservedName.length;++t)if(!i.isString(e.reservedName[t]))return\"reservedName: string[] expected\"}return null},O.fromObject=function(e){if(e instanceof p.google.protobuf.DescriptorProto)return e;var t=new p.google.protobuf.DescriptorProto;if(null!=e.name&&(t.name=String(e.name)),e.field){if(!Array.isArray(e.field))throw TypeError(\".google.protobuf.DescriptorProto.field: array expected\");t.field=[];for(var n=0;n<e.field.length;++n){if(\"object\"!=typeof e.field[n])throw TypeError(\".google.protobuf.DescriptorProto.field: object expected\");t.field[n]=p.google.protobuf.FieldDescriptorProto.fromObject(e.field[n])}}if(e.extension){if(!Array.isArray(e.extension))throw TypeError(\".google.protobuf.DescriptorProto.extension: array expected\");t.extension=[];for(n=0;n<e.extension.length;++n){if(\"object\"!=typeof e.extension[n])throw TypeError(\".google.protobuf.DescriptorProto.extension: object expected\");t.extension[n]=p.google.protobuf.FieldDescriptorProto.fromObject(e.extension[n])}}if(e.nestedType){if(!Array.isArray(e.nestedType))throw TypeError(\".google.protobuf.DescriptorProto.nestedType: array expected\");t.nestedType=[];for(n=0;n<e.nestedType.length;++n){if(\"object\"!=typeof e.nestedType[n])throw TypeError(\".google.protobuf.DescriptorProto.nestedType: object expected\");t.nestedType[n]=p.google.protobuf.DescriptorProto.fromObject(e.nestedType[n])}}if(e.enumType){if(!Array.isArray(e.enumType))throw TypeError(\".google.protobuf.DescriptorProto.enumType: array expected\");t.enumType=[];for(n=0;n<e.enumType.length;++n){if(\"object\"!=typeof e.enumType[n])throw TypeError(\".google.protobuf.DescriptorProto.enumType: object expected\");t.enumType[n]=p.google.protobuf.EnumDescriptorProto.fromObject(e.enumType[n])}}if(e.extensionRange){if(!Array.isArray(e.extensionRange))throw TypeError(\".google.protobuf.DescriptorProto.extensionRange: array expected\");t.extensionRange=[];for(n=0;n<e.extensionRange.length;++n){if(\"object\"!=typeof e.extensionRange[n])throw TypeError(\".google.protobuf.DescriptorProto.extensionRange: object expected\");t.extensionRange[n]=p.google.protobuf.DescriptorProto.ExtensionRange.fromObject(e.extensionRange[n])}}if(e.oneofDecl){if(!Array.isArray(e.oneofDecl))throw TypeError(\".google.protobuf.DescriptorProto.oneofDecl: array expected\");t.oneofDecl=[];for(n=0;n<e.oneofDecl.length;++n){if(\"object\"!=typeof e.oneofDecl[n])throw TypeError(\".google.protobuf.DescriptorProto.oneofDecl: object expected\");t.oneofDecl[n]=p.google.protobuf.OneofDescriptorProto.fromObject(e.oneofDecl[n])}}if(null!=e.options){if(\"object\"!=typeof e.options)throw TypeError(\".google.protobuf.DescriptorProto.options: object expected\");t.options=p.google.protobuf.MessageOptions.fromObject(e.options)}if(e.reservedRange){if(!Array.isArray(e.reservedRange))throw TypeError(\".google.protobuf.DescriptorProto.reservedRange: array expected\");t.reservedRange=[];for(n=0;n<e.reservedRange.length;++n){if(\"object\"!=typeof e.reservedRange[n])throw TypeError(\".google.protobuf.DescriptorProto.reservedRange: object expected\");t.reservedRange[n]=p.google.protobuf.DescriptorProto.ReservedRange.fromObject(e.reservedRange[n])}}if(e.reservedName){if(!Array.isArray(e.reservedName))throw TypeError(\".google.protobuf.DescriptorProto.reservedName: array expected\");t.reservedName=[];for(n=0;n<e.reservedName.length;++n)t.reservedName[n]=String(e.reservedName[n])}return t},O.toObject=function(e,t){var n={};if(((t=t||{}).arrays||t.defaults)&&(n.field=[],n.nestedType=[],n.enumType=[],n.extensionRange=[],n.extension=[],n.oneofDecl=[],n.reservedRange=[],n.reservedName=[]),t.defaults&&(n.name=\"\",n.options=null),null!=e.name&&e.hasOwnProperty(\"name\")&&(n.name=e.name),e.field&&e.field.length){n.field=[];for(var o=0;o<e.field.length;++o)n.field[o]=p.google.protobuf.FieldDescriptorProto.toObject(e.field[o],t)}if(e.nestedType&&e.nestedType.length){n.nestedType=[];for(o=0;o<e.nestedType.length;++o)n.nestedType[o]=p.google.protobuf.DescriptorProto.toObject(e.nestedType[o],t)}if(e.enumType&&e.enumType.length){n.enumType=[];for(o=0;o<e.enumType.length;++o)n.enumType[o]=p.google.protobuf.EnumDescriptorProto.toObject(e.enumType[o],t)}if(e.extensionRange&&e.extensionRange.length){n.extensionRange=[];for(o=0;o<e.extensionRange.length;++o)n.extensionRange[o]=p.google.protobuf.DescriptorProto.ExtensionRange.toObject(e.extensionRange[o],t)}if(e.extension&&e.extension.length){n.extension=[];for(o=0;o<e.extension.length;++o)n.extension[o]=p.google.protobuf.FieldDescriptorProto.toObject(e.extension[o],t)}if(null!=e.options&&e.hasOwnProperty(\"options\")&&(n.options=p.google.protobuf.MessageOptions.toObject(e.options,t)),e.oneofDecl&&e.oneofDecl.length){n.oneofDecl=[];for(o=0;o<e.oneofDecl.length;++o)n.oneofDecl[o]=p.google.protobuf.OneofDescriptorProto.toObject(e.oneofDecl[o],t)}if(e.reservedRange&&e.reservedRange.length){n.reservedRange=[];for(o=0;o<e.reservedRange.length;++o)n.reservedRange[o]=p.google.protobuf.DescriptorProto.ReservedRange.toObject(e.reservedRange[o],t)}if(e.reservedName&&e.reservedName.length){n.reservedName=[];for(o=0;o<e.reservedName.length;++o)n.reservedName[o]=e.reservedName[o]}return n},O.prototype.toJSON=function(){return this.constructor.toObject(this,o.util.toJSONOptions)},O.ExtensionRange=(b.prototype.start=0,b.prototype.end=0,b.prototype.options=null,b.create=function(e){return new b(e)},b.encode=function(e,t){return t=t||r.create(),null!=e.start&&Object.hasOwnProperty.call(e,\"start\")&&t.uint32(8).int32(e.start),null!=e.end&&Object.hasOwnProperty.call(e,\"end\")&&t.uint32(16).int32(e.end),null!=e.options&&Object.hasOwnProperty.call(e,\"options\")&&p.google.protobuf.ExtensionRangeOptions.encode(e.options,t.uint32(26).fork()).ldelim(),t},b.encodeDelimited=function(e,t){return this.encode(e,t).ldelim()},b.decode=function(e,t){e instanceof a||(e=a.create(e));for(var n=void 0===t?e.len:e.pos+t,o=new p.google.protobuf.DescriptorProto.ExtensionRange;e.pos<n;){var r=e.uint32();switch(r>>>3){case 1:o.start=e.int32();break;case 2:o.end=e.int32();break;case 3:o.options=p.google.protobuf.ExtensionRangeOptions.decode(e,e.uint32());break;default:e.skipType(7&r)}}return o},b.decodeDelimited=function(e){return e instanceof a||(e=new a(e)),this.decode(e,e.uint32())},b.verify=function(e){if(\"object\"!=typeof e||null===e)return\"object expected\";if(null!=e.start&&e.hasOwnProperty(\"start\")&&!i.isInteger(e.start))return\"start: integer expected\";if(null!=e.end&&e.hasOwnProperty(\"end\")&&!i.isInteger(e.end))return\"end: integer expected\";if(null!=e.options&&e.hasOwnProperty(\"options\")){e=p.google.protobuf.ExtensionRangeOptions.verify(e.options);if(e)return\"options.\"+e}return null},b.fromObject=function(e){if(e instanceof p.google.protobuf.DescriptorProto.ExtensionRange)return e;var t=new p.google.protobuf.DescriptorProto.ExtensionRange;if(null!=e.start&&(t.start=0|e.start),null!=e.end&&(t.end=0|e.end),null!=e.options){if(\"object\"!=typeof e.options)throw TypeError(\".google.protobuf.DescriptorProto.ExtensionRange.options: object expected\");t.options=p.google.protobuf.ExtensionRangeOptions.fromObject(e.options)}return t},b.toObject=function(e,t){var n={};return(t=t||{}).defaults&&(n.start=0,n.end=0,n.options=null),null!=e.start&&e.hasOwnProperty(\"start\")&&(n.start=e.start),null!=e.end&&e.hasOwnProperty(\"end\")&&(n.end=e.end),null!=e.options&&e.hasOwnProperty(\"options\")&&(n.options=p.google.protobuf.ExtensionRangeOptions.toObject(e.options,t)),n},b.prototype.toJSON=function(){return this.constructor.toObject(this,o.util.toJSONOptions)},b),O.ReservedRange=(m.prototype.start=0,m.prototype.end=0,m.create=function(e){return new m(e)},m.encode=function(e,t){return t=t||r.create(),null!=e.start&&Object.hasOwnProperty.call(e,\"start\")&&t.uint32(8).int32(e.start),null!=e.end&&Object.hasOwnProperty.call(e,\"end\")&&t.uint32(16).int32(e.end),t},m.encodeDelimited=function(e,t){return this.encode(e,t).ldelim()},m.decode=function(e,t){e instanceof a||(e=a.create(e));for(var n=void 0===t?e.len:e.pos+t,o=new p.google.protobuf.DescriptorProto.ReservedRange;e.pos<n;){var r=e.uint32();switch(r>>>3){case 1:o.start=e.int32();break;case 2:o.end=e.int32();break;default:e.skipType(7&r)}}return o},m.decodeDelimited=function(e){return e instanceof a||(e=new a(e)),this.decode(e,e.uint32())},m.verify=function(e){return\"object\"!=typeof e||null===e?\"object expected\":null!=e.start&&e.hasOwnProperty(\"start\")&&!i.isInteger(e.start)?\"start: integer expected\":null!=e.end&&e.hasOwnProperty(\"end\")&&!i.isInteger(e.end)?\"end: integer expected\":null},m.fromObject=function(e){var t;return e instanceof p.google.protobuf.DescriptorProto.ReservedRange?e:(t=new p.google.protobuf.DescriptorProto.ReservedRange,null!=e.start&&(t.start=0|e.start),null!=e.end&&(t.end=0|e.end),t)},m.toObject=function(e,t){var n={};return(t=t||{}).defaults&&(n.start=0,n.end=0),null!=e.start&&e.hasOwnProperty(\"start\")&&(n.start=e.start),null!=e.end&&e.hasOwnProperty(\"end\")&&(n.end=e.end),n},m.prototype.toJSON=function(){return this.constructor.toObject(this,o.util.toJSONOptions)},m),O),t.ExtensionRangeOptions=(M.prototype.uninterpretedOption=i.emptyArray,M.create=function(e){return new M(e)},M.encode=function(e,t){if(t=t||r.create(),null!=e.uninterpretedOption&&e.uninterpretedOption.length)for(var n=0;n<e.uninterpretedOption.length;++n)p.google.protobuf.UninterpretedOption.encode(e.uninterpretedOption[n],t.uint32(7994).fork()).ldelim();return t},M.encodeDelimited=function(e,t){return this.encode(e,t).ldelim()},M.decode=function(e,t){e instanceof a||(e=a.create(e));for(var n=void 0===t?e.len:e.pos+t,o=new p.google.protobuf.ExtensionRangeOptions;e.pos<n;){var r=e.uint32();r>>>3==999?(o.uninterpretedOption&&o.uninterpretedOption.length||(o.uninterpretedOption=[]),o.uninterpretedOption.push(p.google.protobuf.UninterpretedOption.decode(e,e.uint32()))):e.skipType(7&r)}return o},M.decodeDelimited=function(e){return e instanceof a||(e=new a(e)),this.decode(e,e.uint32())},M.verify=function(e){if(\"object\"!=typeof e||null===e)return\"object expected\";if(null!=e.uninterpretedOption&&e.hasOwnProperty(\"uninterpretedOption\")){if(!Array.isArray(e.uninterpretedOption))return\"uninterpretedOption: array expected\";for(var t=0;t<e.uninterpretedOption.length;++t){var n=p.google.protobuf.UninterpretedOption.verify(e.uninterpretedOption[t]);if(n)return\"uninterpretedOption.\"+n}}return null},M.fromObject=function(e){if(e instanceof p.google.protobuf.ExtensionRangeOptions)return e;var t=new p.google.protobuf.ExtensionRangeOptions;if(e.uninterpretedOption){if(!Array.isArray(e.uninterpretedOption))throw TypeError(\".google.protobuf.ExtensionRangeOptions.uninterpretedOption: array expected\");t.uninterpretedOption=[];for(var n=0;n<e.uninterpretedOption.length;++n){if(\"object\"!=typeof e.uninterpretedOption[n])throw TypeError(\".google.protobuf.ExtensionRangeOptions.uninterpretedOption: object expected\");t.uninterpretedOption[n]=p.google.protobuf.UninterpretedOption.fromObject(e.uninterpretedOption[n])}}return t},M.toObject=function(e,t){var n={};if(((t=t||{}).arrays||t.defaults)&&(n.uninterpretedOption=[]),e.uninterpretedOption&&e.uninterpretedOption.length){n.uninterpretedOption=[];for(var o=0;o<e.uninterpretedOption.length;++o)n.uninterpretedOption[o]=p.google.protobuf.UninterpretedOption.toObject(e.uninterpretedOption[o],t)}return n},M.prototype.toJSON=function(){return this.constructor.toObject(this,o.util.toJSONOptions)},M),t.FieldDescriptorProto=(v.prototype.name=\"\",v.prototype.number=0,v.prototype.label=1,v.prototype.type=1,v.prototype.typeName=\"\",v.prototype.extendee=\"\",v.prototype.defaultValue=\"\",v.prototype.oneofIndex=0,v.prototype.jsonName=\"\",v.prototype.options=null,v.prototype.proto3Optional=!1,v.create=function(e){return new v(e)},v.encode=function(e,t){return t=t||r.create(),null!=e.name&&Object.hasOwnProperty.call(e,\"name\")&&t.uint32(10).string(e.name),null!=e.extendee&&Object.hasOwnProperty.call(e,\"extendee\")&&t.uint32(18).string(e.extendee),null!=e.number&&Object.hasOwnProperty.call(e,\"number\")&&t.uint32(24).int32(e.number),null!=e.label&&Object.hasOwnProperty.call(e,\"label\")&&t.uint32(32).int32(e.label),null!=e.type&&Object.hasOwnProperty.call(e,\"type\")&&t.uint32(40).int32(e.type),null!=e.typeName&&Object.hasOwnProperty.call(e,\"typeName\")&&t.uint32(50).string(e.typeName),null!=e.defaultValue&&Object.hasOwnProperty.call(e,\"defaultValue\")&&t.uint32(58).string(e.defaultValue),null!=e.options&&Object.hasOwnProperty.call(e,\"options\")&&p.google.protobuf.FieldOptions.encode(e.options,t.uint32(66).fork()).ldelim(),null!=e.oneofIndex&&Object.hasOwnProperty.call(e,\"oneofIndex\")&&t.uint32(72).int32(e.oneofIndex),null!=e.jsonName&&Object.hasOwnProperty.call(e,\"jsonName\")&&t.uint32(82).string(e.jsonName),null!=e.proto3Optional&&Object.hasOwnProperty.call(e,\"proto3Optional\")&&t.uint32(136).bool(e.proto3Optional),t},v.encodeDelimited=function(e,t){return this.encode(e,t).ldelim()},v.decode=function(e,t){e instanceof a||(e=a.create(e));for(var n=void 0===t?e.len:e.pos+t,o=new p.google.protobuf.FieldDescriptorProto;e.pos<n;){var r=e.uint32();switch(r>>>3){case 1:o.name=e.string();break;case 3:o.number=e.int32();break;case 4:o.label=e.int32();break;case 5:o.type=e.int32();break;case 6:o.typeName=e.string();break;case 2:o.extendee=e.string();break;case 7:o.defaultValue=e.string();break;case 9:o.oneofIndex=e.int32();break;case 10:o.jsonName=e.string();break;case 8:o.options=p.google.protobuf.FieldOptions.decode(e,e.uint32());break;case 17:o.proto3Optional=e.bool();break;default:e.skipType(7&r)}}return o},v.decodeDelimited=function(e){return e instanceof a||(e=new a(e)),this.decode(e,e.uint32())},v.verify=function(e){if(\"object\"!=typeof e||null===e)return\"object expected\";if(null!=e.name&&e.hasOwnProperty(\"name\")&&!i.isString(e.name))return\"name: string expected\";if(null!=e.number&&e.hasOwnProperty(\"number\")&&!i.isInteger(e.number))return\"number: integer expected\";if(null!=e.label&&e.hasOwnProperty(\"label\"))switch(e.label){default:return\"label: enum value expected\";case 1:case 2:case 3:}if(null!=e.type&&e.hasOwnProperty(\"type\"))switch(e.type){default:return\"type: enum value expected\";case 1:case 2:case 3:case 4:case 5:case 6:case 7:case 8:case 9:case 10:case 11:case 12:case 13:case 14:case 15:case 16:case 17:case 18:}if(null!=e.typeName&&e.hasOwnProperty(\"typeName\")&&!i.isString(e.typeName))return\"typeName: string expected\";if(null!=e.extendee&&e.hasOwnProperty(\"extendee\")&&!i.isString(e.extendee))return\"extendee: string expected\";if(null!=e.defaultValue&&e.hasOwnProperty(\"defaultValue\")&&!i.isString(e.defaultValue))return\"defaultValue: string expected\";if(null!=e.oneofIndex&&e.hasOwnProperty(\"oneofIndex\")&&!i.isInteger(e.oneofIndex))return\"oneofIndex: integer expected\";if(null!=e.jsonName&&e.hasOwnProperty(\"jsonName\")&&!i.isString(e.jsonName))return\"jsonName: string expected\";if(null!=e.options&&e.hasOwnProperty(\"options\")){var t=p.google.protobuf.FieldOptions.verify(e.options);if(t)return\"options.\"+t}return null!=e.proto3Optional&&e.hasOwnProperty(\"proto3Optional\")&&\"boolean\"!=typeof e.proto3Optional?\"proto3Optional: boolean expected\":null},v.fromObject=function(e){if(e instanceof p.google.protobuf.FieldDescriptorProto)return e;var t=new p.google.protobuf.FieldDescriptorProto;switch(null!=e.name&&(t.name=String(e.name)),null!=e.number&&(t.number=0|e.number),e.label){case\"LABEL_OPTIONAL\":case 1:t.label=1;break;case\"LABEL_REQUIRED\":case 2:t.label=2;break;case\"LABEL_REPEATED\":case 3:t.label=3}switch(e.type){case\"TYPE_DOUBLE\":case 1:t.type=1;break;case\"TYPE_FLOAT\":case 2:t.type=2;break;case\"TYPE_INT64\":case 3:t.type=3;break;case\"TYPE_UINT64\":case 4:t.type=4;break;case\"TYPE_INT32\":case 5:t.type=5;break;case\"TYPE_FIXED64\":case 6:t.type=6;break;case\"TYPE_FIXED32\":case 7:t.type=7;break;case\"TYPE_BOOL\":case 8:t.type=8;break;case\"TYPE_STRING\":case 9:t.type=9;break;case\"TYPE_GROUP\":case 10:t.type=10;break;case\"TYPE_MESSAGE\":case 11:t.type=11;break;case\"TYPE_BYTES\":case 12:t.type=12;break;case\"TYPE_UINT32\":case 13:t.type=13;break;case\"TYPE_ENUM\":case 14:t.type=14;break;case\"TYPE_SFIXED32\":case 15:t.type=15;break;case\"TYPE_SFIXED64\":case 16:t.type=16;break;case\"TYPE_SINT32\":case 17:t.type=17;break;case\"TYPE_SINT64\":case 18:t.type=18}if(null!=e.typeName&&(t.typeName=String(e.typeName)),null!=e.extendee&&(t.extendee=String(e.extendee)),null!=e.defaultValue&&(t.defaultValue=String(e.defaultValue)),null!=e.oneofIndex&&(t.oneofIndex=0|e.oneofIndex),null!=e.jsonName&&(t.jsonName=String(e.jsonName)),null!=e.options){if(\"object\"!=typeof e.options)throw TypeError(\".google.protobuf.FieldDescriptorProto.options: object expected\");t.options=p.google.protobuf.FieldOptions.fromObject(e.options)}return null!=e.proto3Optional&&(t.proto3Optional=Boolean(e.proto3Optional)),t},v.toObject=function(e,t){var n={};return(t=t||{}).defaults&&(n.name=\"\",n.extendee=\"\",n.number=0,n.label=t.enums===String?\"LABEL_OPTIONAL\":1,n.type=t.enums===String?\"TYPE_DOUBLE\":1,n.typeName=\"\",n.defaultValue=\"\",n.options=null,n.oneofIndex=0,n.jsonName=\"\",n.proto3Optional=!1),null!=e.name&&e.hasOwnProperty(\"name\")&&(n.name=e.name),null!=e.extendee&&e.hasOwnProperty(\"extendee\")&&(n.extendee=e.extendee),null!=e.number&&e.hasOwnProperty(\"number\")&&(n.number=e.number),null!=e.label&&e.hasOwnProperty(\"label\")&&(n.label=t.enums===String?p.google.protobuf.FieldDescriptorProto.Label[e.label]:e.label),null!=e.type&&e.hasOwnProperty(\"type\")&&(n.type=t.enums===String?p.google.protobuf.FieldDescriptorProto.Type[e.type]:e.type),null!=e.typeName&&e.hasOwnProperty(\"typeName\")&&(n.typeName=e.typeName),null!=e.defaultValue&&e.hasOwnProperty(\"defaultValue\")&&(n.defaultValue=e.defaultValue),null!=e.options&&e.hasOwnProperty(\"options\")&&(n.options=p.google.protobuf.FieldOptions.toObject(e.options,t)),null!=e.oneofIndex&&e.hasOwnProperty(\"oneofIndex\")&&(n.oneofIndex=e.oneofIndex),null!=e.jsonName&&e.hasOwnProperty(\"jsonName\")&&(n.jsonName=e.jsonName),null!=e.proto3Optional&&e.hasOwnProperty(\"proto3Optional\")&&(n.proto3Optional=e.proto3Optional),n},v.prototype.toJSON=function(){return this.constructor.toObject(this,o.util.toJSONOptions)},v.Type=(n={},(e=Object.create(n))[n[1]=\"TYPE_DOUBLE\"]=1,e[n[2]=\"TYPE_FLOAT\"]=2,e[n[3]=\"TYPE_INT64\"]=3,e[n[4]=\"TYPE_UINT64\"]=4,e[n[5]=\"TYPE_INT32\"]=5,e[n[6]=\"TYPE_FIXED64\"]=6,e[n[7]=\"TYPE_FIXED32\"]=7,e[n[8]=\"TYPE_BOOL\"]=8,e[n[9]=\"TYPE_STRING\"]=9,e[n[10]=\"TYPE_GROUP\"]=10,e[n[11]=\"TYPE_MESSAGE\"]=11,e[n[12]=\"TYPE_BYTES\"]=12,e[n[13]=\"TYPE_UINT32\"]=13,e[n[14]=\"TYPE_ENUM\"]=14,e[n[15]=\"TYPE_SFIXED32\"]=15,e[n[16]=\"TYPE_SFIXED64\"]=16,e[n[17]=\"TYPE_SINT32\"]=17,e[n[18]=\"TYPE_SINT64\"]=18,e),v.Label=(n={},(e=Object.create(n))[n[1]=\"LABEL_OPTIONAL\"]=1,e[n[2]=\"LABEL_REQUIRED\"]=2,e[n[3]=\"LABEL_REPEATED\"]=3,e),v),t.OneofDescriptorProto=(w.prototype.name=\"\",w.prototype.options=null,w.create=function(e){return new w(e)},w.encode=function(e,t){return t=t||r.create(),null!=e.name&&Object.hasOwnProperty.call(e,\"name\")&&t.uint32(10).string(e.name),null!=e.options&&Object.hasOwnProperty.call(e,\"options\")&&p.google.protobuf.OneofOptions.encode(e.options,t.uint32(18).fork()).ldelim(),t},w.encodeDelimited=function(e,t){return this.encode(e,t).ldelim()},w.decode=function(e,t){e instanceof a||(e=a.create(e));for(var n=void 0===t?e.len:e.pos+t,o=new p.google.protobuf.OneofDescriptorProto;e.pos<n;){var r=e.uint32();switch(r>>>3){case 1:o.name=e.string();break;case 2:o.options=p.google.protobuf.OneofOptions.decode(e,e.uint32());break;default:e.skipType(7&r)}}return o},w.decodeDelimited=function(e){return e instanceof a||(e=new a(e)),this.decode(e,e.uint32())},w.verify=function(e){if(\"object\"!=typeof e||null===e)return\"object expected\";if(null!=e.name&&e.hasOwnProperty(\"name\")&&!i.isString(e.name))return\"name: string expected\";if(null!=e.options&&e.hasOwnProperty(\"options\")){e=p.google.protobuf.OneofOptions.verify(e.options);if(e)return\"options.\"+e}return null},w.fromObject=function(e){if(e instanceof p.google.protobuf.OneofDescriptorProto)return e;var t=new p.google.protobuf.OneofDescriptorProto;if(null!=e.name&&(t.name=String(e.name)),null!=e.options){if(\"object\"!=typeof e.options)throw TypeError(\".google.protobuf.OneofDescriptorProto.options: object expected\");t.options=p.google.protobuf.OneofOptions.fromObject(e.options)}return t},w.toObject=function(e,t){var n={};return(t=t||{}).defaults&&(n.name=\"\",n.options=null),null!=e.name&&e.hasOwnProperty(\"name\")&&(n.name=e.name),null!=e.options&&e.hasOwnProperty(\"options\")&&(n.options=p.google.protobuf.OneofOptions.toObject(e.options,t)),n},w.prototype.toJSON=function(){return this.constructor.toObject(this,o.util.toJSONOptions)},w),t.EnumDescriptorProto=(P.prototype.name=\"\",P.prototype.value=i.emptyArray,P.prototype.options=null,P.prototype.reservedRange=i.emptyArray,P.prototype.reservedName=i.emptyArray,P.create=function(e){return new P(e)},P.encode=function(e,t){if(t=t||r.create(),null!=e.name&&Object.hasOwnProperty.call(e,\"name\")&&t.uint32(10).string(e.name),null!=e.value&&e.value.length)for(var n=0;n<e.value.length;++n)p.google.protobuf.EnumValueDescriptorProto.encode(e.value[n],t.uint32(18).fork()).ldelim();if(null!=e.options&&Object.hasOwnProperty.call(e,\"options\")&&p.google.protobuf.EnumOptions.encode(e.options,t.uint32(26).fork()).ldelim(),null!=e.reservedRange&&e.reservedRange.length)for(n=0;n<e.reservedRange.length;++n)p.google.protobuf.EnumDescriptorProto.EnumReservedRange.encode(e.reservedRange[n],t.uint32(34).fork()).ldelim();if(null!=e.reservedName&&e.reservedName.length)for(n=0;n<e.reservedName.length;++n)t.uint32(42).string(e.reservedName[n]);return t},P.encodeDelimited=function(e,t){return this.encode(e,t).ldelim()},P.decode=function(e,t){e instanceof a||(e=a.create(e));for(var n=void 0===t?e.len:e.pos+t,o=new p.google.protobuf.EnumDescriptorProto;e.pos<n;){var r=e.uint32();switch(r>>>3){case 1:o.name=e.string();break;case 2:o.value&&o.value.length||(o.value=[]),o.value.push(p.google.protobuf.EnumValueDescriptorProto.decode(e,e.uint32()));break;case 3:o.options=p.google.protobuf.EnumOptions.decode(e,e.uint32());break;case 4:o.reservedRange&&o.reservedRange.length||(o.reservedRange=[]),o.reservedRange.push(p.google.protobuf.EnumDescriptorProto.EnumReservedRange.decode(e,e.uint32()));break;case 5:o.reservedName&&o.reservedName.length||(o.reservedName=[]),o.reservedName.push(e.string());break;default:e.skipType(7&r)}}return o},P.decodeDelimited=function(e){return e instanceof a||(e=new a(e)),this.decode(e,e.uint32())},P.verify=function(e){if(\"object\"!=typeof e||null===e)return\"object expected\";if(null!=e.name&&e.hasOwnProperty(\"name\")&&!i.isString(e.name))return\"name: string expected\";if(null!=e.value&&e.hasOwnProperty(\"value\")){if(!Array.isArray(e.value))return\"value: array expected\";for(var t=0;t<e.value.length;++t)if(n=p.google.protobuf.EnumValueDescriptorProto.verify(e.value[t]))return\"value.\"+n}if(null!=e.options&&e.hasOwnProperty(\"options\")&&(n=p.google.protobuf.EnumOptions.verify(e.options)))return\"options.\"+n;if(null!=e.reservedRange&&e.hasOwnProperty(\"reservedRange\")){if(!Array.isArray(e.reservedRange))return\"reservedRange: array expected\";for(var n,t=0;t<e.reservedRange.length;++t)if(n=p.google.protobuf.EnumDescriptorProto.EnumReservedRange.verify(e.reservedRange[t]))return\"reservedRange.\"+n}if(null!=e.reservedName&&e.hasOwnProperty(\"reservedName\")){if(!Array.isArray(e.reservedName))return\"reservedName: array expected\";for(t=0;t<e.reservedName.length;++t)if(!i.isString(e.reservedName[t]))return\"reservedName: string[] expected\"}return null},P.fromObject=function(e){if(e instanceof p.google.protobuf.EnumDescriptorProto)return e;var t=new p.google.protobuf.EnumDescriptorProto;if(null!=e.name&&(t.name=String(e.name)),e.value){if(!Array.isArray(e.value))throw TypeError(\".google.protobuf.EnumDescriptorProto.value: array expected\");t.value=[];for(var n=0;n<e.value.length;++n){if(\"object\"!=typeof e.value[n])throw TypeError(\".google.protobuf.EnumDescriptorProto.value: object expected\");t.value[n]=p.google.protobuf.EnumValueDescriptorProto.fromObject(e.value[n])}}if(null!=e.options){if(\"object\"!=typeof e.options)throw TypeError(\".google.protobuf.EnumDescriptorProto.options: object expected\");t.options=p.google.protobuf.EnumOptions.fromObject(e.options)}if(e.reservedRange){if(!Array.isArray(e.reservedRange))throw TypeError(\".google.protobuf.EnumDescriptorProto.reservedRange: array expected\");t.reservedRange=[];for(n=0;n<e.reservedRange.length;++n){if(\"object\"!=typeof e.reservedRange[n])throw TypeError(\".google.protobuf.EnumDescriptorProto.reservedRange: object expected\");t.reservedRange[n]=p.google.protobuf.EnumDescriptorProto.EnumReservedRange.fromObject(e.reservedRange[n])}}if(e.reservedName){if(!Array.isArray(e.reservedName))throw TypeError(\".google.protobuf.EnumDescriptorProto.reservedName: array expected\");t.reservedName=[];for(n=0;n<e.reservedName.length;++n)t.reservedName[n]=String(e.reservedName[n])}return t},P.toObject=function(e,t){var n={};if(((t=t||{}).arrays||t.defaults)&&(n.value=[],n.reservedRange=[],n.reservedName=[]),t.defaults&&(n.name=\"\",n.options=null),null!=e.name&&e.hasOwnProperty(\"name\")&&(n.name=e.name),e.value&&e.value.length){n.value=[];for(var o=0;o<e.value.length;++o)n.value[o]=p.google.protobuf.EnumValueDescriptorProto.toObject(e.value[o],t)}if(null!=e.options&&e.hasOwnProperty(\"options\")&&(n.options=p.google.protobuf.EnumOptions.toObject(e.options,t)),e.reservedRange&&e.reservedRange.length){n.reservedRange=[];for(o=0;o<e.reservedRange.length;++o)n.reservedRange[o]=p.google.protobuf.EnumDescriptorProto.EnumReservedRange.toObject(e.reservedRange[o],t)}if(e.reservedName&&e.reservedName.length){n.reservedName=[];for(o=0;o<e.reservedName.length;++o)n.reservedName[o]=e.reservedName[o]}return n},P.prototype.toJSON=function(){return this.constructor.toObject(this,o.util.toJSONOptions)},P.EnumReservedRange=(_.prototype.start=0,_.prototype.end=0,_.create=function(e){return new _(e)},_.encode=function(e,t){return t=t||r.create(),null!=e.start&&Object.hasOwnProperty.call(e,\"start\")&&t.uint32(8).int32(e.start),null!=e.end&&Object.hasOwnProperty.call(e,\"end\")&&t.uint32(16).int32(e.end),t},_.encodeDelimited=function(e,t){return this.encode(e,t).ldelim()},_.decode=function(e,t){e instanceof a||(e=a.create(e));for(var n=void 0===t?e.len:e.pos+t,o=new p.google.protobuf.EnumDescriptorProto.EnumReservedRange;e.pos<n;){var r=e.uint32();switch(r>>>3){case 1:o.start=e.int32();break;case 2:o.end=e.int32();break;default:e.skipType(7&r)}}return o},_.decodeDelimited=function(e){return e instanceof a||(e=new a(e)),this.decode(e,e.uint32())},_.verify=function(e){return\"object\"!=typeof e||null===e?\"object expected\":null!=e.start&&e.hasOwnProperty(\"start\")&&!i.isInteger(e.start)?\"start: integer expected\":null!=e.end&&e.hasOwnProperty(\"end\")&&!i.isInteger(e.end)?\"end: integer expected\":null},_.fromObject=function(e){var t;return e instanceof p.google.protobuf.EnumDescriptorProto.EnumReservedRange?e:(t=new p.google.protobuf.EnumDescriptorProto.EnumReservedRange,null!=e.start&&(t.start=0|e.start),null!=e.end&&(t.end=0|e.end),t)},_.toObject=function(e,t){var n={};return(t=t||{}).defaults&&(n.start=0,n.end=0),null!=e.start&&e.hasOwnProperty(\"start\")&&(n.start=e.start),null!=e.end&&e.hasOwnProperty(\"end\")&&(n.end=e.end),n},_.prototype.toJSON=function(){return this.constructor.toObject(this,o.util.toJSONOptions)},_),P),t.EnumValueDescriptorProto=(j.prototype.name=\"\",j.prototype.number=0,j.prototype.options=null,j.create=function(e){return new j(e)},j.encode=function(e,t){return t=t||r.create(),null!=e.name&&Object.hasOwnProperty.call(e,\"name\")&&t.uint32(10).string(e.name),null!=e.number&&Object.hasOwnProperty.call(e,\"number\")&&t.uint32(16).int32(e.number),null!=e.options&&Object.hasOwnProperty.call(e,\"options\")&&p.google.protobuf.EnumValueOptions.encode(e.options,t.uint32(26).fork()).ldelim(),t},j.encodeDelimited=function(e,t){return this.encode(e,t).ldelim()},j.decode=function(e,t){e instanceof a||(e=a.create(e));for(var n=void 0===t?e.len:e.pos+t,o=new p.google.protobuf.EnumValueDescriptorProto;e.pos<n;){var r=e.uint32();switch(r>>>3){case 1:o.name=e.string();break;case 2:o.number=e.int32();break;case 3:o.options=p.google.protobuf.EnumValueOptions.decode(e,e.uint32());break;default:e.skipType(7&r)}}return o},j.decodeDelimited=function(e){return e instanceof a||(e=new a(e)),this.decode(e,e.uint32())},j.verify=function(e){if(\"object\"!=typeof e||null===e)return\"object expected\";if(null!=e.name&&e.hasOwnProperty(\"name\")&&!i.isString(e.name))return\"name: string expected\";if(null!=e.number&&e.hasOwnProperty(\"number\")&&!i.isInteger(e.number))return\"number: integer expected\";if(null!=e.options&&e.hasOwnProperty(\"options\")){e=p.google.protobuf.EnumValueOptions.verify(e.options);if(e)return\"options.\"+e}return null},j.fromObject=function(e){if(e instanceof p.google.protobuf.EnumValueDescriptorProto)return e;var t=new p.google.protobuf.EnumValueDescriptorProto;if(null!=e.name&&(t.name=String(e.name)),null!=e.number&&(t.number=0|e.number),null!=e.options){if(\"object\"!=typeof e.options)throw TypeError(\".google.protobuf.EnumValueDescriptorProto.options: object expected\");t.options=p.google.protobuf.EnumValueOptions.fromObject(e.options)}return t},j.toObject=function(e,t){var n={};return(t=t||{}).defaults&&(n.name=\"\",n.number=0,n.options=null),null!=e.name&&e.hasOwnProperty(\"name\")&&(n.name=e.name),null!=e.number&&e.hasOwnProperty(\"number\")&&(n.number=e.number),null!=e.options&&e.hasOwnProperty(\"options\")&&(n.options=p.google.protobuf.EnumValueOptions.toObject(e.options,t)),n},j.prototype.toJSON=function(){return this.constructor.toObject(this,o.util.toJSONOptions)},j),t.ServiceDescriptorProto=(S.prototype.name=\"\",S.prototype.method=i.emptyArray,S.prototype.options=null,S.create=function(e){return new S(e)},S.encode=function(e,t){if(t=t||r.create(),null!=e.name&&Object.hasOwnProperty.call(e,\"name\")&&t.uint32(10).string(e.name),null!=e.method&&e.method.length)for(var n=0;n<e.method.length;++n)p.google.protobuf.MethodDescriptorProto.encode(e.method[n],t.uint32(18).fork()).ldelim();return null!=e.options&&Object.hasOwnProperty.call(e,\"options\")&&p.google.protobuf.ServiceOptions.encode(e.options,t.uint32(26).fork()).ldelim(),t},S.encodeDelimited=function(e,t){return this.encode(e,t).ldelim()},S.decode=function(e,t){e instanceof a||(e=a.create(e));for(var n=void 0===t?e.len:e.pos+t,o=new p.google.protobuf.ServiceDescriptorProto;e.pos<n;){var r=e.uint32();switch(r>>>3){case 1:o.name=e.string();break;case 2:o.method&&o.method.length||(o.method=[]),o.method.push(p.google.protobuf.MethodDescriptorProto.decode(e,e.uint32()));break;case 3:o.options=p.google.protobuf.ServiceOptions.decode(e,e.uint32());break;default:e.skipType(7&r)}}return o},S.decodeDelimited=function(e){return e instanceof a||(e=new a(e)),this.decode(e,e.uint32())},S.verify=function(e){if(\"object\"!=typeof e||null===e)return\"object expected\";if(null!=e.name&&e.hasOwnProperty(\"name\")&&!i.isString(e.name))return\"name: string expected\";if(null!=e.method&&e.hasOwnProperty(\"method\")){if(!Array.isArray(e.method))return\"method: array expected\";for(var t=0;t<e.method.length;++t)if(n=p.google.protobuf.MethodDescriptorProto.verify(e.method[t]))return\"method.\"+n}var n;if(null!=e.options&&e.hasOwnProperty(\"options\")&&(n=p.google.protobuf.ServiceOptions.verify(e.options)))return\"options.\"+n;return null},S.fromObject=function(e){if(e instanceof p.google.protobuf.ServiceDescriptorProto)return e;var t=new p.google.protobuf.ServiceDescriptorProto;if(null!=e.name&&(t.name=String(e.name)),e.method){if(!Array.isArray(e.method))throw TypeError(\".google.protobuf.ServiceDescriptorProto.method: array expected\");t.method=[];for(var n=0;n<e.method.length;++n){if(\"object\"!=typeof e.method[n])throw TypeError(\".google.protobuf.ServiceDescriptorProto.method: object expected\");t.method[n]=p.google.protobuf.MethodDescriptorProto.fromObject(e.method[n])}}if(null!=e.options){if(\"object\"!=typeof e.options)throw TypeError(\".google.protobuf.ServiceDescriptorProto.options: object expected\");t.options=p.google.protobuf.ServiceOptions.fromObject(e.options)}return t},S.toObject=function(e,t){var n={};if(((t=t||{}).arrays||t.defaults)&&(n.method=[]),t.defaults&&(n.name=\"\",n.options=null),null!=e.name&&e.hasOwnProperty(\"name\")&&(n.name=e.name),e.method&&e.method.length){n.method=[];for(var o=0;o<e.method.length;++o)n.method[o]=p.google.protobuf.MethodDescriptorProto.toObject(e.method[o],t)}return null!=e.options&&e.hasOwnProperty(\"options\")&&(n.options=p.google.protobuf.ServiceOptions.toObject(e.options,t)),n},S.prototype.toJSON=function(){return this.constructor.toObject(this,o.util.toJSONOptions)},S),t.MethodDescriptorProto=(x.prototype.name=\"\",x.prototype.inputType=\"\",x.prototype.outputType=\"\",x.prototype.options=null,x.prototype.clientStreaming=!1,x.prototype.serverStreaming=!1,x.create=function(e){return new x(e)},x.encode=function(e,t){return t=t||r.create(),null!=e.name&&Object.hasOwnProperty.call(e,\"name\")&&t.uint32(10).string(e.name),null!=e.inputType&&Object.hasOwnProperty.call(e,\"inputType\")&&t.uint32(18).string(e.inputType),null!=e.outputType&&Object.hasOwnProperty.call(e,\"outputType\")&&t.uint32(26).string(e.outputType),null!=e.options&&Object.hasOwnProperty.call(e,\"options\")&&p.google.protobuf.MethodOptions.encode(e.options,t.uint32(34).fork()).ldelim(),null!=e.clientStreaming&&Object.hasOwnProperty.call(e,\"clientStreaming\")&&t.uint32(40).bool(e.clientStreaming),null!=e.serverStreaming&&Object.hasOwnProperty.call(e,\"serverStreaming\")&&t.uint32(48).bool(e.serverStreaming),t},x.encodeDelimited=function(e,t){return this.encode(e,t).ldelim()},x.decode=function(e,t){e instanceof a||(e=a.create(e));for(var n=void 0===t?e.len:e.pos+t,o=new p.google.protobuf.MethodDescriptorProto;e.pos<n;){var r=e.uint32();switch(r>>>3){case 1:o.name=e.string();break;case 2:o.inputType=e.string();break;case 3:o.outputType=e.string();break;case 4:o.options=p.google.protobuf.MethodOptions.decode(e,e.uint32());break;case 5:o.clientStreaming=e.bool();break;case 6:o.serverStreaming=e.bool();break;default:e.skipType(7&r)}}return o},x.decodeDelimited=function(e){return e instanceof a||(e=new a(e)),this.decode(e,e.uint32())},x.verify=function(e){if(\"object\"!=typeof e||null===e)return\"object expected\";if(null!=e.name&&e.hasOwnProperty(\"name\")&&!i.isString(e.name))return\"name: string expected\";if(null!=e.inputType&&e.hasOwnProperty(\"inputType\")&&!i.isString(e.inputType))return\"inputType: string expected\";if(null!=e.outputType&&e.hasOwnProperty(\"outputType\")&&!i.isString(e.outputType))return\"outputType: string expected\";if(null!=e.options&&e.hasOwnProperty(\"options\")){var t=p.google.protobuf.MethodOptions.verify(e.options);if(t)return\"options.\"+t}return null!=e.clientStreaming&&e.hasOwnProperty(\"clientStreaming\")&&\"boolean\"!=typeof e.clientStreaming?\"clientStreaming: boolean expected\":null!=e.serverStreaming&&e.hasOwnProperty(\"serverStreaming\")&&\"boolean\"!=typeof e.serverStreaming?\"serverStreaming: boolean expected\":null},x.fromObject=function(e){if(e instanceof p.google.protobuf.MethodDescriptorProto)return e;var t=new p.google.protobuf.MethodDescriptorProto;if(null!=e.name&&(t.name=String(e.name)),null!=e.inputType&&(t.inputType=String(e.inputType)),null!=e.outputType&&(t.outputType=String(e.outputType)),null!=e.options){if(\"object\"!=typeof e.options)throw TypeError(\".google.protobuf.MethodDescriptorProto.options: object expected\");t.options=p.google.protobuf.MethodOptions.fromObject(e.options)}return null!=e.clientStreaming&&(t.clientStreaming=Boolean(e.clientStreaming)),null!=e.serverStreaming&&(t.serverStreaming=Boolean(e.serverStreaming)),t},x.toObject=function(e,t){var n={};return(t=t||{}).defaults&&(n.name=\"\",n.inputType=\"\",n.outputType=\"\",n.options=null,n.clientStreaming=!1,n.serverStreaming=!1),null!=e.name&&e.hasOwnProperty(\"name\")&&(n.name=e.name),null!=e.inputType&&e.hasOwnProperty(\"inputType\")&&(n.inputType=e.inputType),null!=e.outputType&&e.hasOwnProperty(\"outputType\")&&(n.outputType=e.outputType),null!=e.options&&e.hasOwnProperty(\"options\")&&(n.options=p.google.protobuf.MethodOptions.toObject(e.options,t)),null!=e.clientStreaming&&e.hasOwnProperty(\"clientStreaming\")&&(n.clientStreaming=e.clientStreaming),null!=e.serverStreaming&&e.hasOwnProperty(\"serverStreaming\")&&(n.serverStreaming=e.serverStreaming),n},x.prototype.toJSON=function(){return this.constructor.toObject(this,o.util.toJSONOptions)},x),t.FileOptions=(k.prototype.javaPackage=\"\",k.prototype.javaOuterClassname=\"\",k.prototype.javaMultipleFiles=!1,k.prototype.javaGenerateEqualsAndHash=!1,k.prototype.javaStringCheckUtf8=!1,k.prototype.optimizeFor=1,k.prototype.goPackage=\"\",k.prototype.ccGenericServices=!1,k.prototype.javaGenericServices=!1,k.prototype.pyGenericServices=!1,k.prototype.phpGenericServices=!1,k.prototype.deprecated=!1,k.prototype.ccEnableArenas=!0,k.prototype.objcClassPrefix=\"\",k.prototype.csharpNamespace=\"\",k.prototype.swiftPrefix=\"\",k.prototype.phpClassPrefix=\"\",k.prototype.phpNamespace=\"\",k.prototype.phpMetadataNamespace=\"\",k.prototype.rubyPackage=\"\",k.prototype.uninterpretedOption=i.emptyArray,k.create=function(e){return new k(e)},k.encode=function(e,t){if(t=t||r.create(),null!=e.javaPackage&&Object.hasOwnProperty.call(e,\"javaPackage\")&&t.uint32(10).string(e.javaPackage),null!=e.javaOuterClassname&&Object.hasOwnProperty.call(e,\"javaOuterClassname\")&&t.uint32(66).string(e.javaOuterClassname),null!=e.optimizeFor&&Object.hasOwnProperty.call(e,\"optimizeFor\")&&t.uint32(72).int32(e.optimizeFor),null!=e.javaMultipleFiles&&Object.hasOwnProperty.call(e,\"javaMultipleFiles\")&&t.uint32(80).bool(e.javaMultipleFiles),null!=e.goPackage&&Object.hasOwnProperty.call(e,\"goPackage\")&&t.uint32(90).string(e.goPackage),null!=e.ccGenericServices&&Object.hasOwnProperty.call(e,\"ccGenericServices\")&&t.uint32(128).bool(e.ccGenericServices),null!=e.javaGenericServices&&Object.hasOwnProperty.call(e,\"javaGenericServices\")&&t.uint32(136).bool(e.javaGenericServices),null!=e.pyGenericServices&&Object.hasOwnProperty.call(e,\"pyGenericServices\")&&t.uint32(144).bool(e.pyGenericServices),null!=e.javaGenerateEqualsAndHash&&Object.hasOwnProperty.call(e,\"javaGenerateEqualsAndHash\")&&t.uint32(160).bool(e.javaGenerateEqualsAndHash),null!=e.deprecated&&Object.hasOwnProperty.call(e,\"deprecated\")&&t.uint32(184).bool(e.deprecated),null!=e.javaStringCheckUtf8&&Object.hasOwnProperty.call(e,\"javaStringCheckUtf8\")&&t.uint32(216).bool(e.javaStringCheckUtf8),null!=e.ccEnableArenas&&Object.hasOwnProperty.call(e,\"ccEnableArenas\")&&t.uint32(248).bool(e.ccEnableArenas),null!=e.objcClassPrefix&&Object.hasOwnProperty.call(e,\"objcClassPrefix\")&&t.uint32(290).string(e.objcClassPrefix),null!=e.csharpNamespace&&Object.hasOwnProperty.call(e,\"csharpNamespace\")&&t.uint32(298).string(e.csharpNamespace),null!=e.swiftPrefix&&Object.hasOwnProperty.call(e,\"swiftPrefix\")&&t.uint32(314).string(e.swiftPrefix),null!=e.phpClassPrefix&&Object.hasOwnProperty.call(e,\"phpClassPrefix\")&&t.uint32(322).string(e.phpClassPrefix),null!=e.phpNamespace&&Object.hasOwnProperty.call(e,\"phpNamespace\")&&t.uint32(330).string(e.phpNamespace),null!=e.phpGenericServices&&Object.hasOwnProperty.call(e,\"phpGenericServices\")&&t.uint32(336).bool(e.phpGenericServices),null!=e.phpMetadataNamespace&&Object.hasOwnProperty.call(e,\"phpMetadataNamespace\")&&t.uint32(354).string(e.phpMetadataNamespace),null!=e.rubyPackage&&Object.hasOwnProperty.call(e,\"rubyPackage\")&&t.uint32(362).string(e.rubyPackage),null!=e.uninterpretedOption&&e.uninterpretedOption.length)for(var n=0;n<e.uninterpretedOption.length;++n)p.google.protobuf.UninterpretedOption.encode(e.uninterpretedOption[n],t.uint32(7994).fork()).ldelim();return t},k.encodeDelimited=function(e,t){return this.encode(e,t).ldelim()},k.decode=function(e,t){e instanceof a||(e=a.create(e));for(var n=void 0===t?e.len:e.pos+t,o=new p.google.protobuf.FileOptions;e.pos<n;){var r=e.uint32();switch(r>>>3){case 1:o.javaPackage=e.string();break;case 8:o.javaOuterClassname=e.string();break;case 10:o.javaMultipleFiles=e.bool();break;case 20:o.javaGenerateEqualsAndHash=e.bool();break;case 27:o.javaStringCheckUtf8=e.bool();break;case 9:o.optimizeFor=e.int32();break;case 11:o.goPackage=e.string();break;case 16:o.ccGenericServices=e.bool();break;case 17:o.javaGenericServices=e.bool();break;case 18:o.pyGenericServices=e.bool();break;case 42:o.phpGenericServices=e.bool();break;case 23:o.deprecated=e.bool();break;case 31:o.ccEnableArenas=e.bool();break;case 36:o.objcClassPrefix=e.string();break;case 37:o.csharpNamespace=e.string();break;case 39:o.swiftPrefix=e.string();break;case 40:o.phpClassPrefix=e.string();break;case 41:o.phpNamespace=e.string();break;case 44:o.phpMetadataNamespace=e.string();break;case 45:o.rubyPackage=e.string();break;case 999:o.uninterpretedOption&&o.uninterpretedOption.length||(o.uninterpretedOption=[]),o.uninterpretedOption.push(p.google.protobuf.UninterpretedOption.decode(e,e.uint32()));break;default:e.skipType(7&r)}}return o},k.decodeDelimited=function(e){return e instanceof a||(e=new a(e)),this.decode(e,e.uint32())},k.verify=function(e){if(\"object\"!=typeof e||null===e)return\"object expected\";if(null!=e.javaPackage&&e.hasOwnProperty(\"javaPackage\")&&!i.isString(e.javaPackage))return\"javaPackage: string expected\";if(null!=e.javaOuterClassname&&e.hasOwnProperty(\"javaOuterClassname\")&&!i.isString(e.javaOuterClassname))return\"javaOuterClassname: string expected\";if(null!=e.javaMultipleFiles&&e.hasOwnProperty(\"javaMultipleFiles\")&&\"boolean\"!=typeof e.javaMultipleFiles)return\"javaMultipleFiles: boolean expected\";if(null!=e.javaGenerateEqualsAndHash&&e.hasOwnProperty(\"javaGenerateEqualsAndHash\")&&\"boolean\"!=typeof e.javaGenerateEqualsAndHash)return\"javaGenerateEqualsAndHash: boolean expected\";if(null!=e.javaStringCheckUtf8&&e.hasOwnProperty(\"javaStringCheckUtf8\")&&\"boolean\"!=typeof e.javaStringCheckUtf8)return\"javaStringCheckUtf8: boolean expected\";if(null!=e.optimizeFor&&e.hasOwnProperty(\"optimizeFor\"))switch(e.optimizeFor){default:return\"optimizeFor: enum value expected\";case 1:case 2:case 3:}if(null!=e.goPackage&&e.hasOwnProperty(\"goPackage\")&&!i.isString(e.goPackage))return\"goPackage: string expected\";if(null!=e.ccGenericServices&&e.hasOwnProperty(\"ccGenericServices\")&&\"boolean\"!=typeof e.ccGenericServices)return\"ccGenericServices: boolean expected\";if(null!=e.javaGenericServices&&e.hasOwnProperty(\"javaGenericServices\")&&\"boolean\"!=typeof e.javaGenericServices)return\"javaGenericServices: boolean expected\";if(null!=e.pyGenericServices&&e.hasOwnProperty(\"pyGenericServices\")&&\"boolean\"!=typeof e.pyGenericServices)return\"pyGenericServices: boolean expected\";if(null!=e.phpGenericServices&&e.hasOwnProperty(\"phpGenericServices\")&&\"boolean\"!=typeof e.phpGenericServices)return\"phpGenericServices: boolean expected\";if(null!=e.deprecated&&e.hasOwnProperty(\"deprecated\")&&\"boolean\"!=typeof e.deprecated)return\"deprecated: boolean expected\";if(null!=e.ccEnableArenas&&e.hasOwnProperty(\"ccEnableArenas\")&&\"boolean\"!=typeof e.ccEnableArenas)return\"ccEnableArenas: boolean expected\";if(null!=e.objcClassPrefix&&e.hasOwnProperty(\"objcClassPrefix\")&&!i.isString(e.objcClassPrefix))return\"objcClassPrefix: string expected\";if(null!=e.csharpNamespace&&e.hasOwnProperty(\"csharpNamespace\")&&!i.isString(e.csharpNamespace))return\"csharpNamespace: string expected\";if(null!=e.swiftPrefix&&e.hasOwnProperty(\"swiftPrefix\")&&!i.isString(e.swiftPrefix))return\"swiftPrefix: string expected\";if(null!=e.phpClassPrefix&&e.hasOwnProperty(\"phpClassPrefix\")&&!i.isString(e.phpClassPrefix))return\"phpClassPrefix: string expected\";if(null!=e.phpNamespace&&e.hasOwnProperty(\"phpNamespace\")&&!i.isString(e.phpNamespace))return\"phpNamespace: string expected\";if(null!=e.phpMetadataNamespace&&e.hasOwnProperty(\"phpMetadataNamespace\")&&!i.isString(e.phpMetadataNamespace))return\"phpMetadataNamespace: string expected\";if(null!=e.rubyPackage&&e.hasOwnProperty(\"rubyPackage\")&&!i.isString(e.rubyPackage))return\"rubyPackage: string expected\";if(null!=e.uninterpretedOption&&e.hasOwnProperty(\"uninterpretedOption\")){if(!Array.isArray(e.uninterpretedOption))return\"uninterpretedOption: array expected\";for(var t=0;t<e.uninterpretedOption.length;++t){var n=p.google.protobuf.UninterpretedOption.verify(e.uninterpretedOption[t]);if(n)return\"uninterpretedOption.\"+n}}return null},k.fromObject=function(e){if(e instanceof p.google.protobuf.FileOptions)return e;var t=new p.google.protobuf.FileOptions;switch(null!=e.javaPackage&&(t.javaPackage=String(e.javaPackage)),null!=e.javaOuterClassname&&(t.javaOuterClassname=String(e.javaOuterClassname)),null!=e.javaMultipleFiles&&(t.javaMultipleFiles=Boolean(e.javaMultipleFiles)),null!=e.javaGenerateEqualsAndHash&&(t.javaGenerateEqualsAndHash=Boolean(e.javaGenerateEqualsAndHash)),null!=e.javaStringCheckUtf8&&(t.javaStringCheckUtf8=Boolean(e.javaStringCheckUtf8)),e.optimizeFor){case\"SPEED\":case 1:t.optimizeFor=1;break;case\"CODE_SIZE\":case 2:t.optimizeFor=2;break;case\"LITE_RUNTIME\":case 3:t.optimizeFor=3}if(null!=e.goPackage&&(t.goPackage=String(e.goPackage)),null!=e.ccGenericServices&&(t.ccGenericServices=Boolean(e.ccGenericServices)),null!=e.javaGenericServices&&(t.javaGenericServices=Boolean(e.javaGenericServices)),null!=e.pyGenericServices&&(t.pyGenericServices=Boolean(e.pyGenericServices)),null!=e.phpGenericServices&&(t.phpGenericServices=Boolean(e.phpGenericServices)),null!=e.deprecated&&(t.deprecated=Boolean(e.deprecated)),null!=e.ccEnableArenas&&(t.ccEnableArenas=Boolean(e.ccEnableArenas)),null!=e.objcClassPrefix&&(t.objcClassPrefix=String(e.objcClassPrefix)),null!=e.csharpNamespace&&(t.csharpNamespace=String(e.csharpNamespace)),null!=e.swiftPrefix&&(t.swiftPrefix=String(e.swiftPrefix)),null!=e.phpClassPrefix&&(t.phpClassPrefix=String(e.phpClassPrefix)),null!=e.phpNamespace&&(t.phpNamespace=String(e.phpNamespace)),null!=e.phpMetadataNamespace&&(t.phpMetadataNamespace=String(e.phpMetadataNamespace)),null!=e.rubyPackage&&(t.rubyPackage=String(e.rubyPackage)),e.uninterpretedOption){if(!Array.isArray(e.uninterpretedOption))throw TypeError(\".google.protobuf.FileOptions.uninterpretedOption: array expected\");t.uninterpretedOption=[];for(var n=0;n<e.uninterpretedOption.length;++n){if(\"object\"!=typeof e.uninterpretedOption[n])throw TypeError(\".google.protobuf.FileOptions.uninterpretedOption: object expected\");t.uninterpretedOption[n]=p.google.protobuf.UninterpretedOption.fromObject(e.uninterpretedOption[n])}}return t},k.toObject=function(e,t){var n={};if(((t=t||{}).arrays||t.defaults)&&(n.uninterpretedOption=[]),t.defaults&&(n.javaPackage=\"\",n.javaOuterClassname=\"\",n.optimizeFor=t.enums===String?\"SPEED\":1,n.javaMultipleFiles=!1,n.goPackage=\"\",n.ccGenericServices=!1,n.javaGenericServices=!1,n.pyGenericServices=!1,n.javaGenerateEqualsAndHash=!1,n.deprecated=!1,n.javaStringCheckUtf8=!1,n.ccEnableArenas=!0,n.objcClassPrefix=\"\",n.csharpNamespace=\"\",n.swiftPrefix=\"\",n.phpClassPrefix=\"\",n.phpNamespace=\"\",n.phpGenericServices=!1,n.phpMetadataNamespace=\"\",n.rubyPackage=\"\"),null!=e.javaPackage&&e.hasOwnProperty(\"javaPackage\")&&(n.javaPackage=e.javaPackage),null!=e.javaOuterClassname&&e.hasOwnProperty(\"javaOuterClassname\")&&(n.javaOuterClassname=e.javaOuterClassname),null!=e.optimizeFor&&e.hasOwnProperty(\"optimizeFor\")&&(n.optimizeFor=t.enums===String?p.google.protobuf.FileOptions.OptimizeMode[e.optimizeFor]:e.optimizeFor),null!=e.javaMultipleFiles&&e.hasOwnProperty(\"javaMultipleFiles\")&&(n.javaMultipleFiles=e.javaMultipleFiles),null!=e.goPackage&&e.hasOwnProperty(\"goPackage\")&&(n.goPackage=e.goPackage),null!=e.ccGenericServices&&e.hasOwnProperty(\"ccGenericServices\")&&(n.ccGenericServices=e.ccGenericServices),null!=e.javaGenericServices&&e.hasOwnProperty(\"javaGenericServices\")&&(n.javaGenericServices=e.javaGenericServices),null!=e.pyGenericServices&&e.hasOwnProperty(\"pyGenericServices\")&&(n.pyGenericServices=e.pyGenericServices),null!=e.javaGenerateEqualsAndHash&&e.hasOwnProperty(\"javaGenerateEqualsAndHash\")&&(n.javaGenerateEqualsAndHash=e.javaGenerateEqualsAndHash),null!=e.deprecated&&e.hasOwnProperty(\"deprecated\")&&(n.deprecated=e.deprecated),null!=e.javaStringCheckUtf8&&e.hasOwnProperty(\"javaStringCheckUtf8\")&&(n.javaStringCheckUtf8=e.javaStringCheckUtf8),null!=e.ccEnableArenas&&e.hasOwnProperty(\"ccEnableArenas\")&&(n.ccEnableArenas=e.ccEnableArenas),null!=e.objcClassPrefix&&e.hasOwnProperty(\"objcClassPrefix\")&&(n.objcClassPrefix=e.objcClassPrefix),null!=e.csharpNamespace&&e.hasOwnProperty(\"csharpNamespace\")&&(n.csharpNamespace=e.csharpNamespace),null!=e.swiftPrefix&&e.hasOwnProperty(\"swiftPrefix\")&&(n.swiftPrefix=e.swiftPrefix),null!=e.phpClassPrefix&&e.hasOwnProperty(\"phpClassPrefix\")&&(n.phpClassPrefix=e.phpClassPrefix),null!=e.phpNamespace&&e.hasOwnProperty(\"phpNamespace\")&&(n.phpNamespace=e.phpNamespace),null!=e.phpGenericServices&&e.hasOwnProperty(\"phpGenericServices\")&&(n.phpGenericServices=e.phpGenericServices),null!=e.phpMetadataNamespace&&e.hasOwnProperty(\"phpMetadataNamespace\")&&(n.phpMetadataNamespace=e.phpMetadataNamespace),null!=e.rubyPackage&&e.hasOwnProperty(\"rubyPackage\")&&(n.rubyPackage=e.rubyPackage),e.uninterpretedOption&&e.uninterpretedOption.length){n.uninterpretedOption=[];for(var o=0;o<e.uninterpretedOption.length;++o)n.uninterpretedOption[o]=p.google.protobuf.UninterpretedOption.toObject(e.uninterpretedOption[o],t)}return n},k.prototype.toJSON=function(){return this.constructor.toObject(this,o.util.toJSONOptions)},k.OptimizeMode=(n={},(e=Object.create(n))[n[1]=\"SPEED\"]=1,e[n[2]=\"CODE_SIZE\"]=2,e[n[3]=\"LITE_RUNTIME\"]=3,e),k),t.MessageOptions=(D.prototype.messageSetWireFormat=!1,D.prototype.noStandardDescriptorAccessor=!1,D.prototype.deprecated=!1,D.prototype.mapEntry=!1,D.prototype.uninterpretedOption=i.emptyArray,D.create=function(e){return new D(e)},D.encode=function(e,t){if(t=t||r.create(),null!=e.messageSetWireFormat&&Object.hasOwnProperty.call(e,\"messageSetWireFormat\")&&t.uint32(8).bool(e.messageSetWireFormat),null!=e.noStandardDescriptorAccessor&&Object.hasOwnProperty.call(e,\"noStandardDescriptorAccessor\")&&t.uint32(16).bool(e.noStandardDescriptorAccessor),null!=e.deprecated&&Object.hasOwnProperty.call(e,\"deprecated\")&&t.uint32(24).bool(e.deprecated),null!=e.mapEntry&&Object.hasOwnProperty.call(e,\"mapEntry\")&&t.uint32(56).bool(e.mapEntry),null!=e.uninterpretedOption&&e.uninterpretedOption.length)for(var n=0;n<e.uninterpretedOption.length;++n)p.google.protobuf.UninterpretedOption.encode(e.uninterpretedOption[n],t.uint32(7994).fork()).ldelim();return t},D.encodeDelimited=function(e,t){return this.encode(e,t).ldelim()},D.decode=function(e,t){e instanceof a||(e=a.create(e));for(var n=void 0===t?e.len:e.pos+t,o=new p.google.protobuf.MessageOptions;e.pos<n;){var r=e.uint32();switch(r>>>3){case 1:o.messageSetWireFormat=e.bool();break;case 2:o.noStandardDescriptorAccessor=e.bool();break;case 3:o.deprecated=e.bool();break;case 7:o.mapEntry=e.bool();break;case 999:o.uninterpretedOption&&o.uninterpretedOption.length||(o.uninterpretedOption=[]),o.uninterpretedOption.push(p.google.protobuf.UninterpretedOption.decode(e,e.uint32()));break;default:e.skipType(7&r)}}return o},D.decodeDelimited=function(e){return e instanceof a||(e=new a(e)),this.decode(e,e.uint32())},D.verify=function(e){if(\"object\"!=typeof e||null===e)return\"object expected\";if(null!=e.messageSetWireFormat&&e.hasOwnProperty(\"messageSetWireFormat\")&&\"boolean\"!=typeof e.messageSetWireFormat)return\"messageSetWireFormat: boolean expected\";if(null!=e.noStandardDescriptorAccessor&&e.hasOwnProperty(\"noStandardDescriptorAccessor\")&&\"boolean\"!=typeof e.noStandardDescriptorAccessor)return\"noStandardDescriptorAccessor: boolean expected\";if(null!=e.deprecated&&e.hasOwnProperty(\"deprecated\")&&\"boolean\"!=typeof e.deprecated)return\"deprecated: boolean expected\";if(null!=e.mapEntry&&e.hasOwnProperty(\"mapEntry\")&&\"boolean\"!=typeof e.mapEntry)return\"mapEntry: boolean expected\";if(null!=e.uninterpretedOption&&e.hasOwnProperty(\"uninterpretedOption\")){if(!Array.isArray(e.uninterpretedOption))return\"uninterpretedOption: array expected\";for(var t=0;t<e.uninterpretedOption.length;++t){var n=p.google.protobuf.UninterpretedOption.verify(e.uninterpretedOption[t]);if(n)return\"uninterpretedOption.\"+n}}return null},D.fromObject=function(e){if(e instanceof p.google.protobuf.MessageOptions)return e;var t=new p.google.protobuf.MessageOptions;if(null!=e.messageSetWireFormat&&(t.messageSetWireFormat=Boolean(e.messageSetWireFormat)),null!=e.noStandardDescriptorAccessor&&(t.noStandardDescriptorAccessor=Boolean(e.noStandardDescriptorAccessor)),null!=e.deprecated&&(t.deprecated=Boolean(e.deprecated)),null!=e.mapEntry&&(t.mapEntry=Boolean(e.mapEntry)),e.uninterpretedOption){if(!Array.isArray(e.uninterpretedOption))throw TypeError(\".google.protobuf.MessageOptions.uninterpretedOption: array expected\");t.uninterpretedOption=[];for(var n=0;n<e.uninterpretedOption.length;++n){if(\"object\"!=typeof e.uninterpretedOption[n])throw TypeError(\".google.protobuf.MessageOptions.uninterpretedOption: object expected\");t.uninterpretedOption[n]=p.google.protobuf.UninterpretedOption.fromObject(e.uninterpretedOption[n])}}return t},D.toObject=function(e,t){var n={};if(((t=t||{}).arrays||t.defaults)&&(n.uninterpretedOption=[]),t.defaults&&(n.messageSetWireFormat=!1,n.noStandardDescriptorAccessor=!1,n.deprecated=!1,n.mapEntry=!1),null!=e.messageSetWireFormat&&e.hasOwnProperty(\"messageSetWireFormat\")&&(n.messageSetWireFormat=e.messageSetWireFormat),null!=e.noStandardDescriptorAccessor&&e.hasOwnProperty(\"noStandardDescriptorAccessor\")&&(n.noStandardDescriptorAccessor=e.noStandardDescriptorAccessor),null!=e.deprecated&&e.hasOwnProperty(\"deprecated\")&&(n.deprecated=e.deprecated),null!=e.mapEntry&&e.hasOwnProperty(\"mapEntry\")&&(n.mapEntry=e.mapEntry),e.uninterpretedOption&&e.uninterpretedOption.length){n.uninterpretedOption=[];for(var o=0;o<e.uninterpretedOption.length;++o)n.uninterpretedOption[o]=p.google.protobuf.UninterpretedOption.toObject(e.uninterpretedOption[o],t)}return n},D.prototype.toJSON=function(){return this.constructor.toObject(this,o.util.toJSONOptions)},D),t.FieldOptions=(T.prototype.ctype=0,T.prototype.packed=!1,T.prototype.jstype=0,T.prototype.lazy=!1,T.prototype.deprecated=!1,T.prototype.weak=!1,T.prototype.uninterpretedOption=i.emptyArray,T.create=function(e){return new T(e)},T.encode=function(e,t){if(t=t||r.create(),null!=e.ctype&&Object.hasOwnProperty.call(e,\"ctype\")&&t.uint32(8).int32(e.ctype),null!=e.packed&&Object.hasOwnProperty.call(e,\"packed\")&&t.uint32(16).bool(e.packed),null!=e.deprecated&&Object.hasOwnProperty.call(e,\"deprecated\")&&t.uint32(24).bool(e.deprecated),null!=e.lazy&&Object.hasOwnProperty.call(e,\"lazy\")&&t.uint32(40).bool(e.lazy),null!=e.jstype&&Object.hasOwnProperty.call(e,\"jstype\")&&t.uint32(48).int32(e.jstype),null!=e.weak&&Object.hasOwnProperty.call(e,\"weak\")&&t.uint32(80).bool(e.weak),null!=e.uninterpretedOption&&e.uninterpretedOption.length)for(var n=0;n<e.uninterpretedOption.length;++n)p.google.protobuf.UninterpretedOption.encode(e.uninterpretedOption[n],t.uint32(7994).fork()).ldelim();return t},T.encodeDelimited=function(e,t){return this.encode(e,t).ldelim()},T.decode=function(e,t){e instanceof a||(e=a.create(e));for(var n=void 0===t?e.len:e.pos+t,o=new p.google.protobuf.FieldOptions;e.pos<n;){var r=e.uint32();switch(r>>>3){case 1:o.ctype=e.int32();break;case 2:o.packed=e.bool();break;case 6:o.jstype=e.int32();break;case 5:o.lazy=e.bool();break;case 3:o.deprecated=e.bool();break;case 10:o.weak=e.bool();break;case 999:o.uninterpretedOption&&o.uninterpretedOption.length||(o.uninterpretedOption=[]),o.uninterpretedOption.push(p.google.protobuf.UninterpretedOption.decode(e,e.uint32()));break;default:e.skipType(7&r)}}return o},T.decodeDelimited=function(e){return e instanceof a||(e=new a(e)),this.decode(e,e.uint32())},T.verify=function(e){if(\"object\"!=typeof e||null===e)return\"object expected\";if(null!=e.ctype&&e.hasOwnProperty(\"ctype\"))switch(e.ctype){default:return\"ctype: enum value expected\";case 0:case 1:case 2:}if(null!=e.packed&&e.hasOwnProperty(\"packed\")&&\"boolean\"!=typeof e.packed)return\"packed: boolean expected\";if(null!=e.jstype&&e.hasOwnProperty(\"jstype\"))switch(e.jstype){default:return\"jstype: enum value expected\";case 0:case 1:case 2:}if(null!=e.lazy&&e.hasOwnProperty(\"lazy\")&&\"boolean\"!=typeof e.lazy)return\"lazy: boolean expected\";if(null!=e.deprecated&&e.hasOwnProperty(\"deprecated\")&&\"boolean\"!=typeof e.deprecated)return\"deprecated: boolean expected\";if(null!=e.weak&&e.hasOwnProperty(\"weak\")&&\"boolean\"!=typeof e.weak)return\"weak: boolean expected\";if(null!=e.uninterpretedOption&&e.hasOwnProperty(\"uninterpretedOption\")){if(!Array.isArray(e.uninterpretedOption))return\"uninterpretedOption: array expected\";for(var t=0;t<e.uninterpretedOption.length;++t){var n=p.google.protobuf.UninterpretedOption.verify(e.uninterpretedOption[t]);if(n)return\"uninterpretedOption.\"+n}}return null},T.fromObject=function(e){if(e instanceof p.google.protobuf.FieldOptions)return e;var t=new p.google.protobuf.FieldOptions;switch(e.ctype){case\"STRING\":case 0:t.ctype=0;break;case\"CORD\":case 1:t.ctype=1;break;case\"STRING_PIECE\":case 2:t.ctype=2}switch(null!=e.packed&&(t.packed=Boolean(e.packed)),e.jstype){case\"JS_NORMAL\":case 0:t.jstype=0;break;case\"JS_STRING\":case 1:t.jstype=1;break;case\"JS_NUMBER\":case 2:t.jstype=2}if(null!=e.lazy&&(t.lazy=Boolean(e.lazy)),null!=e.deprecated&&(t.deprecated=Boolean(e.deprecated)),null!=e.weak&&(t.weak=Boolean(e.weak)),e.uninterpretedOption){if(!Array.isArray(e.uninterpretedOption))throw TypeError(\".google.protobuf.FieldOptions.uninterpretedOption: array expected\");t.uninterpretedOption=[];for(var n=0;n<e.uninterpretedOption.length;++n){if(\"object\"!=typeof e.uninterpretedOption[n])throw TypeError(\".google.protobuf.FieldOptions.uninterpretedOption: object expected\");t.uninterpretedOption[n]=p.google.protobuf.UninterpretedOption.fromObject(e.uninterpretedOption[n])}}return t},T.toObject=function(e,t){var n={};if(((t=t||{}).arrays||t.defaults)&&(n.uninterpretedOption=[]),t.defaults&&(n.ctype=t.enums===String?\"STRING\":0,n.packed=!1,n.deprecated=!1,n.lazy=!1,n.jstype=t.enums===String?\"JS_NORMAL\":0,n.weak=!1),null!=e.ctype&&e.hasOwnProperty(\"ctype\")&&(n.ctype=t.enums===String?p.google.protobuf.FieldOptions.CType[e.ctype]:e.ctype),null!=e.packed&&e.hasOwnProperty(\"packed\")&&(n.packed=e.packed),null!=e.deprecated&&e.hasOwnProperty(\"deprecated\")&&(n.deprecated=e.deprecated),null!=e.lazy&&e.hasOwnProperty(\"lazy\")&&(n.lazy=e.lazy),null!=e.jstype&&e.hasOwnProperty(\"jstype\")&&(n.jstype=t.enums===String?p.google.protobuf.FieldOptions.JSType[e.jstype]:e.jstype),null!=e.weak&&e.hasOwnProperty(\"weak\")&&(n.weak=e.weak),e.uninterpretedOption&&e.uninterpretedOption.length){n.uninterpretedOption=[];for(var o=0;o<e.uninterpretedOption.length;++o)n.uninterpretedOption[o]=p.google.protobuf.UninterpretedOption.toObject(e.uninterpretedOption[o],t)}return n},T.prototype.toJSON=function(){return this.constructor.toObject(this,o.util.toJSONOptions)},T.CType=(n={},(e=Object.create(n))[n[0]=\"STRING\"]=0,e[n[1]=\"CORD\"]=1,e[n[2]=\"STRING_PIECE\"]=2,e),T.JSType=(n={},(e=Object.create(n))[n[0]=\"JS_NORMAL\"]=0,e[n[1]=\"JS_STRING\"]=1,e[n[2]=\"JS_NUMBER\"]=2,e),T),t.OneofOptions=(H.prototype.uninterpretedOption=i.emptyArray,H.create=function(e){return new H(e)},H.encode=function(e,t){if(t=t||r.create(),null!=e.uninterpretedOption&&e.uninterpretedOption.length)for(var n=0;n<e.uninterpretedOption.length;++n)p.google.protobuf.UninterpretedOption.encode(e.uninterpretedOption[n],t.uint32(7994).fork()).ldelim();return t},H.encodeDelimited=function(e,t){return this.encode(e,t).ldelim()},H.decode=function(e,t){e instanceof a||(e=a.create(e));for(var n=void 0===t?e.len:e.pos+t,o=new p.google.protobuf.OneofOptions;e.pos<n;){var r=e.uint32();r>>>3==999?(o.uninterpretedOption&&o.uninterpretedOption.length||(o.uninterpretedOption=[]),o.uninterpretedOption.push(p.google.protobuf.UninterpretedOption.decode(e,e.uint32()))):e.skipType(7&r)}return o},H.decodeDelimited=function(e){return e instanceof a||(e=new a(e)),this.decode(e,e.uint32())},H.verify=function(e){if(\"object\"!=typeof e||null===e)return\"object expected\";if(null!=e.uninterpretedOption&&e.hasOwnProperty(\"uninterpretedOption\")){if(!Array.isArray(e.uninterpretedOption))return\"uninterpretedOption: array expected\";for(var t=0;t<e.uninterpretedOption.length;++t){var n=p.google.protobuf.UninterpretedOption.verify(e.uninterpretedOption[t]);if(n)return\"uninterpretedOption.\"+n}}return null},H.fromObject=function(e){if(e instanceof p.google.protobuf.OneofOptions)return e;var t=new p.google.protobuf.OneofOptions;if(e.uninterpretedOption){if(!Array.isArray(e.uninterpretedOption))throw TypeError(\".google.protobuf.OneofOptions.uninterpretedOption: array expected\");t.uninterpretedOption=[];for(var n=0;n<e.uninterpretedOption.length;++n){if(\"object\"!=typeof e.uninterpretedOption[n])throw TypeError(\".google.protobuf.OneofOptions.uninterpretedOption: object expected\");t.uninterpretedOption[n]=p.google.protobuf.UninterpretedOption.fromObject(e.uninterpretedOption[n])}}return t},H.toObject=function(e,t){var n={};if(((t=t||{}).arrays||t.defaults)&&(n.uninterpretedOption=[]),e.uninterpretedOption&&e.uninterpretedOption.length){n.uninterpretedOption=[];for(var o=0;o<e.uninterpretedOption.length;++o)n.uninterpretedOption[o]=p.google.protobuf.UninterpretedOption.toObject(e.uninterpretedOption[o],t)}return n},H.prototype.toJSON=function(){return this.constructor.toObject(this,o.util.toJSONOptions)},H),t.EnumOptions=(E.prototype.allowAlias=!1,E.prototype.deprecated=!1,E.prototype.uninterpretedOption=i.emptyArray,E.create=function(e){return new E(e)},E.encode=function(e,t){if(t=t||r.create(),null!=e.allowAlias&&Object.hasOwnProperty.call(e,\"allowAlias\")&&t.uint32(16).bool(e.allowAlias),null!=e.deprecated&&Object.hasOwnProperty.call(e,\"deprecated\")&&t.uint32(24).bool(e.deprecated),null!=e.uninterpretedOption&&e.uninterpretedOption.length)for(var n=0;n<e.uninterpretedOption.length;++n)p.google.protobuf.UninterpretedOption.encode(e.uninterpretedOption[n],t.uint32(7994).fork()).ldelim();return t},E.encodeDelimited=function(e,t){return this.encode(e,t).ldelim()},E.decode=function(e,t){e instanceof a||(e=a.create(e));for(var n=void 0===t?e.len:e.pos+t,o=new p.google.protobuf.EnumOptions;e.pos<n;){var r=e.uint32();switch(r>>>3){case 2:o.allowAlias=e.bool();break;case 3:o.deprecated=e.bool();break;case 999:o.uninterpretedOption&&o.uninterpretedOption.length||(o.uninterpretedOption=[]),o.uninterpretedOption.push(p.google.protobuf.UninterpretedOption.decode(e,e.uint32()));break;default:e.skipType(7&r)}}return o},E.decodeDelimited=function(e){return e instanceof a||(e=new a(e)),this.decode(e,e.uint32())},E.verify=function(e){if(\"object\"!=typeof e||null===e)return\"object expected\";if(null!=e.allowAlias&&e.hasOwnProperty(\"allowAlias\")&&\"boolean\"!=typeof e.allowAlias)return\"allowAlias: boolean expected\";if(null!=e.deprecated&&e.hasOwnProperty(\"deprecated\")&&\"boolean\"!=typeof e.deprecated)return\"deprecated: boolean expected\";if(null!=e.uninterpretedOption&&e.hasOwnProperty(\"uninterpretedOption\")){if(!Array.isArray(e.uninterpretedOption))return\"uninterpretedOption: array expected\";for(var t=0;t<e.uninterpretedOption.length;++t){var n=p.google.protobuf.UninterpretedOption.verify(e.uninterpretedOption[t]);if(n)return\"uninterpretedOption.\"+n}}return null},E.fromObject=function(e){if(e instanceof p.google.protobuf.EnumOptions)return e;var t=new p.google.protobuf.EnumOptions;if(null!=e.allowAlias&&(t.allowAlias=Boolean(e.allowAlias)),null!=e.deprecated&&(t.deprecated=Boolean(e.deprecated)),e.uninterpretedOption){if(!Array.isArray(e.uninterpretedOption))throw TypeError(\".google.protobuf.EnumOptions.uninterpretedOption: array expected\");t.uninterpretedOption=[];for(var n=0;n<e.uninterpretedOption.length;++n){if(\"object\"!=typeof e.uninterpretedOption[n])throw TypeError(\".google.protobuf.EnumOptions.uninterpretedOption: object expected\");t.uninterpretedOption[n]=p.google.protobuf.UninterpretedOption.fromObject(e.uninterpretedOption[n])}}return t},E.toObject=function(e,t){var n={};if(((t=t||{}).arrays||t.defaults)&&(n.uninterpretedOption=[]),t.defaults&&(n.allowAlias=!1,n.deprecated=!1),null!=e.allowAlias&&e.hasOwnProperty(\"allowAlias\")&&(n.allowAlias=e.allowAlias),null!=e.deprecated&&e.hasOwnProperty(\"deprecated\")&&(n.deprecated=e.deprecated),e.uninterpretedOption&&e.uninterpretedOption.length){n.uninterpretedOption=[];for(var o=0;o<e.uninterpretedOption.length;++o)n.uninterpretedOption[o]=p.google.protobuf.UninterpretedOption.toObject(e.uninterpretedOption[o],t)}return n},E.prototype.toJSON=function(){return this.constructor.toObject(this,o.util.toJSONOptions)},E),t.EnumValueOptions=(z.prototype.deprecated=!1,z.prototype.uninterpretedOption=i.emptyArray,z.create=function(e){return new z(e)},z.encode=function(e,t){if(t=t||r.create(),null!=e.deprecated&&Object.hasOwnProperty.call(e,\"deprecated\")&&t.uint32(8).bool(e.deprecated),null!=e.uninterpretedOption&&e.uninterpretedOption.length)for(var n=0;n<e.uninterpretedOption.length;++n)p.google.protobuf.UninterpretedOption.encode(e.uninterpretedOption[n],t.uint32(7994).fork()).ldelim();return t},z.encodeDelimited=function(e,t){return this.encode(e,t).ldelim()},z.decode=function(e,t){e instanceof a||(e=a.create(e));for(var n=void 0===t?e.len:e.pos+t,o=new p.google.protobuf.EnumValueOptions;e.pos<n;){var r=e.uint32();switch(r>>>3){case 1:o.deprecated=e.bool();break;case 999:o.uninterpretedOption&&o.uninterpretedOption.length||(o.uninterpretedOption=[]),o.uninterpretedOption.push(p.google.protobuf.UninterpretedOption.decode(e,e.uint32()));break;default:e.skipType(7&r)}}return o},z.decodeDelimited=function(e){return e instanceof a||(e=new a(e)),this.decode(e,e.uint32())},z.verify=function(e){if(\"object\"!=typeof e||null===e)return\"object expected\";if(null!=e.deprecated&&e.hasOwnProperty(\"deprecated\")&&\"boolean\"!=typeof e.deprecated)return\"deprecated: boolean expected\";if(null!=e.uninterpretedOption&&e.hasOwnProperty(\"uninterpretedOption\")){if(!Array.isArray(e.uninterpretedOption))return\"uninterpretedOption: array expected\";for(var t=0;t<e.uninterpretedOption.length;++t){var n=p.google.protobuf.UninterpretedOption.verify(e.uninterpretedOption[t]);if(n)return\"uninterpretedOption.\"+n}}return null},z.fromObject=function(e){if(e instanceof p.google.protobuf.EnumValueOptions)return e;var t=new p.google.protobuf.EnumValueOptions;if(null!=e.deprecated&&(t.deprecated=Boolean(e.deprecated)),e.uninterpretedOption){if(!Array.isArray(e.uninterpretedOption))throw TypeError(\".google.protobuf.EnumValueOptions.uninterpretedOption: array expected\");t.uninterpretedOption=[];for(var n=0;n<e.uninterpretedOption.length;++n){if(\"object\"!=typeof e.uninterpretedOption[n])throw TypeError(\".google.protobuf.EnumValueOptions.uninterpretedOption: object expected\");t.uninterpretedOption[n]=p.google.protobuf.UninterpretedOption.fromObject(e.uninterpretedOption[n])}}return t},z.toObject=function(e,t){var n={};if(((t=t||{}).arrays||t.defaults)&&(n.uninterpretedOption=[]),t.defaults&&(n.deprecated=!1),null!=e.deprecated&&e.hasOwnProperty(\"deprecated\")&&(n.deprecated=e.deprecated),e.uninterpretedOption&&e.uninterpretedOption.length){n.uninterpretedOption=[];for(var o=0;o<e.uninterpretedOption.length;++o)n.uninterpretedOption[o]=p.google.protobuf.UninterpretedOption.toObject(e.uninterpretedOption[o],t)}return n},z.prototype.toJSON=function(){return this.constructor.toObject(this,o.util.toJSONOptions)},z),t.ServiceOptions=(A.prototype.deprecated=!1,A.prototype.uninterpretedOption=i.emptyArray,A.prototype[\".google.api.defaultHost\"]=\"\",A.prototype[\".google.api.oauthScopes\"]=\"\",A.create=function(e){return new A(e)},A.encode=function(e,t){if(t=t||r.create(),null!=e.deprecated&&Object.hasOwnProperty.call(e,\"deprecated\")&&t.uint32(264).bool(e.deprecated),null!=e.uninterpretedOption&&e.uninterpretedOption.length)for(var n=0;n<e.uninterpretedOption.length;++n)p.google.protobuf.UninterpretedOption.encode(e.uninterpretedOption[n],t.uint32(7994).fork()).ldelim();return null!=e[\".google.api.defaultHost\"]&&Object.hasOwnProperty.call(e,\".google.api.defaultHost\")&&t.uint32(8394).string(e[\".google.api.defaultHost\"]),null!=e[\".google.api.oauthScopes\"]&&Object.hasOwnProperty.call(e,\".google.api.oauthScopes\")&&t.uint32(8402).string(e[\".google.api.oauthScopes\"]),t},A.encodeDelimited=function(e,t){return this.encode(e,t).ldelim()},A.decode=function(e,t){e instanceof a||(e=a.create(e));for(var n=void 0===t?e.len:e.pos+t,o=new p.google.protobuf.ServiceOptions;e.pos<n;){var r=e.uint32();switch(r>>>3){case 33:o.deprecated=e.bool();break;case 999:o.uninterpretedOption&&o.uninterpretedOption.length||(o.uninterpretedOption=[]),o.uninterpretedOption.push(p.google.protobuf.UninterpretedOption.decode(e,e.uint32()));break;case 1049:o[\".google.api.defaultHost\"]=e.string();break;case 1050:o[\".google.api.oauthScopes\"]=e.string();break;default:e.skipType(7&r)}}return o},A.decodeDelimited=function(e){return e instanceof a||(e=new a(e)),this.decode(e,e.uint32())},A.verify=function(e){if(\"object\"!=typeof e||null===e)return\"object expected\";if(null!=e.deprecated&&e.hasOwnProperty(\"deprecated\")&&\"boolean\"!=typeof e.deprecated)return\"deprecated: boolean expected\";if(null!=e.uninterpretedOption&&e.hasOwnProperty(\"uninterpretedOption\")){if(!Array.isArray(e.uninterpretedOption))return\"uninterpretedOption: array expected\";for(var t=0;t<e.uninterpretedOption.length;++t){var n=p.google.protobuf.UninterpretedOption.verify(e.uninterpretedOption[t]);if(n)return\"uninterpretedOption.\"+n}}return null!=e[\".google.api.defaultHost\"]&&e.hasOwnProperty(\".google.api.defaultHost\")&&!i.isString(e[\".google.api.defaultHost\"])?\".google.api.defaultHost: string expected\":null!=e[\".google.api.oauthScopes\"]&&e.hasOwnProperty(\".google.api.oauthScopes\")&&!i.isString(e[\".google.api.oauthScopes\"])?\".google.api.oauthScopes: string expected\":null},A.fromObject=function(e){if(e instanceof p.google.protobuf.ServiceOptions)return e;var t=new p.google.protobuf.ServiceOptions;if(null!=e.deprecated&&(t.deprecated=Boolean(e.deprecated)),e.uninterpretedOption){if(!Array.isArray(e.uninterpretedOption))throw TypeError(\".google.protobuf.ServiceOptions.uninterpretedOption: array expected\");t.uninterpretedOption=[];for(var n=0;n<e.uninterpretedOption.length;++n){if(\"object\"!=typeof e.uninterpretedOption[n])throw TypeError(\".google.protobuf.ServiceOptions.uninterpretedOption: object expected\");t.uninterpretedOption[n]=p.google.protobuf.UninterpretedOption.fromObject(e.uninterpretedOption[n])}}return null!=e[\".google.api.defaultHost\"]&&(t[\".google.api.defaultHost\"]=String(e[\".google.api.defaultHost\"])),null!=e[\".google.api.oauthScopes\"]&&(t[\".google.api.oauthScopes\"]=String(e[\".google.api.oauthScopes\"])),t},A.toObject=function(e,t){var n={};if(((t=t||{}).arrays||t.defaults)&&(n.uninterpretedOption=[]),t.defaults&&(n.deprecated=!1,n[\".google.api.defaultHost\"]=\"\",n[\".google.api.oauthScopes\"]=\"\"),null!=e.deprecated&&e.hasOwnProperty(\"deprecated\")&&(n.deprecated=e.deprecated),e.uninterpretedOption&&e.uninterpretedOption.length){n.uninterpretedOption=[];for(var o=0;o<e.uninterpretedOption.length;++o)n.uninterpretedOption[o]=p.google.protobuf.UninterpretedOption.toObject(e.uninterpretedOption[o],t)}return null!=e[\".google.api.defaultHost\"]&&e.hasOwnProperty(\".google.api.defaultHost\")&&(n[\".google.api.defaultHost\"]=e[\".google.api.defaultHost\"]),null!=e[\".google.api.oauthScopes\"]&&e.hasOwnProperty(\".google.api.oauthScopes\")&&(n[\".google.api.oauthScopes\"]=e[\".google.api.oauthScopes\"]),n},A.prototype.toJSON=function(){return this.constructor.toObject(this,o.util.toJSONOptions)},A),t.MethodOptions=(N.prototype.deprecated=!1,N.prototype.idempotencyLevel=0,N.prototype.uninterpretedOption=i.emptyArray,N.prototype[\".google.longrunning.operationInfo\"]=null,N.prototype[\".google.api.http\"]=null,N.prototype[\".google.api.methodSignature\"]=i.emptyArray,N.create=function(e){return new N(e)},N.encode=function(e,t){if(t=t||r.create(),null!=e.deprecated&&Object.hasOwnProperty.call(e,\"deprecated\")&&t.uint32(264).bool(e.deprecated),null!=e.idempotencyLevel&&Object.hasOwnProperty.call(e,\"idempotencyLevel\")&&t.uint32(272).int32(e.idempotencyLevel),null!=e.uninterpretedOption&&e.uninterpretedOption.length)for(var n=0;n<e.uninterpretedOption.length;++n)p.google.protobuf.UninterpretedOption.encode(e.uninterpretedOption[n],t.uint32(7994).fork()).ldelim();if(null!=e[\".google.longrunning.operationInfo\"]&&Object.hasOwnProperty.call(e,\".google.longrunning.operationInfo\")&&p.google.longrunning.OperationInfo.encode(e[\".google.longrunning.operationInfo\"],t.uint32(8394).fork()).ldelim(),null!=e[\".google.api.methodSignature\"]&&e[\".google.api.methodSignature\"].length)for(n=0;n<e[\".google.api.methodSignature\"].length;++n)t.uint32(8410).string(e[\".google.api.methodSignature\"][n]);return null!=e[\".google.api.http\"]&&Object.hasOwnProperty.call(e,\".google.api.http\")&&p.google.api.HttpRule.encode(e[\".google.api.http\"],t.uint32(578365826).fork()).ldelim(),t},N.encodeDelimited=function(e,t){return this.encode(e,t).ldelim()},N.decode=function(e,t){e instanceof a||(e=a.create(e));for(var n=void 0===t?e.len:e.pos+t,o=new p.google.protobuf.MethodOptions;e.pos<n;){var r=e.uint32();switch(r>>>3){case 33:o.deprecated=e.bool();break;case 34:o.idempotencyLevel=e.int32();break;case 999:o.uninterpretedOption&&o.uninterpretedOption.length||(o.uninterpretedOption=[]),o.uninterpretedOption.push(p.google.protobuf.UninterpretedOption.decode(e,e.uint32()));break;case 1049:o[\".google.longrunning.operationInfo\"]=p.google.longrunning.OperationInfo.decode(e,e.uint32());break;case 72295728:o[\".google.api.http\"]=p.google.api.HttpRule.decode(e,e.uint32());break;case 1051:o[\".google.api.methodSignature\"]&&o[\".google.api.methodSignature\"].length||(o[\".google.api.methodSignature\"]=[]),o[\".google.api.methodSignature\"].push(e.string());break;default:e.skipType(7&r)}}return o},N.decodeDelimited=function(e){return e instanceof a||(e=new a(e)),this.decode(e,e.uint32())},N.verify=function(e){if(\"object\"!=typeof e||null===e)return\"object expected\";if(null!=e.deprecated&&e.hasOwnProperty(\"deprecated\")&&\"boolean\"!=typeof e.deprecated)return\"deprecated: boolean expected\";if(null!=e.idempotencyLevel&&e.hasOwnProperty(\"idempotencyLevel\"))switch(e.idempotencyLevel){default:return\"idempotencyLevel: enum value expected\";case 0:case 1:case 2:}if(null!=e.uninterpretedOption&&e.hasOwnProperty(\"uninterpretedOption\")){if(!Array.isArray(e.uninterpretedOption))return\"uninterpretedOption: array expected\";for(var t=0;t<e.uninterpretedOption.length;++t)if(n=p.google.protobuf.UninterpretedOption.verify(e.uninterpretedOption[t]))return\"uninterpretedOption.\"+n}var n;if(null!=e[\".google.longrunning.operationInfo\"]&&e.hasOwnProperty(\".google.longrunning.operationInfo\")&&(n=p.google.longrunning.OperationInfo.verify(e[\".google.longrunning.operationInfo\"])))return\".google.longrunning.operationInfo.\"+n;if(null!=e[\".google.api.http\"]&&e.hasOwnProperty(\".google.api.http\")&&(n=p.google.api.HttpRule.verify(e[\".google.api.http\"])))return\".google.api.http.\"+n;if(null!=e[\".google.api.methodSignature\"]&&e.hasOwnProperty(\".google.api.methodSignature\")){if(!Array.isArray(e[\".google.api.methodSignature\"]))return\".google.api.methodSignature: array expected\";for(t=0;t<e[\".google.api.methodSignature\"].length;++t)if(!i.isString(e[\".google.api.methodSignature\"][t]))return\".google.api.methodSignature: string[] expected\"}return null},N.fromObject=function(e){if(e instanceof p.google.protobuf.MethodOptions)return e;var t=new p.google.protobuf.MethodOptions;switch(null!=e.deprecated&&(t.deprecated=Boolean(e.deprecated)),e.idempotencyLevel){case\"IDEMPOTENCY_UNKNOWN\":case 0:t.idempotencyLevel=0;break;case\"NO_SIDE_EFFECTS\":case 1:t.idempotencyLevel=1;break;case\"IDEMPOTENT\":case 2:t.idempotencyLevel=2}if(e.uninterpretedOption){if(!Array.isArray(e.uninterpretedOption))throw TypeError(\".google.protobuf.MethodOptions.uninterpretedOption: array expected\");t.uninterpretedOption=[];for(var n=0;n<e.uninterpretedOption.length;++n){if(\"object\"!=typeof e.uninterpretedOption[n])throw TypeError(\".google.protobuf.MethodOptions.uninterpretedOption: object expected\");t.uninterpretedOption[n]=p.google.protobuf.UninterpretedOption.fromObject(e.uninterpretedOption[n])}}if(null!=e[\".google.longrunning.operationInfo\"]){if(\"object\"!=typeof e[\".google.longrunning.operationInfo\"])throw TypeError(\".google.protobuf.MethodOptions..google.longrunning.operationInfo: object expected\");t[\".google.longrunning.operationInfo\"]=p.google.longrunning.OperationInfo.fromObject(e[\".google.longrunning.operationInfo\"])}if(null!=e[\".google.api.http\"]){if(\"object\"!=typeof e[\".google.api.http\"])throw TypeError(\".google.protobuf.MethodOptions..google.api.http: object expected\");t[\".google.api.http\"]=p.google.api.HttpRule.fromObject(e[\".google.api.http\"])}if(e[\".google.api.methodSignature\"]){if(!Array.isArray(e[\".google.api.methodSignature\"]))throw TypeError(\".google.protobuf.MethodOptions..google.api.methodSignature: array expected\");t[\".google.api.methodSignature\"]=[];for(n=0;n<e[\".google.api.methodSignature\"].length;++n)t[\".google.api.methodSignature\"][n]=String(e[\".google.api.methodSignature\"][n])}return t},N.toObject=function(e,t){var n={};if(((t=t||{}).arrays||t.defaults)&&(n.uninterpretedOption=[],n[\".google.api.methodSignature\"]=[]),t.defaults&&(n.deprecated=!1,n.idempotencyLevel=t.enums===String?\"IDEMPOTENCY_UNKNOWN\":0,n[\".google.longrunning.operationInfo\"]=null,n[\".google.api.http\"]=null),null!=e.deprecated&&e.hasOwnProperty(\"deprecated\")&&(n.deprecated=e.deprecated),null!=e.idempotencyLevel&&e.hasOwnProperty(\"idempotencyLevel\")&&(n.idempotencyLevel=t.enums===String?p.google.protobuf.MethodOptions.IdempotencyLevel[e.idempotencyLevel]:e.idempotencyLevel),e.uninterpretedOption&&e.uninterpretedOption.length){n.uninterpretedOption=[];for(var o=0;o<e.uninterpretedOption.length;++o)n.uninterpretedOption[o]=p.google.protobuf.UninterpretedOption.toObject(e.uninterpretedOption[o],t)}if(null!=e[\".google.longrunning.operationInfo\"]&&e.hasOwnProperty(\".google.longrunning.operationInfo\")&&(n[\".google.longrunning.operationInfo\"]=p.google.longrunning.OperationInfo.toObject(e[\".google.longrunning.operationInfo\"],t)),e[\".google.api.methodSignature\"]&&e[\".google.api.methodSignature\"].length){n[\".google.api.methodSignature\"]=[];for(o=0;o<e[\".google.api.methodSignature\"].length;++o)n[\".google.api.methodSignature\"][o]=e[\".google.api.methodSignature\"][o]}return null!=e[\".google.api.http\"]&&e.hasOwnProperty(\".google.api.http\")&&(n[\".google.api.http\"]=p.google.api.HttpRule.toObject(e[\".google.api.http\"],t)),n},N.prototype.toJSON=function(){return this.constructor.toObject(this,o.util.toJSONOptions)},N.IdempotencyLevel=(n={},(e=Object.create(n))[n[0]=\"IDEMPOTENCY_UNKNOWN\"]=0,e[n[1]=\"NO_SIDE_EFFECTS\"]=1,e[n[2]=\"IDEMPOTENT\"]=2,e),N),t.UninterpretedOption=(I.prototype.name=i.emptyArray,I.prototype.identifierValue=\"\",I.prototype.positiveIntValue=i.Long?i.Long.fromBits(0,0,!0):0,I.prototype.negativeIntValue=i.Long?i.Long.fromBits(0,0,!1):0,I.prototype.doubleValue=0,I.prototype.stringValue=i.newBuffer([]),I.prototype.aggregateValue=\"\",I.create=function(e){return new I(e)},I.encode=function(e,t){if(t=t||r.create(),null!=e.name&&e.name.length)for(var n=0;n<e.name.length;++n)p.google.protobuf.UninterpretedOption.NamePart.encode(e.name[n],t.uint32(18).fork()).ldelim();return null!=e.identifierValue&&Object.hasOwnProperty.call(e,\"identifierValue\")&&t.uint32(26).string(e.identifierValue),null!=e.positiveIntValue&&Object.hasOwnProperty.call(e,\"positiveIntValue\")&&t.uint32(32).uint64(e.positiveIntValue),null!=e.negativeIntValue&&Object.hasOwnProperty.call(e,\"negativeIntValue\")&&t.uint32(40).int64(e.negativeIntValue),null!=e.doubleValue&&Object.hasOwnProperty.call(e,\"doubleValue\")&&t.uint32(49).double(e.doubleValue),null!=e.stringValue&&Object.hasOwnProperty.call(e,\"stringValue\")&&t.uint32(58).bytes(e.stringValue),null!=e.aggregateValue&&Object.hasOwnProperty.call(e,\"aggregateValue\")&&t.uint32(66).string(e.aggregateValue),t},I.encodeDelimited=function(e,t){return this.encode(e,t).ldelim()},I.decode=function(e,t){e instanceof a||(e=a.create(e));for(var n=void 0===t?e.len:e.pos+t,o=new p.google.protobuf.UninterpretedOption;e.pos<n;){var r=e.uint32();switch(r>>>3){case 2:o.name&&o.name.length||(o.name=[]),o.name.push(p.google.protobuf.UninterpretedOption.NamePart.decode(e,e.uint32()));break;case 3:o.identifierValue=e.string();break;case 4:o.positiveIntValue=e.uint64();break;case 5:o.negativeIntValue=e.int64();break;case 6:o.doubleValue=e.double();break;case 7:o.stringValue=e.bytes();break;case 8:o.aggregateValue=e.string();break;default:e.skipType(7&r)}}return o},I.decodeDelimited=function(e){return e instanceof a||(e=new a(e)),this.decode(e,e.uint32())},I.verify=function(e){if(\"object\"!=typeof e||null===e)return\"object expected\";if(null!=e.name&&e.hasOwnProperty(\"name\")){if(!Array.isArray(e.name))return\"name: array expected\";for(var t=0;t<e.name.length;++t){var n=p.google.protobuf.UninterpretedOption.NamePart.verify(e.name[t]);if(n)return\"name.\"+n}}return null!=e.identifierValue&&e.hasOwnProperty(\"identifierValue\")&&!i.isString(e.identifierValue)?\"identifierValue: string expected\":null!=e.positiveIntValue&&e.hasOwnProperty(\"positiveIntValue\")&&!(i.isInteger(e.positiveIntValue)||e.positiveIntValue&&i.isInteger(e.positiveIntValue.low)&&i.isInteger(e.positiveIntValue.high))?\"positiveIntValue: integer|Long expected\":null!=e.negativeIntValue&&e.hasOwnProperty(\"negativeIntValue\")&&!(i.isInteger(e.negativeIntValue)||e.negativeIntValue&&i.isInteger(e.negativeIntValue.low)&&i.isInteger(e.negativeIntValue.high))?\"negativeIntValue: integer|Long expected\":null!=e.doubleValue&&e.hasOwnProperty(\"doubleValue\")&&\"number\"!=typeof e.doubleValue?\"doubleValue: number expected\":null!=e.stringValue&&e.hasOwnProperty(\"stringValue\")&&!(e.stringValue&&\"number\"==typeof e.stringValue.length||i.isString(e.stringValue))?\"stringValue: buffer expected\":null!=e.aggregateValue&&e.hasOwnProperty(\"aggregateValue\")&&!i.isString(e.aggregateValue)?\"aggregateValue: string expected\":null},I.fromObject=function(e){if(e instanceof p.google.protobuf.UninterpretedOption)return e;var t=new p.google.protobuf.UninterpretedOption;if(e.name){if(!Array.isArray(e.name))throw TypeError(\".google.protobuf.UninterpretedOption.name: array expected\");t.name=[];for(var n=0;n<e.name.length;++n){if(\"object\"!=typeof e.name[n])throw TypeError(\".google.protobuf.UninterpretedOption.name: object expected\");t.name[n]=p.google.protobuf.UninterpretedOption.NamePart.fromObject(e.name[n])}}return null!=e.identifierValue&&(t.identifierValue=String(e.identifierValue)),null!=e.positiveIntValue&&(i.Long?(t.positiveIntValue=i.Long.fromValue(e.positiveIntValue)).unsigned=!0:\"string\"==typeof e.positiveIntValue?t.positiveIntValue=parseInt(e.positiveIntValue,10):\"number\"==typeof e.positiveIntValue?t.positiveIntValue=e.positiveIntValue:\"object\"==typeof e.positiveIntValue&&(t.positiveIntValue=new i.LongBits(e.positiveIntValue.low>>>0,e.positiveIntValue.high>>>0).toNumber(!0))),null!=e.negativeIntValue&&(i.Long?(t.negativeIntValue=i.Long.fromValue(e.negativeIntValue)).unsigned=!1:\"string\"==typeof e.negativeIntValue?t.negativeIntValue=parseInt(e.negativeIntValue,10):\"number\"==typeof e.negativeIntValue?t.negativeIntValue=e.negativeIntValue:\"object\"==typeof e.negativeIntValue&&(t.negativeIntValue=new i.LongBits(e.negativeIntValue.low>>>0,e.negativeIntValue.high>>>0).toNumber())),null!=e.doubleValue&&(t.doubleValue=Number(e.doubleValue)),null!=e.stringValue&&(\"string\"==typeof e.stringValue?i.base64.decode(e.stringValue,t.stringValue=i.newBuffer(i.base64.length(e.stringValue)),0):e.stringValue.length&&(t.stringValue=e.stringValue)),null!=e.aggregateValue&&(t.aggregateValue=String(e.aggregateValue)),t},I.toObject=function(e,t){var n,o={};if(((t=t||{}).arrays||t.defaults)&&(o.name=[]),t.defaults&&(o.identifierValue=\"\",i.Long?(n=new i.Long(0,0,!0),o.positiveIntValue=t.longs===String?n.toString():t.longs===Number?n.toNumber():n):o.positiveIntValue=t.longs===String?\"0\":0,i.Long?(n=new i.Long(0,0,!1),o.negativeIntValue=t.longs===String?n.toString():t.longs===Number?n.toNumber():n):o.negativeIntValue=t.longs===String?\"0\":0,o.doubleValue=0,t.bytes===String?o.stringValue=\"\":(o.stringValue=[],t.bytes!==Array&&(o.stringValue=i.newBuffer(o.stringValue))),o.aggregateValue=\"\"),e.name&&e.name.length){o.name=[];for(var r=0;r<e.name.length;++r)o.name[r]=p.google.protobuf.UninterpretedOption.NamePart.toObject(e.name[r],t)}return null!=e.identifierValue&&e.hasOwnProperty(\"identifierValue\")&&(o.identifierValue=e.identifierValue),null!=e.positiveIntValue&&e.hasOwnProperty(\"positiveIntValue\")&&(\"number\"==typeof e.positiveIntValue?o.positiveIntValue=t.longs===String?String(e.positiveIntValue):e.positiveIntValue:o.positiveIntValue=t.longs===String?i.Long.prototype.toString.call(e.positiveIntValue):t.longs===Number?new i.LongBits(e.positiveIntValue.low>>>0,e.positiveIntValue.high>>>0).toNumber(!0):e.positiveIntValue),null!=e.negativeIntValue&&e.hasOwnProperty(\"negativeIntValue\")&&(\"number\"==typeof e.negativeIntValue?o.negativeIntValue=t.longs===String?String(e.negativeIntValue):e.negativeIntValue:o.negativeIntValue=t.longs===String?i.Long.prototype.toString.call(e.negativeIntValue):t.longs===Number?new i.LongBits(e.negativeIntValue.low>>>0,e.negativeIntValue.high>>>0).toNumber():e.negativeIntValue),null!=e.doubleValue&&e.hasOwnProperty(\"doubleValue\")&&(o.doubleValue=t.json&&!isFinite(e.doubleValue)?String(e.doubleValue):e.doubleValue),null!=e.stringValue&&e.hasOwnProperty(\"stringValue\")&&(o.stringValue=t.bytes===String?i.base64.encode(e.stringValue,0,e.stringValue.length):t.bytes===Array?Array.prototype.slice.call(e.stringValue):e.stringValue),null!=e.aggregateValue&&e.hasOwnProperty(\"aggregateValue\")&&(o.aggregateValue=e.aggregateValue),o},I.prototype.toJSON=function(){return this.constructor.toObject(this,o.util.toJSONOptions)},I.NamePart=(q.prototype.namePart=\"\",q.prototype.isExtension=!1,q.create=function(e){return new q(e)},q.encode=function(e,t){return(t=t||r.create()).uint32(10).string(e.namePart),t.uint32(16).bool(e.isExtension),t},q.encodeDelimited=function(e,t){return this.encode(e,t).ldelim()},q.decode=function(e,t){e instanceof a||(e=a.create(e));for(var n=void 0===t?e.len:e.pos+t,o=new p.google.protobuf.UninterpretedOption.NamePart;e.pos<n;){var r=e.uint32();switch(r>>>3){case 1:o.namePart=e.string();break;case 2:o.isExtension=e.bool();break;default:e.skipType(7&r)}}if(!o.hasOwnProperty(\"namePart\"))throw i.ProtocolError(\"missing required 'namePart'\",{instance:o});if(o.hasOwnProperty(\"isExtension\"))return o;throw i.ProtocolError(\"missing required 'isExtension'\",{instance:o})},q.decodeDelimited=function(e){return e instanceof a||(e=new a(e)),this.decode(e,e.uint32())},q.verify=function(e){return\"object\"!=typeof e||null===e?\"object expected\":i.isString(e.namePart)?\"boolean\"!=typeof e.isExtension?\"isExtension: boolean expected\":null:\"namePart: string expected\"},q.fromObject=function(e){var t;return e instanceof p.google.protobuf.UninterpretedOption.NamePart?e:(t=new p.google.protobuf.UninterpretedOption.NamePart,null!=e.namePart&&(t.namePart=String(e.namePart)),null!=e.isExtension&&(t.isExtension=Boolean(e.isExtension)),t)},q.toObject=function(e,t){var n={};return(t=t||{}).defaults&&(n.namePart=\"\",n.isExtension=!1),null!=e.namePart&&e.hasOwnProperty(\"namePart\")&&(n.namePart=e.namePart),null!=e.isExtension&&e.hasOwnProperty(\"isExtension\")&&(n.isExtension=e.isExtension),n},q.prototype.toJSON=function(){return this.constructor.toObject(this,o.util.toJSONOptions)},q),I),t.SourceCodeInfo=(Y.prototype.location=i.emptyArray,Y.create=function(e){return new Y(e)},Y.encode=function(e,t){if(t=t||r.create(),null!=e.location&&e.location.length)for(var n=0;n<e.location.length;++n)p.google.protobuf.SourceCodeInfo.Location.encode(e.location[n],t.uint32(10).fork()).ldelim();return t},Y.encodeDelimited=function(e,t){return this.encode(e,t).ldelim()},Y.decode=function(e,t){e instanceof a||(e=a.create(e));for(var n=void 0===t?e.len:e.pos+t,o=new p.google.protobuf.SourceCodeInfo;e.pos<n;){var r=e.uint32();r>>>3==1?(o.location&&o.location.length||(o.location=[]),o.location.push(p.google.protobuf.SourceCodeInfo.Location.decode(e,e.uint32()))):e.skipType(7&r)}return o},Y.decodeDelimited=function(e){return e instanceof a||(e=new a(e)),this.decode(e,e.uint32())},Y.verify=function(e){if(\"object\"!=typeof e||null===e)return\"object expected\";if(null!=e.location&&e.hasOwnProperty(\"location\")){if(!Array.isArray(e.location))return\"location: array expected\";for(var t=0;t<e.location.length;++t){var n=p.google.protobuf.SourceCodeInfo.Location.verify(e.location[t]);if(n)return\"location.\"+n}}return null},Y.fromObject=function(e){if(e instanceof p.google.protobuf.SourceCodeInfo)return e;var t=new p.google.protobuf.SourceCodeInfo;if(e.location){if(!Array.isArray(e.location))throw TypeError(\".google.protobuf.SourceCodeInfo.location: array expected\");t.location=[];for(var n=0;n<e.location.length;++n){if(\"object\"!=typeof e.location[n])throw TypeError(\".google.protobuf.SourceCodeInfo.location: object expected\");t.location[n]=p.google.protobuf.SourceCodeInfo.Location.fromObject(e.location[n])}}return t},Y.toObject=function(e,t){var n={};if(((t=t||{}).arrays||t.defaults)&&(n.location=[]),e.location&&e.location.length){n.location=[];for(var o=0;o<e.location.length;++o)n.location[o]=p.google.protobuf.SourceCodeInfo.Location.toObject(e.location[o],t)}return n},Y.prototype.toJSON=function(){return this.constructor.toObject(this,o.util.toJSONOptions)},Y.Location=(R.prototype.path=i.emptyArray,R.prototype.span=i.emptyArray,R.prototype.leadingComments=\"\",R.prototype.trailingComments=\"\",R.prototype.leadingDetachedComments=i.emptyArray,R.create=function(e){return new R(e)},R.encode=function(e,t){if(t=t||r.create(),null!=e.path&&e.path.length){t.uint32(10).fork();for(var n=0;n<e.path.length;++n)t.int32(e.path[n]);t.ldelim()}if(null!=e.span&&e.span.length){t.uint32(18).fork();for(n=0;n<e.span.length;++n)t.int32(e.span[n]);t.ldelim()}if(null!=e.leadingComments&&Object.hasOwnProperty.call(e,\"leadingComments\")&&t.uint32(26).string(e.leadingComments),null!=e.trailingComments&&Object.hasOwnProperty.call(e,\"trailingComments\")&&t.uint32(34).string(e.trailingComments),null!=e.leadingDetachedComments&&e.leadingDetachedComments.length)for(n=0;n<e.leadingDetachedComments.length;++n)t.uint32(50).string(e.leadingDetachedComments[n]);return t},R.encodeDelimited=function(e,t){return this.encode(e,t).ldelim()},R.decode=function(e,t){e instanceof a||(e=a.create(e));for(var n=void 0===t?e.len:e.pos+t,o=new p.google.protobuf.SourceCodeInfo.Location;e.pos<n;){var r=e.uint32();switch(r>>>3){case 1:if(o.path&&o.path.length||(o.path=[]),2==(7&r))for(var i=e.uint32()+e.pos;e.pos<i;)o.path.push(e.int32());else o.path.push(e.int32());break;case 2:if(o.span&&o.span.length||(o.span=[]),2==(7&r))for(i=e.uint32()+e.pos;e.pos<i;)o.span.push(e.int32());else o.span.push(e.int32());break;case 3:o.leadingComments=e.string();break;case 4:o.trailingComments=e.string();break;case 6:o.leadingDetachedComments&&o.leadingDetachedComments.length||(o.leadingDetachedComments=[]),o.leadingDetachedComments.push(e.string());break;default:e.skipType(7&r)}}return o},R.decodeDelimited=function(e){return e instanceof a||(e=new a(e)),this.decode(e,e.uint32())},R.verify=function(e){if(\"object\"!=typeof e||null===e)return\"object expected\";if(null!=e.path&&e.hasOwnProperty(\"path\")){if(!Array.isArray(e.path))return\"path: array expected\";for(var t=0;t<e.path.length;++t)if(!i.isInteger(e.path[t]))return\"path: integer[] expected\"}if(null!=e.span&&e.hasOwnProperty(\"span\")){if(!Array.isArray(e.span))return\"span: array expected\";for(t=0;t<e.span.length;++t)if(!i.isInteger(e.span[t]))return\"span: integer[] expected\"}if(null!=e.leadingComments&&e.hasOwnProperty(\"leadingComments\")&&!i.isString(e.leadingComments))return\"leadingComments: string expected\";if(null!=e.trailingComments&&e.hasOwnProperty(\"trailingComments\")&&!i.isString(e.trailingComments))return\"trailingComments: string expected\";if(null!=e.leadingDetachedComments&&e.hasOwnProperty(\"leadingDetachedComments\")){if(!Array.isArray(e.leadingDetachedComments))return\"leadingDetachedComments: array expected\";for(t=0;t<e.leadingDetachedComments.length;++t)if(!i.isString(e.leadingDetachedComments[t]))return\"leadingDetachedComments: string[] expected\"}return null},R.fromObject=function(e){if(e instanceof p.google.protobuf.SourceCodeInfo.Location)return e;var t=new p.google.protobuf.SourceCodeInfo.Location;if(e.path){if(!Array.isArray(e.path))throw TypeError(\".google.protobuf.SourceCodeInfo.Location.path: array expected\");t.path=[];for(var n=0;n<e.path.length;++n)t.path[n]=0|e.path[n]}if(e.span){if(!Array.isArray(e.span))throw TypeError(\".google.protobuf.SourceCodeInfo.Location.span: array expected\");t.span=[];for(n=0;n<e.span.length;++n)t.span[n]=0|e.span[n]}if(null!=e.leadingComments&&(t.leadingComments=String(e.leadingComments)),null!=e.trailingComments&&(t.trailingComments=String(e.trailingComments)),e.leadingDetachedComments){if(!Array.isArray(e.leadingDetachedComments))throw TypeError(\".google.protobuf.SourceCodeInfo.Location.leadingDetachedComments: array expected\");t.leadingDetachedComments=[];for(n=0;n<e.leadingDetachedComments.length;++n)t.leadingDetachedComments[n]=String(e.leadingDetachedComments[n])}return t},R.toObject=function(e,t){var n={};if(((t=t||{}).arrays||t.defaults)&&(n.path=[],n.span=[],n.leadingDetachedComments=[]),t.defaults&&(n.leadingComments=\"\",n.trailingComments=\"\"),e.path&&e.path.length){n.path=[];for(var o=0;o<e.path.length;++o)n.path[o]=e.path[o]}if(e.span&&e.span.length){n.span=[];for(o=0;o<e.span.length;++o)n.span[o]=e.span[o]}if(null!=e.leadingComments&&e.hasOwnProperty(\"leadingComments\")&&(n.leadingComments=e.leadingComments),null!=e.trailingComments&&e.hasOwnProperty(\"trailingComments\")&&(n.trailingComments=e.trailingComments),e.leadingDetachedComments&&e.leadingDetachedComments.length){n.leadingDetachedComments=[];for(o=0;o<e.leadingDetachedComments.length;++o)n.leadingDetachedComments[o]=e.leadingDetachedComments[o]}return n},R.prototype.toJSON=function(){return this.constructor.toObject(this,o.util.toJSONOptions)},R),Y),t.GeneratedCodeInfo=(W.prototype.annotation=i.emptyArray,W.create=function(e){return new W(e)},W.encode=function(e,t){if(t=t||r.create(),null!=e.annotation&&e.annotation.length)for(var n=0;n<e.annotation.length;++n)p.google.protobuf.GeneratedCodeInfo.Annotation.encode(e.annotation[n],t.uint32(10).fork()).ldelim();return t},W.encodeDelimited=function(e,t){return this.encode(e,t).ldelim()},W.decode=function(e,t){e instanceof a||(e=a.create(e));for(var n=void 0===t?e.len:e.pos+t,o=new p.google.protobuf.GeneratedCodeInfo;e.pos<n;){var r=e.uint32();r>>>3==1?(o.annotation&&o.annotation.length||(o.annotation=[]),o.annotation.push(p.google.protobuf.GeneratedCodeInfo.Annotation.decode(e,e.uint32()))):e.skipType(7&r)}return o},W.decodeDelimited=function(e){return e instanceof a||(e=new a(e)),this.decode(e,e.uint32())},W.verify=function(e){if(\"object\"!=typeof e||null===e)return\"object expected\";if(null!=e.annotation&&e.hasOwnProperty(\"annotation\")){if(!Array.isArray(e.annotation))return\"annotation: array expected\";for(var t=0;t<e.annotation.length;++t){var n=p.google.protobuf.GeneratedCodeInfo.Annotation.verify(e.annotation[t]);if(n)return\"annotation.\"+n}}return null},W.fromObject=function(e){if(e instanceof p.google.protobuf.GeneratedCodeInfo)return e;var t=new p.google.protobuf.GeneratedCodeInfo;if(e.annotation){if(!Array.isArray(e.annotation))throw TypeError(\".google.protobuf.GeneratedCodeInfo.annotation: array expected\");t.annotation=[];for(var n=0;n<e.annotation.length;++n){if(\"object\"!=typeof e.annotation[n])throw TypeError(\".google.protobuf.GeneratedCodeInfo.annotation: object expected\");t.annotation[n]=p.google.protobuf.GeneratedCodeInfo.Annotation.fromObject(e.annotation[n])}}return t},W.toObject=function(e,t){var n={};if(((t=t||{}).arrays||t.defaults)&&(n.annotation=[]),e.annotation&&e.annotation.length){n.annotation=[];for(var o=0;o<e.annotation.length;++o)n.annotation[o]=p.google.protobuf.GeneratedCodeInfo.Annotation.toObject(e.annotation[o],t)}return n},W.prototype.toJSON=function(){return this.constructor.toObject(this,o.util.toJSONOptions)},W.Annotation=(C.prototype.path=i.emptyArray,C.prototype.sourceFile=\"\",C.prototype.begin=0,C.prototype.end=0,C.create=function(e){return new C(e)},C.encode=function(e,t){if(t=t||r.create(),null!=e.path&&e.path.length){t.uint32(10).fork();for(var n=0;n<e.path.length;++n)t.int32(e.path[n]);t.ldelim()}return null!=e.sourceFile&&Object.hasOwnProperty.call(e,\"sourceFile\")&&t.uint32(18).string(e.sourceFile),null!=e.begin&&Object.hasOwnProperty.call(e,\"begin\")&&t.uint32(24).int32(e.begin),null!=e.end&&Object.hasOwnProperty.call(e,\"end\")&&t.uint32(32).int32(e.end),t},C.encodeDelimited=function(e,t){return this.encode(e,t).ldelim()},C.decode=function(e,t){e instanceof a||(e=a.create(e));for(var n=void 0===t?e.len:e.pos+t,o=new p.google.protobuf.GeneratedCodeInfo.Annotation;e.pos<n;){var r=e.uint32();switch(r>>>3){case 1:if(o.path&&o.path.length||(o.path=[]),2==(7&r))for(var i=e.uint32()+e.pos;e.pos<i;)o.path.push(e.int32());else o.path.push(e.int32());break;case 2:o.sourceFile=e.string();break;case 3:o.begin=e.int32();break;case 4:o.end=e.int32();break;default:e.skipType(7&r)}}return o},C.decodeDelimited=function(e){return e instanceof a||(e=new a(e)),this.decode(e,e.uint32())},C.verify=function(e){if(\"object\"!=typeof e||null===e)return\"object expected\";if(null!=e.path&&e.hasOwnProperty(\"path\")){if(!Array.isArray(e.path))return\"path: array expected\";for(var t=0;t<e.path.length;++t)if(!i.isInteger(e.path[t]))return\"path: integer[] expected\"}return null!=e.sourceFile&&e.hasOwnProperty(\"sourceFile\")&&!i.isString(e.sourceFile)?\"sourceFile: string expected\":null!=e.begin&&e.hasOwnProperty(\"begin\")&&!i.isInteger(e.begin)?\"begin: integer expected\":null!=e.end&&e.hasOwnProperty(\"end\")&&!i.isInteger(e.end)?\"end: integer expected\":null},C.fromObject=function(e){if(e instanceof p.google.protobuf.GeneratedCodeInfo.Annotation)return e;var t=new p.google.protobuf.GeneratedCodeInfo.Annotation;if(e.path){if(!Array.isArray(e.path))throw TypeError(\".google.protobuf.GeneratedCodeInfo.Annotation.path: array expected\");t.path=[];for(var n=0;n<e.path.length;++n)t.path[n]=0|e.path[n]}return null!=e.sourceFile&&(t.sourceFile=String(e.sourceFile)),null!=e.begin&&(t.begin=0|e.begin),null!=e.end&&(t.end=0|e.end),t},C.toObject=function(e,t){var n={};if(((t=t||{}).arrays||t.defaults)&&(n.path=[]),t.defaults&&(n.sourceFile=\"\",n.begin=0,n.end=0),e.path&&e.path.length){n.path=[];for(var o=0;o<e.path.length;++o)n.path[o]=e.path[o]}return null!=e.sourceFile&&e.hasOwnProperty(\"sourceFile\")&&(n.sourceFile=e.sourceFile),null!=e.begin&&e.hasOwnProperty(\"begin\")&&(n.begin=e.begin),null!=e.end&&e.hasOwnProperty(\"end\")&&(n.end=e.end),n},C.prototype.toJSON=function(){return this.constructor.toObject(this,o.util.toJSONOptions)},C),W),t.Any=(X.prototype.type_url=\"\",X.prototype.value=i.newBuffer([]),X.create=function(e){return new X(e)},X.encode=function(e,t){return t=t||r.create(),null!=e.type_url&&Object.hasOwnProperty.call(e,\"type_url\")&&t.uint32(10).string(e.type_url),null!=e.value&&Object.hasOwnProperty.call(e,\"value\")&&t.uint32(18).bytes(e.value),t},X.encodeDelimited=function(e,t){return this.encode(e,t).ldelim()},X.decode=function(e,t){e instanceof a||(e=a.create(e));for(var n=void 0===t?e.len:e.pos+t,o=new p.google.protobuf.Any;e.pos<n;){var r=e.uint32();switch(r>>>3){case 1:o.type_url=e.string();break;case 2:o.value=e.bytes();break;default:e.skipType(7&r)}}return o},X.decodeDelimited=function(e){return e instanceof a||(e=new a(e)),this.decode(e,e.uint32())},X.verify=function(e){return\"object\"!=typeof e||null===e?\"object expected\":null!=e.type_url&&e.hasOwnProperty(\"type_url\")&&!i.isString(e.type_url)?\"type_url: string expected\":null!=e.value&&e.hasOwnProperty(\"value\")&&!(e.value&&\"number\"==typeof e.value.length||i.isString(e.value))?\"value: buffer expected\":null},X.fromObject=function(e){var t;return e instanceof p.google.protobuf.Any?e:(t=new p.google.protobuf.Any,null!=e.type_url&&(t.type_url=String(e.type_url)),null!=e.value&&(\"string\"==typeof e.value?i.base64.decode(e.value,t.value=i.newBuffer(i.base64.length(e.value)),0):e.value.length&&(t.value=e.value)),t)},X.toObject=function(e,t){var n={};return(t=t||{}).defaults&&(n.type_url=\"\",t.bytes===String?n.value=\"\":(n.value=[],t.bytes!==Array&&(n.value=i.newBuffer(n.value)))),null!=e.type_url&&e.hasOwnProperty(\"type_url\")&&(n.type_url=e.type_url),null!=e.value&&e.hasOwnProperty(\"value\")&&(n.value=t.bytes===String?i.base64.encode(e.value,0,e.value.length):t.bytes===Array?Array.prototype.slice.call(e.value):e.value),n},X.prototype.toJSON=function(){return this.constructor.toObject(this,o.util.toJSONOptions)},X),t.Duration=(K.prototype.seconds=i.Long?i.Long.fromBits(0,0,!1):0,K.prototype.nanos=0,K.create=function(e){return new K(e)},K.encode=function(e,t){return t=t||r.create(),null!=e.seconds&&Object.hasOwnProperty.call(e,\"seconds\")&&t.uint32(8).int64(e.seconds),null!=e.nanos&&Object.hasOwnProperty.call(e,\"nanos\")&&t.uint32(16).int32(e.nanos),t},K.encodeDelimited=function(e,t){return this.encode(e,t).ldelim()},K.decode=function(e,t){e instanceof a||(e=a.create(e));for(var n=void 0===t?e.len:e.pos+t,o=new p.google.protobuf.Duration;e.pos<n;){var r=e.uint32();switch(r>>>3){case 1:o.seconds=e.int64();break;case 2:o.nanos=e.int32();break;default:e.skipType(7&r)}}return o},K.decodeDelimited=function(e){return e instanceof a||(e=new a(e)),this.decode(e,e.uint32())},K.verify=function(e){return\"object\"!=typeof e||null===e?\"object expected\":null!=e.seconds&&e.hasOwnProperty(\"seconds\")&&!(i.isInteger(e.seconds)||e.seconds&&i.isInteger(e.seconds.low)&&i.isInteger(e.seconds.high))?\"seconds: integer|Long expected\":null!=e.nanos&&e.hasOwnProperty(\"nanos\")&&!i.isInteger(e.nanos)?\"nanos: integer expected\":null},K.fromObject=function(e){var t;return e instanceof p.google.protobuf.Duration?e:(t=new p.google.protobuf.Duration,null!=e.seconds&&(i.Long?(t.seconds=i.Long.fromValue(e.seconds)).unsigned=!1:\"string\"==typeof e.seconds?t.seconds=parseInt(e.seconds,10):\"number\"==typeof e.seconds?t.seconds=e.seconds:\"object\"==typeof e.seconds&&(t.seconds=new i.LongBits(e.seconds.low>>>0,e.seconds.high>>>0).toNumber())),null!=e.nanos&&(t.nanos=0|e.nanos),t)},K.toObject=function(e,t){var n,o={};return(t=t||{}).defaults&&(i.Long?(n=new i.Long(0,0,!1),o.seconds=t.longs===String?n.toString():t.longs===Number?n.toNumber():n):o.seconds=t.longs===String?\"0\":0,o.nanos=0),null!=e.seconds&&e.hasOwnProperty(\"seconds\")&&(\"number\"==typeof e.seconds?o.seconds=t.longs===String?String(e.seconds):e.seconds:o.seconds=t.longs===String?i.Long.prototype.toString.call(e.seconds):t.longs===Number?new i.LongBits(e.seconds.low>>>0,e.seconds.high>>>0).toNumber():e.seconds),null!=e.nanos&&e.hasOwnProperty(\"nanos\")&&(o.nanos=e.nanos),o},K.prototype.toJSON=function(){return this.constructor.toObject(this,o.util.toJSONOptions)},K),t.Empty=(Q.create=function(e){return new Q(e)},Q.encode=function(e,t){return t=t||r.create()},Q.encodeDelimited=function(e,t){return this.encode(e,t).ldelim()},Q.decode=function(e,t){e instanceof a||(e=a.create(e));for(var n=void 0===t?e.len:e.pos+t,t=new p.google.protobuf.Empty;e.pos<n;){var o=e.uint32();e.skipType(7&o)}return t},Q.decodeDelimited=function(e){return e instanceof a||(e=new a(e)),this.decode(e,e.uint32())},Q.verify=function(e){return\"object\"!=typeof e||null===e?\"object expected\":null},Q.fromObject=function(e){return e instanceof p.google.protobuf.Empty?e:new p.google.protobuf.Empty},Q.toObject=function(){return{}},Q.prototype.toJSON=function(){return this.constructor.toObject(this,o.util.toJSONOptions)},Q),t),F.rpc=((n={}).Status=(V.prototype.code=0,V.prototype.message=\"\",V.prototype.details=i.emptyArray,V.create=function(e){return new V(e)},V.encode=function(e,t){if(t=t||r.create(),null!=e.code&&Object.hasOwnProperty.call(e,\"code\")&&t.uint32(8).int32(e.code),null!=e.message&&Object.hasOwnProperty.call(e,\"message\")&&t.uint32(18).string(e.message),null!=e.details&&e.details.length)for(var n=0;n<e.details.length;++n)p.google.protobuf.Any.encode(e.details[n],t.uint32(26).fork()).ldelim();return t},V.encodeDelimited=function(e,t){return this.encode(e,t).ldelim()},V.decode=function(e,t){e instanceof a||(e=a.create(e));for(var n=void 0===t?e.len:e.pos+t,o=new p.google.rpc.Status;e.pos<n;){var r=e.uint32();switch(r>>>3){case 1:o.code=e.int32();break;case 2:o.message=e.string();break;case 3:o.details&&o.details.length||(o.details=[]),o.details.push(p.google.protobuf.Any.decode(e,e.uint32()));break;default:e.skipType(7&r)}}return o},V.decodeDelimited=function(e){return e instanceof a||(e=new a(e)),this.decode(e,e.uint32())},V.verify=function(e){if(\"object\"!=typeof e||null===e)return\"object expected\";if(null!=e.code&&e.hasOwnProperty(\"code\")&&!i.isInteger(e.code))return\"code: integer expected\";if(null!=e.message&&e.hasOwnProperty(\"message\")&&!i.isString(e.message))return\"message: string expected\";if(null!=e.details&&e.hasOwnProperty(\"details\")){if(!Array.isArray(e.details))return\"details: array expected\";for(var t=0;t<e.details.length;++t){var n=p.google.protobuf.Any.verify(e.details[t]);if(n)return\"details.\"+n}}return null},V.fromObject=function(e){if(e instanceof p.google.rpc.Status)return e;var t=new p.google.rpc.Status;if(null!=e.code&&(t.code=0|e.code),null!=e.message&&(t.message=String(e.message)),e.details){if(!Array.isArray(e.details))throw TypeError(\".google.rpc.Status.details: array expected\");t.details=[];for(var n=0;n<e.details.length;++n){if(\"object\"!=typeof e.details[n])throw TypeError(\".google.rpc.Status.details: object expected\");t.details[n]=p.google.protobuf.Any.fromObject(e.details[n])}}return t},V.toObject=function(e,t){var n={};if(((t=t||{}).arrays||t.defaults)&&(n.details=[]),t.defaults&&(n.code=0,n.message=\"\"),null!=e.code&&e.hasOwnProperty(\"code\")&&(n.code=e.code),null!=e.message&&e.hasOwnProperty(\"message\")&&(n.message=e.message),e.details&&e.details.length){n.details=[];for(var o=0;o<e.details.length;++o)n.details[o]=p.google.protobuf.Any.toObject(e.details[o],t)}return n},V.prototype.toJSON=function(){return this.constructor.toObject(this,o.util.toJSONOptions)},V),n),F),p});//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/google-gax/build/protos/operations.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/google-gax/build/protos/operations.json":
/*!**************************************************************!*\
  !*** ./node_modules/google-gax/build/protos/operations.json ***!
  \**************************************************************/
/***/ ((module) => {

"use strict";
module.exports = /*#__PURE__*/JSON.parse('{"nested":{"google":{"nested":{"longrunning":{"options":{"cc_enable_arenas":true,"csharp_namespace":"Google.LongRunning","go_package":"google.golang.org/genproto/googleapis/longrunning;longrunning","java_multiple_files":true,"java_outer_classname":"OperationsProto","java_package":"com.google.longrunning","php_namespace":"Google\\\\LongRunning"},"nested":{"operationInfo":{"type":"google.longrunning.OperationInfo","id":1049,"extend":"google.protobuf.MethodOptions"},"Operations":{"options":{"(google.api.default_host)":"longrunning.googleapis.com"},"methods":{"ListOperations":{"requestType":"ListOperationsRequest","responseType":"ListOperationsResponse","options":{"(google.api.http).get":"/v1/{name=operations}","(google.api.method_signature)":"name,filter"},"parsedOptions":[{"(google.api.http)":{"get":"/v1/{name=operations}"}},{"(google.api.method_signature)":"name,filter"}]},"GetOperation":{"requestType":"GetOperationRequest","responseType":"Operation","options":{"(google.api.http).get":"/v1/operations/{name}","(google.api.method_signature)":"name"},"parsedOptions":[{"(google.api.http)":{"get":"/v1/operations/{name}"}},{"(google.api.method_signature)":"name"}]},"DeleteOperation":{"requestType":"DeleteOperationRequest","responseType":"google.protobuf.Empty","options":{"(google.api.http).delete":"/v1/{name=operations/**}","(google.api.method_signature)":"name"},"parsedOptions":[{"(google.api.http)":{"delete":"/v1/{name=operations/**}"}},{"(google.api.method_signature)":"name"}]},"CancelOperation":{"requestType":"CancelOperationRequest","responseType":"google.protobuf.Empty","options":{"(google.api.http).post":"/v1/{name=operations/**}:cancel","(google.api.http).body":"*","(google.api.method_signature)":"name"},"parsedOptions":[{"(google.api.http)":{"post":"/v1/{name=operations/**}:cancel","body":"*"}},{"(google.api.method_signature)":"name"}]},"WaitOperation":{"requestType":"WaitOperationRequest","responseType":"Operation"}}},"Operation":{"oneofs":{"result":{"oneof":["error","response"]}},"fields":{"name":{"type":"string","id":1},"metadata":{"type":"google.protobuf.Any","id":2},"done":{"type":"bool","id":3},"error":{"type":"google.rpc.Status","id":4},"response":{"type":"google.protobuf.Any","id":5}}},"GetOperationRequest":{"fields":{"name":{"type":"string","id":1}}},"ListOperationsRequest":{"fields":{"name":{"type":"string","id":4},"filter":{"type":"string","id":1},"pageSize":{"type":"int32","id":2},"pageToken":{"type":"string","id":3}}},"ListOperationsResponse":{"fields":{"operations":{"rule":"repeated","type":"Operation","id":1},"nextPageToken":{"type":"string","id":2}}},"CancelOperationRequest":{"fields":{"name":{"type":"string","id":1}}},"DeleteOperationRequest":{"fields":{"name":{"type":"string","id":1}}},"WaitOperationRequest":{"fields":{"name":{"type":"string","id":1},"timeout":{"type":"google.protobuf.Duration","id":2}}},"OperationInfo":{"fields":{"responseType":{"type":"string","id":1},"metadataType":{"type":"string","id":2}}}}},"api":{"options":{"go_package":"google.golang.org/genproto/googleapis/api/annotations;annotations","java_multiple_files":true,"java_outer_classname":"ClientProto","java_package":"com.google.api","objc_class_prefix":"GAPI","cc_enable_arenas":true},"nested":{"http":{"type":"HttpRule","id":72295728,"extend":"google.protobuf.MethodOptions"},"Http":{"fields":{"rules":{"rule":"repeated","type":"HttpRule","id":1},"fullyDecodeReservedExpansion":{"type":"bool","id":2}}},"HttpRule":{"oneofs":{"pattern":{"oneof":["get","put","post","delete","patch","custom"]}},"fields":{"selector":{"type":"string","id":1},"get":{"type":"string","id":2},"put":{"type":"string","id":3},"post":{"type":"string","id":4},"delete":{"type":"string","id":5},"patch":{"type":"string","id":6},"custom":{"type":"CustomHttpPattern","id":8},"body":{"type":"string","id":7},"responseBody":{"type":"string","id":12},"additionalBindings":{"rule":"repeated","type":"HttpRule","id":11}}},"CustomHttpPattern":{"fields":{"kind":{"type":"string","id":1},"path":{"type":"string","id":2}}},"methodSignature":{"rule":"repeated","type":"string","id":1051,"extend":"google.protobuf.MethodOptions"},"defaultHost":{"type":"string","id":1049,"extend":"google.protobuf.ServiceOptions"},"oauthScopes":{"type":"string","id":1050,"extend":"google.protobuf.ServiceOptions"}}},"protobuf":{"options":{"go_package":"github.com/golang/protobuf/protoc-gen-go/descriptor;descriptor","java_package":"com.google.protobuf","java_outer_classname":"DescriptorProtos","csharp_namespace":"Google.Protobuf.Reflection","objc_class_prefix":"GPB","cc_enable_arenas":true,"optimize_for":"SPEED"},"nested":{"FileDescriptorSet":{"fields":{"file":{"rule":"repeated","type":"FileDescriptorProto","id":1}}},"FileDescriptorProto":{"fields":{"name":{"type":"string","id":1},"package":{"type":"string","id":2},"dependency":{"rule":"repeated","type":"string","id":3},"publicDependency":{"rule":"repeated","type":"int32","id":10,"options":{"packed":false}},"weakDependency":{"rule":"repeated","type":"int32","id":11,"options":{"packed":false}},"messageType":{"rule":"repeated","type":"DescriptorProto","id":4},"enumType":{"rule":"repeated","type":"EnumDescriptorProto","id":5},"service":{"rule":"repeated","type":"ServiceDescriptorProto","id":6},"extension":{"rule":"repeated","type":"FieldDescriptorProto","id":7},"options":{"type":"FileOptions","id":8},"sourceCodeInfo":{"type":"SourceCodeInfo","id":9},"syntax":{"type":"string","id":12}}},"DescriptorProto":{"fields":{"name":{"type":"string","id":1},"field":{"rule":"repeated","type":"FieldDescriptorProto","id":2},"extension":{"rule":"repeated","type":"FieldDescriptorProto","id":6},"nestedType":{"rule":"repeated","type":"DescriptorProto","id":3},"enumType":{"rule":"repeated","type":"EnumDescriptorProto","id":4},"extensionRange":{"rule":"repeated","type":"ExtensionRange","id":5},"oneofDecl":{"rule":"repeated","type":"OneofDescriptorProto","id":8},"options":{"type":"MessageOptions","id":7},"reservedRange":{"rule":"repeated","type":"ReservedRange","id":9},"reservedName":{"rule":"repeated","type":"string","id":10}},"nested":{"ExtensionRange":{"fields":{"start":{"type":"int32","id":1},"end":{"type":"int32","id":2},"options":{"type":"ExtensionRangeOptions","id":3}}},"ReservedRange":{"fields":{"start":{"type":"int32","id":1},"end":{"type":"int32","id":2}}}}},"ExtensionRangeOptions":{"fields":{"uninterpretedOption":{"rule":"repeated","type":"UninterpretedOption","id":999}},"extensions":[[1000,536870911]]},"FieldDescriptorProto":{"fields":{"name":{"type":"string","id":1},"number":{"type":"int32","id":3},"label":{"type":"Label","id":4},"type":{"type":"Type","id":5},"typeName":{"type":"string","id":6},"extendee":{"type":"string","id":2},"defaultValue":{"type":"string","id":7},"oneofIndex":{"type":"int32","id":9},"jsonName":{"type":"string","id":10},"options":{"type":"FieldOptions","id":8},"proto3Optional":{"type":"bool","id":17}},"nested":{"Type":{"values":{"TYPE_DOUBLE":1,"TYPE_FLOAT":2,"TYPE_INT64":3,"TYPE_UINT64":4,"TYPE_INT32":5,"TYPE_FIXED64":6,"TYPE_FIXED32":7,"TYPE_BOOL":8,"TYPE_STRING":9,"TYPE_GROUP":10,"TYPE_MESSAGE":11,"TYPE_BYTES":12,"TYPE_UINT32":13,"TYPE_ENUM":14,"TYPE_SFIXED32":15,"TYPE_SFIXED64":16,"TYPE_SINT32":17,"TYPE_SINT64":18}},"Label":{"values":{"LABEL_OPTIONAL":1,"LABEL_REQUIRED":2,"LABEL_REPEATED":3}}}},"OneofDescriptorProto":{"fields":{"name":{"type":"string","id":1},"options":{"type":"OneofOptions","id":2}}},"EnumDescriptorProto":{"fields":{"name":{"type":"string","id":1},"value":{"rule":"repeated","type":"EnumValueDescriptorProto","id":2},"options":{"type":"EnumOptions","id":3},"reservedRange":{"rule":"repeated","type":"EnumReservedRange","id":4},"reservedName":{"rule":"repeated","type":"string","id":5}},"nested":{"EnumReservedRange":{"fields":{"start":{"type":"int32","id":1},"end":{"type":"int32","id":2}}}}},"EnumValueDescriptorProto":{"fields":{"name":{"type":"string","id":1},"number":{"type":"int32","id":2},"options":{"type":"EnumValueOptions","id":3}}},"ServiceDescriptorProto":{"fields":{"name":{"type":"string","id":1},"method":{"rule":"repeated","type":"MethodDescriptorProto","id":2},"options":{"type":"ServiceOptions","id":3}}},"MethodDescriptorProto":{"fields":{"name":{"type":"string","id":1},"inputType":{"type":"string","id":2},"outputType":{"type":"string","id":3},"options":{"type":"MethodOptions","id":4},"clientStreaming":{"type":"bool","id":5,"options":{"default":false}},"serverStreaming":{"type":"bool","id":6,"options":{"default":false}}}},"FileOptions":{"fields":{"javaPackage":{"type":"string","id":1},"javaOuterClassname":{"type":"string","id":8},"javaMultipleFiles":{"type":"bool","id":10,"options":{"default":false}},"javaGenerateEqualsAndHash":{"type":"bool","id":20,"options":{"deprecated":true}},"javaStringCheckUtf8":{"type":"bool","id":27,"options":{"default":false}},"optimizeFor":{"type":"OptimizeMode","id":9,"options":{"default":"SPEED"}},"goPackage":{"type":"string","id":11},"ccGenericServices":{"type":"bool","id":16,"options":{"default":false}},"javaGenericServices":{"type":"bool","id":17,"options":{"default":false}},"pyGenericServices":{"type":"bool","id":18,"options":{"default":false}},"phpGenericServices":{"type":"bool","id":42,"options":{"default":false}},"deprecated":{"type":"bool","id":23,"options":{"default":false}},"ccEnableArenas":{"type":"bool","id":31,"options":{"default":true}},"objcClassPrefix":{"type":"string","id":36},"csharpNamespace":{"type":"string","id":37},"swiftPrefix":{"type":"string","id":39},"phpClassPrefix":{"type":"string","id":40},"phpNamespace":{"type":"string","id":41},"phpMetadataNamespace":{"type":"string","id":44},"rubyPackage":{"type":"string","id":45},"uninterpretedOption":{"rule":"repeated","type":"UninterpretedOption","id":999}},"extensions":[[1000,536870911]],"reserved":[[38,38]],"nested":{"OptimizeMode":{"values":{"SPEED":1,"CODE_SIZE":2,"LITE_RUNTIME":3}}}},"MessageOptions":{"fields":{"messageSetWireFormat":{"type":"bool","id":1,"options":{"default":false}},"noStandardDescriptorAccessor":{"type":"bool","id":2,"options":{"default":false}},"deprecated":{"type":"bool","id":3,"options":{"default":false}},"mapEntry":{"type":"bool","id":7},"uninterpretedOption":{"rule":"repeated","type":"UninterpretedOption","id":999}},"extensions":[[1000,536870911]],"reserved":[[8,8],[9,9]]},"FieldOptions":{"fields":{"ctype":{"type":"CType","id":1,"options":{"default":"STRING"}},"packed":{"type":"bool","id":2},"jstype":{"type":"JSType","id":6,"options":{"default":"JS_NORMAL"}},"lazy":{"type":"bool","id":5,"options":{"default":false}},"deprecated":{"type":"bool","id":3,"options":{"default":false}},"weak":{"type":"bool","id":10,"options":{"default":false}},"uninterpretedOption":{"rule":"repeated","type":"UninterpretedOption","id":999}},"extensions":[[1000,536870911]],"reserved":[[4,4]],"nested":{"CType":{"values":{"STRING":0,"CORD":1,"STRING_PIECE":2}},"JSType":{"values":{"JS_NORMAL":0,"JS_STRING":1,"JS_NUMBER":2}}}},"OneofOptions":{"fields":{"uninterpretedOption":{"rule":"repeated","type":"UninterpretedOption","id":999}},"extensions":[[1000,536870911]]},"EnumOptions":{"fields":{"allowAlias":{"type":"bool","id":2},"deprecated":{"type":"bool","id":3,"options":{"default":false}},"uninterpretedOption":{"rule":"repeated","type":"UninterpretedOption","id":999}},"extensions":[[1000,536870911]],"reserved":[[5,5]]},"EnumValueOptions":{"fields":{"deprecated":{"type":"bool","id":1,"options":{"default":false}},"uninterpretedOption":{"rule":"repeated","type":"UninterpretedOption","id":999}},"extensions":[[1000,536870911]]},"ServiceOptions":{"fields":{"deprecated":{"type":"bool","id":33,"options":{"default":false}},"uninterpretedOption":{"rule":"repeated","type":"UninterpretedOption","id":999}},"extensions":[[1000,536870911]]},"MethodOptions":{"fields":{"deprecated":{"type":"bool","id":33,"options":{"default":false}},"idempotencyLevel":{"type":"IdempotencyLevel","id":34,"options":{"default":"IDEMPOTENCY_UNKNOWN"}},"uninterpretedOption":{"rule":"repeated","type":"UninterpretedOption","id":999}},"extensions":[[1000,536870911]],"nested":{"IdempotencyLevel":{"values":{"IDEMPOTENCY_UNKNOWN":0,"NO_SIDE_EFFECTS":1,"IDEMPOTENT":2}}}},"UninterpretedOption":{"fields":{"name":{"rule":"repeated","type":"NamePart","id":2},"identifierValue":{"type":"string","id":3},"positiveIntValue":{"type":"uint64","id":4},"negativeIntValue":{"type":"int64","id":5},"doubleValue":{"type":"double","id":6},"stringValue":{"type":"bytes","id":7},"aggregateValue":{"type":"string","id":8}},"nested":{"NamePart":{"fields":{"namePart":{"rule":"required","type":"string","id":1},"isExtension":{"rule":"required","type":"bool","id":2}}}}},"SourceCodeInfo":{"fields":{"location":{"rule":"repeated","type":"Location","id":1}},"nested":{"Location":{"fields":{"path":{"rule":"repeated","type":"int32","id":1},"span":{"rule":"repeated","type":"int32","id":2},"leadingComments":{"type":"string","id":3},"trailingComments":{"type":"string","id":4},"leadingDetachedComments":{"rule":"repeated","type":"string","id":6}}}}},"GeneratedCodeInfo":{"fields":{"annotation":{"rule":"repeated","type":"Annotation","id":1}},"nested":{"Annotation":{"fields":{"path":{"rule":"repeated","type":"int32","id":1},"sourceFile":{"type":"string","id":2},"begin":{"type":"int32","id":3},"end":{"type":"int32","id":4}}}}},"Any":{"fields":{"type_url":{"type":"string","id":1},"value":{"type":"bytes","id":2}}},"Duration":{"fields":{"seconds":{"type":"int64","id":1},"nanos":{"type":"int32","id":2}}},"Empty":{"fields":{}}}},"rpc":{"options":{"cc_enable_arenas":true,"go_package":"google.golang.org/genproto/googleapis/rpc/status;status","java_multiple_files":true,"java_outer_classname":"StatusProto","java_package":"com.google.rpc","objc_class_prefix":"RPC"},"nested":{"Status":{"fields":{"code":{"type":"int32","id":1},"message":{"type":"string","id":2},"details":{"rule":"repeated","type":"google.protobuf.Any","id":3}}}}}}}}}');

/***/ }),

/***/ "(rsc)/./node_modules/google-gax/build/protos/status.json":
/*!**********************************************************!*\
  !*** ./node_modules/google-gax/build/protos/status.json ***!
  \**********************************************************/
/***/ ((module) => {

"use strict";
module.exports = /*#__PURE__*/JSON.parse('{"nested":{"google":{"nested":{"protobuf":{"nested":{"Any":{"fields":{"type_url":{"type":"string","id":1},"value":{"type":"bytes","id":2}}},"Duration":{"fields":{"seconds":{"type":"int64","id":1},"nanos":{"type":"int32","id":2}}}}},"rpc":{"options":{"cc_enable_arenas":true,"go_package":"google.golang.org/genproto/googleapis/rpc/errdetails;errdetails","java_multiple_files":true,"java_outer_classname":"ErrorDetailsProto","java_package":"com.google.rpc","objc_class_prefix":"RPC"},"nested":{"Status":{"fields":{"code":{"type":"int32","id":1},"message":{"type":"string","id":2},"details":{"rule":"repeated","type":"google.protobuf.Any","id":3}}},"RetryInfo":{"fields":{"retryDelay":{"type":"google.protobuf.Duration","id":1}}},"DebugInfo":{"fields":{"stackEntries":{"rule":"repeated","type":"string","id":1},"detail":{"type":"string","id":2}}},"QuotaFailure":{"fields":{"violations":{"rule":"repeated","type":"Violation","id":1}},"nested":{"Violation":{"fields":{"subject":{"type":"string","id":1},"description":{"type":"string","id":2}}}}},"ErrorInfo":{"fields":{"reason":{"type":"string","id":1},"domain":{"type":"string","id":2},"metadata":{"keyType":"string","type":"string","id":3}}},"PreconditionFailure":{"fields":{"violations":{"rule":"repeated","type":"Violation","id":1}},"nested":{"Violation":{"fields":{"type":{"type":"string","id":1},"subject":{"type":"string","id":2},"description":{"type":"string","id":3}}}}},"BadRequest":{"fields":{"fieldViolations":{"rule":"repeated","type":"FieldViolation","id":1}},"nested":{"FieldViolation":{"fields":{"field":{"type":"string","id":1},"description":{"type":"string","id":2}}}}},"RequestInfo":{"fields":{"requestId":{"type":"string","id":1},"servingData":{"type":"string","id":2}}},"ResourceInfo":{"fields":{"resourceType":{"type":"string","id":1},"resourceName":{"type":"string","id":2},"owner":{"type":"string","id":3},"description":{"type":"string","id":4}}},"Help":{"fields":{"links":{"rule":"repeated","type":"Link","id":1}},"nested":{"Link":{"fields":{"description":{"type":"string","id":1},"url":{"type":"string","id":2}}}}},"LocalizedMessage":{"fields":{"locale":{"type":"string","id":1},"message":{"type":"string","id":2}}}}}}}}}');

/***/ }),

/***/ "(rsc)/./node_modules/google-gax/build/src/apiCaller.js":
/*!********************************************************!*\
  !*** ./node_modules/google-gax/build/src/apiCaller.js ***!
  \********************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\n/**\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.createAPICaller = createAPICaller;\nconst normalApiCaller_1 = __webpack_require__(/*! ./normalCalls/normalApiCaller */ \"(rsc)/./node_modules/google-gax/build/src/normalCalls/normalApiCaller.js\");\nfunction createAPICaller(settings, descriptor) {\n    if (!descriptor) {\n        return new normalApiCaller_1.NormalApiCaller();\n    }\n    return descriptor.getApiCaller(settings);\n}\n//# sourceMappingURL=apiCaller.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvZ29vZ2xlLWdheC9idWlsZC9zcmMvYXBpQ2FsbGVyLmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsOENBQTZDLEVBQUUsYUFBYSxFQUFDO0FBQzdELHVCQUF1QjtBQUN2QiwwQkFBMEIsbUJBQU8sQ0FBQywrR0FBK0I7QUFDakU7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJzb3VyY2VzIjpbIi9Vc2Vycy9iYWcteW9zZWIvRGVza3RvcC/hhJHhhanhhIfhhbXhhIvhhaEvaGFja2F0aG9uX3RlYW0vbXktYXBwL25vZGVfbW9kdWxlcy9nb29nbGUtZ2F4L2J1aWxkL3NyYy9hcGlDYWxsZXIuanMiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG4vKipcbiAqIENvcHlyaWdodCAyMDIwIEdvb2dsZSBMTENcbiAqXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4gKlxuICogICAgICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbiAqXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuICovXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLmNyZWF0ZUFQSUNhbGxlciA9IGNyZWF0ZUFQSUNhbGxlcjtcbmNvbnN0IG5vcm1hbEFwaUNhbGxlcl8xID0gcmVxdWlyZShcIi4vbm9ybWFsQ2FsbHMvbm9ybWFsQXBpQ2FsbGVyXCIpO1xuZnVuY3Rpb24gY3JlYXRlQVBJQ2FsbGVyKHNldHRpbmdzLCBkZXNjcmlwdG9yKSB7XG4gICAgaWYgKCFkZXNjcmlwdG9yKSB7XG4gICAgICAgIHJldHVybiBuZXcgbm9ybWFsQXBpQ2FsbGVyXzEuTm9ybWFsQXBpQ2FsbGVyKCk7XG4gICAgfVxuICAgIHJldHVybiBkZXNjcmlwdG9yLmdldEFwaUNhbGxlcihzZXR0aW5ncyk7XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1hcGlDYWxsZXIuanMubWFwIl0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/google-gax/build/src/apiCaller.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/google-gax/build/src/bundlingCalls/bundleApiCaller.js":
/*!****************************************************************************!*\
  !*** ./node_modules/google-gax/build/src/bundlingCalls/bundleApiCaller.js ***!
  \****************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\n/**\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.BundleApiCaller = void 0;\nconst call_1 = __webpack_require__(/*! ../call */ \"(rsc)/./node_modules/google-gax/build/src/call.js\");\nconst googleError_1 = __webpack_require__(/*! ../googleError */ \"(rsc)/./node_modules/google-gax/build/src/googleError.js\");\n/**\n * An implementation of APICaller for bundled calls.\n * Uses BundleExecutor to do bundling.\n */\nclass BundleApiCaller {\n    bundler;\n    constructor(bundler) {\n        this.bundler = bundler;\n    }\n    init(callback) {\n        if (callback) {\n            return new call_1.OngoingCall(callback);\n        }\n        return new call_1.OngoingCallPromise();\n    }\n    wrap(func) {\n        return func;\n    }\n    call(apiCall, argument, settings, status) {\n        if (!settings.isBundling) {\n            throw new googleError_1.GoogleError('Bundling enabled with no isBundling!');\n        }\n        status.call((argument, callback) => {\n            this.bundler.schedule(apiCall, argument, callback);\n            return status;\n        }, argument);\n    }\n    fail(canceller, err) {\n        canceller.callback(err);\n    }\n    result(canceller) {\n        return canceller.promise;\n    }\n}\nexports.BundleApiCaller = BundleApiCaller;\n//# sourceMappingURL=bundleApiCaller.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvZ29vZ2xlLWdheC9idWlsZC9zcmMvYnVuZGxpbmdDYWxscy9idW5kbGVBcGlDYWxsZXIuanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSw4Q0FBNkMsRUFBRSxhQUFhLEVBQUM7QUFDN0QsdUJBQXVCO0FBQ3ZCLGVBQWUsbUJBQU8sQ0FBQyxrRUFBUztBQUNoQyxzQkFBc0IsbUJBQU8sQ0FBQyxnRkFBZ0I7QUFDOUM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHVCQUF1QjtBQUN2QiIsInNvdXJjZXMiOlsiL1VzZXJzL2JhZy15b3NlYi9EZXNrdG9wL+GEkeGFqeGEh+GFteGEi+GFoS9oYWNrYXRob25fdGVhbS9teS1hcHAvbm9kZV9tb2R1bGVzL2dvb2dsZS1nYXgvYnVpbGQvc3JjL2J1bmRsaW5nQ2FsbHMvYnVuZGxlQXBpQ2FsbGVyLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuLyoqXG4gKiBDb3B5cmlnaHQgMjAyMCBHb29nbGUgTExDXG4gKlxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuICpcbiAqICAgICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4gKlxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbiAqL1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5CdW5kbGVBcGlDYWxsZXIgPSB2b2lkIDA7XG5jb25zdCBjYWxsXzEgPSByZXF1aXJlKFwiLi4vY2FsbFwiKTtcbmNvbnN0IGdvb2dsZUVycm9yXzEgPSByZXF1aXJlKFwiLi4vZ29vZ2xlRXJyb3JcIik7XG4vKipcbiAqIEFuIGltcGxlbWVudGF0aW9uIG9mIEFQSUNhbGxlciBmb3IgYnVuZGxlZCBjYWxscy5cbiAqIFVzZXMgQnVuZGxlRXhlY3V0b3IgdG8gZG8gYnVuZGxpbmcuXG4gKi9cbmNsYXNzIEJ1bmRsZUFwaUNhbGxlciB7XG4gICAgYnVuZGxlcjtcbiAgICBjb25zdHJ1Y3RvcihidW5kbGVyKSB7XG4gICAgICAgIHRoaXMuYnVuZGxlciA9IGJ1bmRsZXI7XG4gICAgfVxuICAgIGluaXQoY2FsbGJhY2spIHtcbiAgICAgICAgaWYgKGNhbGxiYWNrKSB7XG4gICAgICAgICAgICByZXR1cm4gbmV3IGNhbGxfMS5PbmdvaW5nQ2FsbChjYWxsYmFjayk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIG5ldyBjYWxsXzEuT25nb2luZ0NhbGxQcm9taXNlKCk7XG4gICAgfVxuICAgIHdyYXAoZnVuYykge1xuICAgICAgICByZXR1cm4gZnVuYztcbiAgICB9XG4gICAgY2FsbChhcGlDYWxsLCBhcmd1bWVudCwgc2V0dGluZ3MsIHN0YXR1cykge1xuICAgICAgICBpZiAoIXNldHRpbmdzLmlzQnVuZGxpbmcpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBnb29nbGVFcnJvcl8xLkdvb2dsZUVycm9yKCdCdW5kbGluZyBlbmFibGVkIHdpdGggbm8gaXNCdW5kbGluZyEnKTtcbiAgICAgICAgfVxuICAgICAgICBzdGF0dXMuY2FsbCgoYXJndW1lbnQsIGNhbGxiYWNrKSA9PiB7XG4gICAgICAgICAgICB0aGlzLmJ1bmRsZXIuc2NoZWR1bGUoYXBpQ2FsbCwgYXJndW1lbnQsIGNhbGxiYWNrKTtcbiAgICAgICAgICAgIHJldHVybiBzdGF0dXM7XG4gICAgICAgIH0sIGFyZ3VtZW50KTtcbiAgICB9XG4gICAgZmFpbChjYW5jZWxsZXIsIGVycikge1xuICAgICAgICBjYW5jZWxsZXIuY2FsbGJhY2soZXJyKTtcbiAgICB9XG4gICAgcmVzdWx0KGNhbmNlbGxlcikge1xuICAgICAgICByZXR1cm4gY2FuY2VsbGVyLnByb21pc2U7XG4gICAgfVxufVxuZXhwb3J0cy5CdW5kbGVBcGlDYWxsZXIgPSBCdW5kbGVBcGlDYWxsZXI7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1idW5kbGVBcGlDYWxsZXIuanMubWFwIl0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/google-gax/build/src/bundlingCalls/bundleApiCaller.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/google-gax/build/src/bundlingCalls/bundleDescriptor.js":
/*!*****************************************************************************!*\
  !*** ./node_modules/google-gax/build/src/bundlingCalls/bundleDescriptor.js ***!
  \*****************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\n/**\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.BundleDescriptor = void 0;\nconst normalApiCaller_1 = __webpack_require__(/*! ../normalCalls/normalApiCaller */ \"(rsc)/./node_modules/google-gax/build/src/normalCalls/normalApiCaller.js\");\nconst bundleApiCaller_1 = __webpack_require__(/*! ./bundleApiCaller */ \"(rsc)/./node_modules/google-gax/build/src/bundlingCalls/bundleApiCaller.js\");\nconst bundleExecutor_1 = __webpack_require__(/*! ./bundleExecutor */ \"(rsc)/./node_modules/google-gax/build/src/bundlingCalls/bundleExecutor.js\");\nconst util_1 = __webpack_require__(/*! ../util */ \"(rsc)/./node_modules/google-gax/build/src/util.js\");\n/**\n * A descriptor for calls that can be bundled into one call.\n */\nclass BundleDescriptor {\n    bundledField;\n    requestDiscriminatorFields;\n    subresponseField;\n    byteLengthFunction;\n    /**\n     * Describes the structure of bundled call.\n     *\n     * requestDiscriminatorFields may include '.' as a separator, which is used to\n     * indicate object traversal. This allows fields in nested objects to be used\n     * to determine what request to bundle.\n     *\n     * @property {String} bundledField\n     * @property {String} requestDiscriminatorFields\n     * @property {String} subresponseField\n     * @property {Function} byteLengthFunction\n     *\n     * @param {String} bundledField - the repeated field in the request message\n     *   that will have its elements aggregated by bundling.\n     * @param {String} requestDiscriminatorFields - a list of fields in the\n     *   target request message class that are used to detemrine which request\n     *   messages should be bundled together.\n     * @param {String} subresponseField - an optional field, when present it\n     *   indicates the field in the response message that should be used to\n     *   demultiplex the response into multiple response messages.\n     * @param {Function} byteLengthFunction - a function to obtain the byte\n     *   length to be consumed for the bundled field messages. Because Node.JS\n     *   protobuf.js/gRPC uses builtin Objects for the user-visible data and\n     *   internally they are encoded/decoded in protobuf manner, this function\n     *   is actually necessary to calculate the byte length.\n     * @constructor\n     */\n    constructor(bundledField, requestDiscriminatorFields, subresponseField, byteLengthFunction) {\n        if (!byteLengthFunction && typeof subresponseField === 'function') {\n            byteLengthFunction = subresponseField;\n            subresponseField = null;\n        }\n        this.bundledField = bundledField;\n        this.requestDiscriminatorFields =\n            requestDiscriminatorFields.map(util_1.toCamelCase);\n        this.subresponseField = subresponseField;\n        this.byteLengthFunction = byteLengthFunction;\n    }\n    getApiCaller(settings) {\n        if (settings.isBundling === false) {\n            return new normalApiCaller_1.NormalApiCaller();\n        }\n        return new bundleApiCaller_1.BundleApiCaller(new bundleExecutor_1.BundleExecutor(settings.bundleOptions, this));\n    }\n}\nexports.BundleDescriptor = BundleDescriptor;\n//# sourceMappingURL=bundleDescriptor.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvZ29vZ2xlLWdheC9idWlsZC9zcmMvYnVuZGxpbmdDYWxscy9idW5kbGVEZXNjcmlwdG9yLmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsOENBQTZDLEVBQUUsYUFBYSxFQUFDO0FBQzdELHdCQUF3QjtBQUN4QiwwQkFBMEIsbUJBQU8sQ0FBQyxnSEFBZ0M7QUFDbEUsMEJBQTBCLG1CQUFPLENBQUMscUdBQW1CO0FBQ3JELHlCQUF5QixtQkFBTyxDQUFDLG1HQUFrQjtBQUNuRCxlQUFlLG1CQUFPLENBQUMsa0VBQVM7QUFDaEM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esa0JBQWtCLFFBQVE7QUFDMUIsa0JBQWtCLFFBQVE7QUFDMUIsa0JBQWtCLFFBQVE7QUFDMUIsa0JBQWtCLFVBQVU7QUFDNUI7QUFDQSxlQUFlLFFBQVE7QUFDdkI7QUFDQSxlQUFlLFFBQVE7QUFDdkI7QUFDQTtBQUNBLGVBQWUsUUFBUTtBQUN2QjtBQUNBO0FBQ0EsZUFBZSxVQUFVO0FBQ3pCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHdCQUF3QjtBQUN4QiIsInNvdXJjZXMiOlsiL1VzZXJzL2JhZy15b3NlYi9EZXNrdG9wL+GEkeGFqeGEh+GFteGEi+GFoS9oYWNrYXRob25fdGVhbS9teS1hcHAvbm9kZV9tb2R1bGVzL2dvb2dsZS1nYXgvYnVpbGQvc3JjL2J1bmRsaW5nQ2FsbHMvYnVuZGxlRGVzY3JpcHRvci5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbi8qKlxuICogQ29weXJpZ2h0IDIwMjAgR29vZ2xlIExMQ1xuICpcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbiAqXG4gKiAgICAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuICpcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4gKi9cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuQnVuZGxlRGVzY3JpcHRvciA9IHZvaWQgMDtcbmNvbnN0IG5vcm1hbEFwaUNhbGxlcl8xID0gcmVxdWlyZShcIi4uL25vcm1hbENhbGxzL25vcm1hbEFwaUNhbGxlclwiKTtcbmNvbnN0IGJ1bmRsZUFwaUNhbGxlcl8xID0gcmVxdWlyZShcIi4vYnVuZGxlQXBpQ2FsbGVyXCIpO1xuY29uc3QgYnVuZGxlRXhlY3V0b3JfMSA9IHJlcXVpcmUoXCIuL2J1bmRsZUV4ZWN1dG9yXCIpO1xuY29uc3QgdXRpbF8xID0gcmVxdWlyZShcIi4uL3V0aWxcIik7XG4vKipcbiAqIEEgZGVzY3JpcHRvciBmb3IgY2FsbHMgdGhhdCBjYW4gYmUgYnVuZGxlZCBpbnRvIG9uZSBjYWxsLlxuICovXG5jbGFzcyBCdW5kbGVEZXNjcmlwdG9yIHtcbiAgICBidW5kbGVkRmllbGQ7XG4gICAgcmVxdWVzdERpc2NyaW1pbmF0b3JGaWVsZHM7XG4gICAgc3VicmVzcG9uc2VGaWVsZDtcbiAgICBieXRlTGVuZ3RoRnVuY3Rpb247XG4gICAgLyoqXG4gICAgICogRGVzY3JpYmVzIHRoZSBzdHJ1Y3R1cmUgb2YgYnVuZGxlZCBjYWxsLlxuICAgICAqXG4gICAgICogcmVxdWVzdERpc2NyaW1pbmF0b3JGaWVsZHMgbWF5IGluY2x1ZGUgJy4nIGFzIGEgc2VwYXJhdG9yLCB3aGljaCBpcyB1c2VkIHRvXG4gICAgICogaW5kaWNhdGUgb2JqZWN0IHRyYXZlcnNhbC4gVGhpcyBhbGxvd3MgZmllbGRzIGluIG5lc3RlZCBvYmplY3RzIHRvIGJlIHVzZWRcbiAgICAgKiB0byBkZXRlcm1pbmUgd2hhdCByZXF1ZXN0IHRvIGJ1bmRsZS5cbiAgICAgKlxuICAgICAqIEBwcm9wZXJ0eSB7U3RyaW5nfSBidW5kbGVkRmllbGRcbiAgICAgKiBAcHJvcGVydHkge1N0cmluZ30gcmVxdWVzdERpc2NyaW1pbmF0b3JGaWVsZHNcbiAgICAgKiBAcHJvcGVydHkge1N0cmluZ30gc3VicmVzcG9uc2VGaWVsZFxuICAgICAqIEBwcm9wZXJ0eSB7RnVuY3Rpb259IGJ5dGVMZW5ndGhGdW5jdGlvblxuICAgICAqXG4gICAgICogQHBhcmFtIHtTdHJpbmd9IGJ1bmRsZWRGaWVsZCAtIHRoZSByZXBlYXRlZCBmaWVsZCBpbiB0aGUgcmVxdWVzdCBtZXNzYWdlXG4gICAgICogICB0aGF0IHdpbGwgaGF2ZSBpdHMgZWxlbWVudHMgYWdncmVnYXRlZCBieSBidW5kbGluZy5cbiAgICAgKiBAcGFyYW0ge1N0cmluZ30gcmVxdWVzdERpc2NyaW1pbmF0b3JGaWVsZHMgLSBhIGxpc3Qgb2YgZmllbGRzIGluIHRoZVxuICAgICAqICAgdGFyZ2V0IHJlcXVlc3QgbWVzc2FnZSBjbGFzcyB0aGF0IGFyZSB1c2VkIHRvIGRldGVtcmluZSB3aGljaCByZXF1ZXN0XG4gICAgICogICBtZXNzYWdlcyBzaG91bGQgYmUgYnVuZGxlZCB0b2dldGhlci5cbiAgICAgKiBAcGFyYW0ge1N0cmluZ30gc3VicmVzcG9uc2VGaWVsZCAtIGFuIG9wdGlvbmFsIGZpZWxkLCB3aGVuIHByZXNlbnQgaXRcbiAgICAgKiAgIGluZGljYXRlcyB0aGUgZmllbGQgaW4gdGhlIHJlc3BvbnNlIG1lc3NhZ2UgdGhhdCBzaG91bGQgYmUgdXNlZCB0b1xuICAgICAqICAgZGVtdWx0aXBsZXggdGhlIHJlc3BvbnNlIGludG8gbXVsdGlwbGUgcmVzcG9uc2UgbWVzc2FnZXMuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gYnl0ZUxlbmd0aEZ1bmN0aW9uIC0gYSBmdW5jdGlvbiB0byBvYnRhaW4gdGhlIGJ5dGVcbiAgICAgKiAgIGxlbmd0aCB0byBiZSBjb25zdW1lZCBmb3IgdGhlIGJ1bmRsZWQgZmllbGQgbWVzc2FnZXMuIEJlY2F1c2UgTm9kZS5KU1xuICAgICAqICAgcHJvdG9idWYuanMvZ1JQQyB1c2VzIGJ1aWx0aW4gT2JqZWN0cyBmb3IgdGhlIHVzZXItdmlzaWJsZSBkYXRhIGFuZFxuICAgICAqICAgaW50ZXJuYWxseSB0aGV5IGFyZSBlbmNvZGVkL2RlY29kZWQgaW4gcHJvdG9idWYgbWFubmVyLCB0aGlzIGZ1bmN0aW9uXG4gICAgICogICBpcyBhY3R1YWxseSBuZWNlc3NhcnkgdG8gY2FsY3VsYXRlIHRoZSBieXRlIGxlbmd0aC5cbiAgICAgKiBAY29uc3RydWN0b3JcbiAgICAgKi9cbiAgICBjb25zdHJ1Y3RvcihidW5kbGVkRmllbGQsIHJlcXVlc3REaXNjcmltaW5hdG9yRmllbGRzLCBzdWJyZXNwb25zZUZpZWxkLCBieXRlTGVuZ3RoRnVuY3Rpb24pIHtcbiAgICAgICAgaWYgKCFieXRlTGVuZ3RoRnVuY3Rpb24gJiYgdHlwZW9mIHN1YnJlc3BvbnNlRmllbGQgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgICAgIGJ5dGVMZW5ndGhGdW5jdGlvbiA9IHN1YnJlc3BvbnNlRmllbGQ7XG4gICAgICAgICAgICBzdWJyZXNwb25zZUZpZWxkID0gbnVsbDtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLmJ1bmRsZWRGaWVsZCA9IGJ1bmRsZWRGaWVsZDtcbiAgICAgICAgdGhpcy5yZXF1ZXN0RGlzY3JpbWluYXRvckZpZWxkcyA9XG4gICAgICAgICAgICByZXF1ZXN0RGlzY3JpbWluYXRvckZpZWxkcy5tYXAodXRpbF8xLnRvQ2FtZWxDYXNlKTtcbiAgICAgICAgdGhpcy5zdWJyZXNwb25zZUZpZWxkID0gc3VicmVzcG9uc2VGaWVsZDtcbiAgICAgICAgdGhpcy5ieXRlTGVuZ3RoRnVuY3Rpb24gPSBieXRlTGVuZ3RoRnVuY3Rpb247XG4gICAgfVxuICAgIGdldEFwaUNhbGxlcihzZXR0aW5ncykge1xuICAgICAgICBpZiAoc2V0dGluZ3MuaXNCdW5kbGluZyA9PT0gZmFsc2UpIHtcbiAgICAgICAgICAgIHJldHVybiBuZXcgbm9ybWFsQXBpQ2FsbGVyXzEuTm9ybWFsQXBpQ2FsbGVyKCk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIG5ldyBidW5kbGVBcGlDYWxsZXJfMS5CdW5kbGVBcGlDYWxsZXIobmV3IGJ1bmRsZUV4ZWN1dG9yXzEuQnVuZGxlRXhlY3V0b3Ioc2V0dGluZ3MuYnVuZGxlT3B0aW9ucywgdGhpcykpO1xuICAgIH1cbn1cbmV4cG9ydHMuQnVuZGxlRGVzY3JpcHRvciA9IEJ1bmRsZURlc2NyaXB0b3I7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1idW5kbGVEZXNjcmlwdG9yLmpzLm1hcCJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/google-gax/build/src/bundlingCalls/bundleDescriptor.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/google-gax/build/src/bundlingCalls/bundleExecutor.js":
/*!***************************************************************************!*\
  !*** ./node_modules/google-gax/build/src/bundlingCalls/bundleExecutor.js ***!
  \***************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\n/**\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.BundleExecutor = void 0;\nconst status_1 = __webpack_require__(/*! ../status */ \"(rsc)/./node_modules/google-gax/build/src/status.js\");\nconst googleError_1 = __webpack_require__(/*! ../googleError */ \"(rsc)/./node_modules/google-gax/build/src/googleError.js\");\nconst warnings_1 = __webpack_require__(/*! ../warnings */ \"(rsc)/./node_modules/google-gax/build/src/warnings.js\");\nconst bundlingUtils_1 = __webpack_require__(/*! ./bundlingUtils */ \"(rsc)/./node_modules/google-gax/build/src/bundlingCalls/bundlingUtils.js\");\nconst task_1 = __webpack_require__(/*! ./task */ \"(rsc)/./node_modules/google-gax/build/src/bundlingCalls/task.js\");\nfunction noop() { }\n/**\n * BundleExecutor stores several timers for each bundle (calls are bundled based\n * on the options passed, each bundle has unique ID that is calculated based on\n * field values). Each timer fires and sends a call after certain amount of\n * time, and if a new request comes to the same bundle, the timer can be\n * restarted.\n */\nclass BundleExecutor {\n    _options;\n    _descriptor;\n    _tasks;\n    _timers;\n    _invocations;\n    _invocationId;\n    /**\n     * Organizes requests for an api service that requires to bundle them.\n     *\n     * @param {BundleOptions} bundleOptions - configures strategy this instance\n     *   uses when executing bundled functions.\n     * @param {BundleDescriptor} bundleDescriptor - the description of the bundling.\n     * @constructor\n     */\n    constructor(bundleOptions, bundleDescriptor) {\n        this._options = bundleOptions;\n        this._descriptor = bundleDescriptor;\n        this._tasks = {};\n        this._timers = {};\n        this._invocations = {};\n        this._invocationId = 0;\n    }\n    /**\n     * Schedule a method call.\n     *\n     * @param {function} apiCall - the function for an API call.\n     * @param {Object} request - the request object to be bundled with others.\n     * @param {APICallback} callback - the callback to be called when the method finished.\n     * @return {function()} - the function to cancel the scheduled invocation.\n     */\n    schedule(apiCall, request, callback) {\n        const bundleId = (0, bundlingUtils_1.computeBundleId)(request, this._descriptor.requestDiscriminatorFields);\n        callback = (callback || noop);\n        if (bundleId === undefined) {\n            (0, warnings_1.warn)('bundling_schedule_bundleid_undefined', 'The request does not have enough information for request bundling. ' +\n                `Invoking immediately. Request: ${JSON.stringify(request)} ` +\n                `discriminator fields: ${this._descriptor.requestDiscriminatorFields}`);\n            return apiCall(request, callback);\n        }\n        if (request[this._descriptor.bundledField] === undefined) {\n            (0, warnings_1.warn)('bundling_no_bundled_field', `Request does not contain field ${this._descriptor.bundledField} that must present for bundling. ` +\n                `Invoking immediately. Request: ${JSON.stringify(request)}`);\n            return apiCall(request, callback);\n        }\n        if (!(bundleId in this._tasks)) {\n            this._tasks[bundleId] = new task_1.Task(apiCall, request, this._descriptor.bundledField, this._descriptor.subresponseField);\n        }\n        let task = this._tasks[bundleId];\n        callback.id = String(this._invocationId++);\n        this._invocations[callback.id] = bundleId;\n        const bundledField = request[this._descriptor.bundledField];\n        const elementCount = bundledField.length;\n        let requestBytes = 0;\n        // eslint-disable-next-line @typescript-eslint/no-this-alias\n        const self = this;\n        bundledField.forEach(obj => {\n            requestBytes += this._descriptor.byteLengthFunction(obj);\n        });\n        const countLimit = this._options.elementCountLimit || 0;\n        const byteLimit = this._options.requestByteLimit || 0;\n        if ((countLimit > 0 && elementCount > countLimit) ||\n            (byteLimit > 0 && requestBytes >= byteLimit)) {\n            let message;\n            if (countLimit > 0 && elementCount > countLimit) {\n                message =\n                    'The number of elements ' +\n                        elementCount +\n                        ' exceeds the limit ' +\n                        this._options.elementCountLimit;\n            }\n            else {\n                message =\n                    'The required bytes ' +\n                        requestBytes +\n                        ' exceeds the limit ' +\n                        this._options.requestByteLimit;\n            }\n            const error = new googleError_1.GoogleError(message);\n            error.code = status_1.Status.INVALID_ARGUMENT;\n            callback(error);\n            return {\n                cancel: noop,\n            };\n        }\n        const existingCount = task.getElementCount();\n        const existingBytes = task.getRequestByteSize();\n        if ((countLimit > 0 && elementCount + existingCount >= countLimit) ||\n            (byteLimit > 0 && requestBytes + existingBytes >= byteLimit)) {\n            this._runNow(bundleId);\n            this._tasks[bundleId] = new task_1.Task(apiCall, request, this._descriptor.bundledField, this._descriptor.subresponseField);\n            task = this._tasks[bundleId];\n        }\n        task.extend(bundledField, requestBytes, callback);\n        const ret = {\n            cancel() {\n                self._cancel(callback.id);\n            },\n        };\n        const countThreshold = this._options.elementCountThreshold || 0;\n        const sizeThreshold = this._options.requestByteThreshold || 0;\n        if ((countThreshold > 0 && task.getElementCount() >= countThreshold) ||\n            (sizeThreshold > 0 && task.getRequestByteSize() >= sizeThreshold)) {\n            this._runNow(bundleId);\n            return ret;\n        }\n        if (!(bundleId in this._timers) && this._options.delayThreshold > 0) {\n            this._timers[bundleId] = setTimeout(() => {\n                delete this._timers[bundleId];\n                this._runNow(bundleId);\n            }, this._options.delayThreshold);\n        }\n        return ret;\n    }\n    /**\n     * Clears scheduled timeout if it exists.\n     *\n     * @param {String} bundleId - the id for the task whose timeout needs to be\n     *   cleared.\n     * @private\n     */\n    _maybeClearTimeout(bundleId) {\n        if (bundleId in this._timers) {\n            const timerId = this._timers[bundleId];\n            delete this._timers[bundleId];\n            clearTimeout(timerId);\n        }\n    }\n    /**\n     * Cancels an event.\n     *\n     * @param {String} id - The id for the event in the task.\n     * @private\n     */\n    _cancel(id) {\n        if (!(id in this._invocations)) {\n            return;\n        }\n        const bundleId = this._invocations[id];\n        if (!(bundleId in this._tasks)) {\n            return;\n        }\n        const task = this._tasks[bundleId];\n        delete this._invocations[id];\n        if (task.cancel(id)) {\n            this._maybeClearTimeout(bundleId);\n            delete this._tasks[bundleId];\n        }\n    }\n    /**\n     * Invokes a task.\n     *\n     * @param {String} bundleId - The id for the task.\n     * @private\n     */\n    _runNow(bundleId) {\n        if (!(bundleId in this._tasks)) {\n            (0, warnings_1.warn)('bundle_runnow_bundleid_unknown', `No such bundleid: ${bundleId}`);\n            return;\n        }\n        this._maybeClearTimeout(bundleId);\n        const task = this._tasks[bundleId];\n        delete this._tasks[bundleId];\n        task.run().forEach(id => {\n            delete this._invocations[id];\n        });\n    }\n}\nexports.BundleExecutor = BundleExecutor;\n//# sourceMappingURL=bundleExecutor.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/google-gax/build/src/bundlingCalls/bundleExecutor.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/google-gax/build/src/bundlingCalls/bundlingUtils.js":
/*!**************************************************************************!*\
  !*** ./node_modules/google-gax/build/src/bundlingCalls/bundlingUtils.js ***!
  \**************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";
eval("\n/**\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.computeBundleId = computeBundleId;\n/**\n * Compute the identifier of the `obj`. The objects of the same ID\n * will be bundled together.\n *\n * @param {RequestType} obj - The request object.\n * @param {String[]} discriminatorFields - The array of field names.\n *   A field name may include '.' as a separator, which is used to\n *   indicate object traversal.\n * @return {String|undefined} - the identifier string, or undefined if any\n *   discriminator fields do not exist.\n */\nfunction computeBundleId(obj, discriminatorFields) {\n    const ids = [];\n    let hasIds = false;\n    for (const field of discriminatorFields) {\n        const id = at(obj, field);\n        if (id === undefined) {\n            ids.push(null);\n        }\n        else {\n            hasIds = true;\n            ids.push(id);\n        }\n    }\n    if (!hasIds) {\n        return undefined;\n    }\n    return JSON.stringify(ids);\n}\n/**\n * Given an object field path that may contain dots, dig into the obj and find\n * the value at the given path.\n * @example\n * const obj = {\n *   a: {\n *     b: 5\n *   }\n * }\n * const id = at(obj, 'a.b');\n * // id = 5\n * @param field Path to the property with `.` notation\n * @param obj The object to traverse\n * @returns the value at the given path\n */\nfunction at(obj, field) {\n    const pathParts = field.split('.');\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    let currentObj = obj;\n    for (const pathPart of pathParts) {\n        currentObj = currentObj?.[pathPart];\n    }\n    return currentObj;\n}\n//# sourceMappingURL=bundlingUtils.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvZ29vZ2xlLWdheC9idWlsZC9zcmMvYnVuZGxpbmdDYWxscy9idW5kbGluZ1V0aWxzLmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsOENBQTZDLEVBQUUsYUFBYSxFQUFDO0FBQzdELHVCQUF1QjtBQUN2QjtBQUNBO0FBQ0E7QUFDQTtBQUNBLFdBQVcsYUFBYTtBQUN4QixXQUFXLFVBQVU7QUFDckI7QUFDQTtBQUNBLFlBQVksa0JBQWtCO0FBQzlCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsInNvdXJjZXMiOlsiL1VzZXJzL2JhZy15b3NlYi9EZXNrdG9wL+GEkeGFqeGEh+GFteGEi+GFoS9oYWNrYXRob25fdGVhbS9teS1hcHAvbm9kZV9tb2R1bGVzL2dvb2dsZS1nYXgvYnVpbGQvc3JjL2J1bmRsaW5nQ2FsbHMvYnVuZGxpbmdVdGlscy5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbi8qKlxuICogQ29weXJpZ2h0IDIwMjAgR29vZ2xlIExMQ1xuICpcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbiAqXG4gKiAgICAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuICpcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4gKi9cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuY29tcHV0ZUJ1bmRsZUlkID0gY29tcHV0ZUJ1bmRsZUlkO1xuLyoqXG4gKiBDb21wdXRlIHRoZSBpZGVudGlmaWVyIG9mIHRoZSBgb2JqYC4gVGhlIG9iamVjdHMgb2YgdGhlIHNhbWUgSURcbiAqIHdpbGwgYmUgYnVuZGxlZCB0b2dldGhlci5cbiAqXG4gKiBAcGFyYW0ge1JlcXVlc3RUeXBlfSBvYmogLSBUaGUgcmVxdWVzdCBvYmplY3QuXG4gKiBAcGFyYW0ge1N0cmluZ1tdfSBkaXNjcmltaW5hdG9yRmllbGRzIC0gVGhlIGFycmF5IG9mIGZpZWxkIG5hbWVzLlxuICogICBBIGZpZWxkIG5hbWUgbWF5IGluY2x1ZGUgJy4nIGFzIGEgc2VwYXJhdG9yLCB3aGljaCBpcyB1c2VkIHRvXG4gKiAgIGluZGljYXRlIG9iamVjdCB0cmF2ZXJzYWwuXG4gKiBAcmV0dXJuIHtTdHJpbmd8dW5kZWZpbmVkfSAtIHRoZSBpZGVudGlmaWVyIHN0cmluZywgb3IgdW5kZWZpbmVkIGlmIGFueVxuICogICBkaXNjcmltaW5hdG9yIGZpZWxkcyBkbyBub3QgZXhpc3QuXG4gKi9cbmZ1bmN0aW9uIGNvbXB1dGVCdW5kbGVJZChvYmosIGRpc2NyaW1pbmF0b3JGaWVsZHMpIHtcbiAgICBjb25zdCBpZHMgPSBbXTtcbiAgICBsZXQgaGFzSWRzID0gZmFsc2U7XG4gICAgZm9yIChjb25zdCBmaWVsZCBvZiBkaXNjcmltaW5hdG9yRmllbGRzKSB7XG4gICAgICAgIGNvbnN0IGlkID0gYXQob2JqLCBmaWVsZCk7XG4gICAgICAgIGlmIChpZCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICBpZHMucHVzaChudWxsKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIGhhc0lkcyA9IHRydWU7XG4gICAgICAgICAgICBpZHMucHVzaChpZCk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgaWYgKCFoYXNJZHMpIHtcbiAgICAgICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgICB9XG4gICAgcmV0dXJuIEpTT04uc3RyaW5naWZ5KGlkcyk7XG59XG4vKipcbiAqIEdpdmVuIGFuIG9iamVjdCBmaWVsZCBwYXRoIHRoYXQgbWF5IGNvbnRhaW4gZG90cywgZGlnIGludG8gdGhlIG9iaiBhbmQgZmluZFxuICogdGhlIHZhbHVlIGF0IHRoZSBnaXZlbiBwYXRoLlxuICogQGV4YW1wbGVcbiAqIGNvbnN0IG9iaiA9IHtcbiAqICAgYToge1xuICogICAgIGI6IDVcbiAqICAgfVxuICogfVxuICogY29uc3QgaWQgPSBhdChvYmosICdhLmInKTtcbiAqIC8vIGlkID0gNVxuICogQHBhcmFtIGZpZWxkIFBhdGggdG8gdGhlIHByb3BlcnR5IHdpdGggYC5gIG5vdGF0aW9uXG4gKiBAcGFyYW0gb2JqIFRoZSBvYmplY3QgdG8gdHJhdmVyc2VcbiAqIEByZXR1cm5zIHRoZSB2YWx1ZSBhdCB0aGUgZ2l2ZW4gcGF0aFxuICovXG5mdW5jdGlvbiBhdChvYmosIGZpZWxkKSB7XG4gICAgY29uc3QgcGF0aFBhcnRzID0gZmllbGQuc3BsaXQoJy4nKTtcbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L25vLWV4cGxpY2l0LWFueVxuICAgIGxldCBjdXJyZW50T2JqID0gb2JqO1xuICAgIGZvciAoY29uc3QgcGF0aFBhcnQgb2YgcGF0aFBhcnRzKSB7XG4gICAgICAgIGN1cnJlbnRPYmogPSBjdXJyZW50T2JqPy5bcGF0aFBhcnRdO1xuICAgIH1cbiAgICByZXR1cm4gY3VycmVudE9iajtcbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWJ1bmRsaW5nVXRpbHMuanMubWFwIl0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/google-gax/build/src/bundlingCalls/bundlingUtils.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/google-gax/build/src/bundlingCalls/task.js":
/*!*****************************************************************!*\
  !*** ./node_modules/google-gax/build/src/bundlingCalls/task.js ***!
  \*****************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\n/**\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.Task = void 0;\nexports.deepCopyForResponse = deepCopyForResponse;\nconst status_1 = __webpack_require__(/*! ../status */ \"(rsc)/./node_modules/google-gax/build/src/status.js\");\nconst googleError_1 = __webpack_require__(/*! ../googleError */ \"(rsc)/./node_modules/google-gax/build/src/googleError.js\");\n/**\n * Creates a deep copy of the object with the consideration of subresponse\n * fields for bundling.\n *\n * @param {Object} obj - The source object.\n * @param {Object?} subresponseInfo - The information to copy the subset of\n *   the field for the response. Do nothing if it's null.\n * @param {String} subresponseInfo.field - The field name.\n * @param {number} subresponseInfo.start - The offset where the copying\n *   element should starts with.\n * @param {number} subresponseInfo.end - The ending index where the copying\n *   region of the elements ends.\n * @return {Object} The copied object.\n * @private\n */\nfunction deepCopyForResponse(\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nobj, subresponseInfo) {\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    let result;\n    if (obj === null) {\n        return null;\n    }\n    if (obj === undefined) {\n        return undefined;\n    }\n    if (Array.isArray(obj)) {\n        result = [];\n        obj.forEach(element => {\n            result.push(deepCopyForResponse(element, null));\n        });\n        return result;\n    }\n    // Some objects (such as ByteBuffer) have copy method.\n    if (obj.copy !== undefined) {\n        return obj.copy();\n    }\n    // ArrayBuffer should be copied through slice().\n    if (obj instanceof ArrayBuffer) {\n        return obj.slice(0);\n    }\n    if (typeof obj === 'object') {\n        result = {};\n        Object.keys(obj).forEach(key => {\n            if (subresponseInfo &&\n                key === subresponseInfo.field &&\n                Array.isArray(obj[key])) {\n                // Note that subresponses are not deep-copied. This is safe because\n                // those subresponses are not shared among callbacks.\n                result[key] = obj[key].slice(subresponseInfo.start, subresponseInfo.end);\n            }\n            else {\n                result[key] = deepCopyForResponse(obj[key], null);\n            }\n        });\n        return result;\n    }\n    return obj;\n}\nclass Task {\n    _apiCall;\n    _request;\n    _bundledField;\n    _subresponseField;\n    _data;\n    callCanceller;\n    /**\n     * A task coordinates the execution of a single bundle.\n     *\n     * @param {function} apiCall - The function to conduct calling API.\n     * @param {Object} bundlingRequest - The base request object to be used\n     *   for the actual API call.\n     * @param {string} bundledField - The name of the field in bundlingRequest\n     *   to be bundled.\n     * @param {string=} subresponseField - The name of the field in the response\n     *   to be passed to the callback.\n     * @constructor\n     * @private\n     */\n    constructor(apiCall, bundlingRequest, bundledField, subresponseField) {\n        this._apiCall = apiCall;\n        this._request = bundlingRequest;\n        this._bundledField = bundledField;\n        this._subresponseField = subresponseField;\n        this._data = [];\n    }\n    /**\n     * Returns the number of elements in a task.\n     * @return {number} The number of elements.\n     */\n    getElementCount() {\n        let count = 0;\n        for (let i = 0; i < this._data.length; ++i) {\n            count += this._data[i].elements.length;\n        }\n        return count;\n    }\n    /**\n     * Returns the total byte size of the elements in a task.\n     * @return {number} The byte size.\n     */\n    getRequestByteSize() {\n        let size = 0;\n        for (let i = 0; i < this._data.length; ++i) {\n            size += this._data[i].bytes;\n        }\n        return size;\n    }\n    /**\n     * Invokes the actual API call with current elements.\n     * @return {string[]} - the list of ids for invocations to be run.\n     */\n    run() {\n        if (this._data.length === 0) {\n            return [];\n        }\n        const request = this._request;\n        const elements = [];\n        const ids = [];\n        for (let i = 0; i < this._data.length; ++i) {\n            elements.push(...this._data[i].elements);\n            ids.push(this._data[i].callback.id);\n        }\n        request[this._bundledField] = elements;\n        // eslint-disable-next-line @typescript-eslint/no-this-alias\n        const self = this;\n        this.callCanceller = this._apiCall(request, (err, response) => {\n            const responses = [];\n            if (err) {\n                self._data.forEach(() => {\n                    responses.push(undefined);\n                });\n            }\n            else {\n                let subresponseInfo = null;\n                if (self._subresponseField) {\n                    subresponseInfo = {\n                        field: self._subresponseField,\n                        start: 0,\n                    };\n                }\n                self._data.forEach(data => {\n                    if (subresponseInfo) {\n                        subresponseInfo.end =\n                            subresponseInfo.start + data.elements.length;\n                    }\n                    responses.push(deepCopyForResponse(response, subresponseInfo));\n                    if (subresponseInfo) {\n                        subresponseInfo.start = subresponseInfo.end;\n                    }\n                });\n            }\n            for (let i = 0; i < self._data.length; ++i) {\n                if (self._data[i].cancelled) {\n                    const error = new googleError_1.GoogleError('cancelled');\n                    error.code = status_1.Status.CANCELLED;\n                    self._data[i].callback(error);\n                }\n                else {\n                    self._data[i].callback(err, responses[i]);\n                }\n            }\n        });\n        return ids;\n    }\n    /**\n     * Appends the list of elements into the task.\n     * @param {Object[]} elements - the new list of elements.\n     * @param {number} bytes - the byte size required to encode elements in the API.\n     * @param {APICallback} callback - the callback of the method call.\n     */\n    extend(elements, bytes, callback) {\n        this._data.push({\n            elements,\n            bytes,\n            callback,\n        });\n    }\n    /**\n     * Cancels a part of elements.\n     * @param {string} id - The identifier of the part of elements.\n     * @return {boolean} Whether the entire task will be canceled or not.\n     */\n    cancel(id) {\n        if (this.callCanceller) {\n            let allCancelled = true;\n            this._data.forEach(d => {\n                if (d.callback.id === id) {\n                    d.cancelled = true;\n                }\n                if (!d.cancelled) {\n                    allCancelled = false;\n                }\n            });\n            if (allCancelled) {\n                this.callCanceller.cancel();\n            }\n            return allCancelled;\n        }\n        for (let i = 0; i < this._data.length; ++i) {\n            if (this._data[i].callback.id === id) {\n                const error = new googleError_1.GoogleError('cancelled');\n                error.code = status_1.Status.CANCELLED;\n                this._data[i].callback(error);\n                this._data.splice(i, 1);\n                break;\n            }\n        }\n        return this._data.length === 0;\n    }\n}\nexports.Task = Task;\n//# sourceMappingURL=task.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/google-gax/build/src/bundlingCalls/task.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/google-gax/build/src/call.js":
/*!***************************************************!*\
  !*** ./node_modules/google-gax/build/src/call.js ***!
  \***************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\n/**\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.OngoingCallPromise = exports.OngoingCall = void 0;\nconst status_1 = __webpack_require__(/*! ./status */ \"(rsc)/./node_modules/google-gax/build/src/status.js\");\nconst googleError_1 = __webpack_require__(/*! ./googleError */ \"(rsc)/./node_modules/google-gax/build/src/googleError.js\");\nclass OngoingCall {\n    callback;\n    cancelFunc;\n    completed;\n    /**\n     * OngoingCall manages callback, API calls, and cancellation\n     * of the API calls.\n     * @param {APICallback=} callback\n     *   The callback to be called asynchronously when the API call\n     *   finishes.\n     * @constructor\n     * @property {APICallback} callback\n     *   The callback function to be called.\n     * @private\n     */\n    constructor(callback) {\n        this.callback = callback;\n        this.completed = false;\n    }\n    /**\n     * Cancels the ongoing promise.\n     */\n    cancel() {\n        if (this.completed) {\n            return;\n        }\n        this.completed = true;\n        if (this.cancelFunc) {\n            this.cancelFunc();\n        }\n        else {\n            const error = new googleError_1.GoogleError('cancelled');\n            error.code = status_1.Status.CANCELLED;\n            this.callback(error);\n        }\n    }\n    /**\n     * Call calls the specified function. Result will be used to fulfill\n     * the promise.\n     *\n     * @param {SimpleCallbackFunction} func\n     *   A function for an API call.\n     * @param {Object} argument\n     *   A request object.\n     */\n    call(func, argument) {\n        if (this.completed) {\n            return;\n        }\n        const canceller = func(argument, (err, response, next, rawResponse) => {\n            this.completed = true;\n            setImmediate(this.callback, err, response, next, rawResponse);\n        });\n        if (canceller instanceof Promise) {\n            canceller.catch(err => {\n                setImmediate(this.callback, new googleError_1.GoogleError(err), null, null, null);\n            });\n        }\n        this.cancelFunc = () => canceller.cancel();\n    }\n}\nexports.OngoingCall = OngoingCall;\nclass OngoingCallPromise extends OngoingCall {\n    promise;\n    /**\n     * GaxPromise is GRPCCallbackWrapper, but it holds a promise when\n     * the API call finishes.\n     * @constructor\n     * @private\n     */\n    constructor() {\n        let resolveCallback;\n        let rejectCallback;\n        const callback = (err, response, next, rawResponse) => {\n            if (err) {\n                // If gRPC metadata exist, parsed google.rpc.status details.\n                if (err.metadata) {\n                    rejectCallback(googleError_1.GoogleError.parseGRPCStatusDetails(err));\n                }\n                else {\n                    rejectCallback(err);\n                }\n            }\n            else if (response !== undefined) {\n                resolveCallback([response, next || null, rawResponse || null]);\n            }\n            else {\n                throw new googleError_1.GoogleError('Neither error nor response are defined');\n            }\n        };\n        const promise = new Promise((resolve, reject) => {\n            resolveCallback = resolve;\n            rejectCallback = reject;\n        });\n        super(callback);\n        this.promise = promise;\n        this.promise.cancel = () => {\n            this.cancel();\n        };\n    }\n}\nexports.OngoingCallPromise = OngoingCallPromise;\n//# sourceMappingURL=call.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvZ29vZ2xlLWdheC9idWlsZC9zcmMvY2FsbC5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDhDQUE2QyxFQUFFLGFBQWEsRUFBQztBQUM3RCwwQkFBMEIsR0FBRyxtQkFBbUI7QUFDaEQsaUJBQWlCLG1CQUFPLENBQUMscUVBQVU7QUFDbkMsc0JBQXNCLG1CQUFPLENBQUMsK0VBQWU7QUFDN0M7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxlQUFlLGNBQWM7QUFDN0I7QUFDQTtBQUNBO0FBQ0Esa0JBQWtCLGFBQWE7QUFDL0I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxlQUFlLHdCQUF3QjtBQUN2QztBQUNBLGVBQWUsUUFBUTtBQUN2QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0EsYUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsbUJBQW1CO0FBQ25CO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsMEJBQTBCO0FBQzFCIiwic291cmNlcyI6WyIvVXNlcnMvYmFnLXlvc2ViL0Rlc2t0b3Av4YSR4YWp4YSH4YW14YSL4YWhL2hhY2thdGhvbl90ZWFtL215LWFwcC9ub2RlX21vZHVsZXMvZ29vZ2xlLWdheC9idWlsZC9zcmMvY2FsbC5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbi8qKlxuICogQ29weXJpZ2h0IDIwMjAgR29vZ2xlIExMQ1xuICpcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbiAqXG4gKiAgICAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuICpcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4gKi9cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuT25nb2luZ0NhbGxQcm9taXNlID0gZXhwb3J0cy5PbmdvaW5nQ2FsbCA9IHZvaWQgMDtcbmNvbnN0IHN0YXR1c18xID0gcmVxdWlyZShcIi4vc3RhdHVzXCIpO1xuY29uc3QgZ29vZ2xlRXJyb3JfMSA9IHJlcXVpcmUoXCIuL2dvb2dsZUVycm9yXCIpO1xuY2xhc3MgT25nb2luZ0NhbGwge1xuICAgIGNhbGxiYWNrO1xuICAgIGNhbmNlbEZ1bmM7XG4gICAgY29tcGxldGVkO1xuICAgIC8qKlxuICAgICAqIE9uZ29pbmdDYWxsIG1hbmFnZXMgY2FsbGJhY2ssIEFQSSBjYWxscywgYW5kIGNhbmNlbGxhdGlvblxuICAgICAqIG9mIHRoZSBBUEkgY2FsbHMuXG4gICAgICogQHBhcmFtIHtBUElDYWxsYmFjaz19IGNhbGxiYWNrXG4gICAgICogICBUaGUgY2FsbGJhY2sgdG8gYmUgY2FsbGVkIGFzeW5jaHJvbm91c2x5IHdoZW4gdGhlIEFQSSBjYWxsXG4gICAgICogICBmaW5pc2hlcy5cbiAgICAgKiBAY29uc3RydWN0b3JcbiAgICAgKiBAcHJvcGVydHkge0FQSUNhbGxiYWNrfSBjYWxsYmFja1xuICAgICAqICAgVGhlIGNhbGxiYWNrIGZ1bmN0aW9uIHRvIGJlIGNhbGxlZC5cbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqL1xuICAgIGNvbnN0cnVjdG9yKGNhbGxiYWNrKSB7XG4gICAgICAgIHRoaXMuY2FsbGJhY2sgPSBjYWxsYmFjaztcbiAgICAgICAgdGhpcy5jb21wbGV0ZWQgPSBmYWxzZTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogQ2FuY2VscyB0aGUgb25nb2luZyBwcm9taXNlLlxuICAgICAqL1xuICAgIGNhbmNlbCgpIHtcbiAgICAgICAgaWYgKHRoaXMuY29tcGxldGVkKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5jb21wbGV0ZWQgPSB0cnVlO1xuICAgICAgICBpZiAodGhpcy5jYW5jZWxGdW5jKSB7XG4gICAgICAgICAgICB0aGlzLmNhbmNlbEZ1bmMoKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIGNvbnN0IGVycm9yID0gbmV3IGdvb2dsZUVycm9yXzEuR29vZ2xlRXJyb3IoJ2NhbmNlbGxlZCcpO1xuICAgICAgICAgICAgZXJyb3IuY29kZSA9IHN0YXR1c18xLlN0YXR1cy5DQU5DRUxMRUQ7XG4gICAgICAgICAgICB0aGlzLmNhbGxiYWNrKGVycm9yKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICAvKipcbiAgICAgKiBDYWxsIGNhbGxzIHRoZSBzcGVjaWZpZWQgZnVuY3Rpb24uIFJlc3VsdCB3aWxsIGJlIHVzZWQgdG8gZnVsZmlsbFxuICAgICAqIHRoZSBwcm9taXNlLlxuICAgICAqXG4gICAgICogQHBhcmFtIHtTaW1wbGVDYWxsYmFja0Z1bmN0aW9ufSBmdW5jXG4gICAgICogICBBIGZ1bmN0aW9uIGZvciBhbiBBUEkgY2FsbC5cbiAgICAgKiBAcGFyYW0ge09iamVjdH0gYXJndW1lbnRcbiAgICAgKiAgIEEgcmVxdWVzdCBvYmplY3QuXG4gICAgICovXG4gICAgY2FsbChmdW5jLCBhcmd1bWVudCkge1xuICAgICAgICBpZiAodGhpcy5jb21wbGV0ZWQpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBjYW5jZWxsZXIgPSBmdW5jKGFyZ3VtZW50LCAoZXJyLCByZXNwb25zZSwgbmV4dCwgcmF3UmVzcG9uc2UpID0+IHtcbiAgICAgICAgICAgIHRoaXMuY29tcGxldGVkID0gdHJ1ZTtcbiAgICAgICAgICAgIHNldEltbWVkaWF0ZSh0aGlzLmNhbGxiYWNrLCBlcnIsIHJlc3BvbnNlLCBuZXh0LCByYXdSZXNwb25zZSk7XG4gICAgICAgIH0pO1xuICAgICAgICBpZiAoY2FuY2VsbGVyIGluc3RhbmNlb2YgUHJvbWlzZSkge1xuICAgICAgICAgICAgY2FuY2VsbGVyLmNhdGNoKGVyciA9PiB7XG4gICAgICAgICAgICAgICAgc2V0SW1tZWRpYXRlKHRoaXMuY2FsbGJhY2ssIG5ldyBnb29nbGVFcnJvcl8xLkdvb2dsZUVycm9yKGVyciksIG51bGwsIG51bGwsIG51bGwpO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5jYW5jZWxGdW5jID0gKCkgPT4gY2FuY2VsbGVyLmNhbmNlbCgpO1xuICAgIH1cbn1cbmV4cG9ydHMuT25nb2luZ0NhbGwgPSBPbmdvaW5nQ2FsbDtcbmNsYXNzIE9uZ29pbmdDYWxsUHJvbWlzZSBleHRlbmRzIE9uZ29pbmdDYWxsIHtcbiAgICBwcm9taXNlO1xuICAgIC8qKlxuICAgICAqIEdheFByb21pc2UgaXMgR1JQQ0NhbGxiYWNrV3JhcHBlciwgYnV0IGl0IGhvbGRzIGEgcHJvbWlzZSB3aGVuXG4gICAgICogdGhlIEFQSSBjYWxsIGZpbmlzaGVzLlxuICAgICAqIEBjb25zdHJ1Y3RvclxuICAgICAqIEBwcml2YXRlXG4gICAgICovXG4gICAgY29uc3RydWN0b3IoKSB7XG4gICAgICAgIGxldCByZXNvbHZlQ2FsbGJhY2s7XG4gICAgICAgIGxldCByZWplY3RDYWxsYmFjaztcbiAgICAgICAgY29uc3QgY2FsbGJhY2sgPSAoZXJyLCByZXNwb25zZSwgbmV4dCwgcmF3UmVzcG9uc2UpID0+IHtcbiAgICAgICAgICAgIGlmIChlcnIpIHtcbiAgICAgICAgICAgICAgICAvLyBJZiBnUlBDIG1ldGFkYXRhIGV4aXN0LCBwYXJzZWQgZ29vZ2xlLnJwYy5zdGF0dXMgZGV0YWlscy5cbiAgICAgICAgICAgICAgICBpZiAoZXJyLm1ldGFkYXRhKSB7XG4gICAgICAgICAgICAgICAgICAgIHJlamVjdENhbGxiYWNrKGdvb2dsZUVycm9yXzEuR29vZ2xlRXJyb3IucGFyc2VHUlBDU3RhdHVzRGV0YWlscyhlcnIpKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIHJlamVjdENhbGxiYWNrKGVycik7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSBpZiAocmVzcG9uc2UgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgICAgIHJlc29sdmVDYWxsYmFjayhbcmVzcG9uc2UsIG5leHQgfHwgbnVsbCwgcmF3UmVzcG9uc2UgfHwgbnVsbF0pO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IGdvb2dsZUVycm9yXzEuR29vZ2xlRXJyb3IoJ05laXRoZXIgZXJyb3Igbm9yIHJlc3BvbnNlIGFyZSBkZWZpbmVkJyk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH07XG4gICAgICAgIGNvbnN0IHByb21pc2UgPSBuZXcgUHJvbWlzZSgocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XG4gICAgICAgICAgICByZXNvbHZlQ2FsbGJhY2sgPSByZXNvbHZlO1xuICAgICAgICAgICAgcmVqZWN0Q2FsbGJhY2sgPSByZWplY3Q7XG4gICAgICAgIH0pO1xuICAgICAgICBzdXBlcihjYWxsYmFjayk7XG4gICAgICAgIHRoaXMucHJvbWlzZSA9IHByb21pc2U7XG4gICAgICAgIHRoaXMucHJvbWlzZS5jYW5jZWwgPSAoKSA9PiB7XG4gICAgICAgICAgICB0aGlzLmNhbmNlbCgpO1xuICAgICAgICB9O1xuICAgIH1cbn1cbmV4cG9ydHMuT25nb2luZ0NhbGxQcm9taXNlID0gT25nb2luZ0NhbGxQcm9taXNlO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9Y2FsbC5qcy5tYXAiXSwibmFtZXMiOltdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/google-gax/build/src/call.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/google-gax/build/src/createApiCall.js":
/*!************************************************************!*\
  !*** ./node_modules/google-gax/build/src/createApiCall.js ***!
  \************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\n/**\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.createApiCall = createApiCall;\n/**\n * Provides function wrappers that implement page streaming and retrying.\n */\nconst apiCaller_1 = __webpack_require__(/*! ./apiCaller */ \"(rsc)/./node_modules/google-gax/build/src/apiCaller.js\");\nconst gax_1 = __webpack_require__(/*! ./gax */ \"(rsc)/./node_modules/google-gax/build/src/gax.js\");\nconst retries_1 = __webpack_require__(/*! ./normalCalls/retries */ \"(rsc)/./node_modules/google-gax/build/src/normalCalls/retries.js\");\nconst timeout_1 = __webpack_require__(/*! ./normalCalls/timeout */ \"(rsc)/./node_modules/google-gax/build/src/normalCalls/timeout.js\");\nconst streamingApiCaller_1 = __webpack_require__(/*! ./streamingCalls/streamingApiCaller */ \"(rsc)/./node_modules/google-gax/build/src/streamingCalls/streamingApiCaller.js\");\nconst warnings_1 = __webpack_require__(/*! ./warnings */ \"(rsc)/./node_modules/google-gax/build/src/warnings.js\");\n/**\n * Converts an rpc call into an API call governed by the settings.\n *\n * In typical usage, `func` will be a promise to a callable used to make an rpc\n * request. This will mostly likely be a bound method from a request stub used\n * to make an rpc call. It is not a direct function but a Promise instance,\n * because of its asynchronism (typically, obtaining the auth information).\n *\n * The result is a function which manages the API call with the given settings\n * and the options on the invocation.\n *\n * @param {Promise<GRPCCall>|GRPCCall} func - is either a promise to be used to make\n *   a bare RPC call, or just a bare RPC call.\n * @param {CallSettings} settings - provides the settings for this call\n * @param {Descriptor} descriptor - optionally specify the descriptor for\n *   the method call.\n * @return {GaxCall} func - a bound method on a request stub used\n *   to make an rpc call.\n */\nfunction createApiCall(func, settings, descriptor, \n// eslint-disable-next-line @typescript-eslint/no-unused-vars\n_fallback) {\n    // we want to be able to accept both promise resolving to a function and a\n    // function. Currently client librares are only calling this method with a\n    // promise, but it will change.\n    const funcPromise = typeof func === 'function' ? Promise.resolve(func) : func;\n    // the following apiCaller will be used for all calls of this function...\n    const apiCaller = (0, apiCaller_1.createAPICaller)(settings, descriptor);\n    return (request, callOptions, callback) => {\n        let currentApiCaller = apiCaller;\n        let thisSettings;\n        if (currentApiCaller instanceof streamingApiCaller_1.StreamingApiCaller) {\n            const gaxStreamingRetries = currentApiCaller.descriptor?.gaxStreamingRetries ?? false;\n            // If Gax streaming retries are enabled, check settings passed at call time and convert parameters if needed\n            const convertedRetryOptions = (0, gax_1.convertRetryOptions)(callOptions, gaxStreamingRetries);\n            thisSettings = settings.merge(convertedRetryOptions);\n        }\n        else {\n            thisSettings = settings.merge(callOptions);\n        }\n        // special case: if bundling is disabled for this one call,\n        // use default API caller instead\n        if (settings.isBundling && !thisSettings.isBundling) {\n            currentApiCaller = (0, apiCaller_1.createAPICaller)(settings, undefined);\n        }\n        const ongoingCall = currentApiCaller.init(callback);\n        funcPromise\n            .then((func) => {\n            // Initially, the function is just what gRPC server stub contains.\n            func = currentApiCaller.wrap(func);\n            const streaming = currentApiCaller.descriptor\n                ?.streaming;\n            const retry = thisSettings.retry;\n            if (streaming && retry) {\n                if (retry.retryCodes.length > 0 && retry.shouldRetryFn) {\n                    (0, warnings_1.warn)('either_retrycodes_or_shouldretryfn', 'Only one of retryCodes or shouldRetryFn may be defined. Ignoring retryCodes.');\n                    retry.retryCodes = [];\n                }\n                if (!currentApiCaller.descriptor\n                    .gaxStreamingRetries &&\n                    retry.getResumptionRequestFn) {\n                    throw new Error('getResumptionRequestFn can only be used when gaxStreamingRetries is set to true.');\n                }\n            }\n            if (!streaming && retry) {\n                if (retry.shouldRetryFn) {\n                    throw new Error('Using a function to determine retry eligibility is only supported with server streaming calls');\n                }\n                if (retry.getResumptionRequestFn) {\n                    throw new Error('Resumption strategy can only be used with server streaming retries');\n                }\n                if (retry.retryCodes && retry.retryCodes.length > 0) {\n                    retry.backoffSettings.initialRpcTimeoutMillis ??=\n                        thisSettings.timeout;\n                    return (0, retries_1.retryable)(func, thisSettings.retry, thisSettings.otherArgs, thisSettings.apiName);\n                }\n            }\n            return (0, timeout_1.addTimeoutArg)(func, thisSettings.timeout, thisSettings.otherArgs);\n        })\n            .then((apiCall) => {\n            // After adding retries / timeouts, the call function becomes simpler:\n            // it only accepts request and callback.\n            currentApiCaller.call(apiCall, request, thisSettings, ongoingCall);\n        })\n            .catch(err => {\n            currentApiCaller.fail(ongoingCall, err);\n        });\n        // Calls normally return a \"cancellable promise\" that can be used to `await` for the actual result,\n        // or to cancel the ongoing call.\n        return currentApiCaller.result(ongoingCall);\n    };\n}\n//# sourceMappingURL=createApiCall.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/google-gax/build/src/createApiCall.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/google-gax/build/src/descriptor.js":
/*!*********************************************************!*\
  !*** ./node_modules/google-gax/build/src/descriptor.js ***!
  \*********************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\n/**\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.BundleDescriptor = exports.StreamDescriptor = exports.PageDescriptor = exports.LongrunningDescriptor = void 0;\nvar longRunningDescriptor_1 = __webpack_require__(/*! ./longRunningCalls/longRunningDescriptor */ \"(rsc)/./node_modules/google-gax/build/src/longRunningCalls/longRunningDescriptor.js\");\nObject.defineProperty(exports, \"LongrunningDescriptor\", ({ enumerable: true, get: function () { return longRunningDescriptor_1.LongRunningDescriptor; } }));\nvar pageDescriptor_1 = __webpack_require__(/*! ./paginationCalls/pageDescriptor */ \"(rsc)/./node_modules/google-gax/build/src/paginationCalls/pageDescriptor.js\");\nObject.defineProperty(exports, \"PageDescriptor\", ({ enumerable: true, get: function () { return pageDescriptor_1.PageDescriptor; } }));\nvar streamDescriptor_1 = __webpack_require__(/*! ./streamingCalls/streamDescriptor */ \"(rsc)/./node_modules/google-gax/build/src/streamingCalls/streamDescriptor.js\");\nObject.defineProperty(exports, \"StreamDescriptor\", ({ enumerable: true, get: function () { return streamDescriptor_1.StreamDescriptor; } }));\nvar bundleDescriptor_1 = __webpack_require__(/*! ./bundlingCalls/bundleDescriptor */ \"(rsc)/./node_modules/google-gax/build/src/bundlingCalls/bundleDescriptor.js\");\nObject.defineProperty(exports, \"BundleDescriptor\", ({ enumerable: true, get: function () { return bundleDescriptor_1.BundleDescriptor; } }));\n//# sourceMappingURL=descriptor.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvZ29vZ2xlLWdheC9idWlsZC9zcmMvZGVzY3JpcHRvci5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDhDQUE2QyxFQUFFLGFBQWEsRUFBQztBQUM3RCx3QkFBd0IsR0FBRyx3QkFBd0IsR0FBRyxzQkFBc0IsR0FBRyw2QkFBNkI7QUFDNUcsOEJBQThCLG1CQUFPLENBQUMscUlBQTBDO0FBQ2hGLHlEQUF3RCxFQUFFLHFDQUFxQyx5REFBeUQsRUFBQztBQUN6Six1QkFBdUIsbUJBQU8sQ0FBQyxxSEFBa0M7QUFDakUsa0RBQWlELEVBQUUscUNBQXFDLDJDQUEyQyxFQUFDO0FBQ3BJLHlCQUF5QixtQkFBTyxDQUFDLHVIQUFtQztBQUNwRSxvREFBbUQsRUFBRSxxQ0FBcUMsK0NBQStDLEVBQUM7QUFDMUkseUJBQXlCLG1CQUFPLENBQUMscUhBQWtDO0FBQ25FLG9EQUFtRCxFQUFFLHFDQUFxQywrQ0FBK0MsRUFBQztBQUMxSSIsInNvdXJjZXMiOlsiL1VzZXJzL2JhZy15b3NlYi9EZXNrdG9wL+GEkeGFqeGEh+GFteGEi+GFoS9oYWNrYXRob25fdGVhbS9teS1hcHAvbm9kZV9tb2R1bGVzL2dvb2dsZS1nYXgvYnVpbGQvc3JjL2Rlc2NyaXB0b3IuanMiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG4vKipcbiAqIENvcHlyaWdodCAyMDIwIEdvb2dsZSBMTENcbiAqXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4gKlxuICogICAgICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbiAqXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuICovXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLkJ1bmRsZURlc2NyaXB0b3IgPSBleHBvcnRzLlN0cmVhbURlc2NyaXB0b3IgPSBleHBvcnRzLlBhZ2VEZXNjcmlwdG9yID0gZXhwb3J0cy5Mb25ncnVubmluZ0Rlc2NyaXB0b3IgPSB2b2lkIDA7XG52YXIgbG9uZ1J1bm5pbmdEZXNjcmlwdG9yXzEgPSByZXF1aXJlKFwiLi9sb25nUnVubmluZ0NhbGxzL2xvbmdSdW5uaW5nRGVzY3JpcHRvclwiKTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIkxvbmdydW5uaW5nRGVzY3JpcHRvclwiLCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gbG9uZ1J1bm5pbmdEZXNjcmlwdG9yXzEuTG9uZ1J1bm5pbmdEZXNjcmlwdG9yOyB9IH0pO1xudmFyIHBhZ2VEZXNjcmlwdG9yXzEgPSByZXF1aXJlKFwiLi9wYWdpbmF0aW9uQ2FsbHMvcGFnZURlc2NyaXB0b3JcIik7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJQYWdlRGVzY3JpcHRvclwiLCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gcGFnZURlc2NyaXB0b3JfMS5QYWdlRGVzY3JpcHRvcjsgfSB9KTtcbnZhciBzdHJlYW1EZXNjcmlwdG9yXzEgPSByZXF1aXJlKFwiLi9zdHJlYW1pbmdDYWxscy9zdHJlYW1EZXNjcmlwdG9yXCIpO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiU3RyZWFtRGVzY3JpcHRvclwiLCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gc3RyZWFtRGVzY3JpcHRvcl8xLlN0cmVhbURlc2NyaXB0b3I7IH0gfSk7XG52YXIgYnVuZGxlRGVzY3JpcHRvcl8xID0gcmVxdWlyZShcIi4vYnVuZGxpbmdDYWxscy9idW5kbGVEZXNjcmlwdG9yXCIpO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiQnVuZGxlRGVzY3JpcHRvclwiLCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gYnVuZGxlRGVzY3JpcHRvcl8xLkJ1bmRsZURlc2NyaXB0b3I7IH0gfSk7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1kZXNjcmlwdG9yLmpzLm1hcCJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/google-gax/build/src/descriptor.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/google-gax/build/src/fallback.js":
/*!*******************************************************!*\
  !*** ./node_modules/google-gax/build/src/fallback.js ***!
  \*******************************************************/
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n/**\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    var desc = Object.getOwnPropertyDescriptor(m, k);\n    if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n      desc = { enumerable: true, get: function() { return m[k]; } };\n    }\n    Object.defineProperty(o, k2, desc);\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {\n    Object.defineProperty(o, \"default\", { enumerable: true, value: v });\n}) : function(o, v) {\n    o[\"default\"] = v;\n});\nvar __importStar = (this && this.__importStar) || (function () {\n    var ownKeys = function(o) {\n        ownKeys = Object.getOwnPropertyNames || function (o) {\n            var ar = [];\n            for (var k in o) if (Object.prototype.hasOwnProperty.call(o, k)) ar[ar.length] = k;\n            return ar;\n        };\n        return ownKeys(o);\n    };\n    return function (mod) {\n        if (mod && mod.__esModule) return mod;\n        var result = {};\n        if (mod != null) for (var k = ownKeys(mod), i = 0; i < k.length; i++) if (k[i] !== \"default\") __createBinding(result, mod, k[i]);\n        __setModuleDefault(result, mod);\n        return result;\n    };\n})();\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.fallback = exports.GoogleError = exports.operation = exports.Operation = exports.warn = exports.protobufMinimal = exports.protobuf = exports.LocationProtos = exports.IamProtos = exports.operationsProtos = exports.GrpcClient = exports.defaultToObjectOptions = exports.makeUUID = exports.LocationsClient = exports.IamClient = exports.OperationsClient = exports.StreamType = exports.StreamDescriptor = exports.PageDescriptor = exports.LongrunningDescriptor = exports.BundleDescriptor = exports.version = exports.createDefaultBackoffSettings = exports.RetryOptions = exports.constructSettings = exports.CallSettings = exports.routingHeader = exports.PathTemplate = void 0;\nexports.lro = lro;\nexports.createApiCall = createApiCall;\nconst object_hash_1 = __importDefault(__webpack_require__(/*! object-hash */ \"(rsc)/./node_modules/object-hash/index.js\"));\nconst protobuf = __importStar(__webpack_require__(/*! protobufjs */ \"(rsc)/./node_modules/protobufjs/index.js\"));\nexports.protobuf = protobuf;\nconst gax = __importStar(__webpack_require__(/*! ./gax */ \"(rsc)/./node_modules/google-gax/build/src/gax.js\"));\nconst routingHeader = __importStar(__webpack_require__(/*! ./routingHeader */ \"(rsc)/./node_modules/google-gax/build/src/routingHeader.js\"));\nexports.routingHeader = routingHeader;\nconst status_1 = __webpack_require__(/*! ./status */ \"(rsc)/./node_modules/google-gax/build/src/status.js\");\nconst google_auth_library_1 = __webpack_require__(/*! google-auth-library */ \"(rsc)/./node_modules/google-auth-library/build/src/index.js\");\nconst operationsClient_1 = __webpack_require__(/*! ./operationsClient */ \"(rsc)/./node_modules/google-gax/build/src/operationsClient.js\");\nconst createApiCall_1 = __webpack_require__(/*! ./createApiCall */ \"(rsc)/./node_modules/google-gax/build/src/createApiCall.js\");\nconst fallbackRest = __importStar(__webpack_require__(/*! ./fallbackRest */ \"(rsc)/./node_modules/google-gax/build/src/fallbackRest.js\"));\nconst featureDetection_1 = __webpack_require__(/*! ./featureDetection */ \"(rsc)/./node_modules/google-gax/build/src/featureDetection.js\");\nconst fallbackServiceStub_1 = __webpack_require__(/*! ./fallbackServiceStub */ \"(rsc)/./node_modules/google-gax/build/src/fallbackServiceStub.js\");\nconst streaming_1 = __webpack_require__(/*! ./streamingCalls/streaming */ \"(rsc)/./node_modules/google-gax/build/src/streamingCalls/streaming.js\");\nconst util_1 = __webpack_require__(/*! ./util */ \"(rsc)/./node_modules/google-gax/build/src/util.js\");\nconst IamProtos = __importStar(__webpack_require__(/*! ../protos/iam_service */ \"(rsc)/./node_modules/google-gax/build/protos/iam_service.js\"));\nexports.IamProtos = IamProtos;\nconst LocationProtos = __importStar(__webpack_require__(/*! ../protos/locations */ \"(rsc)/./node_modules/google-gax/build/protos/locations.js\"));\nexports.LocationProtos = LocationProtos;\nconst operationsProtos = __importStar(__webpack_require__(/*! ../protos/operations */ \"(rsc)/./node_modules/google-gax/build/protos/operations.js\"));\nexports.operationsProtos = operationsProtos;\nvar pathTemplate_1 = __webpack_require__(/*! ./pathTemplate */ \"(rsc)/./node_modules/google-gax/build/src/pathTemplate.js\");\nObject.defineProperty(exports, \"PathTemplate\", ({ enumerable: true, get: function () { return pathTemplate_1.PathTemplate; } }));\nvar gax_1 = __webpack_require__(/*! ./gax */ \"(rsc)/./node_modules/google-gax/build/src/gax.js\");\nObject.defineProperty(exports, \"CallSettings\", ({ enumerable: true, get: function () { return gax_1.CallSettings; } }));\nObject.defineProperty(exports, \"constructSettings\", ({ enumerable: true, get: function () { return gax_1.constructSettings; } }));\nObject.defineProperty(exports, \"RetryOptions\", ({ enumerable: true, get: function () { return gax_1.RetryOptions; } }));\nObject.defineProperty(exports, \"createDefaultBackoffSettings\", ({ enumerable: true, get: function () { return gax_1.createDefaultBackoffSettings; } }));\nexports.version = (__webpack_require__(/*! ../../package.json */ \"(rsc)/./node_modules/google-gax/package.json\").version) + '-fallback';\nvar descriptor_1 = __webpack_require__(/*! ./descriptor */ \"(rsc)/./node_modules/google-gax/build/src/descriptor.js\");\nObject.defineProperty(exports, \"BundleDescriptor\", ({ enumerable: true, get: function () { return descriptor_1.BundleDescriptor; } }));\nObject.defineProperty(exports, \"LongrunningDescriptor\", ({ enumerable: true, get: function () { return descriptor_1.LongrunningDescriptor; } }));\nObject.defineProperty(exports, \"PageDescriptor\", ({ enumerable: true, get: function () { return descriptor_1.PageDescriptor; } }));\nObject.defineProperty(exports, \"StreamDescriptor\", ({ enumerable: true, get: function () { return descriptor_1.StreamDescriptor; } }));\nvar streaming_2 = __webpack_require__(/*! ./streamingCalls/streaming */ \"(rsc)/./node_modules/google-gax/build/src/streamingCalls/streaming.js\");\nObject.defineProperty(exports, \"StreamType\", ({ enumerable: true, get: function () { return streaming_2.StreamType; } }));\nvar operationsClient_2 = __webpack_require__(/*! ./operationsClient */ \"(rsc)/./node_modules/google-gax/build/src/operationsClient.js\");\nObject.defineProperty(exports, \"OperationsClient\", ({ enumerable: true, get: function () { return operationsClient_2.OperationsClient; } }));\nvar iamService_1 = __webpack_require__(/*! ./iamService */ \"(rsc)/./node_modules/google-gax/build/src/iamService.js\");\nObject.defineProperty(exports, \"IamClient\", ({ enumerable: true, get: function () { return iamService_1.IamClient; } }));\nvar locationService_1 = __webpack_require__(/*! ./locationService */ \"(rsc)/./node_modules/google-gax/build/src/locationService.js\");\nObject.defineProperty(exports, \"LocationsClient\", ({ enumerable: true, get: function () { return locationService_1.LocationsClient; } }));\nvar util_2 = __webpack_require__(/*! ./util */ \"(rsc)/./node_modules/google-gax/build/src/util.js\");\nObject.defineProperty(exports, \"makeUUID\", ({ enumerable: true, get: function () { return util_2.makeUUID; } }));\nexports.defaultToObjectOptions = {\n    keepCase: false,\n    longs: String,\n    enums: String,\n    defaults: true,\n    oneofs: true,\n};\nconst CLIENT_VERSION_HEADER = 'x-goog-api-client';\nclass GrpcClient {\n    auth;\n    /**\n     * @deprecated use {@link GrpcClient.auth} instead\n     */\n    authClient;\n    fallback;\n    grpcVersion;\n    static protoCache = new Map();\n    httpRules;\n    numericEnums;\n    minifyJson;\n    /**\n     * In rare cases users might need to deallocate all memory consumed by loaded protos.\n     * This method will delete the proto cache content.\n     */\n    static clearProtoCache() {\n        GrpcClient.protoCache.clear();\n    }\n    /**\n     * gRPC-fallback version of GrpcClient\n     * Implements GrpcClient API for a browser using grpc-fallback protocol (sends serialized protobuf to HTTP/1 $rpc endpoint).\n     *\n     * @param options {@link GrpcClientOptions}\n     */\n    constructor(options = {}) {\n        if (options.auth) {\n            this.auth = options.auth;\n        }\n        else if ('authClient' in options) {\n            this.auth = options.authClient;\n        }\n        else {\n            this.auth = new google_auth_library_1.GoogleAuth({\n                authClient: options.auth,\n                ...options,\n            });\n        }\n        this.fallback = options.fallback ? true : false;\n        this.grpcVersion = (__webpack_require__(/*! ../../package.json */ \"(rsc)/./node_modules/google-gax/package.json\").version);\n        this.httpRules = options.httpRules;\n        this.numericEnums = options.numericEnums ?? false;\n        this.minifyJson = options.minifyJson ?? false;\n    }\n    /**\n     * gRPC-fallback version of loadProto\n     * Loads the protobuf root object from a JSON object created from a proto file\n     * @param {Object} jsonObject - A JSON version of a protofile created usin protobuf.js\n     * @returns {Object} Root namespace of proto JSON\n     */\n    loadProto(jsonObject) {\n        const rootObject = protobuf.Root.fromJSON(jsonObject);\n        return rootObject;\n    }\n    loadProtoJSON(json, ignoreCache = false) {\n        const hash = (0, object_hash_1.default)(JSON.stringify(json)).toString();\n        const cached = GrpcClient.protoCache.get(hash);\n        if (cached && !ignoreCache) {\n            return cached;\n        }\n        const root = protobuf.Root.fromJSON(json);\n        GrpcClient.protoCache.set(hash, root);\n        return root;\n    }\n    static getServiceMethods(service) {\n        const methods = {};\n        for (const [methodName, methodObject] of Object.entries(service.methods)) {\n            const methodNameLowerCamelCase = (0, util_1.toLowerCamelCase)(methodName);\n            methods[methodNameLowerCamelCase] = methodObject;\n        }\n        return methods;\n    }\n    /**\n     * gRPC-fallback version of constructSettings\n     * A wrapper of {@link constructSettings} function under the gRPC context.\n     *\n     * Most of parameters are common among constructSettings, please take a look.\n     * @param {string} serviceName - The fullly-qualified name of the service.\n     * @param {Object} clientConfig - A dictionary of the client config.\n     * @param {Object} configOverrides - A dictionary of overriding configs.\n     * @param {Object} headers - A dictionary of additional HTTP header name to\n     *   its value.\n     * @return {Object} A mapping of method names to CallSettings.\n     */\n    constructSettings(serviceName, clientConfig, configOverrides, headers) {\n        function buildMetadata(abTests, moreHeaders) {\n            const metadata = {};\n            if (!headers) {\n                headers = {};\n            }\n            // Since gRPC expects each header to be an array,\n            // we are doing the same for fallback here.\n            for (const key in headers) {\n                metadata[key] = Array.isArray(headers[key])\n                    ? headers[key]\n                    : [headers[key]];\n            }\n            // gRPC-fallback request must have 'grpc-web/' in 'x-goog-api-client'\n            const clientVersions = [];\n            if (metadata[CLIENT_VERSION_HEADER] &&\n                metadata[CLIENT_VERSION_HEADER][0]) {\n                clientVersions.push(...metadata[CLIENT_VERSION_HEADER][0].split(' '));\n            }\n            clientVersions.push(`grpc-web/${exports.version}`);\n            metadata[CLIENT_VERSION_HEADER] = [clientVersions.join(' ')];\n            if (!moreHeaders) {\n                return metadata;\n            }\n            for (const key in moreHeaders) {\n                if (key.toLowerCase() !== CLIENT_VERSION_HEADER) {\n                    const value = moreHeaders[key];\n                    if (Array.isArray(value)) {\n                        if (metadata[key] === undefined) {\n                            metadata[key] = value;\n                        }\n                        else {\n                            if (Array.isArray(metadata[key])) {\n                                metadata[key].push(...value);\n                            }\n                            else {\n                                throw new Error(`Can not add value ${value} to the call metadata.`);\n                            }\n                        }\n                    }\n                    else {\n                        metadata[key] = [value];\n                    }\n                }\n            }\n            return metadata;\n        }\n        return gax.constructSettings(serviceName, clientConfig, configOverrides, status_1.Status, { metadataBuilder: buildMetadata });\n    }\n    /**\n     * gRPC-fallback version of createStub\n     * Creates a gRPC-fallback stub with authentication headers built from supplied `AuthClient` instance\n     *\n     * @param {function} CreateStub - The constructor function of the stub.\n     * @param {Object} service - A protobufjs Service object (as returned by lookupService)\n     * @param {Object} opts - Connection options, as described below.\n     * @param {string} opts.servicePath - The hostname of the API endpoint service.\n     * @param {number} opts.port - The port of the service.\n     * @return {Promise} A promise which resolves to a gRPC-fallback service stub, which is a protobuf.js service stub instance modified to match the gRPC stub API\n     */\n    async createStub(service, opts, \n    // For consistency with createStub in grpc.ts, customServicePath is defined:\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    customServicePath) {\n        if (!this.authClient) {\n            if (this.auth && 'getClient' in this.auth) {\n                this.authClient = await this.auth.getClient();\n            }\n            else if (this.auth && 'getRequestHeaders' in this.auth) {\n                this.authClient = this.auth;\n            }\n        }\n        if (!this.authClient) {\n            throw new Error('No authentication was provided');\n        }\n        if (!opts.universeDomain) {\n            opts.universeDomain = 'googleapis.com';\n        }\n        if (opts.universeDomain) {\n            const universeFromAuth = this.authClient.universeDomain;\n            if (universeFromAuth && opts.universeDomain !== universeFromAuth) {\n                throw new Error(`The configured universe domain (${opts.universeDomain}) does not match the universe domain found in the credentials (${universeFromAuth}). ` +\n                    \"If you haven't configured the universe domain explicitly, googleapis.com is the default.\");\n            }\n        }\n        service.resolveAll();\n        const methods = GrpcClient.getServiceMethods(service);\n        const protocol = opts.protocol || 'https';\n        let servicePath = opts.servicePath;\n        if (!servicePath &&\n            service.options &&\n            service.options['(google.api.default_host)']) {\n            servicePath = service.options['(google.api.default_host)'];\n        }\n        if (!servicePath) {\n            throw new Error(`Cannot determine service API path for service ${service.name}.`);\n        }\n        let servicePort;\n        const match = servicePath.match(/^(.*):(\\d+)$/);\n        if (match) {\n            servicePath = match[1];\n            servicePort = parseInt(match[2]);\n        }\n        if (opts.port) {\n            servicePort = opts.port;\n        }\n        else if (!servicePort) {\n            servicePort = 443;\n        }\n        const encoder = fallbackRest.encodeRequest;\n        const decoder = fallbackRest.decodeResponse;\n        const serviceStub = (0, fallbackServiceStub_1.generateServiceStub)(methods, protocol, servicePath, servicePort, this.auth || this.authClient, encoder, decoder, this.numericEnums, this.minifyJson);\n        return serviceStub;\n    }\n    /**\n     * Creates a 'bytelength' function for a given proto message class.\n     *\n     * See {@link BundleDescriptor} about the meaning of the return value.\n     *\n     * @param {function} message - a constructor function that is generated by\n     *   protobuf.js. Assumes 'encoder' field in the message.\n     * @return {function(Object):number} - a function to compute the byte length\n     *   for an object.\n     */\n    static createByteLengthFunction(message) {\n        return gax.createByteLengthFunction(message);\n    }\n}\nexports.GrpcClient = GrpcClient;\n/**\n * gRPC-fallback version of lro\n *\n * @param {Object=} options.auth - An instance of google-auth-library.\n * @return {Object} A OperationsClientBuilder that will return a OperationsClient\n */\nfunction lro(options) {\n    options = Object.assign({ scopes: [] }, options);\n    if (options.protoJson) {\n        options = Object.assign(options, { fallback: true });\n    }\n    const gaxGrpc = new GrpcClient(options);\n    return new operationsClient_1.OperationsClientBuilder(gaxGrpc, options.protoJson);\n}\n/**\n * gRPC-fallback version of createApiCall\n *\n * Converts an rpc call into an API call governed by the settings.\n *\n * In typical usage, `func` will be a promise to a callable used to make an rpc\n * request. This will mostly likely be a bound method from a request stub used\n * to make an rpc call. It is not a direct function but a Promise instance,\n * because of its asynchronism (typically, obtaining the auth information).\n *\n * The result is a function which manages the API call with the given settings\n * and the options on the invocation.\n *\n * Throws exception on unsupported streaming calls\n *\n * @param {Promise<GRPCCall>|GRPCCall} func - is either a promise to be used to make\n *   a bare RPC call, or just a bare RPC call.\n * @param {CallSettings} settings - provides the settings for this call\n * @param {Descriptor} descriptor - optionally specify the descriptor for\n *   the method call.\n * @return {GaxCall} func - a bound method on a request stub used\n *   to make an rpc call.\n */\nfunction createApiCall(func, settings, descriptor, \n// eslint-disable-next-line @typescript-eslint/no-unused-vars\n_fallback) {\n    if (descriptor &&\n        'streaming' in descriptor &&\n        descriptor.type !== streaming_1.StreamType.SERVER_STREAMING) {\n        return () => {\n            throw new Error('The REST transport currently does not support client-streaming or bidi-stream calls.');\n        };\n    }\n    if (descriptor && 'streaming' in descriptor && !(0, featureDetection_1.isNodeJS)()) {\n        // TODO: with `fetch` this functionality is available in the browser...\n        return () => {\n            throw new Error('Server streaming over the REST transport is only supported in Node.js.');\n        };\n    }\n    return (0, createApiCall_1.createApiCall)(func, settings, descriptor);\n}\nexports.protobufMinimal = __importStar(__webpack_require__(/*! protobufjs/minimal */ \"(rsc)/./node_modules/protobufjs/minimal.js\"));\nvar warnings_1 = __webpack_require__(/*! ./warnings */ \"(rsc)/./node_modules/google-gax/build/src/warnings.js\");\nObject.defineProperty(exports, \"warn\", ({ enumerable: true, get: function () { return warnings_1.warn; } }));\nvar longrunning_1 = __webpack_require__(/*! ./longRunningCalls/longrunning */ \"(rsc)/./node_modules/google-gax/build/src/longRunningCalls/longrunning.js\");\nObject.defineProperty(exports, \"Operation\", ({ enumerable: true, get: function () { return longrunning_1.Operation; } }));\nObject.defineProperty(exports, \"operation\", ({ enumerable: true, get: function () { return longrunning_1.operation; } }));\nvar googleError_1 = __webpack_require__(/*! ./googleError */ \"(rsc)/./node_modules/google-gax/build/src/googleError.js\");\nObject.defineProperty(exports, \"GoogleError\", ({ enumerable: true, get: function () { return googleError_1.GoogleError; } }));\n// Different environments or bundlers may or may not respect \"browser\" field\n// in package.json (e.g. Electron does not respect it, but if you run the code\n// through webpack first, it will follow the \"browser\" field).\n// To make it safer and more compatible, let's make sure that if you do\n// const gax = require(\"google-gax\");\n// you can always ask for gax.fallback, regardless of \"browser\" field being\n// understood or not.\nconst fallback = module.exports;\nexports.fallback = fallback;\n//# sourceMappingURL=fallback.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/google-gax/build/src/fallback.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/google-gax/build/src/fallbackRest.js":
/*!***********************************************************!*\
  !*** ./node_modules/google-gax/build/src/fallbackRest.js ***!
  \***********************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";
eval("\n/**\n * Copyright 2021 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    var desc = Object.getOwnPropertyDescriptor(m, k);\n    if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n      desc = { enumerable: true, get: function() { return m[k]; } };\n    }\n    Object.defineProperty(o, k2, desc);\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {\n    Object.defineProperty(o, \"default\", { enumerable: true, value: v });\n}) : function(o, v) {\n    o[\"default\"] = v;\n});\nvar __importStar = (this && this.__importStar) || (function () {\n    var ownKeys = function(o) {\n        ownKeys = Object.getOwnPropertyNames || function (o) {\n            var ar = [];\n            for (var k in o) if (Object.prototype.hasOwnProperty.call(o, k)) ar[ar.length] = k;\n            return ar;\n        };\n        return ownKeys(o);\n    };\n    return function (mod) {\n        if (mod && mod.__esModule) return mod;\n        var result = {};\n        if (mod != null) for (var k = ownKeys(mod), i = 0; i < k.length; i++) if (k[i] !== \"default\") __createBinding(result, mod, k[i]);\n        __setModuleDefault(result, mod);\n        return result;\n    };\n})();\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.encodeRequest = encodeRequest;\nexports.decodeResponse = decodeResponse;\n// proto-over-HTTP request encoding and decoding\nconst serializer = __importStar(__webpack_require__(/*! proto3-json-serializer */ \"(rsc)/./node_modules/proto3-json-serializer/build/src/index.js\"));\nconst fallback_1 = __webpack_require__(/*! ./fallback */ \"(rsc)/./node_modules/google-gax/build/src/fallback.js\");\nconst googleError_1 = __webpack_require__(/*! ./googleError */ \"(rsc)/./node_modules/google-gax/build/src/googleError.js\");\nconst transcoding_1 = __webpack_require__(/*! ./transcoding */ \"(rsc)/./node_modules/google-gax/build/src/transcoding.js\");\nfunction encodeRequest(rpc, protocol, servicePath, servicePort, request, numericEnums, minifyJson) {\n    const headers = {\n        'Content-Type': 'application/json',\n    };\n    const message = rpc.resolvedRequestType.fromObject(request);\n    const json = serializer.toProto3JSON(message, {\n        numericEnums,\n    });\n    if (!json) {\n        throw new Error(`Cannot send null request to RPC ${rpc.name}.`);\n    }\n    if (typeof json !== 'object' || Array.isArray(json)) {\n        throw new Error(`Request to RPC ${rpc.name} must be an object.`);\n    }\n    const transcoded = (0, transcoding_1.transcode)(json, rpc.parsedOptions);\n    if (!transcoded) {\n        throw new Error(`Cannot build HTTP request for ${JSON.stringify(json)}, method: ${rpc.name}`);\n    }\n    // If numeric enums feature is requested, add extra parameter to the query string\n    if (numericEnums) {\n        transcoded.queryString =\n            (transcoded.queryString ? `${transcoded.queryString}&` : '') +\n                '$alt=json%3Benum-encoding=int';\n    }\n    // If minifyJson feature is requested, disable pretty-print JSON responses\n    if (minifyJson) {\n        transcoded.queryString =\n            (transcoded.queryString ? `${transcoded.queryString}&` : '') +\n                '$prettyPrint=0';\n    }\n    // Converts httpMethod to method that permitted in standard Fetch API spec\n    // https://fetch.spec.whatwg.org/#methods\n    const method = transcoded.httpMethod.toUpperCase();\n    const body = JSON.stringify(transcoded.data);\n    const url = `${protocol}://${servicePath}:${servicePort}/${transcoded.url.replace(/^\\//, '')}?${transcoded.queryString}`;\n    return {\n        method,\n        url,\n        headers,\n        body,\n    };\n}\nfunction decodeResponse(rpc, ok, response) {\n    // eslint-disable-next-line n/no-unsupported-features/node-builtins\n    const decodedString = new TextDecoder().decode(response);\n    if (!decodedString) {\n        throw new Error(`Received null response from RPC ${rpc.name}`);\n    }\n    const json = JSON.parse(decodedString);\n    if (!ok) {\n        const error = googleError_1.GoogleError.parseHttpError(json);\n        throw error;\n    }\n    const message = serializer.fromProto3JSON(rpc.resolvedResponseType, json);\n    if (!message) {\n        throw new Error(`Received null or malformed response from JSON serializer from RPC ${rpc.name}`);\n    }\n    return rpc.resolvedResponseType.toObject(message, fallback_1.defaultToObjectOptions);\n}\n//# sourceMappingURL=fallbackRest.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/google-gax/build/src/fallbackRest.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/google-gax/build/src/fallbackServiceStub.js":
/*!******************************************************************!*\
  !*** ./node_modules/google-gax/build/src/fallbackServiceStub.js ***!
  \******************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\n/**\n * Copyright 2021 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.generateServiceStub = generateServiceStub;\nconst abort_controller_1 = __webpack_require__(/*! abort-controller */ \"(rsc)/./node_modules/abort-controller/dist/abort-controller.js\");\nconst google_auth_library_1 = __webpack_require__(/*! google-auth-library */ \"(rsc)/./node_modules/google-auth-library/build/src/index.js\");\nconst featureDetection_1 = __webpack_require__(/*! ./featureDetection */ \"(rsc)/./node_modules/google-gax/build/src/featureDetection.js\");\nconst streamArrayParser_1 = __webpack_require__(/*! ./streamArrayParser */ \"(rsc)/./node_modules/google-gax/build/src/streamArrayParser.js\");\nconst stream_1 = __webpack_require__(/*! stream */ \"stream\");\nconst fetchNode = (...args) => Promise.all(/*! import() */[__webpack_require__.e(\"vendor-chunks/node-fetch\"), __webpack_require__.e(\"vendor-chunks/web-streams-polyfill\"), __webpack_require__.e(\"vendor-chunks/node-domexception\"), __webpack_require__.e(\"vendor-chunks/fetch-blob\"), __webpack_require__.e(\"vendor-chunks/formdata-polyfill\"), __webpack_require__.e(\"vendor-chunks/data-uri-to-buffer\")]).then(__webpack_require__.bind(__webpack_require__, /*! node-fetch */ \"(rsc)/./node_modules/node-fetch/src/index.js\")).then(({ default: fetch }) => fetch(...args));\n// Node.js before v19 does not enable keepalive by default.\n// We'll try to enable it very carefully to make sure we don't break possible non-Node use cases.\n// TODO: remove this after Node 18 is EOL.\n// More info:\n// - https://github.com/node-fetch/node-fetch#custom-agent\n// - https://github.com/googleapis/gax-nodejs/pull/1534\nlet agentOption = null;\nif ((0, featureDetection_1.isNodeJS)()) {\n    const http = __webpack_require__(/*! http */ \"http\");\n    const https = __webpack_require__(/*! https */ \"https\");\n    const httpAgent = new http.Agent({ keepAlive: true });\n    const httpsAgent = new https.Agent({ keepAlive: true });\n    agentOption = (parsedUrl) => {\n        if (parsedUrl.protocol === 'http:') {\n            return httpAgent;\n        }\n        return httpsAgent;\n    };\n}\nfunction generateServiceStub(rpcs, protocol, servicePath, servicePort, auth, requestEncoder, responseDecoder, numericEnums, minifyJson) {\n    const fetch = (0, featureDetection_1.hasWindowFetch)()\n        ? window.fetch\n        : fetchNode;\n    const serviceStub = {\n        // close method should close all cancel controllers. If this feature request in the future, we can have a cancelControllerFactory that tracks created cancel controllers, and abort them all in close method.\n        close: () => {\n            return { cancel: () => { } };\n        },\n    };\n    for (const [rpcName, rpc] of Object.entries(rpcs)) {\n        serviceStub[rpcName] = (request, options, _metadata, callback) => {\n            options ??= {};\n            // We cannot use async-await in this function because we need to return the canceller object as soon as possible.\n            // Using plain old promises instead.\n            let fetchParameters;\n            try {\n                fetchParameters = requestEncoder(rpc, protocol, servicePath, servicePort, request, numericEnums, minifyJson);\n            }\n            catch (err) {\n                // we could not encode parameters; pass error to the callback\n                // and return a no-op canceler object.\n                if (callback) {\n                    callback(err);\n                }\n                return {\n                    cancel() { },\n                };\n            }\n            const cancelController = (0, featureDetection_1.hasAbortController)()\n                ? new AbortController()\n                : new abort_controller_1.AbortController();\n            const cancelSignal = cancelController.signal;\n            let cancelRequested = false;\n            const url = fetchParameters.url;\n            const headers = new Headers(fetchParameters.headers);\n            for (const key of Object.keys(options)) {\n                headers.set(key, options[key][0]);\n            }\n            const streamArrayParser = new streamArrayParser_1.StreamArrayParser(rpc);\n            auth\n                .getRequestHeaders()\n                .then(authHeader => {\n                const fetchRequest = {\n                    headers: google_auth_library_1.gaxios.Gaxios.mergeHeaders(authHeader, headers),\n                    body: fetchParameters.body,\n                    method: fetchParameters.method,\n                    signal: cancelSignal,\n                };\n                if (agentOption) {\n                    fetchRequest.agent = agentOption;\n                }\n                if (fetchParameters.method === 'GET' ||\n                    fetchParameters.method === 'DELETE') {\n                    delete fetchRequest['body'];\n                }\n                return fetch(url, fetchRequest);\n            })\n                .then((response) => {\n                if (response.ok && rpc.responseStream) {\n                    (0, stream_1.pipeline)(response.body, streamArrayParser, (err) => {\n                        if (err &&\n                            (!cancelRequested ||\n                                (err instanceof Error && err.name !== 'AbortError'))) {\n                            if (callback) {\n                                callback(err);\n                            }\n                            streamArrayParser.emit('error', err);\n                        }\n                    });\n                    return;\n                }\n                else {\n                    return Promise.all([\n                        Promise.resolve(response.ok),\n                        response.arrayBuffer(),\n                    ])\n                        .then(([ok, buffer]) => {\n                        const response = responseDecoder(rpc, ok, buffer);\n                        callback(null, response);\n                    })\n                        .catch((err) => {\n                        if (!cancelRequested || err.name !== 'AbortError') {\n                            if (rpc.responseStream) {\n                                if (callback) {\n                                    callback(err);\n                                }\n                                streamArrayParser.emit('error', err);\n                            }\n                            else if (callback) {\n                                callback(err);\n                            }\n                            else {\n                                throw err;\n                            }\n                        }\n                    });\n                }\n            })\n                .catch((err) => {\n                if (rpc.responseStream) {\n                    if (callback) {\n                        callback(err);\n                    }\n                    streamArrayParser.emit('error', err);\n                }\n                else if (callback) {\n                    callback(err);\n                }\n                else {\n                    throw err;\n                }\n            });\n            if (rpc.responseStream) {\n                return streamArrayParser;\n            }\n            return {\n                cancel: () => {\n                    cancelRequested = true;\n                    cancelController.abort();\n                },\n            };\n        };\n    }\n    return serviceStub;\n}\n//# sourceMappingURL=fallbackServiceStub.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/google-gax/build/src/fallbackServiceStub.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/google-gax/build/src/featureDetection.js":
/*!***************************************************************!*\
  !*** ./node_modules/google-gax/build/src/featureDetection.js ***!
  \***************************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";
eval("\n/**\n * Copyright 2021 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.hasWindowFetch = hasWindowFetch;\nexports.isNodeJS = isNodeJS;\nexports.hasAbortController = hasAbortController;\n/* global window */\nconst features = {\n    windowFetch: typeof window !== 'undefined' &&\n        window?.fetch &&\n        typeof window?.fetch === 'function',\n    // eslint-disable-next-line n/no-unsupported-features/node-builtins\n    textEncoder: typeof TextEncoder !== 'undefined',\n    // eslint-disable-next-line n/no-unsupported-features/node-builtins\n    textDecoder: typeof TextDecoder !== 'undefined',\n    nodeJS: typeof process !== 'undefined' && process?.versions?.node,\n    abortController: typeof AbortController !== 'undefined',\n};\nfunction hasWindowFetch() {\n    return features.windowFetch;\n}\nfunction isNodeJS() {\n    return features.nodeJS;\n}\nfunction hasAbortController() {\n    return features.abortController;\n}\n//# sourceMappingURL=featureDetection.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvZ29vZ2xlLWdheC9idWlsZC9zcmMvZmVhdHVyZURldGVjdGlvbi5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDhDQUE2QyxFQUFFLGFBQWEsRUFBQztBQUM3RCxzQkFBc0I7QUFDdEIsZ0JBQWdCO0FBQ2hCLDBCQUEwQjtBQUMxQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsInNvdXJjZXMiOlsiL1VzZXJzL2JhZy15b3NlYi9EZXNrdG9wL+GEkeGFqeGEh+GFteGEi+GFoS9oYWNrYXRob25fdGVhbS9teS1hcHAvbm9kZV9tb2R1bGVzL2dvb2dsZS1nYXgvYnVpbGQvc3JjL2ZlYXR1cmVEZXRlY3Rpb24uanMiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG4vKipcbiAqIENvcHlyaWdodCAyMDIxIEdvb2dsZSBMTENcbiAqXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4gKlxuICogICAgICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbiAqXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuICovXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLmhhc1dpbmRvd0ZldGNoID0gaGFzV2luZG93RmV0Y2g7XG5leHBvcnRzLmlzTm9kZUpTID0gaXNOb2RlSlM7XG5leHBvcnRzLmhhc0Fib3J0Q29udHJvbGxlciA9IGhhc0Fib3J0Q29udHJvbGxlcjtcbi8qIGdsb2JhbCB3aW5kb3cgKi9cbmNvbnN0IGZlYXR1cmVzID0ge1xuICAgIHdpbmRvd0ZldGNoOiB0eXBlb2Ygd2luZG93ICE9PSAndW5kZWZpbmVkJyAmJlxuICAgICAgICB3aW5kb3c/LmZldGNoICYmXG4gICAgICAgIHR5cGVvZiB3aW5kb3c/LmZldGNoID09PSAnZnVuY3Rpb24nLFxuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuL25vLXVuc3VwcG9ydGVkLWZlYXR1cmVzL25vZGUtYnVpbHRpbnNcbiAgICB0ZXh0RW5jb2RlcjogdHlwZW9mIFRleHRFbmNvZGVyICE9PSAndW5kZWZpbmVkJyxcbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbi9uby11bnN1cHBvcnRlZC1mZWF0dXJlcy9ub2RlLWJ1aWx0aW5zXG4gICAgdGV4dERlY29kZXI6IHR5cGVvZiBUZXh0RGVjb2RlciAhPT0gJ3VuZGVmaW5lZCcsXG4gICAgbm9kZUpTOiB0eXBlb2YgcHJvY2VzcyAhPT0gJ3VuZGVmaW5lZCcgJiYgcHJvY2Vzcz8udmVyc2lvbnM/Lm5vZGUsXG4gICAgYWJvcnRDb250cm9sbGVyOiB0eXBlb2YgQWJvcnRDb250cm9sbGVyICE9PSAndW5kZWZpbmVkJyxcbn07XG5mdW5jdGlvbiBoYXNXaW5kb3dGZXRjaCgpIHtcbiAgICByZXR1cm4gZmVhdHVyZXMud2luZG93RmV0Y2g7XG59XG5mdW5jdGlvbiBpc05vZGVKUygpIHtcbiAgICByZXR1cm4gZmVhdHVyZXMubm9kZUpTO1xufVxuZnVuY3Rpb24gaGFzQWJvcnRDb250cm9sbGVyKCkge1xuICAgIHJldHVybiBmZWF0dXJlcy5hYm9ydENvbnRyb2xsZXI7XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1mZWF0dXJlRGV0ZWN0aW9uLmpzLm1hcCJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/google-gax/build/src/featureDetection.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/google-gax/build/src/gax.js":
/*!**************************************************!*\
  !*** ./node_modules/google-gax/build/src/gax.js ***!
  \**************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\n/**\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.CallSettings = exports.RetryOptions = void 0;\nexports.convertRetryOptions = convertRetryOptions;\nexports.createRetryOptions = createRetryOptions;\nexports.createBackoffSettings = createBackoffSettings;\nexports.createDefaultBackoffSettings = createDefaultBackoffSettings;\nexports.createMaxRetriesBackoffSettings = createMaxRetriesBackoffSettings;\nexports.createBundleOptions = createBundleOptions;\nexports.constructSettings = constructSettings;\nexports.createByteLengthFunction = createByteLengthFunction;\nconst warnings_1 = __webpack_require__(/*! ./warnings */ \"(rsc)/./node_modules/google-gax/build/src/warnings.js\");\nconst util_1 = __webpack_require__(/*! ./util */ \"(rsc)/./node_modules/google-gax/build/src/util.js\");\nconst status_1 = __webpack_require__(/*! ./status */ \"(rsc)/./node_modules/google-gax/build/src/status.js\");\n/**\n * Encapsulates the overridable settings for a particular API call.\n *\n * ``CallOptions`` is an optional arg for all GAX API calls.  It is used to\n * configure the settings of a specific API call.\n *\n * When provided, its values override the GAX service defaults for that\n * particular call.\n *\n * Typically the API clients will accept this as the second to the last\n * argument. See the examples below.\n * @typedef {Object} CallOptions\n * @property {number=} timeout - The client-side timeout for API calls.\n * @property {RetryOptions=} retry - determines whether and how to retry\n *   on transient errors. When set to null, the call will not retry.\n * @property {boolean=} autoPaginate - If set to false and the call is\n *   configured for paged iteration, page unrolling is not performed, instead\n *   the callback will be called with the response object.\n * @property {Object=} pageToken - If set and the call is configured for\n *   paged iteration, paged iteration is not performed and requested with this\n *   pageToken.\n * @property {number} maxResults - If set and the call is configured for\n *   paged iteration, the call will stop when the number of response elements\n *   reaches to the specified size. By default, it will unroll the page to\n *   the end of the list.\n * @property {boolean=} isBundling - If set to false and the call is configured\n *   for bundling, bundling is not performed.\n * @property {BackoffSettings=} longrunning - BackoffSettings used for polling.\n * @example\n * // suppress bundling for bundled method.\n * api.bundlingMethod(\n *     param, {optParam: aValue, isBundling: false}, function(err, response) {\n *   // handle response.\n * });\n * @example\n * // suppress streaming for page-streaming method.\n * api.pageStreamingMethod(\n *     param, {optParam: aValue, autoPaginate: false}, function(err, page) {\n *   // not returning a stream, but callback is called with the paged response.\n * });\n */\n/**\n * Per-call configurable settings for retrying upon transient failure.\n * @implements {RetryOptionsType}\n * @typedef {Object} RetryOptions\n * @property {number[]} retryCodes\n * @property {BackoffSettings} backoffSettings\n * @property {(function)} shouldRetryFn\n * @property {(function)} getResumptionRequestFn\n */\nclass RetryOptions {\n    retryCodes;\n    backoffSettings;\n    shouldRetryFn;\n    getResumptionRequestFn;\n    constructor(retryCodes, backoffSettings, shouldRetryFn, getResumptionRequestFn) {\n        this.retryCodes = retryCodes;\n        this.backoffSettings = backoffSettings;\n        this.shouldRetryFn = shouldRetryFn;\n        this.getResumptionRequestFn = getResumptionRequestFn;\n    }\n}\nexports.RetryOptions = RetryOptions;\nclass CallSettings {\n    timeout;\n    retry;\n    autoPaginate;\n    pageToken;\n    pageSize;\n    maxResults;\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    otherArgs;\n    bundleOptions;\n    isBundling;\n    longrunning;\n    apiName;\n    retryRequestOptions;\n    /**\n     * @param {Object} settings - An object containing parameters of this settings.\n     * @param {number} settings.timeout - The client-side timeout for API calls.\n     *   This parameter is ignored for retrying calls.\n     * @param {RetryOptions} settings.retry - The configuration for retrying upon\n     *   transient error. If set to null, this call will not retry.\n     * @param {boolean} settings.autoPaginate - If there is no `pageDescriptor`,\n     *   this attrbute has no meaning. Otherwise, determines whether a page\n     * streamed response should make the page structure transparent to the user by\n     *   flattening the repeated field in the returned generator.\n     * @param {number} settings.pageToken - If there is no `pageDescriptor`,\n     *   this attribute has no meaning. Otherwise, determines the page token used\n     * in the page streaming request.\n     * @param {Object} settings.otherArgs - Additional arguments to be passed to\n     *   the API calls.\n     *\n     * @constructor\n     */\n    constructor(settings) {\n        settings = settings || {};\n        this.timeout = settings.timeout || 30 * 1000;\n        this.retry = settings.retry;\n        this.autoPaginate =\n            'autoPaginate' in settings ? settings.autoPaginate : true;\n        this.maxResults = settings.maxResults;\n        this.otherArgs = settings.otherArgs || {};\n        this.bundleOptions = settings.bundleOptions;\n        this.isBundling = 'isBundling' in settings ? settings.isBundling : true;\n        this.longrunning =\n            'longrunning' in settings ? settings.longrunning : undefined;\n        this.apiName = settings.apiName ?? undefined;\n        this.retryRequestOptions = settings.retryRequestOptions;\n    }\n    /**\n     * Returns a new CallSettings merged from this and a CallOptions object.\n     *\n     * @param {CallOptions} options - an instance whose values override\n     *   those in this object. If null, ``merge`` returns a copy of this\n     *   object\n     * @return {CallSettings} The merged CallSettings instance.\n     */\n    merge(options) {\n        if (!options) {\n            return new CallSettings(this);\n        }\n        let timeout = this.timeout;\n        let retry = this.retry;\n        let autoPaginate = this.autoPaginate;\n        let maxResults = this.maxResults;\n        let otherArgs = this.otherArgs;\n        let isBundling = this.isBundling;\n        let longrunning = this.longrunning;\n        let apiName = this.apiName;\n        let retryRequestOptions = this.retryRequestOptions;\n        // If the user provides a timeout to the method, that timeout value will be used\n        // to override the backoff settings.\n        if ('timeout' in options) {\n            timeout = options.timeout;\n        }\n        // If a method-specific timeout is set in the service config, and the retry codes for that\n        // method are non-null, then that timeout value will be used to\n        // override backoff settings.\n        if (retry?.retryCodes) {\n            retry.backoffSettings.initialRpcTimeoutMillis = timeout;\n            retry.backoffSettings.maxRpcTimeoutMillis = timeout;\n            retry.backoffSettings.totalTimeoutMillis = timeout;\n        }\n        if ('retry' in options) {\n            retry = mergeRetryOptions(retry || {}, options.retry);\n        }\n        if ('autoPaginate' in options && !options.autoPaginate) {\n            autoPaginate = false;\n        }\n        if ('maxResults' in options) {\n            maxResults = options.maxResults;\n        }\n        if ('otherArgs' in options) {\n            otherArgs = {};\n            for (const key in this.otherArgs) {\n                otherArgs[key] = this.otherArgs[key];\n            }\n            for (const optionsKey in options.otherArgs) {\n                otherArgs[optionsKey] = options.otherArgs[optionsKey];\n            }\n        }\n        if ('isBundling' in options) {\n            isBundling = options.isBundling;\n        }\n        if ('maxRetries' in options && options.maxRetries !== undefined) {\n            retry.backoffSettings.maxRetries = options.maxRetries;\n            delete retry.backoffSettings.totalTimeoutMillis;\n        }\n        if ('longrunning' in options) {\n            longrunning = options.longrunning;\n        }\n        if ('apiName' in options) {\n            apiName = options.apiName;\n        }\n        if ('retryRequestOptions' in options) {\n            retryRequestOptions = options.retryRequestOptions;\n        }\n        return new CallSettings({\n            timeout,\n            retry,\n            bundleOptions: this.bundleOptions,\n            longrunning,\n            autoPaginate,\n            maxResults,\n            otherArgs,\n            isBundling,\n            apiName,\n            retryRequestOptions,\n        });\n    }\n}\nexports.CallSettings = CallSettings;\n/**\n * Validates passed retry options in preparation for eventual parameter deprecation\n * converts retryRequestOptions to retryOptions\n * then sets retryRequestOptions to null\n *\n * @param {CallOptions} options - a list of passed retry option\n * @return {CallOptions} A new CallOptions object.\n *\n */\nfunction convertRetryOptions(options, gaxStreamingRetries) {\n    // options will be undefined if no CallOptions object is passed at call time\n    if (!options) {\n        return options;\n    }\n    // if a user provided retry AND retryRequestOptions at call time, throw an error\n    // otherwise, convert supported parameters\n    if (!gaxStreamingRetries) {\n        return options;\n    }\n    if (options.retry && options.retryRequestOptions) {\n        throw new Error('Only one of retry or retryRequestOptions may be set');\n    } // handles parameter conversion from retryRequestOptions to retryOptions\n    if (options.retryRequestOptions) {\n        if (options.retryRequestOptions.objectMode !== undefined) {\n            (0, warnings_1.warn)('retry_request_options', 'objectMode override is not supported. It is set to true internally by default in gax.', 'UnsupportedParameterWarning');\n        }\n        if (options.retryRequestOptions.noResponseRetries !== undefined) {\n            (0, warnings_1.warn)('retry_request_options', 'noResponseRetries override is not supported. Please specify retry codes or a function to determine retry eligibility.', 'UnsupportedParameterWarning');\n        }\n        if (options.retryRequestOptions.currentRetryAttempt !== undefined) {\n            (0, warnings_1.warn)('retry_request_options', 'currentRetryAttempt override is not supported. Retry attempts are tracked internally.', 'UnsupportedParameterWarning');\n        }\n        let retryCodes = [status_1.Status.UNAVAILABLE];\n        let shouldRetryFn;\n        if (options.retryRequestOptions.shouldRetryFn) {\n            retryCodes = [];\n            shouldRetryFn = options.retryRequestOptions.shouldRetryFn;\n        }\n        //Backoff settings\n        options.maxRetries =\n            options?.retryRequestOptions?.retries ?? options.maxRetries;\n        // create a default backoff settings object in case the user didn't provide overrides for everything\n        const backoffSettings = createDefaultBackoffSettings();\n        let maxRetryDelayMillis;\n        let totalTimeoutMillis;\n        // maxRetryDelay - this is in seconds, need to convert to milliseconds\n        if (options.retryRequestOptions.maxRetryDelay !== undefined) {\n            maxRetryDelayMillis = options.retryRequestOptions.maxRetryDelay * 1000;\n        }\n        // retryDelayMultiplier - should be a one to one mapping to retryDelayMultiplier\n        const retryDelayMultiplier = options?.retryRequestOptions?.retryDelayMultiplier ??\n            backoffSettings.retryDelayMultiplier;\n        // this is in seconds and needs to be converted to milliseconds and the totalTimeoutMillis parameter\n        if (options.retryRequestOptions.totalTimeout !== undefined) {\n            totalTimeoutMillis = options.retryRequestOptions.totalTimeout * 1000;\n        }\n        else {\n            if (options.maxRetries === undefined) {\n                totalTimeoutMillis = 30000;\n                (0, warnings_1.warn)('retry_request_options_no_max_retries_timeout', 'Neither maxRetries nor totalTimeout were passed. Defaulting to totalTimeout of 30000ms.', 'MissingParameterWarning');\n            }\n        }\n        // for the variables the user wants to override, override in the backoff settings object we made\n        backoffSettings.maxRetryDelayMillis =\n            maxRetryDelayMillis ?? backoffSettings.maxRetryDelayMillis;\n        backoffSettings.retryDelayMultiplier =\n            retryDelayMultiplier ?? backoffSettings.retryDelayMultiplier;\n        backoffSettings.totalTimeoutMillis =\n            totalTimeoutMillis ?? backoffSettings.totalTimeoutMillis;\n        const convertedRetryOptions = createRetryOptions(retryCodes, backoffSettings, shouldRetryFn);\n        options.retry = convertedRetryOptions;\n        delete options.retryRequestOptions; // completely remove them to avoid any further confusion\n        (0, warnings_1.warn)('retry_request_options', 'retryRequestOptions will be deprecated in a future release. Please use retryOptions to pass retry options at call time', 'DeprecationWarning');\n    }\n    return options;\n}\n/**\n * Per-call configurable settings for retrying upon transient failure.\n * @param {number[]} retryCodes - a list of Google API canonical error codes OR a function that returns a boolean to determine retry behavior\n *   upon which a retry should be attempted.\n * @param {BackoffSettings} backoffSettings - configures the retry\n *   exponential backoff algorithm.\n * @param {function} shouldRetryFn - a function that determines whether a call should retry. If this is defined retryCodes must be empty\n * @param {function} getResumptionRequestFn - a function with a resumption strategy - only used with server streaming retries\n * @return {RetryOptions} A new RetryOptions object.\n *\n */\nfunction createRetryOptions(retryCodes, backoffSettings, shouldRetryFn, getResumptionRequestFn) {\n    return {\n        retryCodes,\n        backoffSettings,\n        shouldRetryFn,\n        getResumptionRequestFn,\n    };\n}\n/**\n * Parameters to the exponential backoff algorithm for retrying.\n *\n * @param {number} initialRetryDelayMillis - the initial delay time,\n *   in milliseconds, between the completion of the first failed request and the\n *   initiation of the first retrying request.\n * @param {number} retryDelayMultiplier - the multiplier by which to\n *   increase the delay time between the completion of failed requests, and the\n *   initiation of the subsequent retrying request.\n * @param {number} maxRetryDelayMillis - the maximum delay time, in\n *   milliseconds, between requests. When this value is reached,\n *   ``retryDelayMultiplier`` will no longer be used to increase delay time.\n * @param {number} initialRpcTimeoutMillis - the initial timeout parameter\n *   to the request.\n * @param {number} rpcTimeoutMultiplier - the multiplier by which to\n *   increase the timeout parameter between failed requests.\n * @param {number} maxRpcTimeoutMillis - the maximum timeout parameter, in\n *   milliseconds, for a request. When this value is reached,\n *   ``rpcTimeoutMultiplier`` will no longer be used to increase the timeout.\n * @param {number} totalTimeoutMillis - the total time, in milliseconds,\n *   starting from when the initial request is sent, after which an error will\n *   be returned, regardless of the retrying attempts made meanwhile.\n * @return {BackoffSettings} a new settings.\n *\n */\nfunction createBackoffSettings(initialRetryDelayMillis, retryDelayMultiplier, maxRetryDelayMillis, initialRpcTimeoutMillis, rpcTimeoutMultiplier, maxRpcTimeoutMillis, totalTimeoutMillis) {\n    return {\n        initialRetryDelayMillis,\n        retryDelayMultiplier,\n        maxRetryDelayMillis,\n        initialRpcTimeoutMillis,\n        rpcTimeoutMultiplier,\n        maxRpcTimeoutMillis,\n        totalTimeoutMillis,\n    };\n}\nfunction createDefaultBackoffSettings() {\n    return createBackoffSettings(100, 1.3, 60000, null, null, null, null);\n}\n/**\n * Parameters to the exponential backoff algorithm for retrying.\n * This function is unsupported, and intended for internal use only.\n *\n * @param {number} initialRetryDelayMillis - the initial delay time,\n *   in milliseconds, between the completion of the first failed request and the\n *   initiation of the first retrying request.\n * @param {number} retryDelayMultiplier - the multiplier by which to\n *   increase the delay time between the completion of failed requests, and the\n *   initiation of the subsequent retrying request.\n * @param {number} maxRetryDelayMillis - the maximum delay time, in\n *   milliseconds, between requests. When this value is reached,\n *   ``retryDelayMultiplier`` will no longer be used to increase delay time.\n * @param {number} initialRpcTimeoutMillis - the initial timeout parameter\n *   to the request.\n * @param {number} rpcTimeoutMultiplier - the multiplier by which to\n *   increase the timeout parameter between failed requests.\n * @param {number} maxRpcTimeoutMillis - the maximum timeout parameter, in\n *   milliseconds, for a request. When this value is reached,\n *   ``rpcTimeoutMultiplier`` will no longer be used to increase the timeout.\n * @param {number} maxRetries - the maximum number of retrying attempts that\n *   will be made. If reached, an error will be returned.\n * @return {BackoffSettings} a new settings.\n *\n */\nfunction createMaxRetriesBackoffSettings(initialRetryDelayMillis, retryDelayMultiplier, maxRetryDelayMillis, initialRpcTimeoutMillis, rpcTimeoutMultiplier, maxRpcTimeoutMillis, maxRetries) {\n    return {\n        initialRetryDelayMillis,\n        retryDelayMultiplier,\n        maxRetryDelayMillis,\n        initialRpcTimeoutMillis,\n        rpcTimeoutMultiplier,\n        maxRpcTimeoutMillis,\n        maxRetries,\n    };\n}\n/**\n * Creates a new {@link BundleOptions}.\n *\n * @private\n * @param {Object} options - An object to hold optional parameters. See\n *   properties for the content of options.\n * @return {BundleOptions} - A new options.\n */\nfunction createBundleOptions(options) {\n    const params = [\n        'element_count_threshold',\n        'element_count_limit',\n        'request_byte_threshold',\n        'request_byte_limit',\n        'delay_threshold_millis',\n    ];\n    params.forEach(param => {\n        if (param in options && typeof options[param] !== 'number') {\n            throw new Error(`${param} should be a number`);\n        }\n    });\n    const elementCountThreshold = options.element_count_threshold || 0;\n    const elementCountLimit = options.element_count_limit || 0;\n    const requestByteThreshold = options.request_byte_threshold || 0;\n    const requestByteLimit = options.request_byte_limit || 0;\n    const delayThreshold = options.delay_threshold_millis || 0;\n    if (elementCountThreshold === 0 &&\n        requestByteThreshold === 0 &&\n        delayThreshold === 0) {\n        throw new Error('one threshold should be > 0');\n    }\n    return {\n        elementCountThreshold,\n        elementCountLimit,\n        requestByteThreshold,\n        requestByteLimit,\n        delayThreshold,\n    };\n}\n/**\n * Helper for {@link constructSettings}\n *\n * @private\n *\n * @param {Object} methodConfig - A dictionary representing a single\n *   `methods` entry of the standard API client config file. (See\n *   {@link constructSettings} for information on this yaml.)\n * @param {?Object} retryCodes - A dictionary parsed from the\n *   `retry_codes_def` entry of the standard API client config\n *   file. (See {@link constructSettings} for information on this yaml.)\n * @param {Object} retryParams - A dictionary parsed from the\n *   `retry_params` entry of the standard API client config\n *   file. (See {@link constructSettings} for information on this yaml.)\n * @param {Object} retryNames - A dictionary mapping the string names\n *   used in the standard API client config file to API response\n *   status codes.\n * @return {?RetryOptions} The new retry options.\n */\nfunction constructRetry(methodConfig, retryCodes, retryParams, retryNames) {\n    if (!methodConfig) {\n        return null;\n    }\n    let codes = null; // this is one instance where it will NOT be an array OR a function because we do not allow shouldRetryFn in the client\n    if (retryCodes && 'retry_codes_name' in methodConfig) {\n        const retryCodesName = methodConfig['retry_codes_name'];\n        codes = (retryCodes[retryCodesName] || []).map(name => {\n            return Number(retryNames[name]);\n        });\n    }\n    let backoffSettings = null;\n    if (retryParams && 'retry_params_name' in methodConfig) {\n        const params = retryParams[methodConfig.retry_params_name];\n        backoffSettings = createBackoffSettings(params.initial_retry_delay_millis, params.retry_delay_multiplier, params.max_retry_delay_millis, params.initial_rpc_timeout_millis, params.rpc_timeout_multiplier, params.max_rpc_timeout_millis, params.total_timeout_millis);\n    }\n    return createRetryOptions(codes, backoffSettings);\n}\n/**\n * Helper for {@link constructSettings}\n *\n * Takes two retry options, and merges them into a single RetryOption instance.\n *\n * @private\n *\n * @param {RetryOptions} retry - The base RetryOptions.\n * @param {RetryOptions} overrides - The RetryOptions used for overriding\n *   `retry`. Use the values if it is not null. If entire `overrides` is null,\n *   ignore the base retry and return null.\n * @return {?RetryOptions} The merged RetryOptions.\n */\nfunction mergeRetryOptions(retry, overrides) {\n    if (!overrides) {\n        return null;\n    }\n    if (!overrides.retryCodes &&\n        !overrides.backoffSettings &&\n        !overrides.shouldRetryFn &&\n        !overrides.getResumptionRequestFn) {\n        return retry;\n    }\n    const retryCodes = overrides.retryCodes\n        ? overrides.retryCodes\n        : retry.retryCodes;\n    const backoffSettings = overrides.backoffSettings\n        ? overrides.backoffSettings\n        : retry.backoffSettings;\n    const shouldRetryFn = overrides.shouldRetryFn\n        ? overrides.shouldRetryFn\n        : retry.shouldRetryFn;\n    const getResumptionRequestFn = overrides.getResumptionRequestFn\n        ? overrides.getResumptionRequestFn\n        : retry.getResumptionRequestFn;\n    return createRetryOptions(retryCodes, backoffSettings, shouldRetryFn, getResumptionRequestFn);\n}\n/**\n * Constructs a dictionary mapping method names to {@link CallSettings}.\n *\n * The `clientConfig` parameter is parsed from a client configuration JSON\n * file of the form:\n *\n *     {\n *       \"interfaces\": {\n *         \"google.fake.v1.ServiceName\": {\n *           \"retry_codes\": {\n *             \"idempotent\": [\"UNAVAILABLE\", \"DEADLINE_EXCEEDED\"],\n *             \"non_idempotent\": []\n *           },\n *           \"retry_params\": {\n *             \"default\": {\n *               \"initial_retry_delay_millis\": 100,\n *               \"retry_delay_multiplier\": 1.2,\n *               \"max_retry_delay_millis\": 1000,\n *               \"initial_rpc_timeout_millis\": 2000,\n *               \"rpc_timeout_multiplier\": 1.5,\n *               \"max_rpc_timeout_millis\": 30000,\n *               \"total_timeout_millis\": 45000\n *             }\n *           },\n *           \"methods\": {\n *             \"CreateFoo\": {\n *               \"retry_codes_name\": \"idempotent\",\n *               \"retry_params_name\": \"default\"\n *             },\n *             \"Publish\": {\n *               \"retry_codes_name\": \"non_idempotent\",\n *               \"retry_params_name\": \"default\",\n *               \"bundling\": {\n *                 \"element_count_threshold\": 40,\n *                 \"element_count_limit\": 200,\n *                 \"request_byte_threshold\": 90000,\n *                 \"request_byte_limit\": 100000,\n *                 \"delay_threshold_millis\": 100\n *               }\n *             }\n *           }\n *         }\n *       }\n *     }\n *\n * @param {String} serviceName - The fully-qualified name of this\n *   service, used as a key into the client config file (in the\n *   example above, this value should be 'google.fake.v1.ServiceName').\n * @param {Object} clientConfig - A dictionary parsed from the\n *   standard API client config file.\n * @param {Object} configOverrides - A dictionary in the same structure of\n *   client_config to override the settings.\n * @param {Object.<string, string[]>} retryNames - A dictionary mapping the strings\n *   referring to response status codes to objects representing\n *   those codes.\n * @param {Object} otherArgs - the non-request arguments to be passed to the API\n *   calls.\n * @return {Object} A mapping from method name to CallSettings, or null if the\n *   service is not found in the config.\n */\nfunction constructSettings(serviceName, clientConfig, configOverrides, retryNames, otherArgs) {\n    otherArgs = otherArgs || {};\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    const defaults = {};\n    const serviceConfig = (clientConfig.interfaces || {})[serviceName];\n    if (!serviceConfig) {\n        return null;\n    }\n    // users can override the config from client side, like bundling options.\n    // The detailed structure of the clientConfig can be found here: https://github.com/googleapis/gax-nodejs/blob/main/src/gax.ts#L546\n    // The way to override bundling options:\n    //\n    // const customConfig = {\"interfaces\": {\"service\": {\"methods\": {\"methodName\": {\"bundling\": {..}}}}}}\n    // const client = new Client({ projectId, customConfig });\n    const overrides = (configOverrides.interfaces || {})[serviceName] || {};\n    const methods = serviceConfig.methods;\n    const overridingMethods = overrides.methods || {};\n    for (const methodName in methods) {\n        const methodConfig = methods[methodName];\n        const jsName = (0, util_1.toLowerCamelCase)(methodName);\n        let retry = constructRetry(methodConfig, serviceConfig.retry_codes, serviceConfig.retry_params, retryNames);\n        let bundlingConfig = methodConfig.bundling;\n        let timeout = methodConfig.timeout_millis;\n        if (methodName in overridingMethods) {\n            const overridingMethod = overridingMethods[methodName];\n            if (overridingMethod) {\n                if ('bundling' in overridingMethod) {\n                    bundlingConfig = overridingMethod.bundling;\n                }\n                if ('timeout_millis' in overridingMethod) {\n                    timeout = overridingMethod.timeout_millis;\n                }\n            }\n            retry = mergeRetryOptions(retry, constructRetry(overridingMethod, overrides.retry_codes, overrides.retry_params, retryNames));\n        }\n        const apiName = serviceName;\n        defaults[jsName] = new CallSettings({\n            timeout,\n            retry,\n            bundleOptions: bundlingConfig\n                ? createBundleOptions(bundlingConfig)\n                : null,\n            otherArgs,\n            apiName,\n        });\n    }\n    return defaults;\n}\nfunction createByteLengthFunction(message) {\n    return function getByteLength(obj) {\n        try {\n            return message.encode(obj).finish().length;\n        }\n        catch (err) {\n            const stringified = JSON.stringify(obj);\n            (0, warnings_1.warn)('error_encoding_protobufjs_object', `Cannot encode protobuf.js object: ${stringified}: ${err}`);\n            // We failed to encode the object properly, let's just return an upper boundary of its length.\n            // It's only needed for calculating the size of the batch, so it's safe if it's bigger than needed.\n            return stringified.length;\n        }\n    };\n}\n//# sourceMappingURL=gax.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/google-gax/build/src/gax.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/google-gax/build/src/googleError.js":
/*!**********************************************************!*\
  !*** ./node_modules/google-gax/build/src/googleError.js ***!
  \**********************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";
eval("\n/**\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    var desc = Object.getOwnPropertyDescriptor(m, k);\n    if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n      desc = { enumerable: true, get: function() { return m[k]; } };\n    }\n    Object.defineProperty(o, k2, desc);\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {\n    Object.defineProperty(o, \"default\", { enumerable: true, value: v });\n}) : function(o, v) {\n    o[\"default\"] = v;\n});\nvar __importStar = (this && this.__importStar) || (function () {\n    var ownKeys = function(o) {\n        ownKeys = Object.getOwnPropertyNames || function (o) {\n            var ar = [];\n            for (var k in o) if (Object.prototype.hasOwnProperty.call(o, k)) ar[ar.length] = k;\n            return ar;\n        };\n        return ownKeys(o);\n    };\n    return function (mod) {\n        if (mod && mod.__esModule) return mod;\n        var result = {};\n        if (mod != null) for (var k = ownKeys(mod), i = 0; i < k.length; i++) if (k[i] !== \"default\") __createBinding(result, mod, k[i]);\n        __setModuleDefault(result, mod);\n        return result;\n    };\n})();\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.GoogleErrorDecoder = exports.GoogleError = void 0;\nconst status_1 = __webpack_require__(/*! ./status */ \"(rsc)/./node_modules/google-gax/build/src/status.js\");\nconst protobuf = __importStar(__webpack_require__(/*! protobufjs */ \"(rsc)/./node_modules/protobufjs/index.js\"));\nconst serializer = __importStar(__webpack_require__(/*! proto3-json-serializer */ \"(rsc)/./node_modules/proto3-json-serializer/build/src/index.js\"));\nconst fallback_1 = __webpack_require__(/*! ./fallback */ \"(rsc)/./node_modules/google-gax/build/src/fallback.js\");\nclass GoogleError extends Error {\n    code;\n    note;\n    metadata;\n    statusDetails;\n    reason;\n    domain;\n    errorInfoMetadata;\n    // Parse details field in google.rpc.status wire over gRPC medatadata.\n    // Promote google.rpc.ErrorInfo if exist.\n    static parseGRPCStatusDetails(err) {\n        const decoder = new GoogleErrorDecoder();\n        try {\n            if (err.metadata && err.metadata.get('grpc-status-details-bin')) {\n                const statusDetailsObj = decoder.decodeGRPCStatusDetails(err.metadata.get('grpc-status-details-bin'));\n                if (statusDetailsObj &&\n                    statusDetailsObj.details &&\n                    statusDetailsObj.details.length > 0) {\n                    err.statusDetails = statusDetailsObj.details;\n                }\n                if (statusDetailsObj && statusDetailsObj.errorInfo) {\n                    err.reason = statusDetailsObj.errorInfo.reason;\n                    err.domain = statusDetailsObj.errorInfo.domain;\n                    err.errorInfoMetadata = statusDetailsObj.errorInfo.metadata;\n                }\n            }\n        }\n        catch (decodeErr) {\n            // ignoring the error\n        }\n        return err;\n    }\n    // Parse http JSON error and promote google.rpc.ErrorInfo if exist.\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    static parseHttpError(json) {\n        if (Array.isArray(json)) {\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\n            json = json.find((obj) => {\n                return 'error' in obj;\n            });\n        }\n        // fallback logic.\n        // related issue: https://github.com/googleapis/gax-nodejs/issues/1303\n        // google error mapping: https://cloud.google.com/apis/design/errors\n        // if input json doesn't have 'error' fields, wrap the whole object with 'error' field\n        if (!json['error']) {\n            json['error'] = {};\n            Object.keys(json)\n                .filter(key => key !== 'error')\n                .forEach(key => {\n                json['error'][key] = json[key];\n                delete json[key];\n            });\n        }\n        const decoder = new GoogleErrorDecoder();\n        const proto3Error = decoder.decodeHTTPError(json['error']);\n        const error = Object.assign(new GoogleError(json['error']['message']), proto3Error);\n        // Get gRPC Status Code\n        if (json['error']['status'] &&\n            status_1.Status[json['error']['status']]) {\n            error.code = status_1.Status[json['error']['status']];\n        }\n        else if (json['error']['code']) {\n            // Map Http Status Code to gRPC Status Code\n            error.code = (0, status_1.rpcCodeFromHttpStatusCode)(json['error']['code']);\n        }\n        else {\n            // If error code is absent, proto3 message default value is 0. We should\n            // keep error code as undefined.\n            delete error.code;\n        }\n        // Keep consistency with gRPC statusDetails fields. gRPC details has been occupied before.\n        // Rename \"details\" to \"statusDetails\".\n        if (error.details) {\n            try {\n                const statusDetailsObj = decoder.decodeHttpStatusDetails(error.details);\n                if (statusDetailsObj &&\n                    statusDetailsObj.details &&\n                    statusDetailsObj.details.length > 0) {\n                    error.statusDetails = statusDetailsObj.details;\n                }\n                if (statusDetailsObj && statusDetailsObj.errorInfo) {\n                    error.reason = statusDetailsObj.errorInfo.reason;\n                    error.domain = statusDetailsObj.errorInfo.domain;\n                    // error.metadata has been occupied for gRPC metadata, so we use\n                    // errorInfoMetadata to represent ErrorInfo' metadata field. Keep\n                    // consistency with gRPC ErrorInfo metadata field name.\n                    error.errorInfoMetadata = statusDetailsObj.errorInfo.metadata;\n                }\n            }\n            catch (decodeErr) {\n                // ignoring the error\n            }\n        }\n        return error;\n    }\n}\nexports.GoogleError = GoogleError;\nclass GoogleErrorDecoder {\n    root;\n    anyType;\n    statusType;\n    constructor() {\n        // eslint-disable-next-line @typescript-eslint/no-var-requires\n        const errorProtoJson = __webpack_require__(/*! ../../build/protos/status.json */ \"(rsc)/./node_modules/google-gax/build/protos/status.json\");\n        this.root = protobuf.Root.fromJSON(errorProtoJson);\n        this.anyType = this.root.lookupType('google.protobuf.Any');\n        this.statusType = this.root.lookupType('google.rpc.Status');\n    }\n    decodeProtobufAny(anyValue) {\n        const match = anyValue.type_url.match(/^type.googleapis.com\\/(.*)/);\n        if (!match) {\n            throw new Error(`Unknown type encoded in google.protobuf.any: ${anyValue.type_url}`);\n        }\n        const typeName = match[1];\n        const type = this.root.lookupType(typeName);\n        if (!type) {\n            throw new Error(`Cannot lookup type ${typeName}`);\n        }\n        return type.decode(anyValue.value);\n    }\n    // Decodes gRPC-fallback error which is an instance of google.rpc.Status.\n    decodeRpcStatus(buffer) {\n        const uint8array = new Uint8Array(buffer);\n        const status = this.statusType.decode(uint8array);\n        // google.rpc.Status contains an array of google.protobuf.Any\n        // which need a special treatment\n        const details = [];\n        let errorInfo;\n        for (const detail of status.details) {\n            try {\n                const decodedDetail = this.decodeProtobufAny(detail);\n                details.push(decodedDetail);\n                if (detail.type_url === 'type.googleapis.com/google.rpc.ErrorInfo') {\n                    errorInfo = decodedDetail;\n                }\n            }\n            catch (err) {\n                // cannot decode detail, likely because of the unknown type - just skip it\n            }\n        }\n        const result = {\n            code: status.code,\n            message: status.message,\n            statusDetails: details,\n            reason: errorInfo?.reason,\n            domain: errorInfo?.domain,\n            errorInfoMetadata: errorInfo?.metadata,\n        };\n        return result;\n    }\n    // Construct an Error from a StatusObject.\n    // Adapted from https://github.com/grpc/grpc-node/blob/main/packages/grpc-js/src/call.ts#L79\n    callErrorFromStatus(status) {\n        status.message = `${status.code} ${status_1.Status[status.code]}: ${status.message}`;\n        return Object.assign(new GoogleError(status.message), status);\n    }\n    // Decodes gRPC-fallback error which is an instance of google.rpc.Status,\n    // and puts it into the object similar to gRPC ServiceError object.\n    decodeErrorFromBuffer(buffer) {\n        return this.callErrorFromStatus(this.decodeRpcStatus(buffer));\n    }\n    // Decodes gRPC metadata error details which is an instance of google.rpc.Status.\n    decodeGRPCStatusDetails(bufferArr) {\n        const details = [];\n        let errorInfo;\n        bufferArr.forEach(buffer => {\n            const uint8array = new Uint8Array(buffer);\n            const rpcStatus = this.statusType.decode(uint8array);\n            for (const detail of rpcStatus.details) {\n                try {\n                    const decodedDetail = this.decodeProtobufAny(detail);\n                    details.push(decodedDetail);\n                    if (detail.type_url === 'type.googleapis.com/google.rpc.ErrorInfo') {\n                        errorInfo = decodedDetail;\n                    }\n                }\n                catch (err) {\n                    // cannot decode detail, likely because of the unknown type - just skip it\n                }\n            }\n        });\n        const result = {\n            details,\n            errorInfo,\n        };\n        return result;\n    }\n    // Decodes http error which is an instance of google.rpc.Status.\n    decodeHTTPError(json) {\n        const errorMessage = serializer.fromProto3JSON(this.statusType, json);\n        if (!errorMessage) {\n            throw new Error(`Received error message ${json}, but failed to serialize as proto3 message`);\n        }\n        return this.statusType.toObject(errorMessage, fallback_1.defaultToObjectOptions);\n    }\n    // Decodes http error details which is an instance of Array<google.protobuf.Any>.\n    decodeHttpStatusDetails(rawDetails) {\n        // eslint-disable-next-line @typescript-eslint/no-unused-vars\n        const details = [];\n        let errorInfo;\n        for (const detail of rawDetails) {\n            try {\n                const decodedDetail = this.decodeProtobufAny(detail);\n                details.push(decodedDetail);\n                if (detail.type_url === 'type.googleapis.com/google.rpc.ErrorInfo') {\n                    errorInfo = decodedDetail;\n                }\n            }\n            catch (err) {\n                // cannot decode detail, likely because of the unknown type - just skip it\n            }\n        }\n        return { details, errorInfo };\n    }\n}\nexports.GoogleErrorDecoder = GoogleErrorDecoder;\n//# sourceMappingURL=googleError.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/google-gax/build/src/googleError.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/google-gax/build/src/grpc.js":
/*!***************************************************!*\
  !*** ./node_modules/google-gax/build/src/grpc.js ***!
  \***************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";
eval("\n/**\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    var desc = Object.getOwnPropertyDescriptor(m, k);\n    if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n      desc = { enumerable: true, get: function() { return m[k]; } };\n    }\n    Object.defineProperty(o, k2, desc);\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {\n    Object.defineProperty(o, \"default\", { enumerable: true, value: v });\n}) : function(o, v) {\n    o[\"default\"] = v;\n});\nvar __importStar = (this && this.__importStar) || (function () {\n    var ownKeys = function(o) {\n        ownKeys = Object.getOwnPropertyNames || function (o) {\n            var ar = [];\n            for (var k in o) if (Object.prototype.hasOwnProperty.call(o, k)) ar[ar.length] = k;\n            return ar;\n        };\n        return ownKeys(o);\n    };\n    return function (mod) {\n        if (mod && mod.__esModule) return mod;\n        var result = {};\n        if (mod != null) for (var k = ownKeys(mod), i = 0; i < k.length; i++) if (k[i] !== \"default\") __createBinding(result, mod, k[i]);\n        __setModuleDefault(result, mod);\n        return result;\n    };\n})();\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.GoogleProtoFilesRoot = exports.GrpcClient = exports.ClientStub = void 0;\nconst grpcProtoLoader = __importStar(__webpack_require__(/*! @grpc/proto-loader */ \"(rsc)/./node_modules/@grpc/proto-loader/build/src/index.js\"));\nconst child_process_1 = __webpack_require__(/*! child_process */ \"child_process\");\nconst fs = __importStar(__webpack_require__(/*! fs */ \"fs\"));\nconst google_auth_library_1 = __webpack_require__(/*! google-auth-library */ \"(rsc)/./node_modules/google-auth-library/build/src/index.js\");\nconst grpc = __importStar(__webpack_require__(/*! @grpc/grpc-js */ \"(rsc)/./node_modules/google-gax/node_modules/@grpc/grpc-js/build/src/index.js\"));\nconst os = __importStar(__webpack_require__(/*! os */ \"os\"));\nconst path_1 = __webpack_require__(/*! path */ \"path\");\nconst path = __importStar(__webpack_require__(/*! path */ \"path\"));\nconst protobuf = __importStar(__webpack_require__(/*! protobufjs */ \"(rsc)/./node_modules/protobufjs/index.js\"));\nconst object_hash_1 = __importDefault(__webpack_require__(/*! object-hash */ \"(rsc)/./node_modules/object-hash/index.js\"));\nconst gax = __importStar(__webpack_require__(/*! ./gax */ \"(rsc)/./node_modules/google-gax/build/src/gax.js\"));\nconst googleProtoFilesDir = path.join(__dirname, '..', '..', 'build', 'protos');\n// INCLUDE_DIRS is passed to @grpc/proto-loader\nconst INCLUDE_DIRS = [];\nINCLUDE_DIRS.push(googleProtoFilesDir);\n// COMMON_PROTO_FILES logic is here for protobufjs loads (see\n// GoogleProtoFilesRoot below)\nconst protosList_json_1 = __importDefault(__webpack_require__(/*! ./protosList.json */ \"(rsc)/./node_modules/google-gax/build/src/protosList.json\"));\n// use the correct path separator for the OS we are running on\nconst COMMON_PROTO_FILES = protosList_json_1.default.map(file => file.replace(/[/\\\\]/g, path.sep));\n/*\n * Async version of readFile.\n *\n * @returns {Promise} Contents of file at path.\n */\nasync function readFileAsync(path) {\n    return new Promise((resolve, reject) => {\n        fs.readFile(path, 'utf8', (err, content) => {\n            if (err)\n                return reject(err);\n            else\n                resolve(content);\n        });\n    });\n}\n/*\n * Async version of execFile.\n *\n * @returns {Promise} stdout from command execution.\n */\nasync function execFileAsync(command, args) {\n    return new Promise((resolve, reject) => {\n        (0, child_process_1.execFile)(command, args, (err, stdout) => {\n            if (err)\n                return reject(err);\n            else\n                resolve(stdout);\n        });\n    });\n}\nclass ClientStub extends grpc.Client {\n}\nexports.ClientStub = ClientStub;\nclass GrpcClient {\n    auth;\n    grpc;\n    grpcVersion;\n    fallback;\n    static protoCache = new Map();\n    httpRules;\n    /**\n     * Key for proto cache map. We are doing our best to make sure we respect\n     * the options, so if the same proto file is loaded with different set of\n     * options, the cache won't be used.  Since some of the options are\n     * Functions (e.g. `enums: String` - see below in `loadProto()`),\n     * they will be omitted from the cache key.  If the cache breaks anything\n     * for you, use the `ignoreCache` parameter of `loadProto()` to disable it.\n     */\n    static protoCacheKey(filename, options) {\n        if (!filename ||\n            (Array.isArray(filename) && (filename.length === 0 || !filename[0]))) {\n            return undefined;\n        }\n        return JSON.stringify(filename) + ' ' + JSON.stringify(options);\n    }\n    /**\n     * In rare cases users might need to deallocate all memory consumed by loaded protos.\n     * This method will delete the proto cache content.\n     */\n    static clearProtoCache() {\n        GrpcClient.protoCache.clear();\n    }\n    /**\n     * A class which keeps the context of gRPC and auth for the gRPC.\n     *\n     * @param {Object=} options - The optional parameters. It will be directly\n     *   passed to google-auth-library library, so parameters like keyFile or\n     *   credentials will be valid.\n     * @param {Object=} options.auth - An instance of google-auth-library.\n     *   When specified, this auth instance will be used instead of creating\n     *   a new one.\n     * @param {Object=} options.grpc - When specified, this will be used\n     *   for the 'grpc' module in this context. By default, it will load the grpc\n     *   module in the standard way.\n     * @constructor\n     */\n    constructor(options = {}) {\n        this.auth = options.auth || new google_auth_library_1.GoogleAuth(options);\n        this.fallback = false;\n        const minimumVersion = 10;\n        const major = Number(process.version.match(/^v(\\d+)/)?.[1]);\n        if (Number.isNaN(major) || major < minimumVersion) {\n            const errorMessage = `Node.js v${minimumVersion}.0.0 is a minimum requirement. To learn about legacy version support visit: ` +\n                'https://github.com/googleapis/google-cloud-node#supported-nodejs-versions';\n            throw new Error(errorMessage);\n        }\n        if ('grpc' in options) {\n            this.grpc = options.grpc;\n            this.grpcVersion = '';\n        }\n        else {\n            this.grpc = grpc;\n            this.grpcVersion = (__webpack_require__(/*! @grpc/grpc-js/package.json */ \"(rsc)/./node_modules/google-gax/node_modules/@grpc/grpc-js/package.json\").version);\n        }\n    }\n    /**\n     * Creates a gRPC credentials. It asks the auth data if necessary.\n     * @private\n     * @param {Object} opts - options values for configuring credentials.\n     * @param {Object=} opts.sslCreds - when specified, this is used instead\n     *   of default channel credentials.\n     * @return {Promise} The promise which will be resolved to the gRPC credential.\n     */\n    async _getCredentials(opts) {\n        if (opts.sslCreds) {\n            return opts.sslCreds;\n        }\n        const grpc = this.grpc;\n        const sslCreds = opts.cert && opts.key\n            ? grpc.credentials.createSsl(null, Buffer.from(opts.key), Buffer.from(opts.cert))\n            : grpc.credentials.createSsl();\n        const client = await this.auth.getClient();\n        const credentials = grpc.credentials.combineChannelCredentials(sslCreds, grpc.credentials.createFromGoogleCredential({\n            // the `grpc` package does not support the `Headers` object yet\n            getRequestHeaders: async (url) => {\n                const headers = await client.getRequestHeaders(url);\n                const genericHeadersObject = {};\n                headers.forEach((value, key) => (genericHeadersObject[key] = value));\n                return genericHeadersObject;\n            },\n        }));\n        return credentials;\n    }\n    static defaultOptions() {\n        // This set of @grpc/proto-loader options\n        // 'closely approximates the existing behavior of grpc.load'\n        const includeDirs = INCLUDE_DIRS.slice();\n        const options = {\n            keepCase: false,\n            longs: String,\n            enums: String,\n            defaults: true,\n            oneofs: true,\n            includeDirs,\n        };\n        return options;\n    }\n    /**\n     * Loads the gRPC service from the proto file(s) at the given path and with the\n     * given options. Caches the loaded protos so the subsequent loads don't do\n     * any disk reads.\n     * @param filename The path to the proto file(s).\n     * @param options Options for loading the proto file.\n     * @param ignoreCache Defaults to `false`. Set it to `true` if the caching logic\n     *   incorrectly decides that the options object is the same, or if you want to\n     *   re-read the protos from disk for any other reason.\n     */\n    loadFromProto(filename, options, ignoreCache = false) {\n        const cacheKey = GrpcClient.protoCacheKey(filename, options);\n        let grpcPackage = cacheKey\n            ? GrpcClient.protoCache.get(cacheKey)\n            : undefined;\n        if (ignoreCache || !grpcPackage) {\n            const packageDef = grpcProtoLoader.loadSync(filename, options);\n            grpcPackage = this.grpc.loadPackageDefinition(packageDef);\n            if (cacheKey) {\n                GrpcClient.protoCache.set(cacheKey, grpcPackage);\n            }\n        }\n        return grpcPackage;\n    }\n    /**\n     * Load gRPC proto service from a filename looking in googleapis common protos\n     * when necessary. Caches the loaded protos so the subsequent loads don't do\n     * any disk reads.\n     * @param {String} protoPath - The directory to search for the protofile.\n     * @param {String|String[]} filename - The filename(s) of the proto(s) to be loaded.\n     *   If omitted, protoPath will be treated as a file path to load.\n     * @param ignoreCache Defaults to `false`. Set it to `true` if the caching logic\n     *   incorrectly decides that the options object is the same, or if you want to\n     *   re-read the protos from disk for any other reason.\n     * @return {Object<string, *>} The gRPC loaded result (the toplevel namespace\n     *   object).\n     */\n    loadProto(protoPath, filename, ignoreCache = false) {\n        if (!filename) {\n            filename = path.basename(protoPath);\n            protoPath = path.dirname(protoPath);\n        }\n        if (Array.isArray(filename) && filename.length === 0) {\n            return {};\n        }\n        const options = GrpcClient.defaultOptions();\n        options.includeDirs.unshift(protoPath);\n        return this.loadFromProto(filename, options, ignoreCache);\n    }\n    static _resolveFile(protoPath, filename) {\n        if (fs.existsSync(path.join(protoPath, filename))) {\n            return path.join(protoPath, filename);\n        }\n        else if (COMMON_PROTO_FILES.indexOf(filename) > -1) {\n            return path.join(googleProtoFilesDir, filename);\n        }\n        throw new Error(filename + ' could not be found in ' + protoPath);\n    }\n    loadProtoJSON(json, ignoreCache = false) {\n        const hash = (0, object_hash_1.default)(JSON.stringify(json)).toString();\n        const cached = GrpcClient.protoCache.get(hash);\n        if (cached && !ignoreCache) {\n            return cached;\n        }\n        const options = GrpcClient.defaultOptions();\n        const packageDefinition = grpcProtoLoader.fromJSON(json, options);\n        const grpcPackage = this.grpc.loadPackageDefinition(packageDefinition);\n        GrpcClient.protoCache.set(hash, grpcPackage);\n        return grpcPackage;\n    }\n    metadataBuilder(headers) {\n        const Metadata = this.grpc.Metadata;\n        const baseMetadata = new Metadata();\n        for (const key in headers) {\n            const value = headers[key];\n            if (Array.isArray(value)) {\n                value.forEach(v => baseMetadata.add(key, v));\n            }\n            else {\n                baseMetadata.set(key, `${value}`);\n            }\n        }\n        return function buildMetadata(abTests, moreHeaders) {\n            // TODO: bring the A/B testing info into the metadata.\n            let copied = false;\n            let metadata = baseMetadata;\n            if (moreHeaders) {\n                for (const key in moreHeaders) {\n                    if (key.toLowerCase() !== 'x-goog-api-client') {\n                        if (!copied) {\n                            copied = true;\n                            metadata = metadata.clone();\n                        }\n                        const value = moreHeaders[key];\n                        if (Array.isArray(value)) {\n                            value.forEach(v => metadata.add(key, v));\n                        }\n                        else {\n                            metadata.set(key, `${value}`);\n                        }\n                    }\n                }\n            }\n            return metadata;\n        };\n    }\n    /**\n     * A wrapper of {@link constructSettings} function under the gRPC context.\n     *\n     * Most of parameters are common among constructSettings, please take a look.\n     * @param {string} serviceName - The fullly-qualified name of the service.\n     * @param {Object} clientConfig - A dictionary of the client config.\n     * @param {Object} configOverrides - A dictionary of overriding configs.\n     * @param {Object} headers - A dictionary of additional HTTP header name to\n     *   its value.\n     * @return {Object} A mapping of method names to CallSettings.\n     */\n    constructSettings(serviceName, clientConfig, configOverrides, headers) {\n        return gax.constructSettings(serviceName, clientConfig, configOverrides, this.grpc.status, { metadataBuilder: this.metadataBuilder(headers) });\n    }\n    /**\n     * Creates a gRPC stub with current gRPC and auth.\n     * @param {function} CreateStub - The constructor function of the stub.\n     * @param {Object} options - The optional arguments to customize\n     *   gRPC connection. This options will be passed to the constructor of\n     *   gRPC client too.\n     * @param {string} options.servicePath - The name of the server of the service.\n     * @param {number} options.port - The port of the service.\n     * @param {grpcTypes.ClientCredentials=} options.sslCreds - The credentials to be used\n     *   to set up gRPC connection.\n     * @param {string} defaultServicePath - The default service path.\n     * @return {Promise} A promise which resolves to a gRPC stub instance.\n     */\n    async createStub(CreateStub, options, customServicePath) {\n        // The following options are understood by grpc-gcp and need a special treatment\n        // (should be passed without a `grpc.` prefix)\n        const grpcGcpOptions = [\n            'grpc.callInvocationTransformer',\n            'grpc.channelFactoryOverride',\n            'grpc.gcpApiConfig',\n        ];\n        const [cert, key] = await this._detectClientCertificate(options, options.universeDomain);\n        const servicePath = this._mtlsServicePath(options.servicePath, customServicePath, cert && key);\n        const opts = Object.assign({}, options, { cert, key, servicePath });\n        const serviceAddress = servicePath + ':' + opts.port;\n        if (!options.universeDomain) {\n            options.universeDomain = 'googleapis.com';\n        }\n        if (options.universeDomain) {\n            const universeFromAuth = await this.auth.getUniverseDomain();\n            if (universeFromAuth && options.universeDomain !== universeFromAuth) {\n                throw new Error(`The configured universe domain (${options.universeDomain}) does not match the universe domain found in the credentials (${universeFromAuth}). ` +\n                    \"If you haven't configured the universe domain explicitly, googleapis.com is the default.\");\n            }\n        }\n        const creds = await this._getCredentials(opts);\n        const grpcOptions = {};\n        // @grpc/grpc-js limits max receive/send message length starting from v0.8.0\n        // https://github.com/grpc/grpc-node/releases/tag/%40grpc%2Fgrpc-js%400.8.0\n        // To keep the existing behavior and avoid libraries breakage, we pass -1 there as suggested.\n        grpcOptions['grpc.max_receive_message_length'] = -1;\n        grpcOptions['grpc.max_send_message_length'] = -1;\n        grpcOptions['grpc.initial_reconnect_backoff_ms'] = 1000;\n        Object.keys(opts).forEach(key => {\n            const value = options[key];\n            // the older versions had a bug which required users to call an option\n            // grpc.grpc.* to make it actually pass to gRPC as grpc.*, let's handle\n            // this here until the next major release\n            if (key.startsWith('grpc.grpc.')) {\n                key = key.replace(/^grpc\\./, '');\n            }\n            if (key.startsWith('grpc.')) {\n                if (grpcGcpOptions.includes(key)) {\n                    key = key.replace(/^grpc\\./, '');\n                }\n                grpcOptions[key] = value;\n            }\n            if (key.startsWith('grpc-node.')) {\n                grpcOptions[key] = value;\n            }\n        });\n        const stub = new CreateStub(serviceAddress, creds, grpcOptions);\n        return stub;\n    }\n    /**\n     * Detect mTLS client certificate based on logic described in\n     * https://google.aip.dev/auth/4114.\n     *\n     * @param {object} [options] - The configuration object.\n     * @returns {Promise} Resolves array of strings representing cert and key.\n     */\n    async _detectClientCertificate(opts, universeDomain) {\n        const certRegex = /(?<cert>-----BEGIN CERTIFICATE-----.*?-----END CERTIFICATE-----)/s;\n        const keyRegex = /(?<key>-----BEGIN PRIVATE KEY-----.*?-----END PRIVATE KEY-----)/s;\n        // If GOOGLE_API_USE_CLIENT_CERTIFICATE is true...:\n        if (typeof process !== 'undefined' &&\n            process?.env?.GOOGLE_API_USE_CLIENT_CERTIFICATE === 'true') {\n            if (universeDomain && universeDomain !== 'googleapis.com') {\n                throw new Error('mTLS is not supported outside of googleapis.com universe domain.');\n            }\n            if (opts?.cert && opts?.key) {\n                return [opts.cert, opts.key];\n            }\n            // If context aware metadata exists, run the cert provider command,\n            // parse the output to extract cert and key, and use this cert/key.\n            const metadataPath = (0, path_1.join)(os.homedir(), '.secureConnect', 'context_aware_metadata.json');\n            const metadata = JSON.parse(await readFileAsync(metadataPath));\n            if (!metadata.cert_provider_command) {\n                throw Error('no cert_provider_command found');\n            }\n            const stdout = await execFileAsync(metadata.cert_provider_command[0], metadata.cert_provider_command.slice(1));\n            const matchCert = stdout.toString().match(certRegex);\n            const matchKey = stdout.toString().match(keyRegex);\n            if (!(matchCert?.groups && matchKey?.groups)) {\n                throw Error('unable to parse certificate and key');\n            }\n            else {\n                return [matchCert.groups.cert, matchKey.groups.key];\n            }\n        }\n        // If GOOGLE_API_USE_CLIENT_CERTIFICATE is not set or false,\n        // use no cert or key:\n        return [undefined, undefined];\n    }\n    /**\n     * Return service path, taking into account mTLS logic.\n     * See: https://google.aip.dev/auth/4114\n     *\n     * @param {string|undefined} servicePath - The path of the service.\n     * @param {string|undefined} customServicePath - Did the user provide a custom service URL.\n     * @param {boolean} hasCertificate - Was a certificate found.\n     * @returns {string} The DNS address for this service.\n     */\n    _mtlsServicePath(servicePath, customServicePath, hasCertificate) {\n        // If user provides a custom service path, return the current service\n        // path and do not attempt to add mtls subdomain:\n        if (customServicePath || !servicePath)\n            return servicePath;\n        if (typeof process !== 'undefined' &&\n            process?.env?.GOOGLE_API_USE_MTLS_ENDPOINT === 'never') {\n            // It was explicitly asked that mtls endpoint not be used:\n            return servicePath;\n        }\n        else if ((typeof process !== 'undefined' &&\n            process?.env?.GOOGLE_API_USE_MTLS_ENDPOINT === 'always') ||\n            hasCertificate) {\n            // Either auto-detect or explicit setting of endpoint:\n            return servicePath.replace('googleapis.com', 'mtls.googleapis.com');\n        }\n        return servicePath;\n    }\n    /**\n     * Creates a 'bytelength' function for a given proto message class.\n     *\n     * See {@link BundleDescriptor} about the meaning of the return value.\n     *\n     * @param {function} message - a constructor function that is generated by\n     *   protobuf.js. Assumes 'encoder' field in the message.\n     * @return {function(Object):number} - a function to compute the byte length\n     *   for an object.\n     */\n    static createByteLengthFunction(message) {\n        return gax.createByteLengthFunction(message);\n    }\n}\nexports.GrpcClient = GrpcClient;\nclass GoogleProtoFilesRoot extends protobuf.Root {\n    constructor(...args) {\n        super(...args);\n    }\n    // Causes the loading of an included proto to check if it is a common\n    // proto. If it is a common proto, use the bundled proto.\n    resolvePath(originPath, includePath) {\n        originPath = path.normalize(originPath);\n        includePath = path.normalize(includePath);\n        // Fully qualified paths don't need to be resolved.\n        if (path.isAbsolute(includePath)) {\n            if (!fs.existsSync(includePath)) {\n                throw new Error('The include `' + includePath + '` was not found.');\n            }\n            return includePath;\n        }\n        if (COMMON_PROTO_FILES.indexOf(includePath) > -1) {\n            return path.join(googleProtoFilesDir, includePath);\n        }\n        return GoogleProtoFilesRoot._findIncludePath(originPath, includePath);\n    }\n    static _findIncludePath(originPath, includePath) {\n        originPath = path.normalize(originPath);\n        includePath = path.normalize(includePath);\n        let current = originPath;\n        let found = fs.existsSync(path.join(current, includePath));\n        while (!found && current.length > 0) {\n            current = current.substring(0, current.lastIndexOf(path.sep));\n            found = fs.existsSync(path.join(current, includePath));\n        }\n        if (!found) {\n            throw new Error('The include `' + includePath + '` was not found.');\n        }\n        return path.join(current, includePath);\n    }\n}\nexports.GoogleProtoFilesRoot = GoogleProtoFilesRoot;\n//# sourceMappingURL=grpc.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/google-gax/build/src/grpc.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/google-gax/build/src/iamService.js":
/*!*********************************************************!*\
  !*** ./node_modules/google-gax/build/src/iamService.js ***!
  \*********************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";
eval("\n// Copyright 2020 Google LLC\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     https://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n//\n// ** This file is automatically generated by gapic-generator-typescript. **\n// ** https://github.com/googleapis/gapic-generator-typescript **\n// ** All changes to this file may be overwritten. **\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    var desc = Object.getOwnPropertyDescriptor(m, k);\n    if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n      desc = { enumerable: true, get: function() { return m[k]; } };\n    }\n    Object.defineProperty(o, k2, desc);\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {\n    Object.defineProperty(o, \"default\", { enumerable: true, value: v });\n}) : function(o, v) {\n    o[\"default\"] = v;\n});\nvar __importStar = (this && this.__importStar) || (function () {\n    var ownKeys = function(o) {\n        ownKeys = Object.getOwnPropertyNames || function (o) {\n            var ar = [];\n            for (var k in o) if (Object.prototype.hasOwnProperty.call(o, k)) ar[ar.length] = k;\n            return ar;\n        };\n        return ownKeys(o);\n    };\n    return function (mod) {\n        if (mod && mod.__esModule) return mod;\n        var result = {};\n        if (mod != null) for (var k = ownKeys(mod), i = 0; i < k.length; i++) if (k[i] !== \"default\") __createBinding(result, mod, k[i]);\n        __setModuleDefault(result, mod);\n        return result;\n    };\n})();\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.IamClient = void 0;\nconst createApiCall_1 = __webpack_require__(/*! ./createApiCall */ \"(rsc)/./node_modules/google-gax/build/src/createApiCall.js\");\nconst routingHeader = __importStar(__webpack_require__(/*! ./routingHeader */ \"(rsc)/./node_modules/google-gax/build/src/routingHeader.js\"));\nconst gapicConfig = __importStar(__webpack_require__(/*! ./iam_policy_service_client_config.json */ \"(rsc)/./node_modules/google-gax/build/src/iam_policy_service_client_config.json\"));\nconst fallback = __importStar(__webpack_require__(/*! ./fallback */ \"(rsc)/./node_modules/google-gax/build/src/fallback.js\"));\nlet version = (__webpack_require__(/*! ../../package.json */ \"(rsc)/./node_modules/google-gax/package.json\").version);\nconst jsonProtos = __webpack_require__(/*! ../protos/iam_service.json */ \"(rsc)/./node_modules/google-gax/build/protos/iam_service.json\");\n/**\n *  Google Cloud IAM Client.\n *  This is manually written for providing methods [setIamPolicy, getIamPolicy, testIamPerssion] to the generated client.\n */\nclass IamClient {\n    _terminated = false;\n    _opts;\n    _defaults;\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    _protos;\n    auth;\n    descriptors = { page: {}, stream: {}, longrunning: {} };\n    innerApiCalls = {};\n    iamPolicyStub;\n    gaxGrpc;\n    constructor(gaxGrpc, \n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    options) {\n        this.gaxGrpc = gaxGrpc;\n        // Ensure that options include the service address and port.\n        const opts = Object.assign({\n            servicePath: options.servicePath,\n            port: options.port,\n            clientConfig: options.clientConfig,\n            apiEndpoint: options.apiEndpoint,\n            fallback: options.fallback,\n        }, options);\n        version = opts.fallback ? fallback.version : version;\n        opts.scopes = this.constructor.scopes;\n        // Save options to use in initialize() method.\n        this._opts = opts;\n        // Save the auth object to the client, for use by other methods.\n        this.auth = gaxGrpc.auth;\n        // Determine the client header string.\n        const clientHeader = [`gax/${version}`, `gapic/${version}`];\n        if (typeof process !== 'undefined' && 'versions' in process) {\n            clientHeader.push(`gl-node/${process.versions.node}`);\n        }\n        else {\n            clientHeader.push(`gl-web/${version}`);\n        }\n        if (!opts.fallback) {\n            clientHeader.push(`grpc/${gaxGrpc.grpcVersion}`);\n        }\n        if (opts.libName && opts.libVersion) {\n            clientHeader.push(`${opts.libName}/${opts.libVersion}`);\n        }\n        // Load the applicable protos.\n        this._protos = this.gaxGrpc.loadProtoJSON(jsonProtos);\n        // Put together the default options sent with requests.\n        this._defaults = gaxGrpc.constructSettings('google.iam.v1.IAMPolicy', gapicConfig, opts.clientConfig || {}, { 'x-goog-api-client': clientHeader.join(' ') });\n        this.innerApiCalls = {};\n    }\n    /**\n     * Initialize the client.\n     * Performs asynchronous operations (such as authentication) and prepares the client.\n     * This function will be called automatically when any class method is called for the\n     * first time, but if you need to initialize it before calling an actual method,\n     * feel free to call initialize() directly.\n     *\n     * You can await on this method if you want to make sure the client is initialized.\n     *\n     * @returns {Promise} A promise that resolves to an authenticated service stub.\n     */\n    initialize() {\n        // If the client stub promise is already initialized, return immediately.\n        if (this.iamPolicyStub) {\n            return this.iamPolicyStub;\n        }\n        // Put together the \"service stub\" for\n        // google.iam.v1.IAMPolicy.\n        this.iamPolicyStub = this.gaxGrpc.createStub(this._opts.fallback\n            ? this._protos.lookupService('google.iam.v1.IAMPolicy')\n            : this._protos.google.iam.v1.IAMPolicy, this._opts);\n        // Iterate over each of the methods that the service provides\n        // and create an API call method for each.\n        const iamPolicyStubMethods = [\n            'getIamPolicy',\n            'setIamPolicy',\n            'testIamPermissions',\n        ];\n        for (const methodName of iamPolicyStubMethods) {\n            const innerCallPromise = this.iamPolicyStub.then(stub => (...args) => {\n                if (this._terminated) {\n                    return Promise.reject('The client has already been closed.');\n                }\n                const func = stub[methodName];\n                return func.apply(stub, args);\n            }, (err) => () => {\n                throw err;\n            });\n            this.innerApiCalls[methodName] = (0, createApiCall_1.createApiCall)(innerCallPromise, this._defaults[methodName], this.descriptors.page[methodName]);\n        }\n        return this.iamPolicyStub;\n    }\n    /**\n     * The DNS address for this API service.\n     */\n    static get servicePath() {\n        return 'cloudkms.googleapis.com';\n    }\n    /**\n     * The DNS address for this API service - same as servicePath(),\n     * exists for compatibility reasons.\n     */\n    static get apiEndpoint() {\n        return 'cloudkms.googleapis.com';\n    }\n    /**\n     * The port for this API service.\n     */\n    static get port() {\n        return 443;\n    }\n    /**\n     * The scopes needed to make gRPC calls for every method defined\n     * in this service.\n     */\n    static get scopes() {\n        return [\n            'https://www.googleapis.com/auth/cloud-platform',\n            'https://www.googleapis.com/auth/cloudkms',\n        ];\n    }\n    getProjectId(callback) {\n        if (this.auth && 'getProjectId' in this.auth) {\n            return this.auth.getProjectId(callback);\n        }\n        if (callback) {\n            callback(new Error('Cannot determine project ID.'));\n        }\n        else {\n            return Promise.reject('Cannot determine project ID.');\n        }\n    }\n    getIamPolicy(request, optionsOrCallback, callback) {\n        let options;\n        if (optionsOrCallback instanceof Function && callback === undefined) {\n            callback = optionsOrCallback;\n            options = {};\n        }\n        else {\n            options = optionsOrCallback;\n        }\n        request = request || {};\n        options = options || {};\n        options.otherArgs = options.otherArgs || {};\n        options.otherArgs.headers = options.otherArgs.headers || {};\n        options.otherArgs.headers['x-goog-request-params'] =\n            routingHeader.fromParams({\n                resource: request.resource,\n            });\n        this.initialize().catch(console.error);\n        return this.innerApiCalls.getIamPolicy(request, options, callback);\n    }\n    setIamPolicy(request, optionsOrCallback, callback) {\n        let options;\n        if (optionsOrCallback instanceof Function && callback === undefined) {\n            callback = optionsOrCallback;\n            options = {};\n        }\n        else {\n            options = optionsOrCallback;\n        }\n        request = request || {};\n        options = options || {};\n        options.otherArgs = options.otherArgs || {};\n        options.otherArgs.headers = options.otherArgs.headers || {};\n        options.otherArgs.headers['x-goog-request-params'] =\n            routingHeader.fromParams({\n                resource: request.resource,\n            });\n        this.initialize().catch(console.error);\n        return this.innerApiCalls.setIamPolicy(request, options, callback);\n    }\n    testIamPermissions(request, optionsOrCallback, callback) {\n        let options;\n        if (optionsOrCallback instanceof Function && callback === undefined) {\n            callback = optionsOrCallback;\n            options = {};\n        }\n        else {\n            options = optionsOrCallback;\n        }\n        request = request || {};\n        options = options || {};\n        options.otherArgs = options.otherArgs || {};\n        options.otherArgs.headers = options.otherArgs.headers || {};\n        options.otherArgs.headers['x-goog-request-params'] =\n            routingHeader.fromParams({\n                resource: request.resource,\n            });\n        this.initialize().catch(console.error);\n        return this.innerApiCalls.testIamPermissions(request, options, callback);\n    }\n    /**\n     * Terminate the GRPC channel and close the client.\n     *\n     * The client will no longer be usable and all future behavior is undefined.\n     */\n    close() {\n        this.initialize().catch(console.error);\n        if (!this._terminated) {\n            return this.iamPolicyStub.then(stub => {\n                this._terminated = true;\n                stub.close();\n            });\n        }\n        return Promise.resolve();\n    }\n}\nexports.IamClient = IamClient;\n//# sourceMappingURL=iamService.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/google-gax/build/src/iamService.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/google-gax/build/src/iam_policy_service_client_config.json":
/*!*********************************************************************************!*\
  !*** ./node_modules/google-gax/build/src/iam_policy_service_client_config.json ***!
  \*********************************************************************************/
/***/ ((module) => {

"use strict";
module.exports = /*#__PURE__*/JSON.parse('{"interfaces":{"google.iam.v1.IAMPolicy":{"retry_codes":{"non_idempotent":[],"idempotent":["DEADLINE_EXCEEDED","UNAVAILABLE"]},"retry_params":{"default":{"initial_retry_delay_millis":100,"retry_delay_multiplier":1.3,"max_retry_delay_millis":60000,"initial_rpc_timeout_millis":20000,"rpc_timeout_multiplier":1,"max_rpc_timeout_millis":20000,"total_timeout_millis":600000}},"methods":{"GetIamPolicy":{"retry_codes_name":"non_idempotent","retry_params_name":"default"},"SetIamPolicy":{"retry_codes_name":"non_idempotent","retry_params_name":"default"},"TestIamPermissions":{"retry_codes_name":"non_idempotent","retry_params_name":"default"}}}}}');

/***/ }),

/***/ "(rsc)/./node_modules/google-gax/build/src/index.js":
/*!****************************************************!*\
  !*** ./node_modules/google-gax/build/src/index.js ***!
  \****************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";
eval("\n/**\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    var desc = Object.getOwnPropertyDescriptor(m, k);\n    if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n      desc = { enumerable: true, get: function() { return m[k]; } };\n    }\n    Object.defineProperty(o, k2, desc);\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {\n    Object.defineProperty(o, \"default\", { enumerable: true, value: v });\n}) : function(o, v) {\n    o[\"default\"] = v;\n});\nvar __importStar = (this && this.__importStar) || (function () {\n    var ownKeys = function(o) {\n        ownKeys = Object.getOwnPropertyNames || function (o) {\n            var ar = [];\n            for (var k in o) if (Object.prototype.hasOwnProperty.call(o, k)) ar[ar.length] = k;\n            return ar;\n        };\n        return ownKeys(o);\n    };\n    return function (mod) {\n        if (mod && mod.__esModule) return mod;\n        var result = {};\n        if (mod != null) for (var k = ownKeys(mod), i = 0; i < k.length; i++) if (k[i] !== \"default\") __createBinding(result, mod, k[i]);\n        __setModuleDefault(result, mod);\n        return result;\n    };\n})();\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.serializer = exports.warn = exports.ChannelCredentials = exports.makeUUID = exports.fallback = exports.protobufMinimal = exports.protobuf = exports.version = exports.createByteLengthFunction = exports.LocationsClient = exports.IamClient = exports.OperationsClient = exports.LocationProtos = exports.IamProtos = exports.operationsProtos = exports.routingHeader = exports.StreamType = exports.Status = exports.PathTemplate = exports.operation = exports.Operation = exports.GrpcClient = exports.GoogleProtoFilesRoot = exports.ClientStub = exports.GoogleError = exports.createMaxRetriesBackoffSettings = exports.createDefaultBackoffSettings = exports.createBackoffSettings = exports.createBundleOptions = exports.createRetryOptions = exports.RetryOptions = exports.constructSettings = exports.CallSettings = exports.StreamDescriptor = exports.PageDescriptor = exports.LongrunningDescriptor = exports.BundleDescriptor = exports.createApiCall = exports.OngoingCall = exports.grpc = exports.loggingUtils = exports.googleAuthLibrary = exports.GoogleAuth = void 0;\nexports.lro = lro;\nconst grpc = __importStar(__webpack_require__(/*! @grpc/grpc-js */ \"(rsc)/./node_modules/google-gax/node_modules/@grpc/grpc-js/build/src/index.js\"));\nexports.grpc = grpc;\nconst grpc_1 = __webpack_require__(/*! ./grpc */ \"(rsc)/./node_modules/google-gax/build/src/grpc.js\");\nconst IamProtos = __importStar(__webpack_require__(/*! ../protos/iam_service */ \"(rsc)/./node_modules/google-gax/build/protos/iam_service.js\"));\nexports.IamProtos = IamProtos;\nconst LocationProtos = __importStar(__webpack_require__(/*! ../protos/locations */ \"(rsc)/./node_modules/google-gax/build/protos/locations.js\"));\nexports.LocationProtos = LocationProtos;\nconst operationsProtos = __importStar(__webpack_require__(/*! ../protos/operations */ \"(rsc)/./node_modules/google-gax/build/protos/operations.js\"));\nexports.operationsProtos = operationsProtos;\nconst operationsClient = __importStar(__webpack_require__(/*! ./operationsClient */ \"(rsc)/./node_modules/google-gax/build/src/operationsClient.js\"));\nconst routingHeader = __importStar(__webpack_require__(/*! ./routingHeader */ \"(rsc)/./node_modules/google-gax/build/src/routingHeader.js\"));\nexports.routingHeader = routingHeader;\nvar google_auth_library_1 = __webpack_require__(/*! google-auth-library */ \"(rsc)/./node_modules/google-auth-library/build/src/index.js\");\nObject.defineProperty(exports, \"GoogleAuth\", ({ enumerable: true, get: function () { return google_auth_library_1.GoogleAuth; } }));\nexports.googleAuthLibrary = __importStar(__webpack_require__(/*! google-auth-library */ \"(rsc)/./node_modules/google-auth-library/build/src/index.js\"));\nexports.loggingUtils = __importStar(__webpack_require__(/*! google-logging-utils */ \"(rsc)/./node_modules/google-logging-utils/build/src/index.js\"));\nvar call_1 = __webpack_require__(/*! ./call */ \"(rsc)/./node_modules/google-gax/build/src/call.js\");\nObject.defineProperty(exports, \"OngoingCall\", ({ enumerable: true, get: function () { return call_1.OngoingCall; } }));\nvar createApiCall_1 = __webpack_require__(/*! ./createApiCall */ \"(rsc)/./node_modules/google-gax/build/src/createApiCall.js\");\nObject.defineProperty(exports, \"createApiCall\", ({ enumerable: true, get: function () { return createApiCall_1.createApiCall; } }));\nvar descriptor_1 = __webpack_require__(/*! ./descriptor */ \"(rsc)/./node_modules/google-gax/build/src/descriptor.js\");\nObject.defineProperty(exports, \"BundleDescriptor\", ({ enumerable: true, get: function () { return descriptor_1.BundleDescriptor; } }));\nObject.defineProperty(exports, \"LongrunningDescriptor\", ({ enumerable: true, get: function () { return descriptor_1.LongrunningDescriptor; } }));\nObject.defineProperty(exports, \"PageDescriptor\", ({ enumerable: true, get: function () { return descriptor_1.PageDescriptor; } }));\nObject.defineProperty(exports, \"StreamDescriptor\", ({ enumerable: true, get: function () { return descriptor_1.StreamDescriptor; } }));\nvar gax_1 = __webpack_require__(/*! ./gax */ \"(rsc)/./node_modules/google-gax/build/src/gax.js\");\nObject.defineProperty(exports, \"CallSettings\", ({ enumerable: true, get: function () { return gax_1.CallSettings; } }));\nObject.defineProperty(exports, \"constructSettings\", ({ enumerable: true, get: function () { return gax_1.constructSettings; } }));\nObject.defineProperty(exports, \"RetryOptions\", ({ enumerable: true, get: function () { return gax_1.RetryOptions; } }));\nObject.defineProperty(exports, \"createRetryOptions\", ({ enumerable: true, get: function () { return gax_1.createRetryOptions; } }));\nObject.defineProperty(exports, \"createBundleOptions\", ({ enumerable: true, get: function () { return gax_1.createBundleOptions; } }));\nObject.defineProperty(exports, \"createBackoffSettings\", ({ enumerable: true, get: function () { return gax_1.createBackoffSettings; } }));\nObject.defineProperty(exports, \"createDefaultBackoffSettings\", ({ enumerable: true, get: function () { return gax_1.createDefaultBackoffSettings; } }));\nObject.defineProperty(exports, \"createMaxRetriesBackoffSettings\", ({ enumerable: true, get: function () { return gax_1.createMaxRetriesBackoffSettings; } }));\nvar googleError_1 = __webpack_require__(/*! ./googleError */ \"(rsc)/./node_modules/google-gax/build/src/googleError.js\");\nObject.defineProperty(exports, \"GoogleError\", ({ enumerable: true, get: function () { return googleError_1.GoogleError; } }));\nvar grpc_2 = __webpack_require__(/*! ./grpc */ \"(rsc)/./node_modules/google-gax/build/src/grpc.js\");\nObject.defineProperty(exports, \"ClientStub\", ({ enumerable: true, get: function () { return grpc_2.ClientStub; } }));\nObject.defineProperty(exports, \"GoogleProtoFilesRoot\", ({ enumerable: true, get: function () { return grpc_2.GoogleProtoFilesRoot; } }));\nObject.defineProperty(exports, \"GrpcClient\", ({ enumerable: true, get: function () { return grpc_2.GrpcClient; } }));\nvar longrunning_1 = __webpack_require__(/*! ./longRunningCalls/longrunning */ \"(rsc)/./node_modules/google-gax/build/src/longRunningCalls/longrunning.js\");\nObject.defineProperty(exports, \"Operation\", ({ enumerable: true, get: function () { return longrunning_1.Operation; } }));\nObject.defineProperty(exports, \"operation\", ({ enumerable: true, get: function () { return longrunning_1.operation; } }));\nvar pathTemplate_1 = __webpack_require__(/*! ./pathTemplate */ \"(rsc)/./node_modules/google-gax/build/src/pathTemplate.js\");\nObject.defineProperty(exports, \"PathTemplate\", ({ enumerable: true, get: function () { return pathTemplate_1.PathTemplate; } }));\nvar status_1 = __webpack_require__(/*! ./status */ \"(rsc)/./node_modules/google-gax/build/src/status.js\");\nObject.defineProperty(exports, \"Status\", ({ enumerable: true, get: function () { return status_1.Status; } }));\nvar streaming_1 = __webpack_require__(/*! ./streamingCalls/streaming */ \"(rsc)/./node_modules/google-gax/build/src/streamingCalls/streaming.js\");\nObject.defineProperty(exports, \"StreamType\", ({ enumerable: true, get: function () { return streaming_1.StreamType; } }));\nfunction lro(options) {\n    options = Object.assign({ scopes: lro.ALL_SCOPES }, options);\n    const gaxGrpc = new grpc_1.GrpcClient(options);\n    return new operationsClient.OperationsClientBuilder(gaxGrpc);\n}\nlro.SERVICE_ADDRESS = operationsClient.SERVICE_ADDRESS;\nlro.ALL_SCOPES = operationsClient.ALL_SCOPES;\nvar operationsClient_1 = __webpack_require__(/*! ./operationsClient */ \"(rsc)/./node_modules/google-gax/build/src/operationsClient.js\");\nObject.defineProperty(exports, \"OperationsClient\", ({ enumerable: true, get: function () { return operationsClient_1.OperationsClient; } }));\nvar iamService_1 = __webpack_require__(/*! ./iamService */ \"(rsc)/./node_modules/google-gax/build/src/iamService.js\");\nObject.defineProperty(exports, \"IamClient\", ({ enumerable: true, get: function () { return iamService_1.IamClient; } }));\nvar locationService_1 = __webpack_require__(/*! ./locationService */ \"(rsc)/./node_modules/google-gax/build/src/locationService.js\");\nObject.defineProperty(exports, \"LocationsClient\", ({ enumerable: true, get: function () { return locationService_1.LocationsClient; } }));\nexports.createByteLengthFunction = grpc_1.GrpcClient?.createByteLengthFunction;\nexports.version = __webpack_require__(/*! ../../package.json */ \"(rsc)/./node_modules/google-gax/package.json\").version;\nconst protobuf = __importStar(__webpack_require__(/*! protobufjs */ \"(rsc)/./node_modules/protobufjs/index.js\"));\nexports.protobuf = protobuf;\nexports.protobufMinimal = __importStar(__webpack_require__(/*! protobufjs/minimal */ \"(rsc)/./node_modules/protobufjs/minimal.js\"));\nconst fallback = __importStar(__webpack_require__(/*! ./fallback */ \"(rsc)/./node_modules/google-gax/build/src/fallback.js\"));\nexports.fallback = fallback;\nvar util_1 = __webpack_require__(/*! ./util */ \"(rsc)/./node_modules/google-gax/build/src/util.js\");\nObject.defineProperty(exports, \"makeUUID\", ({ enumerable: true, get: function () { return util_1.makeUUID; } }));\nvar grpc_js_1 = __webpack_require__(/*! @grpc/grpc-js */ \"(rsc)/./node_modules/google-gax/node_modules/@grpc/grpc-js/build/src/index.js\");\nObject.defineProperty(exports, \"ChannelCredentials\", ({ enumerable: true, get: function () { return grpc_js_1.ChannelCredentials; } }));\nvar warnings_1 = __webpack_require__(/*! ./warnings */ \"(rsc)/./node_modules/google-gax/build/src/warnings.js\");\nObject.defineProperty(exports, \"warn\", ({ enumerable: true, get: function () { return warnings_1.warn; } }));\nconst serializer = __importStar(__webpack_require__(/*! proto3-json-serializer */ \"(rsc)/./node_modules/proto3-json-serializer/build/src/index.js\"));\nexports.serializer = serializer;\n//# sourceMappingURL=index.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/google-gax/build/src/index.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/google-gax/build/src/locationService.js":
/*!**************************************************************!*\
  !*** ./node_modules/google-gax/build/src/locationService.js ***!
  \**************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";
eval("\n// Copyright 2021 Google LLC\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     https://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    var desc = Object.getOwnPropertyDescriptor(m, k);\n    if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n      desc = { enumerable: true, get: function() { return m[k]; } };\n    }\n    Object.defineProperty(o, k2, desc);\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {\n    Object.defineProperty(o, \"default\", { enumerable: true, value: v });\n}) : function(o, v) {\n    o[\"default\"] = v;\n});\nvar __importStar = (this && this.__importStar) || (function () {\n    var ownKeys = function(o) {\n        ownKeys = Object.getOwnPropertyNames || function (o) {\n            var ar = [];\n            for (var k in o) if (Object.prototype.hasOwnProperty.call(o, k)) ar[ar.length] = k;\n            return ar;\n        };\n        return ownKeys(o);\n    };\n    return function (mod) {\n        if (mod && mod.__esModule) return mod;\n        var result = {};\n        if (mod != null) for (var k = ownKeys(mod), i = 0; i < k.length; i++) if (k[i] !== \"default\") __createBinding(result, mod, k[i]);\n        __setModuleDefault(result, mod);\n        return result;\n    };\n})();\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.LocationsClient = void 0;\n/* global window */\nconst gax = __importStar(__webpack_require__(/*! ./gax */ \"(rsc)/./node_modules/google-gax/build/src/gax.js\"));\nconst warnings_1 = __webpack_require__(/*! ./warnings */ \"(rsc)/./node_modules/google-gax/build/src/warnings.js\");\nconst createApiCall_1 = __webpack_require__(/*! ./createApiCall */ \"(rsc)/./node_modules/google-gax/build/src/createApiCall.js\");\nconst routingHeader = __importStar(__webpack_require__(/*! ./routingHeader */ \"(rsc)/./node_modules/google-gax/build/src/routingHeader.js\"));\nconst pageDescriptor_1 = __webpack_require__(/*! ./paginationCalls/pageDescriptor */ \"(rsc)/./node_modules/google-gax/build/src/paginationCalls/pageDescriptor.js\");\nconst jsonProtos = __webpack_require__(/*! ../protos/locations.json */ \"(rsc)/./node_modules/google-gax/build/protos/locations.json\");\n/**\n * This file defines retry strategy and timeouts for all API methods in this library.\n */\nconst gapicConfig = __importStar(__webpack_require__(/*! ./locations_client_config.json */ \"(rsc)/./node_modules/google-gax/build/src/locations_client_config.json\"));\nconst version = (__webpack_require__(/*! ../../package.json */ \"(rsc)/./node_modules/google-gax/package.json\").version);\n/**\n *  Google Cloud Locations Client.\n *  This is manually written for providing methods [listLocations, getLocations] to the generated client.\n */\nclass LocationsClient {\n    _terminated = false;\n    _opts;\n    _providedCustomServicePath;\n    _protos;\n    _defaults;\n    auth;\n    descriptors = {\n        page: {},\n        stream: {},\n        longrunning: {},\n        batching: {},\n    };\n    warn;\n    innerApiCalls;\n    locationsStub;\n    gaxGrpc;\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    PageDescriptor;\n    /**\n     * Construct an instance of LocationsClient.\n     *\n     * @param {object} [options] - The configuration object.\n     * The options accepted by the constructor are described in detail\n     * in [this document](https://github.com/googleapis/gax-nodejs/blob/main/client-libraries.md#creating-the-client-instance).\n     * The common options are:\n     * @param {object} [options.credentials] - Credentials object.\n     * @param {string} [options.credentials.client_email]\n     * @param {string} [options.credentials.private_key]\n     * @param {string} [options.email] - Account email address. Required when\n     *     using a .pem or .p12 keyFilename.\n     * @param {string} [options.keyFilename] - Full path to the a .json, .pem, or\n     *     .p12 key downloaded from the Google Developers Console. If you provide\n     *     a path to a JSON file, the projectId option below is not necessary.\n     *     NOTE: .pem and .p12 require you to specify options.email as well.\n     * @param {number} [options.port] - The port on which to connect to\n     *     the remote host.\n     * @param {string} [options.projectId] - The project ID from the Google\n     *     Developer's Console, e.g. 'grape-spaceship-123'. We will also check\n     *     the environment variable GCLOUD_PROJECT for your project ID. If your\n     *     app is running in an environment which supports\n     *     {@link https://developers.google.com/identity/protocols/application-default-credentials Application Default Credentials},\n     *     your project ID will be detected automatically.\n     * @param {string} [options.apiEndpoint] - The domain name of the\n     *     API remote host.\n     * @param {gax.ClientConfig} [options.clientConfig] - Client configuration override.\n     *     Follows the structure of {@link gapicConfig}.\n     * @param {boolean} [options.fallback] - Use HTTP fallback mode.\n     *     In fallback mode, a special browser-compatible transport implementation is used\n     *     instead of gRPC transport. In browser context (if the `window` object is defined)\n     *     the fallback mode is enabled automatically; set `options.fallback` to `false`\n     *     if you need to override this behavior.\n     */\n    constructor(gaxGrpc, \n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    opts) {\n        // Ensure that options include all the required fields.\n        this.gaxGrpc = gaxGrpc;\n        const staticMembers = this.constructor;\n        const servicePath = opts?.servicePath || opts?.apiEndpoint || staticMembers.servicePath;\n        this._providedCustomServicePath = !!(opts?.servicePath || opts?.apiEndpoint);\n        const port = opts?.port || staticMembers.port;\n        const clientConfig = opts?.clientConfig ?? {};\n        const fallback = opts?.fallback ??\n            (typeof window !== 'undefined' && typeof window?.fetch === 'function');\n        opts = Object.assign({ servicePath, port, clientConfig, fallback }, opts);\n        // If scopes are unset in options and we're connecting to a non-default endpoint, set scopes just in case.\n        if (servicePath !== staticMembers.servicePath && !('scopes' in opts)) {\n            opts['scopes'] = staticMembers.scopes;\n        }\n        // Save options to use in initialize() method.\n        this._opts = opts;\n        // Save the auth object to the client, for use by other methods.\n        this.auth = gaxGrpc.auth;\n        // Set the default scopes in auth client if needed.\n        if (servicePath === staticMembers.servicePath) {\n            this.auth.defaultScopes = staticMembers.scopes;\n        }\n        // Determine the client header string.\n        const clientHeader = [`gax/${version}`, `gapic/${version}`];\n        if (typeof process !== 'undefined' && 'versions' in process) {\n            clientHeader.push(`gl-node/${process.versions.node}`);\n        }\n        else {\n            clientHeader.push(`gl-web/${version}`);\n        }\n        if (!opts.fallback) {\n            clientHeader.push(`grpc/${gaxGrpc.grpcVersion}`);\n        }\n        else if (opts.fallback === 'rest') {\n            clientHeader.push(`rest/${gaxGrpc.grpcVersion}`);\n        }\n        if (opts.libName && opts.libVersion) {\n            clientHeader.push(`${opts.libName}/${opts.libVersion}`);\n        }\n        // Load the applicable protos.\n        this._protos = gaxGrpc.loadProtoJSON(jsonProtos);\n        // Some of the methods on this service return \"paged\" results,\n        // (e.g. 50 results at a time, with tokens to get subsequent\n        // pages). Denote the keys used for pagination and results.\n        this.descriptors.page = {\n            listLocations: new pageDescriptor_1.PageDescriptor('pageToken', 'nextPageToken', 'locations'),\n        };\n        // Put together the default options sent with requests.\n        this._defaults = gaxGrpc.constructSettings('google.cloud.location.Locations', gapicConfig, opts.clientConfig || {}, { 'x-goog-api-client': clientHeader.join(' ') });\n        // Set up a dictionary of \"inner API calls\"; the core implementation\n        // of calling the API is handled in `google-gax`, with this code\n        // merely providing the destination and request information.\n        this.innerApiCalls = {};\n        // Add a warn function to the client constructor so it can be easily tested.\n        this.warn = warnings_1.warn;\n    }\n    /**\n     * Initialize the client.\n     * Performs asynchronous operations (such as authentication) and prepares the client.\n     * This function will be called automatically when any class method is called for the\n     * first time, but if you need to initialize it before calling an actual method,\n     * feel free to call initialize() directly.\n     *\n     * You can await on this method if you want to make sure the client is initialized.\n     *\n     * @returns {Promise} A promise that resolves to an authenticated service stub.\n     */\n    initialize() {\n        // If the client stub promise is already initialized, return immediately.\n        if (this.locationsStub) {\n            return this.locationsStub;\n        }\n        // Put together the \"service stub\" for\n        // google.cloud.location.Locations.\n        this.locationsStub = this.gaxGrpc.createStub(this._opts.fallback\n            ? this._protos.lookupService('google.cloud.location.Locations')\n            : // eslint-disable-next-line @typescript-eslint/no-explicit-any\n                this._protos.google.cloud.location.Locations, this._opts, this._providedCustomServicePath);\n        // Iterate over each of the methods that the service provides\n        // and create an API call method for each.\n        const locationsStubMethods = ['listLocations', 'getLocation'];\n        for (const methodName of locationsStubMethods) {\n            const callPromise = this.locationsStub.then(stub => (...args) => {\n                if (this._terminated) {\n                    return Promise.reject('The client has already been closed.');\n                }\n                const func = stub[methodName];\n                return func.apply(stub, args);\n            }, (err) => () => {\n                throw err;\n            });\n            const descriptor = this.descriptors.page[methodName] || undefined;\n            const apiCall = (0, createApiCall_1.createApiCall)(callPromise, this._defaults[methodName], descriptor);\n            this.innerApiCalls[methodName] = apiCall;\n        }\n        return this.locationsStub;\n    }\n    /**\n     * The DNS address for this API service.\n     * @returns {string} The DNS address for this service.\n     */\n    static get servicePath() {\n        return 'cloud.googleapis.com';\n    }\n    /**\n     * The DNS address for this API service - same as servicePath(),\n     * exists for compatibility reasons.\n     * @returns {string} The DNS address for this service.\n     */\n    static get apiEndpoint() {\n        return 'cloud.googleapis.com';\n    }\n    /**\n     * The port for this API service.\n     * @returns {number} The default port for this service.\n     */\n    static get port() {\n        return 443;\n    }\n    /**\n     * The scopes needed to make gRPC calls for every method defined\n     * in this service.\n     * @returns {string[]} List of default scopes.\n     */\n    static get scopes() {\n        return ['https://www.googleapis.com/auth/cloud-platform'];\n    }\n    getProjectId(callback) {\n        if (callback) {\n            this.auth.getProjectId(callback);\n            return;\n        }\n        return this.auth.getProjectId();\n    }\n    /**\n     * Gets information about a location.\n     *\n     * @param {Object} request\n     *   The request object that will be sent.\n     * @param {string} request.name\n     *   Resource name for the location.\n     * @param {object} [options]\n     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.\n     * @returns {Promise} - The promise which resolves to an array.\n     *   The first element of the array is an object representing [Location]{@link google.cloud.location.Location}.\n     *   Please see the\n     *   [documentation](https://github.com/googleapis/gax-nodejs/blob/main/client-libraries.md#regular-methods)\n     *   for more details and examples.\n     * @example\n     * const [response] = await client.getLocation(request);\n     */\n    getLocation(request, optionsOrCallback, callback) {\n        request = request || {};\n        let options;\n        if (typeof optionsOrCallback === 'function' && callback === undefined) {\n            callback = optionsOrCallback;\n            options = {};\n        }\n        else {\n            options = optionsOrCallback;\n        }\n        options = options || {};\n        options.otherArgs = options.otherArgs || {};\n        options.otherArgs.headers = options.otherArgs.headers || {};\n        options.otherArgs.headers['x-goog-request-params'] =\n            routingHeader.fromParams({\n                name: request.name || '',\n            });\n        this.initialize().catch(console.error);\n        return this.innerApiCalls.getLocation(request, options, callback);\n    }\n    /**\n     * Lists information about the supported locations for this service.\n     *\n     * @param {Object} request\n     *   The request object that will be sent.\n     * @param {string} request.name\n     *   The resource that owns the locations collection, if applicable.\n     * @param {string} request.filter\n     *   The standard list filter.\n     * @param {number} request.pageSize\n     *   The standard list page size.\n     * @param {string} request.pageToken\n     *   The standard list page token.\n     * @param {object} [options]\n     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.\n     * @returns {Promise} - The promise which resolves to an array.\n     *   The first element of the array is Array of [Location]{@link google.cloud.location.Location}.\n     *   The client library will perform auto-pagination by default: it will call the API as many\n     *   times as needed and will merge results from all the pages into this array.\n     *   Note that it can affect your quota.\n     *   We recommend using `listLocationsAsync()`\n     *   method described below for async iteration which you can stop as needed.\n     *   Please see the\n     *   [documentation](https://github.com/googleapis/gax-nodejs/blob/main/client-libraries.md#auto-pagination)\n     *   for more details and examples.\n     */\n    listLocations(request, optionsOrCallback, callback) {\n        request = request || {};\n        let options;\n        if (typeof optionsOrCallback === 'function' && callback === undefined) {\n            callback = optionsOrCallback;\n            options = {};\n        }\n        else {\n            options = optionsOrCallback;\n        }\n        options = options || {};\n        options.otherArgs = options.otherArgs || {};\n        options.otherArgs.headers = options.otherArgs.headers || {};\n        options.otherArgs.headers['x-goog-request-params'] =\n            routingHeader.fromParams({\n                name: request.name || '',\n            });\n        this.initialize().catch(console.error);\n        return this.innerApiCalls.listLocations(request, options, callback);\n    }\n    /**\n     * Equivalent to `listLocations`, but returns an iterable object.\n     *\n     * `for`-`await`-`of` syntax is used with the iterable to get response elements on-demand.\n     * @param {Object} request\n     *   The request object that will be sent.\n     * @param {string} request.name\n     *   The resource that owns the locations collection, if applicable.\n     * @param {string} request.filter\n     *   The standard list filter.\n     * @param {number} request.pageSize\n     *   The standard list page size.\n     * @param {string} request.pageToken\n     *   The standard list page token.\n     * @param {object} [options]\n     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.\n     * @returns {Object}\n     *   An iterable Object that allows [async iteration](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols).\n     *   When you iterate the returned iterable, each element will be an object representing\n     *   [Location]{@link google.cloud.location.Location}. The API will be called under the hood as needed, once per the page,\n     *   so you can stop the iteration when you don't need more results.\n     *   Please see the\n     *   [documentation](https://github.com/googleapis/gax-nodejs/blob/main/client-libraries.md#auto-pagination)\n     *   for more details and examples.\n     * @example\n     * const iterable = client.listLocationsAsync(request);\n     * for await (const response of iterable) {\n     *   // process response\n     * }\n     */\n    listLocationsAsync(request, options) {\n        request = request || {};\n        options = options || {};\n        options.otherArgs = options.otherArgs || {};\n        options.otherArgs.headers = options.otherArgs.headers || {};\n        options.otherArgs.headers['x-goog-request-params'] =\n            routingHeader.fromParams({\n                name: request.name || '',\n            });\n        options = options || {};\n        const callSettings = new gax.CallSettings(options);\n        this.initialize().catch(console.error);\n        return this.descriptors.page.listLocations.asyncIterate(this.innerApiCalls['listLocations'], request, callSettings);\n    }\n    /**\n     * Terminate the gRPC channel and close the client.\n     *\n     * The client will no longer be usable and all future behavior is undefined.\n     * @returns {Promise} A promise that resolves when the client is closed.\n     */\n    close() {\n        this.initialize().catch(console.error);\n        if (!this._terminated) {\n            return this.locationsStub.then(stub => {\n                this._terminated = true;\n                stub.close();\n            });\n        }\n        return Promise.resolve();\n    }\n}\nexports.LocationsClient = LocationsClient;\n//# sourceMappingURL=locationService.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/google-gax/build/src/locationService.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/google-gax/build/src/locations_client_config.json":
/*!************************************************************************!*\
  !*** ./node_modules/google-gax/build/src/locations_client_config.json ***!
  \************************************************************************/
/***/ ((module) => {

"use strict";
module.exports = /*#__PURE__*/JSON.parse('{"interfaces":{"google.cloud.location.Locations":{"retry_codes":{"non_idempotent":[],"idempotent":["DEADLINE_EXCEEDED","UNAVAILABLE"]},"retry_params":{"default":{"initial_retry_delay_millis":100,"retry_delay_multiplier":1.3,"max_retry_delay_millis":60000,"initial_rpc_timeout_millis":60000,"rpc_timeout_multiplier":1,"max_rpc_timeout_millis":60000,"total_timeout_millis":600000}},"methods":{"ListLocations":{"retry_codes_name":"non_idempotent","retry_params_name":"default"},"GetLocation":{"retry_codes_name":"non_idempotent","retry_params_name":"default"}}}}}');

/***/ }),

/***/ "(rsc)/./node_modules/google-gax/build/src/longRunningCalls/longRunningApiCaller.js":
/*!************************************************************************************!*\
  !*** ./node_modules/google-gax/build/src/longRunningCalls/longRunningApiCaller.js ***!
  \************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\n/**\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.LongrunningApiCaller = void 0;\nconst call_1 = __webpack_require__(/*! ../call */ \"(rsc)/./node_modules/google-gax/build/src/call.js\");\nconst gax_1 = __webpack_require__(/*! ../gax */ \"(rsc)/./node_modules/google-gax/build/src/gax.js\");\nconst longrunning_1 = __webpack_require__(/*! ./longrunning */ \"(rsc)/./node_modules/google-gax/build/src/longRunningCalls/longrunning.js\");\nclass LongrunningApiCaller {\n    longrunningDescriptor;\n    /**\n     * Creates an API caller that performs polling on a long running operation.\n     *\n     * @private\n     * @constructor\n     * @param {LongRunningDescriptor} longrunningDescriptor - Holds the\n     * decoders used for unpacking responses and the operationsClient\n     * used for polling the operation.\n     */\n    constructor(longrunningDescriptor) {\n        this.longrunningDescriptor = longrunningDescriptor;\n    }\n    init(callback) {\n        if (callback) {\n            return new call_1.OngoingCall(callback);\n        }\n        return new call_1.OngoingCallPromise();\n    }\n    wrap(func) {\n        return func;\n    }\n    call(apiCall, argument, settings, canceller) {\n        canceller.call((argument, callback) => {\n            return this._wrapOperation(apiCall, settings, argument, callback);\n        }, argument);\n    }\n    _wrapOperation(apiCall, settings, argument, callback) {\n        let backoffSettings = settings.longrunning;\n        if (!backoffSettings) {\n            backoffSettings = (0, gax_1.createDefaultBackoffSettings)();\n        }\n        const longrunningDescriptor = this.longrunningDescriptor;\n        return apiCall(argument, (err, rawResponse) => {\n            if (err) {\n                callback(err, null, null, rawResponse);\n                return;\n            }\n            const operation = new longrunning_1.Operation(rawResponse, longrunningDescriptor, backoffSettings, settings);\n            callback(null, operation, rawResponse);\n        });\n    }\n    fail(canceller, err) {\n        canceller.callback(err);\n    }\n    result(canceller) {\n        return canceller.promise;\n    }\n}\nexports.LongrunningApiCaller = LongrunningApiCaller;\n//# sourceMappingURL=longRunningApiCaller.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvZ29vZ2xlLWdheC9idWlsZC9zcmMvbG9uZ1J1bm5pbmdDYWxscy9sb25nUnVubmluZ0FwaUNhbGxlci5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDhDQUE2QyxFQUFFLGFBQWEsRUFBQztBQUM3RCw0QkFBNEI7QUFDNUIsZUFBZSxtQkFBTyxDQUFDLGtFQUFTO0FBQ2hDLGNBQWMsbUJBQU8sQ0FBQyxnRUFBUTtBQUM5QixzQkFBc0IsbUJBQU8sQ0FBQyxnR0FBZTtBQUM3QztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGVBQWUsdUJBQXVCO0FBQ3RDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSw0QkFBNEI7QUFDNUIiLCJzb3VyY2VzIjpbIi9Vc2Vycy9iYWcteW9zZWIvRGVza3RvcC/hhJHhhanhhIfhhbXhhIvhhaEvaGFja2F0aG9uX3RlYW0vbXktYXBwL25vZGVfbW9kdWxlcy9nb29nbGUtZ2F4L2J1aWxkL3NyYy9sb25nUnVubmluZ0NhbGxzL2xvbmdSdW5uaW5nQXBpQ2FsbGVyLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuLyoqXG4gKiBDb3B5cmlnaHQgMjAyMCBHb29nbGUgTExDXG4gKlxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuICpcbiAqICAgICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4gKlxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbiAqL1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5Mb25ncnVubmluZ0FwaUNhbGxlciA9IHZvaWQgMDtcbmNvbnN0IGNhbGxfMSA9IHJlcXVpcmUoXCIuLi9jYWxsXCIpO1xuY29uc3QgZ2F4XzEgPSByZXF1aXJlKFwiLi4vZ2F4XCIpO1xuY29uc3QgbG9uZ3J1bm5pbmdfMSA9IHJlcXVpcmUoXCIuL2xvbmdydW5uaW5nXCIpO1xuY2xhc3MgTG9uZ3J1bm5pbmdBcGlDYWxsZXIge1xuICAgIGxvbmdydW5uaW5nRGVzY3JpcHRvcjtcbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGFuIEFQSSBjYWxsZXIgdGhhdCBwZXJmb3JtcyBwb2xsaW5nIG9uIGEgbG9uZyBydW5uaW5nIG9wZXJhdGlvbi5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQGNvbnN0cnVjdG9yXG4gICAgICogQHBhcmFtIHtMb25nUnVubmluZ0Rlc2NyaXB0b3J9IGxvbmdydW5uaW5nRGVzY3JpcHRvciAtIEhvbGRzIHRoZVxuICAgICAqIGRlY29kZXJzIHVzZWQgZm9yIHVucGFja2luZyByZXNwb25zZXMgYW5kIHRoZSBvcGVyYXRpb25zQ2xpZW50XG4gICAgICogdXNlZCBmb3IgcG9sbGluZyB0aGUgb3BlcmF0aW9uLlxuICAgICAqL1xuICAgIGNvbnN0cnVjdG9yKGxvbmdydW5uaW5nRGVzY3JpcHRvcikge1xuICAgICAgICB0aGlzLmxvbmdydW5uaW5nRGVzY3JpcHRvciA9IGxvbmdydW5uaW5nRGVzY3JpcHRvcjtcbiAgICB9XG4gICAgaW5pdChjYWxsYmFjaykge1xuICAgICAgICBpZiAoY2FsbGJhY2spIHtcbiAgICAgICAgICAgIHJldHVybiBuZXcgY2FsbF8xLk9uZ29pbmdDYWxsKGNhbGxiYWNrKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gbmV3IGNhbGxfMS5PbmdvaW5nQ2FsbFByb21pc2UoKTtcbiAgICB9XG4gICAgd3JhcChmdW5jKSB7XG4gICAgICAgIHJldHVybiBmdW5jO1xuICAgIH1cbiAgICBjYWxsKGFwaUNhbGwsIGFyZ3VtZW50LCBzZXR0aW5ncywgY2FuY2VsbGVyKSB7XG4gICAgICAgIGNhbmNlbGxlci5jYWxsKChhcmd1bWVudCwgY2FsbGJhY2spID0+IHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLl93cmFwT3BlcmF0aW9uKGFwaUNhbGwsIHNldHRpbmdzLCBhcmd1bWVudCwgY2FsbGJhY2spO1xuICAgICAgICB9LCBhcmd1bWVudCk7XG4gICAgfVxuICAgIF93cmFwT3BlcmF0aW9uKGFwaUNhbGwsIHNldHRpbmdzLCBhcmd1bWVudCwgY2FsbGJhY2spIHtcbiAgICAgICAgbGV0IGJhY2tvZmZTZXR0aW5ncyA9IHNldHRpbmdzLmxvbmdydW5uaW5nO1xuICAgICAgICBpZiAoIWJhY2tvZmZTZXR0aW5ncykge1xuICAgICAgICAgICAgYmFja29mZlNldHRpbmdzID0gKDAsIGdheF8xLmNyZWF0ZURlZmF1bHRCYWNrb2ZmU2V0dGluZ3MpKCk7XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgbG9uZ3J1bm5pbmdEZXNjcmlwdG9yID0gdGhpcy5sb25ncnVubmluZ0Rlc2NyaXB0b3I7XG4gICAgICAgIHJldHVybiBhcGlDYWxsKGFyZ3VtZW50LCAoZXJyLCByYXdSZXNwb25zZSkgPT4ge1xuICAgICAgICAgICAgaWYgKGVycikge1xuICAgICAgICAgICAgICAgIGNhbGxiYWNrKGVyciwgbnVsbCwgbnVsbCwgcmF3UmVzcG9uc2UpO1xuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNvbnN0IG9wZXJhdGlvbiA9IG5ldyBsb25ncnVubmluZ18xLk9wZXJhdGlvbihyYXdSZXNwb25zZSwgbG9uZ3J1bm5pbmdEZXNjcmlwdG9yLCBiYWNrb2ZmU2V0dGluZ3MsIHNldHRpbmdzKTtcbiAgICAgICAgICAgIGNhbGxiYWNrKG51bGwsIG9wZXJhdGlvbiwgcmF3UmVzcG9uc2UpO1xuICAgICAgICB9KTtcbiAgICB9XG4gICAgZmFpbChjYW5jZWxsZXIsIGVycikge1xuICAgICAgICBjYW5jZWxsZXIuY2FsbGJhY2soZXJyKTtcbiAgICB9XG4gICAgcmVzdWx0KGNhbmNlbGxlcikge1xuICAgICAgICByZXR1cm4gY2FuY2VsbGVyLnByb21pc2U7XG4gICAgfVxufVxuZXhwb3J0cy5Mb25ncnVubmluZ0FwaUNhbGxlciA9IExvbmdydW5uaW5nQXBpQ2FsbGVyO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9bG9uZ1J1bm5pbmdBcGlDYWxsZXIuanMubWFwIl0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/google-gax/build/src/longRunningCalls/longRunningApiCaller.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/google-gax/build/src/longRunningCalls/longRunningDescriptor.js":
/*!*************************************************************************************!*\
  !*** ./node_modules/google-gax/build/src/longRunningCalls/longRunningDescriptor.js ***!
  \*************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\n/**\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.LongRunningDescriptor = void 0;\nconst longRunningApiCaller_1 = __webpack_require__(/*! ./longRunningApiCaller */ \"(rsc)/./node_modules/google-gax/build/src/longRunningCalls/longRunningApiCaller.js\");\n/**\n * A descriptor for long-running operations.\n */\nclass LongRunningDescriptor {\n    operationsClient;\n    responseDecoder;\n    metadataDecoder;\n    constructor(operationsClient, responseDecoder, metadataDecoder) {\n        this.operationsClient = operationsClient;\n        this.responseDecoder = responseDecoder;\n        this.metadataDecoder = metadataDecoder;\n    }\n    getApiCaller() {\n        return new longRunningApiCaller_1.LongrunningApiCaller(this);\n    }\n}\nexports.LongRunningDescriptor = LongRunningDescriptor;\n//# sourceMappingURL=longRunningDescriptor.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvZ29vZ2xlLWdheC9idWlsZC9zcmMvbG9uZ1J1bm5pbmdDYWxscy9sb25nUnVubmluZ0Rlc2NyaXB0b3IuanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSw4Q0FBNkMsRUFBRSxhQUFhLEVBQUM7QUFDN0QsNkJBQTZCO0FBQzdCLCtCQUErQixtQkFBTyxDQUFDLGtIQUF3QjtBQUMvRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDZCQUE2QjtBQUM3QiIsInNvdXJjZXMiOlsiL1VzZXJzL2JhZy15b3NlYi9EZXNrdG9wL+GEkeGFqeGEh+GFteGEi+GFoS9oYWNrYXRob25fdGVhbS9teS1hcHAvbm9kZV9tb2R1bGVzL2dvb2dsZS1nYXgvYnVpbGQvc3JjL2xvbmdSdW5uaW5nQ2FsbHMvbG9uZ1J1bm5pbmdEZXNjcmlwdG9yLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuLyoqXG4gKiBDb3B5cmlnaHQgMjAyMCBHb29nbGUgTExDXG4gKlxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuICpcbiAqICAgICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4gKlxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbiAqL1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5Mb25nUnVubmluZ0Rlc2NyaXB0b3IgPSB2b2lkIDA7XG5jb25zdCBsb25nUnVubmluZ0FwaUNhbGxlcl8xID0gcmVxdWlyZShcIi4vbG9uZ1J1bm5pbmdBcGlDYWxsZXJcIik7XG4vKipcbiAqIEEgZGVzY3JpcHRvciBmb3IgbG9uZy1ydW5uaW5nIG9wZXJhdGlvbnMuXG4gKi9cbmNsYXNzIExvbmdSdW5uaW5nRGVzY3JpcHRvciB7XG4gICAgb3BlcmF0aW9uc0NsaWVudDtcbiAgICByZXNwb25zZURlY29kZXI7XG4gICAgbWV0YWRhdGFEZWNvZGVyO1xuICAgIGNvbnN0cnVjdG9yKG9wZXJhdGlvbnNDbGllbnQsIHJlc3BvbnNlRGVjb2RlciwgbWV0YWRhdGFEZWNvZGVyKSB7XG4gICAgICAgIHRoaXMub3BlcmF0aW9uc0NsaWVudCA9IG9wZXJhdGlvbnNDbGllbnQ7XG4gICAgICAgIHRoaXMucmVzcG9uc2VEZWNvZGVyID0gcmVzcG9uc2VEZWNvZGVyO1xuICAgICAgICB0aGlzLm1ldGFkYXRhRGVjb2RlciA9IG1ldGFkYXRhRGVjb2RlcjtcbiAgICB9XG4gICAgZ2V0QXBpQ2FsbGVyKCkge1xuICAgICAgICByZXR1cm4gbmV3IGxvbmdSdW5uaW5nQXBpQ2FsbGVyXzEuTG9uZ3J1bm5pbmdBcGlDYWxsZXIodGhpcyk7XG4gICAgfVxufVxuZXhwb3J0cy5Mb25nUnVubmluZ0Rlc2NyaXB0b3IgPSBMb25nUnVubmluZ0Rlc2NyaXB0b3I7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1sb25nUnVubmluZ0Rlc2NyaXB0b3IuanMubWFwIl0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/google-gax/build/src/longRunningCalls/longRunningDescriptor.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/google-gax/build/src/longRunningCalls/longrunning.js":
/*!***************************************************************************!*\
  !*** ./node_modules/google-gax/build/src/longRunningCalls/longrunning.js ***!
  \***************************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";
eval("\n/**\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    var desc = Object.getOwnPropertyDescriptor(m, k);\n    if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n      desc = { enumerable: true, get: function() { return m[k]; } };\n    }\n    Object.defineProperty(o, k2, desc);\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {\n    Object.defineProperty(o, \"default\", { enumerable: true, value: v });\n}) : function(o, v) {\n    o[\"default\"] = v;\n});\nvar __importStar = (this && this.__importStar) || (function () {\n    var ownKeys = function(o) {\n        ownKeys = Object.getOwnPropertyNames || function (o) {\n            var ar = [];\n            for (var k in o) if (Object.prototype.hasOwnProperty.call(o, k)) ar[ar.length] = k;\n            return ar;\n        };\n        return ownKeys(o);\n    };\n    return function (mod) {\n        if (mod && mod.__esModule) return mod;\n        var result = {};\n        if (mod != null) for (var k = ownKeys(mod), i = 0; i < k.length; i++) if (k[i] !== \"default\") __createBinding(result, mod, k[i]);\n        __setModuleDefault(result, mod);\n        return result;\n    };\n})();\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.Operation = void 0;\nexports.operation = operation;\nconst events_1 = __webpack_require__(/*! events */ \"events\");\nconst status_1 = __webpack_require__(/*! ../status */ \"(rsc)/./node_modules/google-gax/build/src/status.js\");\nconst googleError_1 = __webpack_require__(/*! ../googleError */ \"(rsc)/./node_modules/google-gax/build/src/googleError.js\");\nconst operationProtos = __importStar(__webpack_require__(/*! ../../protos/operations */ \"(rsc)/./node_modules/google-gax/build/protos/operations.js\"));\nclass Operation extends events_1.EventEmitter {\n    completeListeners;\n    hasActiveListeners;\n    latestResponse;\n    longrunningDescriptor;\n    result;\n    metadata;\n    backoffSettings;\n    _callOptions;\n    currentCallPromise_;\n    name;\n    done;\n    error;\n    response;\n    /**\n     * Wrapper for a google.longrunnung.Operation.\n     *\n     * @constructor\n     *\n     * @param {google.longrunning.Operation} grpcOp - The operation to be wrapped.\n     * @param {LongRunningDescriptor} longrunningDescriptor - This defines the\n     * operations service client and unpacking mechanisms for the operation.\n     * @param {BackoffSettings} backoffSettings - The backoff settings used in\n     * in polling the operation.\n     * @param {CallOptions} callOptions - CallOptions used in making get operation\n     * requests.\n     */\n    constructor(grpcOp, longrunningDescriptor, backoffSettings, callOptions) {\n        super();\n        this.completeListeners = 0;\n        this.hasActiveListeners = false;\n        this.latestResponse = grpcOp;\n        this.name = this.latestResponse.name;\n        this.done = this.latestResponse.done;\n        this.error = this.latestResponse.error;\n        this.longrunningDescriptor = longrunningDescriptor;\n        this.result = null;\n        this.metadata = null;\n        this.backoffSettings = backoffSettings;\n        this._unpackResponse(grpcOp);\n        this._listenForEvents();\n        this._callOptions = callOptions;\n    }\n    /**\n     * Begin listening for events on the operation. This method keeps track of how\n     * many \"complete\" listeners are registered and removed, making sure polling\n     * is handled automatically.\n     *\n     * As long as there is one active \"complete\" listener, the connection is open.\n     * When there are no more listeners, the polling stops.\n     *\n     * @private\n     */\n    _listenForEvents() {\n        this.on('newListener', event => {\n            if (event === 'complete') {\n                this.completeListeners++;\n                if (!this.hasActiveListeners) {\n                    this.hasActiveListeners = true;\n                    this.startPolling_();\n                }\n            }\n        });\n        this.on('removeListener', event => {\n            if (event === 'complete' && --this.completeListeners === 0) {\n                this.hasActiveListeners = false;\n            }\n        });\n    }\n    /**\n     * Cancels current polling api call and cancels the operation.\n     *\n     * @return {Promise} the promise of the OperationsClient#cancelOperation api\n     * request.\n     */\n    cancel() {\n        if (this.currentCallPromise_) {\n            this.currentCallPromise_.cancel();\n        }\n        const operationsClient = this.longrunningDescriptor.operationsClient;\n        const cancelRequest = new operationProtos.google.longrunning.CancelOperationRequest();\n        cancelRequest.name = this.latestResponse.name;\n        return operationsClient.cancelOperation(cancelRequest);\n    }\n    getOperation(callback) {\n        // eslint-disable-next-line @typescript-eslint/no-this-alias\n        const self = this;\n        const operationsClient = this.longrunningDescriptor.operationsClient;\n        function promisifyResponse() {\n            if (!callback) {\n                return new Promise((resolve, reject) => {\n                    if (self.latestResponse.error) {\n                        const error = new googleError_1.GoogleError(self.latestResponse.error.message);\n                        error.code = self.latestResponse.error.code;\n                        reject(error);\n                    }\n                    else {\n                        resolve([self.result, self.metadata, self.latestResponse]);\n                    }\n                });\n            }\n            return;\n        }\n        if (this.latestResponse.done) {\n            this._unpackResponse(this.latestResponse, callback);\n            return promisifyResponse();\n        }\n        const request = new operationProtos.google.longrunning.GetOperationRequest();\n        request.name = this.latestResponse.name;\n        this.currentCallPromise_ = operationsClient.getOperationInternal(request, this._callOptions);\n        const noCallbackPromise = this.currentCallPromise_.then(responses => {\n            self.latestResponse = responses[0];\n            self._unpackResponse(responses[0], callback);\n            return promisifyResponse();\n        }, (err) => {\n            if (callback) {\n                callback(err);\n                return;\n            }\n            return Promise.reject(err);\n        });\n        if (!callback) {\n            return noCallbackPromise;\n        }\n    }\n    _unpackResponse(op, callback) {\n        const responseDecoder = this.longrunningDescriptor.responseDecoder;\n        const metadataDecoder = this.longrunningDescriptor.metadataDecoder;\n        let response;\n        let metadata;\n        if (op.done) {\n            if (op.result === 'error') {\n                const error = new googleError_1.GoogleError(op.error.message);\n                error.code = op.error.code;\n                this.error = error;\n                if (callback) {\n                    callback(error);\n                }\n                return;\n            }\n            if (responseDecoder && op.response) {\n                this.response = op.response;\n                response = responseDecoder(op.response.value);\n                this.result = response;\n                this.done = true;\n            }\n        }\n        if (metadataDecoder && op.metadata) {\n            metadata = metadataDecoder(op.metadata.value);\n            this.metadata = metadata;\n        }\n        if (callback) {\n            callback(null, response, metadata, op);\n        }\n    }\n    /**\n     * Poll `getOperation` to check the operation's status. This runs a loop to\n     * ping using the backoff strategy specified at initialization.\n     *\n     * Note: This method is automatically called once a \"complete\" event handler\n     * is registered on the operation.\n     *\n     * @private\n     */\n    startPolling_() {\n        // eslint-disable-next-line @typescript-eslint/no-this-alias\n        const self = this;\n        let now = new Date();\n        const delayMult = this.backoffSettings.retryDelayMultiplier;\n        const maxDelay = this.backoffSettings.maxRetryDelayMillis;\n        let delay = this.backoffSettings.initialRetryDelayMillis;\n        let deadline = Infinity;\n        if (this.backoffSettings.totalTimeoutMillis) {\n            deadline = now.getTime() + this.backoffSettings.totalTimeoutMillis;\n        }\n        let previousMetadataBytes;\n        if (this.latestResponse.metadata) {\n            previousMetadataBytes = this.latestResponse.metadata.value;\n        }\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        function emit(event, ...args) {\n            self.emit(event, ...args);\n        }\n        // Helper function to replace nodejs buffer's equals()\n        function arrayEquals(a, b) {\n            if (a.byteLength !== b.byteLength) {\n                return false;\n            }\n            for (let i = 0; i < a.byteLength; ++i) {\n                if (a[i] !== b[i])\n                    return false;\n            }\n            return true;\n        }\n        function retry() {\n            if (!self.hasActiveListeners) {\n                return;\n            }\n            if (now.getTime() >= deadline) {\n                const error = new googleError_1.GoogleError('Total timeout exceeded before any response was received');\n                error.code = status_1.Status.DEADLINE_EXCEEDED;\n                setImmediate(emit, 'error', error);\n                return;\n            }\n            self.getOperation((err, result, metadata, rawResponse) => {\n                if (err) {\n                    setImmediate(emit, 'error', err);\n                    return;\n                }\n                if (!result) {\n                    if (rawResponse.metadata &&\n                        (!previousMetadataBytes ||\n                            (rawResponse &&\n                                !arrayEquals(rawResponse.metadata.value, previousMetadataBytes)))) {\n                        setImmediate(emit, 'progress', metadata, rawResponse);\n                        previousMetadataBytes = rawResponse.metadata.value;\n                    }\n                    // special case: some APIs fail to set either result or error\n                    // but set done = true (e.g. speech with silent file).\n                    // Some APIs just use this for the normal completion\n                    // (e.g. nodejs-contact-center-insights), so let's just return\n                    // an empty response in this case.\n                    if (rawResponse.done) {\n                        setImmediate(emit, 'complete', {}, metadata, rawResponse);\n                        return;\n                    }\n                    setTimeout(() => {\n                        now = new Date();\n                        delay = Math.min(delay * delayMult, maxDelay);\n                        retry();\n                    }, delay);\n                    return;\n                }\n                setImmediate(emit, 'complete', result, metadata, rawResponse);\n            });\n        }\n        retry();\n    }\n    /**\n     * Wraps the `complete` and `error` events in a Promise.\n     *\n     * @return {promise} - Promise that resolves on operation completion and rejects\n     * on operation error.\n     */\n    promise() {\n        return new Promise((resolve, reject) => {\n            this.on('error', reject).on('complete', (result, metadata, rawResponse) => {\n                resolve([result, metadata, rawResponse]);\n            });\n        });\n    }\n}\nexports.Operation = Operation;\n/**\n * Method used to create Operation objects.\n *\n * @constructor\n *\n * @param {google.longrunning.Operation} op - The operation to be wrapped.\n * @param {LongRunningDescriptor} longrunningDescriptor - This defines the\n * operations service client and unpacking mechanisms for the operation.\n * @param {BackoffSettings} backoffSettings - The backoff settings used in\n * in polling the operation.\n * @param {CallOptions=} callOptions - CallOptions used in making get operation\n * requests.\n */\nfunction operation(op, longrunningDescriptor, backoffSettings, callOptions) {\n    return new Operation(op, longrunningDescriptor, backoffSettings, callOptions);\n}\n//# sourceMappingURL=longrunning.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvZ29vZ2xlLWdheC9idWlsZC9zcmMvbG9uZ1J1bm5pbmdDYWxscy9sb25ncnVubmluZy5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZUFBZSxvQ0FBb0M7QUFDbkQ7QUFDQTtBQUNBLENBQUM7QUFDRDtBQUNBO0FBQ0EsQ0FBQztBQUNEO0FBQ0EsMENBQTBDLDRCQUE0QjtBQUN0RSxDQUFDO0FBQ0Q7QUFDQSxDQUFDO0FBQ0Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsMkRBQTJELGNBQWM7QUFDekU7QUFDQTtBQUNBO0FBQ0EsQ0FBQztBQUNELDhDQUE2QyxFQUFFLGFBQWEsRUFBQztBQUM3RCxpQkFBaUI7QUFDakIsaUJBQWlCO0FBQ2pCLGlCQUFpQixtQkFBTyxDQUFDLHNCQUFRO0FBQ2pDLGlCQUFpQixtQkFBTyxDQUFDLHNFQUFXO0FBQ3BDLHNCQUFzQixtQkFBTyxDQUFDLGdGQUFnQjtBQUM5QyxxQ0FBcUMsbUJBQU8sQ0FBQywyRkFBeUI7QUFDdEU7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxlQUFlLDhCQUE4QjtBQUM3QyxlQUFlLHVCQUF1QjtBQUN0QztBQUNBLGVBQWUsaUJBQWlCO0FBQ2hDO0FBQ0EsZUFBZSxhQUFhO0FBQzVCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZ0JBQWdCLFNBQVM7QUFDekI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGlCQUFpQjtBQUNqQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSw0QkFBNEIsa0JBQWtCO0FBQzlDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EseURBQXlEO0FBQ3pEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHFCQUFxQjtBQUNyQjtBQUNBO0FBQ0E7QUFDQSxhQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZ0JBQWdCLFNBQVM7QUFDekI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsYUFBYTtBQUNiLFNBQVM7QUFDVDtBQUNBO0FBQ0EsaUJBQWlCO0FBQ2pCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxXQUFXLDhCQUE4QjtBQUN6QyxXQUFXLHVCQUF1QjtBQUNsQztBQUNBLFdBQVcsaUJBQWlCO0FBQzVCO0FBQ0EsV0FBVyxjQUFjO0FBQ3pCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsInNvdXJjZXMiOlsiL1VzZXJzL2JhZy15b3NlYi9EZXNrdG9wL+GEkeGFqeGEh+GFteGEi+GFoS9oYWNrYXRob25fdGVhbS9teS1hcHAvbm9kZV9tb2R1bGVzL2dvb2dsZS1nYXgvYnVpbGQvc3JjL2xvbmdSdW5uaW5nQ2FsbHMvbG9uZ3J1bm5pbmcuanMiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG4vKipcbiAqIENvcHlyaWdodCAyMDIwIEdvb2dsZSBMTENcbiAqXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4gKlxuICogICAgICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbiAqXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuICovXG52YXIgX19jcmVhdGVCaW5kaW5nID0gKHRoaXMgJiYgdGhpcy5fX2NyZWF0ZUJpbmRpbmcpIHx8IChPYmplY3QuY3JlYXRlID8gKGZ1bmN0aW9uKG8sIG0sIGssIGsyKSB7XG4gICAgaWYgKGsyID09PSB1bmRlZmluZWQpIGsyID0gaztcbiAgICB2YXIgZGVzYyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IobSwgayk7XG4gICAgaWYgKCFkZXNjIHx8IChcImdldFwiIGluIGRlc2MgPyAhbS5fX2VzTW9kdWxlIDogZGVzYy53cml0YWJsZSB8fCBkZXNjLmNvbmZpZ3VyYWJsZSkpIHtcbiAgICAgIGRlc2MgPSB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZnVuY3Rpb24oKSB7IHJldHVybiBtW2tdOyB9IH07XG4gICAgfVxuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShvLCBrMiwgZGVzYyk7XG59KSA6IChmdW5jdGlvbihvLCBtLCBrLCBrMikge1xuICAgIGlmIChrMiA9PT0gdW5kZWZpbmVkKSBrMiA9IGs7XG4gICAgb1trMl0gPSBtW2tdO1xufSkpO1xudmFyIF9fc2V0TW9kdWxlRGVmYXVsdCA9ICh0aGlzICYmIHRoaXMuX19zZXRNb2R1bGVEZWZhdWx0KSB8fCAoT2JqZWN0LmNyZWF0ZSA/IChmdW5jdGlvbihvLCB2KSB7XG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KG8sIFwiZGVmYXVsdFwiLCB7IGVudW1lcmFibGU6IHRydWUsIHZhbHVlOiB2IH0pO1xufSkgOiBmdW5jdGlvbihvLCB2KSB7XG4gICAgb1tcImRlZmF1bHRcIl0gPSB2O1xufSk7XG52YXIgX19pbXBvcnRTdGFyID0gKHRoaXMgJiYgdGhpcy5fX2ltcG9ydFN0YXIpIHx8IChmdW5jdGlvbiAoKSB7XG4gICAgdmFyIG93bktleXMgPSBmdW5jdGlvbihvKSB7XG4gICAgICAgIG93bktleXMgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lcyB8fCBmdW5jdGlvbiAobykge1xuICAgICAgICAgICAgdmFyIGFyID0gW107XG4gICAgICAgICAgICBmb3IgKHZhciBrIGluIG8pIGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwobywgaykpIGFyW2FyLmxlbmd0aF0gPSBrO1xuICAgICAgICAgICAgcmV0dXJuIGFyO1xuICAgICAgICB9O1xuICAgICAgICByZXR1cm4gb3duS2V5cyhvKTtcbiAgICB9O1xuICAgIHJldHVybiBmdW5jdGlvbiAobW9kKSB7XG4gICAgICAgIGlmIChtb2QgJiYgbW9kLl9fZXNNb2R1bGUpIHJldHVybiBtb2Q7XG4gICAgICAgIHZhciByZXN1bHQgPSB7fTtcbiAgICAgICAgaWYgKG1vZCAhPSBudWxsKSBmb3IgKHZhciBrID0gb3duS2V5cyhtb2QpLCBpID0gMDsgaSA8IGsubGVuZ3RoOyBpKyspIGlmIChrW2ldICE9PSBcImRlZmF1bHRcIikgX19jcmVhdGVCaW5kaW5nKHJlc3VsdCwgbW9kLCBrW2ldKTtcbiAgICAgICAgX19zZXRNb2R1bGVEZWZhdWx0KHJlc3VsdCwgbW9kKTtcbiAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9O1xufSkoKTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuT3BlcmF0aW9uID0gdm9pZCAwO1xuZXhwb3J0cy5vcGVyYXRpb24gPSBvcGVyYXRpb247XG5jb25zdCBldmVudHNfMSA9IHJlcXVpcmUoXCJldmVudHNcIik7XG5jb25zdCBzdGF0dXNfMSA9IHJlcXVpcmUoXCIuLi9zdGF0dXNcIik7XG5jb25zdCBnb29nbGVFcnJvcl8xID0gcmVxdWlyZShcIi4uL2dvb2dsZUVycm9yXCIpO1xuY29uc3Qgb3BlcmF0aW9uUHJvdG9zID0gX19pbXBvcnRTdGFyKHJlcXVpcmUoXCIuLi8uLi9wcm90b3Mvb3BlcmF0aW9uc1wiKSk7XG5jbGFzcyBPcGVyYXRpb24gZXh0ZW5kcyBldmVudHNfMS5FdmVudEVtaXR0ZXIge1xuICAgIGNvbXBsZXRlTGlzdGVuZXJzO1xuICAgIGhhc0FjdGl2ZUxpc3RlbmVycztcbiAgICBsYXRlc3RSZXNwb25zZTtcbiAgICBsb25ncnVubmluZ0Rlc2NyaXB0b3I7XG4gICAgcmVzdWx0O1xuICAgIG1ldGFkYXRhO1xuICAgIGJhY2tvZmZTZXR0aW5ncztcbiAgICBfY2FsbE9wdGlvbnM7XG4gICAgY3VycmVudENhbGxQcm9taXNlXztcbiAgICBuYW1lO1xuICAgIGRvbmU7XG4gICAgZXJyb3I7XG4gICAgcmVzcG9uc2U7XG4gICAgLyoqXG4gICAgICogV3JhcHBlciBmb3IgYSBnb29nbGUubG9uZ3J1bm51bmcuT3BlcmF0aW9uLlxuICAgICAqXG4gICAgICogQGNvbnN0cnVjdG9yXG4gICAgICpcbiAgICAgKiBAcGFyYW0ge2dvb2dsZS5sb25ncnVubmluZy5PcGVyYXRpb259IGdycGNPcCAtIFRoZSBvcGVyYXRpb24gdG8gYmUgd3JhcHBlZC5cbiAgICAgKiBAcGFyYW0ge0xvbmdSdW5uaW5nRGVzY3JpcHRvcn0gbG9uZ3J1bm5pbmdEZXNjcmlwdG9yIC0gVGhpcyBkZWZpbmVzIHRoZVxuICAgICAqIG9wZXJhdGlvbnMgc2VydmljZSBjbGllbnQgYW5kIHVucGFja2luZyBtZWNoYW5pc21zIGZvciB0aGUgb3BlcmF0aW9uLlxuICAgICAqIEBwYXJhbSB7QmFja29mZlNldHRpbmdzfSBiYWNrb2ZmU2V0dGluZ3MgLSBUaGUgYmFja29mZiBzZXR0aW5ncyB1c2VkIGluXG4gICAgICogaW4gcG9sbGluZyB0aGUgb3BlcmF0aW9uLlxuICAgICAqIEBwYXJhbSB7Q2FsbE9wdGlvbnN9IGNhbGxPcHRpb25zIC0gQ2FsbE9wdGlvbnMgdXNlZCBpbiBtYWtpbmcgZ2V0IG9wZXJhdGlvblxuICAgICAqIHJlcXVlc3RzLlxuICAgICAqL1xuICAgIGNvbnN0cnVjdG9yKGdycGNPcCwgbG9uZ3J1bm5pbmdEZXNjcmlwdG9yLCBiYWNrb2ZmU2V0dGluZ3MsIGNhbGxPcHRpb25zKSB7XG4gICAgICAgIHN1cGVyKCk7XG4gICAgICAgIHRoaXMuY29tcGxldGVMaXN0ZW5lcnMgPSAwO1xuICAgICAgICB0aGlzLmhhc0FjdGl2ZUxpc3RlbmVycyA9IGZhbHNlO1xuICAgICAgICB0aGlzLmxhdGVzdFJlc3BvbnNlID0gZ3JwY09wO1xuICAgICAgICB0aGlzLm5hbWUgPSB0aGlzLmxhdGVzdFJlc3BvbnNlLm5hbWU7XG4gICAgICAgIHRoaXMuZG9uZSA9IHRoaXMubGF0ZXN0UmVzcG9uc2UuZG9uZTtcbiAgICAgICAgdGhpcy5lcnJvciA9IHRoaXMubGF0ZXN0UmVzcG9uc2UuZXJyb3I7XG4gICAgICAgIHRoaXMubG9uZ3J1bm5pbmdEZXNjcmlwdG9yID0gbG9uZ3J1bm5pbmdEZXNjcmlwdG9yO1xuICAgICAgICB0aGlzLnJlc3VsdCA9IG51bGw7XG4gICAgICAgIHRoaXMubWV0YWRhdGEgPSBudWxsO1xuICAgICAgICB0aGlzLmJhY2tvZmZTZXR0aW5ncyA9IGJhY2tvZmZTZXR0aW5ncztcbiAgICAgICAgdGhpcy5fdW5wYWNrUmVzcG9uc2UoZ3JwY09wKTtcbiAgICAgICAgdGhpcy5fbGlzdGVuRm9yRXZlbnRzKCk7XG4gICAgICAgIHRoaXMuX2NhbGxPcHRpb25zID0gY2FsbE9wdGlvbnM7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIEJlZ2luIGxpc3RlbmluZyBmb3IgZXZlbnRzIG9uIHRoZSBvcGVyYXRpb24uIFRoaXMgbWV0aG9kIGtlZXBzIHRyYWNrIG9mIGhvd1xuICAgICAqIG1hbnkgXCJjb21wbGV0ZVwiIGxpc3RlbmVycyBhcmUgcmVnaXN0ZXJlZCBhbmQgcmVtb3ZlZCwgbWFraW5nIHN1cmUgcG9sbGluZ1xuICAgICAqIGlzIGhhbmRsZWQgYXV0b21hdGljYWxseS5cbiAgICAgKlxuICAgICAqIEFzIGxvbmcgYXMgdGhlcmUgaXMgb25lIGFjdGl2ZSBcImNvbXBsZXRlXCIgbGlzdGVuZXIsIHRoZSBjb25uZWN0aW9uIGlzIG9wZW4uXG4gICAgICogV2hlbiB0aGVyZSBhcmUgbm8gbW9yZSBsaXN0ZW5lcnMsIHRoZSBwb2xsaW5nIHN0b3BzLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKi9cbiAgICBfbGlzdGVuRm9yRXZlbnRzKCkge1xuICAgICAgICB0aGlzLm9uKCduZXdMaXN0ZW5lcicsIGV2ZW50ID0+IHtcbiAgICAgICAgICAgIGlmIChldmVudCA9PT0gJ2NvbXBsZXRlJykge1xuICAgICAgICAgICAgICAgIHRoaXMuY29tcGxldGVMaXN0ZW5lcnMrKztcbiAgICAgICAgICAgICAgICBpZiAoIXRoaXMuaGFzQWN0aXZlTGlzdGVuZXJzKSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuaGFzQWN0aXZlTGlzdGVuZXJzID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5zdGFydFBvbGxpbmdfKCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICAgICAgdGhpcy5vbigncmVtb3ZlTGlzdGVuZXInLCBldmVudCA9PiB7XG4gICAgICAgICAgICBpZiAoZXZlbnQgPT09ICdjb21wbGV0ZScgJiYgLS10aGlzLmNvbXBsZXRlTGlzdGVuZXJzID09PSAwKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5oYXNBY3RpdmVMaXN0ZW5lcnMgPSBmYWxzZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIENhbmNlbHMgY3VycmVudCBwb2xsaW5nIGFwaSBjYWxsIGFuZCBjYW5jZWxzIHRoZSBvcGVyYXRpb24uXG4gICAgICpcbiAgICAgKiBAcmV0dXJuIHtQcm9taXNlfSB0aGUgcHJvbWlzZSBvZiB0aGUgT3BlcmF0aW9uc0NsaWVudCNjYW5jZWxPcGVyYXRpb24gYXBpXG4gICAgICogcmVxdWVzdC5cbiAgICAgKi9cbiAgICBjYW5jZWwoKSB7XG4gICAgICAgIGlmICh0aGlzLmN1cnJlbnRDYWxsUHJvbWlzZV8pIHtcbiAgICAgICAgICAgIHRoaXMuY3VycmVudENhbGxQcm9taXNlXy5jYW5jZWwoKTtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBvcGVyYXRpb25zQ2xpZW50ID0gdGhpcy5sb25ncnVubmluZ0Rlc2NyaXB0b3Iub3BlcmF0aW9uc0NsaWVudDtcbiAgICAgICAgY29uc3QgY2FuY2VsUmVxdWVzdCA9IG5ldyBvcGVyYXRpb25Qcm90b3MuZ29vZ2xlLmxvbmdydW5uaW5nLkNhbmNlbE9wZXJhdGlvblJlcXVlc3QoKTtcbiAgICAgICAgY2FuY2VsUmVxdWVzdC5uYW1lID0gdGhpcy5sYXRlc3RSZXNwb25zZS5uYW1lO1xuICAgICAgICByZXR1cm4gb3BlcmF0aW9uc0NsaWVudC5jYW5jZWxPcGVyYXRpb24oY2FuY2VsUmVxdWVzdCk7XG4gICAgfVxuICAgIGdldE9wZXJhdGlvbihjYWxsYmFjaykge1xuICAgICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L25vLXRoaXMtYWxpYXNcbiAgICAgICAgY29uc3Qgc2VsZiA9IHRoaXM7XG4gICAgICAgIGNvbnN0IG9wZXJhdGlvbnNDbGllbnQgPSB0aGlzLmxvbmdydW5uaW5nRGVzY3JpcHRvci5vcGVyYXRpb25zQ2xpZW50O1xuICAgICAgICBmdW5jdGlvbiBwcm9taXNpZnlSZXNwb25zZSgpIHtcbiAgICAgICAgICAgIGlmICghY2FsbGJhY2spIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gbmV3IFByb21pc2UoKHJlc29sdmUsIHJlamVjdCkgPT4ge1xuICAgICAgICAgICAgICAgICAgICBpZiAoc2VsZi5sYXRlc3RSZXNwb25zZS5lcnJvcikge1xuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgZXJyb3IgPSBuZXcgZ29vZ2xlRXJyb3JfMS5Hb29nbGVFcnJvcihzZWxmLmxhdGVzdFJlc3BvbnNlLmVycm9yLm1lc3NhZ2UpO1xuICAgICAgICAgICAgICAgICAgICAgICAgZXJyb3IuY29kZSA9IHNlbGYubGF0ZXN0UmVzcG9uc2UuZXJyb3IuY29kZTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJlamVjdChlcnJvcik7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXNvbHZlKFtzZWxmLnJlc3VsdCwgc2VsZi5tZXRhZGF0YSwgc2VsZi5sYXRlc3RSZXNwb25zZV0pO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHRoaXMubGF0ZXN0UmVzcG9uc2UuZG9uZSkge1xuICAgICAgICAgICAgdGhpcy5fdW5wYWNrUmVzcG9uc2UodGhpcy5sYXRlc3RSZXNwb25zZSwgY2FsbGJhY2spO1xuICAgICAgICAgICAgcmV0dXJuIHByb21pc2lmeVJlc3BvbnNlKCk7XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgcmVxdWVzdCA9IG5ldyBvcGVyYXRpb25Qcm90b3MuZ29vZ2xlLmxvbmdydW5uaW5nLkdldE9wZXJhdGlvblJlcXVlc3QoKTtcbiAgICAgICAgcmVxdWVzdC5uYW1lID0gdGhpcy5sYXRlc3RSZXNwb25zZS5uYW1lO1xuICAgICAgICB0aGlzLmN1cnJlbnRDYWxsUHJvbWlzZV8gPSBvcGVyYXRpb25zQ2xpZW50LmdldE9wZXJhdGlvbkludGVybmFsKHJlcXVlc3QsIHRoaXMuX2NhbGxPcHRpb25zKTtcbiAgICAgICAgY29uc3Qgbm9DYWxsYmFja1Byb21pc2UgPSB0aGlzLmN1cnJlbnRDYWxsUHJvbWlzZV8udGhlbihyZXNwb25zZXMgPT4ge1xuICAgICAgICAgICAgc2VsZi5sYXRlc3RSZXNwb25zZSA9IHJlc3BvbnNlc1swXTtcbiAgICAgICAgICAgIHNlbGYuX3VucGFja1Jlc3BvbnNlKHJlc3BvbnNlc1swXSwgY2FsbGJhY2spO1xuICAgICAgICAgICAgcmV0dXJuIHByb21pc2lmeVJlc3BvbnNlKCk7XG4gICAgICAgIH0sIChlcnIpID0+IHtcbiAgICAgICAgICAgIGlmIChjYWxsYmFjaykge1xuICAgICAgICAgICAgICAgIGNhbGxiYWNrKGVycik7XG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIFByb21pc2UucmVqZWN0KGVycik7XG4gICAgICAgIH0pO1xuICAgICAgICBpZiAoIWNhbGxiYWNrKSB7XG4gICAgICAgICAgICByZXR1cm4gbm9DYWxsYmFja1Byb21pc2U7XG4gICAgICAgIH1cbiAgICB9XG4gICAgX3VucGFja1Jlc3BvbnNlKG9wLCBjYWxsYmFjaykge1xuICAgICAgICBjb25zdCByZXNwb25zZURlY29kZXIgPSB0aGlzLmxvbmdydW5uaW5nRGVzY3JpcHRvci5yZXNwb25zZURlY29kZXI7XG4gICAgICAgIGNvbnN0IG1ldGFkYXRhRGVjb2RlciA9IHRoaXMubG9uZ3J1bm5pbmdEZXNjcmlwdG9yLm1ldGFkYXRhRGVjb2RlcjtcbiAgICAgICAgbGV0IHJlc3BvbnNlO1xuICAgICAgICBsZXQgbWV0YWRhdGE7XG4gICAgICAgIGlmIChvcC5kb25lKSB7XG4gICAgICAgICAgICBpZiAob3AucmVzdWx0ID09PSAnZXJyb3InKSB7XG4gICAgICAgICAgICAgICAgY29uc3QgZXJyb3IgPSBuZXcgZ29vZ2xlRXJyb3JfMS5Hb29nbGVFcnJvcihvcC5lcnJvci5tZXNzYWdlKTtcbiAgICAgICAgICAgICAgICBlcnJvci5jb2RlID0gb3AuZXJyb3IuY29kZTtcbiAgICAgICAgICAgICAgICB0aGlzLmVycm9yID0gZXJyb3I7XG4gICAgICAgICAgICAgICAgaWYgKGNhbGxiYWNrKSB7XG4gICAgICAgICAgICAgICAgICAgIGNhbGxiYWNrKGVycm9yKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKHJlc3BvbnNlRGVjb2RlciAmJiBvcC5yZXNwb25zZSkge1xuICAgICAgICAgICAgICAgIHRoaXMucmVzcG9uc2UgPSBvcC5yZXNwb25zZTtcbiAgICAgICAgICAgICAgICByZXNwb25zZSA9IHJlc3BvbnNlRGVjb2RlcihvcC5yZXNwb25zZS52YWx1ZSk7XG4gICAgICAgICAgICAgICAgdGhpcy5yZXN1bHQgPSByZXNwb25zZTtcbiAgICAgICAgICAgICAgICB0aGlzLmRvbmUgPSB0cnVlO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGlmIChtZXRhZGF0YURlY29kZXIgJiYgb3AubWV0YWRhdGEpIHtcbiAgICAgICAgICAgIG1ldGFkYXRhID0gbWV0YWRhdGFEZWNvZGVyKG9wLm1ldGFkYXRhLnZhbHVlKTtcbiAgICAgICAgICAgIHRoaXMubWV0YWRhdGEgPSBtZXRhZGF0YTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoY2FsbGJhY2spIHtcbiAgICAgICAgICAgIGNhbGxiYWNrKG51bGwsIHJlc3BvbnNlLCBtZXRhZGF0YSwgb3ApO1xuICAgICAgICB9XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFBvbGwgYGdldE9wZXJhdGlvbmAgdG8gY2hlY2sgdGhlIG9wZXJhdGlvbidzIHN0YXR1cy4gVGhpcyBydW5zIGEgbG9vcCB0b1xuICAgICAqIHBpbmcgdXNpbmcgdGhlIGJhY2tvZmYgc3RyYXRlZ3kgc3BlY2lmaWVkIGF0IGluaXRpYWxpemF0aW9uLlxuICAgICAqXG4gICAgICogTm90ZTogVGhpcyBtZXRob2QgaXMgYXV0b21hdGljYWxseSBjYWxsZWQgb25jZSBhIFwiY29tcGxldGVcIiBldmVudCBoYW5kbGVyXG4gICAgICogaXMgcmVnaXN0ZXJlZCBvbiB0aGUgb3BlcmF0aW9uLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKi9cbiAgICBzdGFydFBvbGxpbmdfKCkge1xuICAgICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L25vLXRoaXMtYWxpYXNcbiAgICAgICAgY29uc3Qgc2VsZiA9IHRoaXM7XG4gICAgICAgIGxldCBub3cgPSBuZXcgRGF0ZSgpO1xuICAgICAgICBjb25zdCBkZWxheU11bHQgPSB0aGlzLmJhY2tvZmZTZXR0aW5ncy5yZXRyeURlbGF5TXVsdGlwbGllcjtcbiAgICAgICAgY29uc3QgbWF4RGVsYXkgPSB0aGlzLmJhY2tvZmZTZXR0aW5ncy5tYXhSZXRyeURlbGF5TWlsbGlzO1xuICAgICAgICBsZXQgZGVsYXkgPSB0aGlzLmJhY2tvZmZTZXR0aW5ncy5pbml0aWFsUmV0cnlEZWxheU1pbGxpcztcbiAgICAgICAgbGV0IGRlYWRsaW5lID0gSW5maW5pdHk7XG4gICAgICAgIGlmICh0aGlzLmJhY2tvZmZTZXR0aW5ncy50b3RhbFRpbWVvdXRNaWxsaXMpIHtcbiAgICAgICAgICAgIGRlYWRsaW5lID0gbm93LmdldFRpbWUoKSArIHRoaXMuYmFja29mZlNldHRpbmdzLnRvdGFsVGltZW91dE1pbGxpcztcbiAgICAgICAgfVxuICAgICAgICBsZXQgcHJldmlvdXNNZXRhZGF0YUJ5dGVzO1xuICAgICAgICBpZiAodGhpcy5sYXRlc3RSZXNwb25zZS5tZXRhZGF0YSkge1xuICAgICAgICAgICAgcHJldmlvdXNNZXRhZGF0YUJ5dGVzID0gdGhpcy5sYXRlc3RSZXNwb25zZS5tZXRhZGF0YS52YWx1ZTtcbiAgICAgICAgfVxuICAgICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L25vLWV4cGxpY2l0LWFueVxuICAgICAgICBmdW5jdGlvbiBlbWl0KGV2ZW50LCAuLi5hcmdzKSB7XG4gICAgICAgICAgICBzZWxmLmVtaXQoZXZlbnQsIC4uLmFyZ3MpO1xuICAgICAgICB9XG4gICAgICAgIC8vIEhlbHBlciBmdW5jdGlvbiB0byByZXBsYWNlIG5vZGVqcyBidWZmZXIncyBlcXVhbHMoKVxuICAgICAgICBmdW5jdGlvbiBhcnJheUVxdWFscyhhLCBiKSB7XG4gICAgICAgICAgICBpZiAoYS5ieXRlTGVuZ3RoICE9PSBiLmJ5dGVMZW5ndGgpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IGEuYnl0ZUxlbmd0aDsgKytpKSB7XG4gICAgICAgICAgICAgICAgaWYgKGFbaV0gIT09IGJbaV0pXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICB9XG4gICAgICAgIGZ1bmN0aW9uIHJldHJ5KCkge1xuICAgICAgICAgICAgaWYgKCFzZWxmLmhhc0FjdGl2ZUxpc3RlbmVycykge1xuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChub3cuZ2V0VGltZSgpID49IGRlYWRsaW5lKSB7XG4gICAgICAgICAgICAgICAgY29uc3QgZXJyb3IgPSBuZXcgZ29vZ2xlRXJyb3JfMS5Hb29nbGVFcnJvcignVG90YWwgdGltZW91dCBleGNlZWRlZCBiZWZvcmUgYW55IHJlc3BvbnNlIHdhcyByZWNlaXZlZCcpO1xuICAgICAgICAgICAgICAgIGVycm9yLmNvZGUgPSBzdGF0dXNfMS5TdGF0dXMuREVBRExJTkVfRVhDRUVERUQ7XG4gICAgICAgICAgICAgICAgc2V0SW1tZWRpYXRlKGVtaXQsICdlcnJvcicsIGVycm9yKTtcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBzZWxmLmdldE9wZXJhdGlvbigoZXJyLCByZXN1bHQsIG1ldGFkYXRhLCByYXdSZXNwb25zZSkgPT4ge1xuICAgICAgICAgICAgICAgIGlmIChlcnIpIHtcbiAgICAgICAgICAgICAgICAgICAgc2V0SW1tZWRpYXRlKGVtaXQsICdlcnJvcicsIGVycik7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgaWYgKCFyZXN1bHQpIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKHJhd1Jlc3BvbnNlLm1ldGFkYXRhICYmXG4gICAgICAgICAgICAgICAgICAgICAgICAoIXByZXZpb3VzTWV0YWRhdGFCeXRlcyB8fFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIChyYXdSZXNwb25zZSAmJlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAhYXJyYXlFcXVhbHMocmF3UmVzcG9uc2UubWV0YWRhdGEudmFsdWUsIHByZXZpb3VzTWV0YWRhdGFCeXRlcykpKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgc2V0SW1tZWRpYXRlKGVtaXQsICdwcm9ncmVzcycsIG1ldGFkYXRhLCByYXdSZXNwb25zZSk7XG4gICAgICAgICAgICAgICAgICAgICAgICBwcmV2aW91c01ldGFkYXRhQnl0ZXMgPSByYXdSZXNwb25zZS5tZXRhZGF0YS52YWx1ZTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAvLyBzcGVjaWFsIGNhc2U6IHNvbWUgQVBJcyBmYWlsIHRvIHNldCBlaXRoZXIgcmVzdWx0IG9yIGVycm9yXG4gICAgICAgICAgICAgICAgICAgIC8vIGJ1dCBzZXQgZG9uZSA9IHRydWUgKGUuZy4gc3BlZWNoIHdpdGggc2lsZW50IGZpbGUpLlxuICAgICAgICAgICAgICAgICAgICAvLyBTb21lIEFQSXMganVzdCB1c2UgdGhpcyBmb3IgdGhlIG5vcm1hbCBjb21wbGV0aW9uXG4gICAgICAgICAgICAgICAgICAgIC8vIChlLmcuIG5vZGVqcy1jb250YWN0LWNlbnRlci1pbnNpZ2h0cyksIHNvIGxldCdzIGp1c3QgcmV0dXJuXG4gICAgICAgICAgICAgICAgICAgIC8vIGFuIGVtcHR5IHJlc3BvbnNlIGluIHRoaXMgY2FzZS5cbiAgICAgICAgICAgICAgICAgICAgaWYgKHJhd1Jlc3BvbnNlLmRvbmUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHNldEltbWVkaWF0ZShlbWl0LCAnY29tcGxldGUnLCB7fSwgbWV0YWRhdGEsIHJhd1Jlc3BvbnNlKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBzZXRUaW1lb3V0KCgpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIG5vdyA9IG5ldyBEYXRlKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICBkZWxheSA9IE1hdGgubWluKGRlbGF5ICogZGVsYXlNdWx0LCBtYXhEZWxheSk7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXRyeSgpO1xuICAgICAgICAgICAgICAgICAgICB9LCBkZWxheSk7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgc2V0SW1tZWRpYXRlKGVtaXQsICdjb21wbGV0ZScsIHJlc3VsdCwgbWV0YWRhdGEsIHJhd1Jlc3BvbnNlKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICAgIHJldHJ5KCk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFdyYXBzIHRoZSBgY29tcGxldGVgIGFuZCBgZXJyb3JgIGV2ZW50cyBpbiBhIFByb21pc2UuXG4gICAgICpcbiAgICAgKiBAcmV0dXJuIHtwcm9taXNlfSAtIFByb21pc2UgdGhhdCByZXNvbHZlcyBvbiBvcGVyYXRpb24gY29tcGxldGlvbiBhbmQgcmVqZWN0c1xuICAgICAqIG9uIG9wZXJhdGlvbiBlcnJvci5cbiAgICAgKi9cbiAgICBwcm9taXNlKCkge1xuICAgICAgICByZXR1cm4gbmV3IFByb21pc2UoKHJlc29sdmUsIHJlamVjdCkgPT4ge1xuICAgICAgICAgICAgdGhpcy5vbignZXJyb3InLCByZWplY3QpLm9uKCdjb21wbGV0ZScsIChyZXN1bHQsIG1ldGFkYXRhLCByYXdSZXNwb25zZSkgPT4ge1xuICAgICAgICAgICAgICAgIHJlc29sdmUoW3Jlc3VsdCwgbWV0YWRhdGEsIHJhd1Jlc3BvbnNlXSk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfSk7XG4gICAgfVxufVxuZXhwb3J0cy5PcGVyYXRpb24gPSBPcGVyYXRpb247XG4vKipcbiAqIE1ldGhvZCB1c2VkIHRvIGNyZWF0ZSBPcGVyYXRpb24gb2JqZWN0cy5cbiAqXG4gKiBAY29uc3RydWN0b3JcbiAqXG4gKiBAcGFyYW0ge2dvb2dsZS5sb25ncnVubmluZy5PcGVyYXRpb259IG9wIC0gVGhlIG9wZXJhdGlvbiB0byBiZSB3cmFwcGVkLlxuICogQHBhcmFtIHtMb25nUnVubmluZ0Rlc2NyaXB0b3J9IGxvbmdydW5uaW5nRGVzY3JpcHRvciAtIFRoaXMgZGVmaW5lcyB0aGVcbiAqIG9wZXJhdGlvbnMgc2VydmljZSBjbGllbnQgYW5kIHVucGFja2luZyBtZWNoYW5pc21zIGZvciB0aGUgb3BlcmF0aW9uLlxuICogQHBhcmFtIHtCYWNrb2ZmU2V0dGluZ3N9IGJhY2tvZmZTZXR0aW5ncyAtIFRoZSBiYWNrb2ZmIHNldHRpbmdzIHVzZWQgaW5cbiAqIGluIHBvbGxpbmcgdGhlIG9wZXJhdGlvbi5cbiAqIEBwYXJhbSB7Q2FsbE9wdGlvbnM9fSBjYWxsT3B0aW9ucyAtIENhbGxPcHRpb25zIHVzZWQgaW4gbWFraW5nIGdldCBvcGVyYXRpb25cbiAqIHJlcXVlc3RzLlxuICovXG5mdW5jdGlvbiBvcGVyYXRpb24ob3AsIGxvbmdydW5uaW5nRGVzY3JpcHRvciwgYmFja29mZlNldHRpbmdzLCBjYWxsT3B0aW9ucykge1xuICAgIHJldHVybiBuZXcgT3BlcmF0aW9uKG9wLCBsb25ncnVubmluZ0Rlc2NyaXB0b3IsIGJhY2tvZmZTZXR0aW5ncywgY2FsbE9wdGlvbnMpO1xufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9bG9uZ3J1bm5pbmcuanMubWFwIl0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/google-gax/build/src/longRunningCalls/longrunning.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/google-gax/build/src/normalCalls/normalApiCaller.js":
/*!**************************************************************************!*\
  !*** ./node_modules/google-gax/build/src/normalCalls/normalApiCaller.js ***!
  \**************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\n/**\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.NormalApiCaller = void 0;\nconst call_1 = __webpack_require__(/*! ../call */ \"(rsc)/./node_modules/google-gax/build/src/call.js\");\n/**\n * Creates an API caller for regular unary methods.\n */\nclass NormalApiCaller {\n    init(callback) {\n        if (callback) {\n            return new call_1.OngoingCall(callback);\n        }\n        return new call_1.OngoingCallPromise();\n    }\n    wrap(func) {\n        return func;\n    }\n    call(apiCall, argument, settings, canceller) {\n        canceller.call(apiCall, argument);\n    }\n    fail(canceller, err) {\n        canceller.callback(err);\n    }\n    result(canceller) {\n        return canceller.promise;\n    }\n}\nexports.NormalApiCaller = NormalApiCaller;\n//# sourceMappingURL=normalApiCaller.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvZ29vZ2xlLWdheC9idWlsZC9zcmMvbm9ybWFsQ2FsbHMvbm9ybWFsQXBpQ2FsbGVyLmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsOENBQTZDLEVBQUUsYUFBYSxFQUFDO0FBQzdELHVCQUF1QjtBQUN2QixlQUFlLG1CQUFPLENBQUMsa0VBQVM7QUFDaEM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHVCQUF1QjtBQUN2QiIsInNvdXJjZXMiOlsiL1VzZXJzL2JhZy15b3NlYi9EZXNrdG9wL+GEkeGFqeGEh+GFteGEi+GFoS9oYWNrYXRob25fdGVhbS9teS1hcHAvbm9kZV9tb2R1bGVzL2dvb2dsZS1nYXgvYnVpbGQvc3JjL25vcm1hbENhbGxzL25vcm1hbEFwaUNhbGxlci5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbi8qKlxuICogQ29weXJpZ2h0IDIwMjAgR29vZ2xlIExMQ1xuICpcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbiAqXG4gKiAgICAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuICpcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4gKi9cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuTm9ybWFsQXBpQ2FsbGVyID0gdm9pZCAwO1xuY29uc3QgY2FsbF8xID0gcmVxdWlyZShcIi4uL2NhbGxcIik7XG4vKipcbiAqIENyZWF0ZXMgYW4gQVBJIGNhbGxlciBmb3IgcmVndWxhciB1bmFyeSBtZXRob2RzLlxuICovXG5jbGFzcyBOb3JtYWxBcGlDYWxsZXIge1xuICAgIGluaXQoY2FsbGJhY2spIHtcbiAgICAgICAgaWYgKGNhbGxiYWNrKSB7XG4gICAgICAgICAgICByZXR1cm4gbmV3IGNhbGxfMS5PbmdvaW5nQ2FsbChjYWxsYmFjayk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIG5ldyBjYWxsXzEuT25nb2luZ0NhbGxQcm9taXNlKCk7XG4gICAgfVxuICAgIHdyYXAoZnVuYykge1xuICAgICAgICByZXR1cm4gZnVuYztcbiAgICB9XG4gICAgY2FsbChhcGlDYWxsLCBhcmd1bWVudCwgc2V0dGluZ3MsIGNhbmNlbGxlcikge1xuICAgICAgICBjYW5jZWxsZXIuY2FsbChhcGlDYWxsLCBhcmd1bWVudCk7XG4gICAgfVxuICAgIGZhaWwoY2FuY2VsbGVyLCBlcnIpIHtcbiAgICAgICAgY2FuY2VsbGVyLmNhbGxiYWNrKGVycik7XG4gICAgfVxuICAgIHJlc3VsdChjYW5jZWxsZXIpIHtcbiAgICAgICAgcmV0dXJuIGNhbmNlbGxlci5wcm9taXNlO1xuICAgIH1cbn1cbmV4cG9ydHMuTm9ybWFsQXBpQ2FsbGVyID0gTm9ybWFsQXBpQ2FsbGVyO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9bm9ybWFsQXBpQ2FsbGVyLmpzLm1hcCJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/google-gax/build/src/normalCalls/normalApiCaller.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/google-gax/build/src/normalCalls/retries.js":
/*!******************************************************************!*\
  !*** ./node_modules/google-gax/build/src/normalCalls/retries.js ***!
  \******************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\n/**\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.retryable = retryable;\nconst status_1 = __webpack_require__(/*! ../status */ \"(rsc)/./node_modules/google-gax/build/src/status.js\");\nconst googleError_1 = __webpack_require__(/*! ../googleError */ \"(rsc)/./node_modules/google-gax/build/src/googleError.js\");\nconst timeout_1 = __webpack_require__(/*! ./timeout */ \"(rsc)/./node_modules/google-gax/build/src/normalCalls/timeout.js\");\n/**\n * Creates a function equivalent to func, but that retries on certain\n * exceptions.\n *\n * @private\n *\n * @param {GRPCCall} func - A function.\n * @param {RetryOptions} retry - Configures the exceptions upon which the\n *   function eshould retry, and the parameters to the exponential backoff retry\n *   algorithm.\n * @param {GRPCCallOtherArgs} otherArgs - the additional arguments to be passed to func.\n * @return {SimpleCallbackFunction} A function that will retry.\n */\nfunction retryable(func, retry, otherArgs, apiName) {\n    const delayMult = retry.backoffSettings.retryDelayMultiplier;\n    const maxDelay = retry.backoffSettings.maxRetryDelayMillis;\n    const timeoutMult = retry.backoffSettings.rpcTimeoutMultiplier;\n    const maxTimeout = retry.backoffSettings.maxRpcTimeoutMillis;\n    let delay = retry.backoffSettings.initialRetryDelayMillis;\n    let timeout = retry.backoffSettings.initialRpcTimeoutMillis;\n    /**\n     * Equivalent to ``func``, but retries upon transient failure.\n     *\n     * Retrying is done through an exponential backoff algorithm configured\n     * by the options in ``retry``.\n     * @param {RequestType} argument The request object.\n     * @param {APICallback} callback The callback.\n     * @return {GRPCCall}\n     */\n    return (argument, callback) => {\n        let canceller;\n        let timeoutId;\n        let now = new Date();\n        let deadline;\n        if (retry.backoffSettings.totalTimeoutMillis) {\n            deadline = now.getTime() + retry.backoffSettings.totalTimeoutMillis;\n        }\n        let retries = 0;\n        const maxRetries = retry.backoffSettings.maxRetries;\n        // For retries, errorsEncountered maintains a list of errors encountered so\n        // that they can be sent back to the user and the user can see ALL errors\n        // that were encountered during a series of retries.\n        const errorsEncountered = [];\n        // The errors that were encountered should be immediately visible to the\n        // user so we should concatenate them onto the details because details are\n        // immediately visible to the user. This method provideds a string we can\n        // concatenate onto the details.\n        function errorDetailsSuffix(errsEncountered) {\n            if (errsEncountered.length < 2) {\n                // If only one error has been encountered then this information will\n                // already be in the error message so no additional information is\n                // necessary. In this case, don't add anything to the details.\n                return '';\n            }\n            const errorsAsString = errsEncountered\n                .map(err => {\n                const statusDetailsString = err.statusDetails\n                    ? err.statusDetails.toString()\n                    : '';\n                const codeString = err.code && err.code.toString ? err.code.toString() : '';\n                const noteString = err.note && err.note.toString ? err.note.toString() : '';\n                const messageString = err.message && err.message.toString ? err.message.toString() : '';\n                return `{message: ${messageString}, code: ${codeString}, details: ${statusDetailsString}, note: ${noteString}}`;\n            })\n                .join(',');\n            return ` : Previous errors : [${errorsAsString}]`;\n        }\n        // TODO: define A/B testing values for retry behaviors.\n        /** Repeat the API call as long as necessary. */\n        function repeat(err) {\n            if (err) {\n                errorsEncountered.push(err);\n            }\n            timeoutId = null;\n            if (deadline && now.getTime() >= deadline) {\n                const error = new googleError_1.GoogleError(`Total timeout of API ${apiName} exceeded ${retry.backoffSettings.totalTimeoutMillis} milliseconds ${err ? `retrying error ${err} ` : ''} before any response was received.${errorDetailsSuffix(errorsEncountered)}`);\n                error.code = status_1.Status.DEADLINE_EXCEEDED;\n                callback(error);\n                return;\n            }\n            if (retries && retries >= maxRetries) {\n                const error = new googleError_1.GoogleError('Exceeded maximum number of retries ' +\n                    (err ? `retrying error ${err} ` : '') +\n                    'before any response was received' +\n                    errorDetailsSuffix(errorsEncountered));\n                error.code = status_1.Status.DEADLINE_EXCEEDED;\n                callback(error);\n                return;\n            }\n            retries++;\n            let lastError = err;\n            const toCall = (0, timeout_1.addTimeoutArg)(func, timeout, otherArgs);\n            canceller = toCall(argument, (err, response, next, rawResponse) => {\n                // Save only the error before deadline exceeded\n                if (err && err.code !== 4) {\n                    lastError = err;\n                }\n                if (!err) {\n                    callback(null, response, next, rawResponse);\n                    return;\n                }\n                canceller = null;\n                if (retry.retryCodes.length > 0 &&\n                    retry.retryCodes.indexOf(err.code) < 0) {\n                    err.note =\n                        'Exception occurred in retry method that was ' +\n                            'not classified as transient';\n                    callback(err);\n                }\n                else {\n                    const toSleep = Math.random() * delay;\n                    timeoutId = setTimeout(() => {\n                        now = new Date();\n                        delay = Math.min(delay * delayMult, maxDelay);\n                        const timeoutCal = timeout && timeoutMult ? timeout * timeoutMult : 0;\n                        const rpcTimeout = maxTimeout ? maxTimeout : 0;\n                        const newDeadline = deadline ? deadline - now.getTime() : 0;\n                        timeout = Math.min(timeoutCal, rpcTimeout, newDeadline);\n                        repeat(lastError);\n                    }, toSleep);\n                }\n            });\n            if (canceller instanceof Promise) {\n                canceller.catch(err => {\n                    callback(new googleError_1.GoogleError(err));\n                });\n            }\n        }\n        if (maxRetries && deadline) {\n            const error = new googleError_1.GoogleError('Cannot set both totalTimeoutMillis and maxRetries ' +\n                'in backoffSettings.');\n            error.code = status_1.Status.INVALID_ARGUMENT;\n            callback(error);\n        }\n        else {\n            repeat();\n        }\n        return {\n            cancel() {\n                if (timeoutId) {\n                    clearTimeout(timeoutId);\n                }\n                if (canceller) {\n                    canceller.cancel();\n                }\n                else {\n                    const error = new googleError_1.GoogleError('cancelled' + errorDetailsSuffix(errorsEncountered));\n                    error.code = status_1.Status.CANCELLED;\n                    callback(error);\n                }\n            },\n        };\n    };\n}\n//# sourceMappingURL=retries.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/google-gax/build/src/normalCalls/retries.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/google-gax/build/src/normalCalls/timeout.js":
/*!******************************************************************!*\
  !*** ./node_modules/google-gax/build/src/normalCalls/timeout.js ***!
  \******************************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";
eval("\n/**\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.addTimeoutArg = addTimeoutArg;\n/**\n * Updates func so that it gets called with the timeout as its final arg.\n *\n * This converts a function, func, into another function with updated deadline.\n *\n * @private\n *\n * @param {GRPCCall} func - a function to be updated.\n * @param {number} timeout - to be added to the original function as it final\n *   positional arg.\n * @param {Object} otherArgs - the additional arguments to be passed to func.\n * @param {Object=} abTests - the A/B testing key/value pairs.\n * @return {function(Object, APICallback)}\n *  the function with other arguments and the timeout.\n */\nfunction addTimeoutArg(func, timeout, otherArgs, abTests) {\n    // TODO: this assumes the other arguments consist of metadata and options,\n    // which is specific to gRPC calls. Remove the hidden dependency on gRPC.\n    return (argument, callback) => {\n        const now = new Date();\n        const options = otherArgs.options || {};\n        options.deadline = new Date(now.getTime() + timeout);\n        const metadata = otherArgs.metadataBuilder\n            ? otherArgs.metadataBuilder(abTests, otherArgs.headers || {})\n            : null;\n        return func(argument, metadata, options, callback);\n    };\n}\n//# sourceMappingURL=timeout.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvZ29vZ2xlLWdheC9idWlsZC9zcmMvbm9ybWFsQ2FsbHMvdGltZW91dC5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDhDQUE2QyxFQUFFLGFBQWEsRUFBQztBQUM3RCxxQkFBcUI7QUFDckI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxXQUFXLFVBQVU7QUFDckIsV0FBVyxRQUFRO0FBQ25CO0FBQ0EsV0FBVyxRQUFRO0FBQ25CLFdBQVcsU0FBUztBQUNwQixZQUFZO0FBQ1o7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSx3RUFBd0U7QUFDeEU7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsInNvdXJjZXMiOlsiL1VzZXJzL2JhZy15b3NlYi9EZXNrdG9wL+GEkeGFqeGEh+GFteGEi+GFoS9oYWNrYXRob25fdGVhbS9teS1hcHAvbm9kZV9tb2R1bGVzL2dvb2dsZS1nYXgvYnVpbGQvc3JjL25vcm1hbENhbGxzL3RpbWVvdXQuanMiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG4vKipcbiAqIENvcHlyaWdodCAyMDIwIEdvb2dsZSBMTENcbiAqXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4gKlxuICogICAgICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbiAqXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuICovXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLmFkZFRpbWVvdXRBcmcgPSBhZGRUaW1lb3V0QXJnO1xuLyoqXG4gKiBVcGRhdGVzIGZ1bmMgc28gdGhhdCBpdCBnZXRzIGNhbGxlZCB3aXRoIHRoZSB0aW1lb3V0IGFzIGl0cyBmaW5hbCBhcmcuXG4gKlxuICogVGhpcyBjb252ZXJ0cyBhIGZ1bmN0aW9uLCBmdW5jLCBpbnRvIGFub3RoZXIgZnVuY3Rpb24gd2l0aCB1cGRhdGVkIGRlYWRsaW5lLlxuICpcbiAqIEBwcml2YXRlXG4gKlxuICogQHBhcmFtIHtHUlBDQ2FsbH0gZnVuYyAtIGEgZnVuY3Rpb24gdG8gYmUgdXBkYXRlZC5cbiAqIEBwYXJhbSB7bnVtYmVyfSB0aW1lb3V0IC0gdG8gYmUgYWRkZWQgdG8gdGhlIG9yaWdpbmFsIGZ1bmN0aW9uIGFzIGl0IGZpbmFsXG4gKiAgIHBvc2l0aW9uYWwgYXJnLlxuICogQHBhcmFtIHtPYmplY3R9IG90aGVyQXJncyAtIHRoZSBhZGRpdGlvbmFsIGFyZ3VtZW50cyB0byBiZSBwYXNzZWQgdG8gZnVuYy5cbiAqIEBwYXJhbSB7T2JqZWN0PX0gYWJUZXN0cyAtIHRoZSBBL0IgdGVzdGluZyBrZXkvdmFsdWUgcGFpcnMuXG4gKiBAcmV0dXJuIHtmdW5jdGlvbihPYmplY3QsIEFQSUNhbGxiYWNrKX1cbiAqICB0aGUgZnVuY3Rpb24gd2l0aCBvdGhlciBhcmd1bWVudHMgYW5kIHRoZSB0aW1lb3V0LlxuICovXG5mdW5jdGlvbiBhZGRUaW1lb3V0QXJnKGZ1bmMsIHRpbWVvdXQsIG90aGVyQXJncywgYWJUZXN0cykge1xuICAgIC8vIFRPRE86IHRoaXMgYXNzdW1lcyB0aGUgb3RoZXIgYXJndW1lbnRzIGNvbnNpc3Qgb2YgbWV0YWRhdGEgYW5kIG9wdGlvbnMsXG4gICAgLy8gd2hpY2ggaXMgc3BlY2lmaWMgdG8gZ1JQQyBjYWxscy4gUmVtb3ZlIHRoZSBoaWRkZW4gZGVwZW5kZW5jeSBvbiBnUlBDLlxuICAgIHJldHVybiAoYXJndW1lbnQsIGNhbGxiYWNrKSA9PiB7XG4gICAgICAgIGNvbnN0IG5vdyA9IG5ldyBEYXRlKCk7XG4gICAgICAgIGNvbnN0IG9wdGlvbnMgPSBvdGhlckFyZ3Mub3B0aW9ucyB8fCB7fTtcbiAgICAgICAgb3B0aW9ucy5kZWFkbGluZSA9IG5ldyBEYXRlKG5vdy5nZXRUaW1lKCkgKyB0aW1lb3V0KTtcbiAgICAgICAgY29uc3QgbWV0YWRhdGEgPSBvdGhlckFyZ3MubWV0YWRhdGFCdWlsZGVyXG4gICAgICAgICAgICA/IG90aGVyQXJncy5tZXRhZGF0YUJ1aWxkZXIoYWJUZXN0cywgb3RoZXJBcmdzLmhlYWRlcnMgfHwge30pXG4gICAgICAgICAgICA6IG51bGw7XG4gICAgICAgIHJldHVybiBmdW5jKGFyZ3VtZW50LCBtZXRhZGF0YSwgb3B0aW9ucywgY2FsbGJhY2spO1xuICAgIH07XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD10aW1lb3V0LmpzLm1hcCJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/google-gax/build/src/normalCalls/timeout.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/google-gax/build/src/operationsClient.js":
/*!***************************************************************!*\
  !*** ./node_modules/google-gax/build/src/operationsClient.js ***!
  \***************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";
eval("\n/**\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    var desc = Object.getOwnPropertyDescriptor(m, k);\n    if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n      desc = { enumerable: true, get: function() { return m[k]; } };\n    }\n    Object.defineProperty(o, k2, desc);\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {\n    Object.defineProperty(o, \"default\", { enumerable: true, value: v });\n}) : function(o, v) {\n    o[\"default\"] = v;\n});\nvar __importStar = (this && this.__importStar) || (function () {\n    var ownKeys = function(o) {\n        ownKeys = Object.getOwnPropertyNames || function (o) {\n            var ar = [];\n            for (var k in o) if (Object.prototype.hasOwnProperty.call(o, k)) ar[ar.length] = k;\n            return ar;\n        };\n        return ownKeys(o);\n    };\n    return function (mod) {\n        if (mod && mod.__esModule) return mod;\n        var result = {};\n        if (mod != null) for (var k = ownKeys(mod), i = 0; i < k.length; i++) if (k[i] !== \"default\") __createBinding(result, mod, k[i]);\n        __setModuleDefault(result, mod);\n        return result;\n    };\n})();\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.OperationsClientBuilder = exports.OperationsClient = exports.ALL_SCOPES = exports.SERVICE_ADDRESS = void 0;\nconst createApiCall_1 = __webpack_require__(/*! ./createApiCall */ \"(rsc)/./node_modules/google-gax/build/src/createApiCall.js\");\nconst descriptor_1 = __webpack_require__(/*! ./descriptor */ \"(rsc)/./node_modules/google-gax/build/src/descriptor.js\");\nconst gax = __importStar(__webpack_require__(/*! ./gax */ \"(rsc)/./node_modules/google-gax/build/src/gax.js\"));\nconst configData = __webpack_require__(/*! ./operations_client_config.json */ \"(rsc)/./node_modules/google-gax/build/src/operations_client_config.json\");\nconst operationProtoJson = __webpack_require__(/*! ../protos/operations.json */ \"(rsc)/./node_modules/google-gax/build/protos/operations.json\");\nconst transcoding_1 = __webpack_require__(/*! ./transcoding */ \"(rsc)/./node_modules/google-gax/build/src/transcoding.js\");\nexports.SERVICE_ADDRESS = 'longrunning.googleapis.com';\nconst version = (__webpack_require__(/*! ../../package.json */ \"(rsc)/./node_modules/google-gax/package.json\").version);\nconst DEFAULT_SERVICE_PORT = 443;\nconst CODE_GEN_NAME_VERSION = 'gapic/0.7.1';\n/**\n * The scopes needed to make gRPC calls to all of the methods defined in\n * this service.\n */\nexports.ALL_SCOPES = [];\n/**\n * Manages long-running operations with an API service.\n *\n * When an API method normally takes long time to complete, it can be designed\n * to return {@link Operation} to the client, and the client can use this\n * interface to receive the real response asynchronously by polling the\n * operation resource, or pass the operation resource to another API (such as\n * Google Cloud Pub/Sub API) to receive the response.  Any API service that\n * returns long-running operations should implement the `Operations` interface\n * so developers can have a consistent client experience.\n *\n * This will be created through a builder function which can be obtained by the\n * module. See the following example of how to initialize the module and how to\n * access to the builder.\n * @see {@link operationsClient}\n *\n * @class\n */\nclass OperationsClient {\n    auth;\n    innerApiCalls;\n    descriptor;\n    operationsStub;\n    constructor(gaxGrpc, \n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    operationsProtos, options) {\n        const opts = Object.assign({\n            servicePath: exports.SERVICE_ADDRESS,\n            port: DEFAULT_SERVICE_PORT,\n            clientConfig: {},\n        }, options);\n        const googleApiClient = ['gl-node/' + process.versions.node];\n        if (opts.libName && opts.libVersion) {\n            googleApiClient.push(opts.libName + '/' + opts.libVersion);\n        }\n        googleApiClient.push(CODE_GEN_NAME_VERSION, 'gax/' + version);\n        if (opts.fallback) {\n            googleApiClient.push('gl-web/' + version);\n        }\n        else {\n            googleApiClient.push('grpc/' + gaxGrpc.grpcVersion);\n        }\n        const defaults = gaxGrpc.constructSettings('google.longrunning.Operations', configData, opts.clientConfig || {}, { 'x-goog-api-client': googleApiClient.join(' ') });\n        this.auth = gaxGrpc.auth;\n        // Set up a dictionary of \"inner API calls\"; the core implementation\n        // of calling the API is handled in `google-gax`, with this code\n        // merely providing the destination and request information.\n        this.innerApiCalls = {};\n        this.descriptor = {\n            listOperations: new descriptor_1.PageDescriptor('pageToken', 'nextPageToken', 'operations'),\n        };\n        // Put together the \"service stub\" for\n        // google.longrunning.Operations.\n        this.operationsStub = gaxGrpc.createStub(opts.fallback\n            ? operationsProtos.lookupService('google.longrunning.Operations')\n            : operationsProtos.google.longrunning.Operations, opts);\n        const operationsStubMethods = [\n            'getOperation',\n            'listOperations',\n            'cancelOperation',\n            'deleteOperation',\n        ];\n        for (const methodName of operationsStubMethods) {\n            const innerCallPromise = this.operationsStub.then(stub => (...args) => {\n                const func = stub[methodName];\n                return func.apply(stub, args);\n            }, err => () => {\n                throw err;\n            });\n            this.innerApiCalls[methodName] = (0, createApiCall_1.createApiCall)(innerCallPromise, defaults[methodName], this.descriptor[methodName]);\n        }\n    }\n    /** Closes this operations client. */\n    close() {\n        this.operationsStub.then(stub => stub.close()).catch(console.error);\n    }\n    getProjectId(callback) {\n        if (this.auth && 'getProjectId' in this.auth) {\n            return this.auth.getProjectId(callback);\n        }\n        if (callback) {\n            callback(new Error('Cannot determine project ID.'));\n        }\n        else {\n            return Promise.reject('Cannot determine project ID.');\n        }\n    }\n    // Service calls\n    getOperationInternal(request, options, callback) {\n        request = request || {};\n        options = options || {};\n        return this.innerApiCalls.getOperation(request, options, callback);\n    }\n    /**\n     * Gets the latest state of a long-running operation.  Clients can use this\n     * method to poll the operation result at intervals as recommended by the API\n     * service.\n     *\n     * @param {Object} request - The request object that will be sent.\n     * @param {string} request.name - The name of the operation resource.\n     * @param {Object=} options\n     *   Optional parameters. You can override the default settings for this call,\n     *   e.g, timeout, retries, paginations, etc. See [gax.CallOptions]{@link\n     *   https://googleapis.github.io/gax-nodejs/global.html#CallOptions} for the\n     *   details.\n     * @param {function(?Error, ?Object)=} callback\n     *   The function which will be called with the result of the API call.\n     *\n     *   The second parameter to the callback is an object representing\n     * [google.longrunning.Operation]{@link\n     * external:\"google.longrunning.Operation\"}.\n     * @return {Promise} - The promise which resolves to an array.\n     *   The first element of the array is an object representing\n     * [google.longrunning.Operation]{@link\n     * external:\"google.longrunning.Operation\"}. The promise has a method named\n     * \"cancel\" which cancels the ongoing API call.\n     *\n     * @example\n     *\n     * const client = longrunning.operationsClient();\n     * const name = '';\n     * const [response] = await client.getOperation({name});\n     * // doThingsWith(response)\n     */\n    getOperation(request, optionsOrCallback, callback) {\n        let options;\n        if (optionsOrCallback instanceof Function && callback === undefined) {\n            callback = optionsOrCallback;\n            options = {};\n        }\n        else {\n            options = optionsOrCallback;\n        }\n        request = request || {};\n        options = options || {};\n        return this.innerApiCalls.getOperation(request, options, callback);\n    }\n    /**\n     * Lists operations that match the specified filter in the request. If the\n     * server doesn't support this method, it returns `UNIMPLEMENTED`.\n     *\n     * NOTE: the `name` binding below allows API services to override the binding\n     * to use different resource name schemes.\n     *\n     * @param {Object} request - The request object that will be sent.\n     * @param {string} request.name - The name of the operation collection.\n     * @param {string} request.filter - The standard list filter.\n     * @param {number=} request.pageSize\n     *   The maximum number of resources contained in the underlying API\n     *   response. If page streaming is performed per-resource, this\n     *   parameter does not affect the return value. If page streaming is\n     *   performed per-page, this determines the maximum number of\n     *   resources in a page.\n     * @param {Object=} options\n     *   Optional parameters. You can override the default settings for this call,\n     * e.g, timeout, retries, paginations, etc. See [gax.CallOptions]{@link\n     * https://googleapis.github.io/gax-nodejs/global.html#CallOptions} for the\n     * details.\n     * @param {function(?Error, ?Array, ?Object, ?Object)=} callback\n     *   The function which will be called with the result of the API call.\n     *\n     *   The second parameter to the callback is Array of\n     * [google.longrunning.Operation]{@link\n     * external:\"google.longrunning.Operation\"}.\n     *\n     *   When autoPaginate: false is specified through options, it contains the\n     * result in a single response. If the response indicates the next page\n     * exists, the third parameter is set to be used for the next request object.\n     * The fourth parameter keeps the raw response object of an object\n     * representing [google.longrunning.ListOperationsResponse]{@link\n     * external:\"google.longrunning.ListOperationsResponse\"}.\n     * @return {Promise} - The promise which resolves to an array.\n     *   The first element of the array is Array of\n     * [google.longrunning.Operation]{@link\n     * external:\"google.longrunning.Operation\"}.\n     *\n     *   When autoPaginate: false is specified through options, the array has\n     * three elements. The first element is Array of\n     * [google.longrunning.Operation]{@link\n     * external:\"google.longrunning.Operation\"} in a single response. The second\n     * element is the next request object if the response indicates the next page\n     * exists, or null. The third element is an object representing\n     * [google.longrunning.ListOperationsResponse]{@link\n     * external:\"google.longrunning.ListOperationsResponse\"}.\n     *\n     *   The promise has a method named \"cancel\" which cancels the ongoing API\n     * call.\n     *\n     * @example\n     *\n     * const client = longrunning.operationsClient();\n     * const request = {\n     *     name: '',\n     *     filter: ''\n     * };\n     * // Iterate over all elements.\n     * const [resources] = await client.listOperations(request);\n     * for (const resource of resources) {\n     *   console.log(resources);\n     * }\n     *\n     * // Or obtain the paged response.\n     * const options = {autoPaginate: false};\n     * let nextRequest = request;\n     * while(nextRequest) {\n     *   const response = await client.listOperations(nextRequest, options);\n     *   const resources = response[0];\n     *   nextRequest = response[1];\n     *   const rawResponse = response[2];\n     *   for (const resource of resources) {\n     *     // doThingsWith(resource);\n     *   }\n     * };\n     */\n    listOperations(request, optionsOrCallback, callback) {\n        let options;\n        if (optionsOrCallback instanceof Function && callback === undefined) {\n            callback = optionsOrCallback;\n            options = {};\n        }\n        else {\n            options = optionsOrCallback;\n        }\n        request = request || {};\n        options = options || {};\n        return this.innerApiCalls.listOperations(request, options, callback);\n    }\n    /**\n     * Equivalent to {@link listOperations}, but returns a NodeJS Stream object.\n     *\n     * This fetches the paged responses for {@link listOperations} continuously\n     * and invokes the callback registered for 'data' event for each element in\n     * the responses.\n     *\n     * The returned object has 'end' method when no more elements are required.\n     *\n     * autoPaginate option will be ignored.\n     *\n     * @see {@link https://nodejs.org/api/stream.html}\n     *\n     * @param {Object} request - The request object that will be sent.\n     * @param {string} request.name - The name of the operation collection.\n     * @param {string} request.filter - The standard list filter.\n     * @param {number=} request.pageSize -\n     *   The maximum number of resources contained in the underlying API\n     *   response. If page streaming is performed per-resource, this\n     *   parameter does not affect the return value. If page streaming is\n     *   performed per-page, this determines the maximum number of\n     *   resources in a page.\n     * @param {Object=} options\n     *   Optional parameters. You can override the default settings for this call,\n     *   e.g, timeout, retries, paginations, etc. See [gax.CallOptions]{@link\n     *   https://googleapis.github.io/gax-nodejs/global.html#CallOptions} for the\n     *   details.\n     * @return {Stream} - An object stream which emits an object representing [google.longrunning.Operation]{@link external:\"google.longrunning.Operation\"} on 'data' event.\n     *\n     * @example\n     *\n     * const client = longrunning.operationsClient();\n     * const request = {\n     *   name: '',\n     *   filter: ''\n     * };\n     * client.listOperationsStream(request)\n     *   .on('data', element => {\n     *     // doThingsWith(element)\n     *   })\n     *   .on('error', err => {\n     *     console.error(err);\n     *   });\n     */\n    listOperationsStream(request, options) {\n        const callSettings = new gax.CallSettings(options);\n        return this.descriptor.listOperations.createStream(this.innerApiCalls.listOperations, request, callSettings);\n    }\n    /**\n     * Equivalent to {@link listOperations}, but returns an iterable object.\n     *\n     * for-await-of syntax is used with the iterable to recursively get response element on-demand.\n     *\n     * @param {Object} request - The request object that will be sent.\n     * @param {string} request.name - The name of the operation collection.\n     * @param {string} request.filter - The standard list filter.\n     * @param {number=} request.pageSize -\n     *   The maximum number of resources contained in the underlying API\n     *   response. If page streaming is performed per-resource, this\n     *   parameter does not affect the return value. If page streaming is\n     *   performed per-page, this determines the maximum number of\n     *   resources in a page.\n     * @param {Object=} options\n     *   Optional parameters. You can override the default settings for this call,\n     *   e.g, timeout, retries, paginations, etc. See [gax.CallOptions]{@link\n     *   https://googleapis.github.io/gax-nodejs/global.html#CallOptions} for the\n     *   details.\n     * @returns {Object}\n     *   An iterable Object that conforms to @link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols.\n     */\n    listOperationsAsync(request, options) {\n        request = request || {};\n        options = options || {};\n        const callSettings = new gax.CallSettings(options);\n        return this.descriptor.listOperations.asyncIterate(this.innerApiCalls.listOperations, request, callSettings);\n    }\n    /**\n     * Starts asynchronous cancellation on a long-running operation.  The server\n     * makes a best effort to cancel the operation, but success is not\n     * guaranteed.  If the server doesn't support this method, it returns\n     * `google.rpc.Code.UNIMPLEMENTED`.  Clients can use\n     * {@link Operations.GetOperation} or\n     * other methods to check whether the cancellation succeeded or whether the\n     * operation completed despite cancellation. On successful cancellation,\n     * the operation is not deleted; instead, it becomes an operation with\n     * an {@link Operation.error} value with a {@link google.rpc.Status.code} of\n     * 1, corresponding to `Code.CANCELLED`.\n     *\n     * @param {Object} request - The request object that will be sent.\n     * @param {string} request.name - The name of the operation resource to be cancelled.\n     * @param {Object=} options\n     *   Optional parameters. You can override the default settings for this call,\n     * e.g, timeout, retries, paginations, etc. See [gax.CallOptions]{@link\n     * https://googleapis.github.io/gax-nodejs/global.html#CallOptions} for the\n     * details.\n     * @param {function(?Error)=} callback\n     *   The function which will be called with the result of the API call.\n     * @return {Promise} - The promise which resolves when API call finishes.\n     *   The promise has a method named \"cancel\" which cancels the ongoing API\n     * call.\n     *\n     * @example\n     *\n     * const client = longrunning.operationsClient();\n     * await client.cancelOperation({name: ''});\n     */\n    cancelOperation(request, optionsOrCallback, callback) {\n        let options;\n        if (optionsOrCallback instanceof Function && callback === undefined) {\n            callback = optionsOrCallback;\n            options = {};\n        }\n        else {\n            options = optionsOrCallback;\n        }\n        request = request || {};\n        options = options || {};\n        return this.innerApiCalls.cancelOperation(request, options, callback);\n    }\n    /**\n     * Deletes a long-running operation. This method indicates that the client is\n     * no longer interested in the operation result. It does not cancel the\n     * operation. If the server doesn't support this method, it returns\n     * `google.rpc.Code.UNIMPLEMENTED`.\n     *\n     * @param {Object} request - The request object that will be sent.\n     * @param {string} request.name - The name of the operation resource to be deleted.\n     * @param {Object=} options\n     *   Optional parameters. You can override the default settings for this call,\n     * e.g, timeout, retries, paginations, etc. See [gax.CallOptions]{@link\n     * https://googleapis.github.io/gax-nodejs/global.html#CallOptions} for the\n     * details.\n     * @param {function(?Error)=} callback\n     *   The function which will be called with the result of the API call.\n     * @return {Promise} - The promise which resolves when API call finishes.\n     *   The promise has a method named \"cancel\" which cancels the ongoing API\n     * call.\n     *\n     * @example\n     *\n     * const client = longrunning.operationsClient();\n     * await client.deleteOperation({name: ''});\n     */\n    deleteOperation(request, optionsOrCallback, callback) {\n        let options;\n        if (optionsOrCallback instanceof Function && callback === undefined) {\n            callback = optionsOrCallback;\n            options = {};\n        }\n        else {\n            options = optionsOrCallback;\n        }\n        request = request || {};\n        options = options || {};\n        return this.innerApiCalls.deleteOperation(request, options, callback);\n    }\n}\nexports.OperationsClient = OperationsClient;\nclass OperationsClientBuilder {\n    operationsClient;\n    /**\n     * Builds a new Operations Client\n     * @param gaxGrpc {GrpcClient}\n     */\n    constructor(gaxGrpc, protoJson) {\n        if (protoJson && gaxGrpc.httpRules) {\n            // overwrite the http rules if provide in service yaml.\n            (0, transcoding_1.overrideHttpRules)(gaxGrpc.httpRules, protoJson);\n        }\n        const operationsProtos = protoJson ?? gaxGrpc.loadProtoJSON(operationProtoJson);\n        /**\n         * Build a new instance of {@link OperationsClient}.\n         *\n         * @param {Object=} opts - The optional parameters.\n         * @param {String=} opts.servicePath - Domain name of the API remote host.\n         * @param {number=} opts.port - The port on which to connect to the remote host.\n         * @param {grpc.ClientCredentials=} opts.sslCreds - A ClientCredentials for use with an SSL-enabled channel.\n         * @param {Object=} opts.clientConfig - The customized config to build the call settings. See {@link gax.constructSettings} for the format.\n         */\n        this.operationsClient = opts => {\n            if (gaxGrpc.fallback) {\n                opts.fallback = gaxGrpc.fallback;\n            }\n            return new OperationsClient(gaxGrpc, operationsProtos, opts);\n        };\n        Object.assign(this.operationsClient, OperationsClient);\n    }\n}\nexports.OperationsClientBuilder = OperationsClientBuilder;\n//# sourceMappingURL=operationsClient.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/google-gax/build/src/operationsClient.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/google-gax/build/src/operations_client_config.json":
/*!*************************************************************************!*\
  !*** ./node_modules/google-gax/build/src/operations_client_config.json ***!
  \*************************************************************************/
/***/ ((module) => {

"use strict";
module.exports = /*#__PURE__*/JSON.parse('{"interfaces":{"google.longrunning.Operations":{"retry_codes":{"idempotent":["DEADLINE_EXCEEDED","UNAVAILABLE"],"non_idempotent":[]},"retry_params":{"default":{"initial_retry_delay_millis":100,"retry_delay_multiplier":1.3,"max_retry_delay_millis":60000,"initial_rpc_timeout_millis":90000,"rpc_timeout_multiplier":1,"max_rpc_timeout_millis":90000,"total_timeout_millis":600000}},"methods":{"GetOperation":{"timeout_millis":60000,"retry_codes_name":"idempotent","retry_params_name":"default"},"ListOperations":{"timeout_millis":60000,"retry_codes_name":"idempotent","retry_params_name":"default"},"CancelOperation":{"timeout_millis":60000,"retry_codes_name":"idempotent","retry_params_name":"default"},"DeleteOperation":{"timeout_millis":60000,"retry_codes_name":"idempotent","retry_params_name":"default"}}}}}');

/***/ }),

/***/ "(rsc)/./node_modules/google-gax/build/src/paginationCalls/pageDescriptor.js":
/*!*****************************************************************************!*\
  !*** ./node_modules/google-gax/build/src/paginationCalls/pageDescriptor.js ***!
  \*****************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\n/**\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.PageDescriptor = void 0;\nconst stream_1 = __webpack_require__(/*! stream */ \"stream\");\nconst normalApiCaller_1 = __webpack_require__(/*! ../normalCalls/normalApiCaller */ \"(rsc)/./node_modules/google-gax/build/src/normalCalls/normalApiCaller.js\");\nconst warnings_1 = __webpack_require__(/*! .././warnings */ \"(rsc)/./node_modules/google-gax/build/src/warnings.js\");\nconst pagedApiCaller_1 = __webpack_require__(/*! ./pagedApiCaller */ \"(rsc)/./node_modules/google-gax/build/src/paginationCalls/pagedApiCaller.js\");\nconst maxAttemptsEmptyResponse = 10;\n/**\n * A descriptor for methods that support pagination.\n */\nclass PageDescriptor {\n    requestPageTokenField;\n    responsePageTokenField;\n    requestPageSizeField;\n    resourceField;\n    constructor(requestPageTokenField, responsePageTokenField, resourceField) {\n        this.requestPageTokenField = requestPageTokenField;\n        this.responsePageTokenField = responsePageTokenField;\n        this.resourceField = resourceField;\n    }\n    /**\n     * Creates a new object Stream which emits the resource on 'data' event.\n     */\n    createStream(apiCall, request, options) {\n        if (options?.autoPaginate) {\n            (0, warnings_1.warn)('autoPaginate true', 'Autopaginate will always be set to false in stream paging methods. See more info at https://github.com/googleapis/gax-nodejs/blob/main/client-libraries.md#auto-pagination for more information on how to configure paging calls', 'AutopaginateTrueWarning');\n        }\n        const stream = new stream_1.PassThrough({ objectMode: true });\n        options = Object.assign({}, options, { autoPaginate: false });\n        const maxResults = 'maxResults' in options ? options.maxResults : -1;\n        let pushCount = 0;\n        let started = false;\n        function callback(err, resources, next, apiResp) {\n            if (err) {\n                stream.emit('error', err);\n                return;\n            }\n            // emit full api response with every page.\n            stream.emit('response', apiResp);\n            for (let i = 0; i < resources.length; ++i) {\n                // TODO: rewrite without accessing stream internals\n                if (stream\n                    ._readableState.ended) {\n                    return;\n                }\n                if (resources[i] === null) {\n                    continue;\n                }\n                stream.push(resources[i]);\n                pushCount++;\n                if (pushCount === maxResults) {\n                    stream.end();\n                }\n            }\n            // TODO: rewrite without accessing stream internals\n            if (stream._readableState\n                .ended) {\n                return;\n            }\n            if (!next) {\n                stream.end();\n                return;\n            }\n            // When pageToken is specified in the original options, it will overwrite\n            // the page token field in the next request. Therefore it must be cleared.\n            if ('pageToken' in options) {\n                delete options.pageToken;\n            }\n            if (stream.isPaused()) {\n                request = next;\n                started = false;\n            }\n            else {\n                setImmediate(apiCall, next, options, callback);\n            }\n        }\n        stream.on('resume', async () => {\n            if (!started) {\n                started = true;\n                await apiCall(request, options, callback);\n            }\n        });\n        return stream;\n    }\n    /**\n     * Create an async iterable which can be recursively called for data on-demand.\n     */\n    asyncIterate(apiCall, request, options) {\n        if (options?.autoPaginate) {\n            (0, warnings_1.warn)('autoPaginate true', 'Autopaginate will always be set to false in Async paging methods. See more info at https://github.com/googleapis/gax-nodejs/blob/main/client-libraries.md#auto-pagination for more information on how to configure paging calls', 'AutopaginateTrueWarning');\n        }\n        options = Object.assign({}, options, { autoPaginate: false });\n        const iterable = this.createIterator(apiCall, request, options);\n        return iterable;\n    }\n    createIterator(apiCall, request, options) {\n        const asyncIterable = {\n            [Symbol.asyncIterator]() {\n                let nextPageRequest = request;\n                const cache = [];\n                return {\n                    async next() {\n                        if (cache.length > 0) {\n                            return Promise.resolve({\n                                done: false,\n                                value: cache.shift(),\n                            });\n                        }\n                        let attempts = 0;\n                        while (cache.length === 0 && nextPageRequest) {\n                            let result;\n                            [result, nextPageRequest] = (await apiCall(nextPageRequest, options));\n                            // For pagination response with protobuf map type, use tuple as representation.\n                            if (result && !Array.isArray(result)) {\n                                for (const [key, value] of Object.entries(result)) {\n                                    cache.push([key, value]);\n                                }\n                            }\n                            else {\n                                cache.push(...result);\n                            }\n                            if (cache.length === 0) {\n                                ++attempts;\n                                if (attempts > maxAttemptsEmptyResponse) {\n                                    break;\n                                }\n                            }\n                        }\n                        if (cache.length === 0) {\n                            return Promise.resolve({ done: true, value: undefined });\n                        }\n                        return Promise.resolve({ done: false, value: cache.shift() });\n                    },\n                };\n            },\n        };\n        return asyncIterable;\n    }\n    getApiCaller(settings) {\n        if (!settings.autoPaginate) {\n            return new normalApiCaller_1.NormalApiCaller();\n        }\n        return new pagedApiCaller_1.PagedApiCaller(this);\n    }\n}\nexports.PageDescriptor = PageDescriptor;\n//# sourceMappingURL=pageDescriptor.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/google-gax/build/src/paginationCalls/pageDescriptor.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/google-gax/build/src/paginationCalls/pagedApiCaller.js":
/*!*****************************************************************************!*\
  !*** ./node_modules/google-gax/build/src/paginationCalls/pagedApiCaller.js ***!
  \*****************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\n/**\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.PagedApiCaller = void 0;\nconst call_1 = __webpack_require__(/*! ../call */ \"(rsc)/./node_modules/google-gax/build/src/call.js\");\nconst googleError_1 = __webpack_require__(/*! ../googleError */ \"(rsc)/./node_modules/google-gax/build/src/googleError.js\");\nconst resourceCollector_1 = __webpack_require__(/*! ./resourceCollector */ \"(rsc)/./node_modules/google-gax/build/src/paginationCalls/resourceCollector.js\");\nconst warnings_1 = __webpack_require__(/*! .././warnings */ \"(rsc)/./node_modules/google-gax/build/src/warnings.js\");\nclass PagedApiCaller {\n    pageDescriptor;\n    /**\n     * Creates an API caller that returns a stream to performs page-streaming.\n     *\n     * @private\n     * @constructor\n     * @param {PageDescriptor} pageDescriptor - indicates the structure\n     *   of page streaming to be performed.\n     */\n    constructor(pageDescriptor) {\n        this.pageDescriptor = pageDescriptor;\n    }\n    /**\n     * This function translates between regular gRPC calls (that accepts a request and returns a response,\n     * and does not know anything about pages and page tokens) and the users' callback (that expects\n     * to see resources from one page, a request to get the next page, and the raw response from the server).\n     *\n     * It generates a function that can be passed as a callback function to a gRPC call, will understand\n     * pagination-specific fields in the response, and call the users' callback after having those fields\n     * parsed.\n     *\n     * @param request Request object. It needs to be passed to all subsequent next page requests\n     * (the main content of the request object stays unchanged, only the next page token changes)\n     * @param callback The user's callback that expects the page content, next page request, and raw response.\n     */\n    generateParseResponseCallback(request, callback) {\n        const resourceFieldName = this.pageDescriptor.resourceField;\n        const responsePageTokenFieldName = this.pageDescriptor.responsePageTokenField;\n        const requestPageTokenFieldName = this.pageDescriptor.requestPageTokenField;\n        return (err, response) => {\n            if (err) {\n                callback(err);\n                return;\n            }\n            if (!request) {\n                callback(new googleError_1.GoogleError('Undefined request in pagination method callback.'));\n                return;\n            }\n            if (!response) {\n                callback(new googleError_1.GoogleError('Undefined response in pagination method callback.'));\n                return;\n            }\n            const resources = response[resourceFieldName] || [];\n            const pageToken = response[responsePageTokenFieldName];\n            let nextPageRequest = null;\n            if (pageToken) {\n                nextPageRequest = Object.assign({}, request);\n                nextPageRequest[requestPageTokenFieldName] = pageToken;\n            }\n            callback(err, resources, nextPageRequest, response);\n        };\n    }\n    /**\n     * Adds a special ability to understand pagination-specific fields to the existing gRPC call.\n     * The original gRPC call just calls callback(err, result).\n     * The wrapped one will call callback(err, resources, nextPageRequest, rawResponse) instead.\n     *\n     * @param func gRPC call (normally, a service stub call). The gRPC call is expected to accept four parameters:\n     * request, metadata, call options, and callback.\n     */\n    wrap(func) {\n        // eslint-disable-next-line @typescript-eslint/no-this-alias\n        const self = this;\n        return function wrappedCall(argument, metadata, options, callback) {\n            return func(argument, metadata, options, self.generateParseResponseCallback(argument, callback));\n        };\n    }\n    /**\n     * Makes it possible to use both callback-based and promise-based calls.\n     * Returns an OngoingCall or OngoingCallPromise object.\n     * Regardless of which one is returned, it always has a `.callback` to call.\n     *\n     * @param settings Call settings. Can only be used to replace Promise with another promise implementation.\n     * @param [callback] Callback to be called, if any.\n     */\n    init(callback) {\n        if (callback) {\n            return new call_1.OngoingCall(callback);\n        }\n        return new call_1.OngoingCallPromise();\n    }\n    /**\n     * Implements auto-pagination logic.\n     *\n     * @param apiCall A function that performs gRPC request and calls its callback with a response or an error.\n     * It's supposed to be a gRPC service stub function wrapped into several layers of wrappers that make it\n     * accept just two parameters: (request, callback).\n     * @param request A request object that came from the user.\n     * @param settings Call settings. We are interested in `maxResults` and `autoPaginate` (they are optional).\n     * @param ongoingCall An instance of OngoingCall or OngoingCallPromise that can be used for call cancellation,\n     * and is used to return results to the user.\n     */\n    call(apiCall, request, settings, ongoingCall) {\n        request = Object.assign({}, request);\n        if (!settings.autoPaginate) {\n            // they don't want auto-pagination this time - okay, just call once\n            ongoingCall.call(apiCall, request);\n            return;\n        }\n        if (request.pageSize && settings.autoPaginate) {\n            (0, warnings_1.warn)('autoPaginate true', 'Providing a pageSize without setting autoPaginate to false will still return all results. See https://github.com/googleapis/gax-nodejs/blob/main/client-libraries.md#auto-pagination for more information on how to configure manual paging', 'AutopaginateTrueWarning');\n        }\n        const maxResults = settings.maxResults || -1;\n        const resourceCollector = new resourceCollector_1.ResourceCollector(apiCall, maxResults);\n        resourceCollector.processAllPages(request).then(resources => ongoingCall.callback(null, resources), err => ongoingCall.callback(err));\n    }\n    fail(ongoingCall, err) {\n        ongoingCall.callback(err);\n    }\n    result(ongoingCall) {\n        return ongoingCall.promise;\n    }\n}\nexports.PagedApiCaller = PagedApiCaller;\n//# sourceMappingURL=pagedApiCaller.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/google-gax/build/src/paginationCalls/pagedApiCaller.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/google-gax/build/src/paginationCalls/resourceCollector.js":
/*!********************************************************************************!*\
  !*** ./node_modules/google-gax/build/src/paginationCalls/resourceCollector.js ***!
  \********************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";
eval("\n/**\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.ResourceCollector = void 0;\n/**\n * ResourceCollector class implements asynchronous logic of calling the API call that supports pagination,\n * page by page, collecting all resources (up to `maxResults`) in the array.\n *\n * Usage:\n *   const resourceCollector = new ResourceCollector(apiCall, maxResults); // -1 for unlimited\n *   resourceCollector.processAllPages(request).then(resources => ...);\n */\nclass ResourceCollector {\n    apiCall;\n    resources;\n    maxResults;\n    resolveCallback;\n    rejectCallback;\n    constructor(apiCall, maxResults = -1) {\n        this.apiCall = apiCall;\n        this.resources = [];\n        this.maxResults = maxResults;\n    }\n    callback(err, resources, nextPageRequest) {\n        if (err) {\n            // Something went wrong with this request - failing everything\n            this.rejectCallback(err);\n            return;\n        }\n        // Process one page\n        for (const resource of resources) {\n            this.resources.push(resource);\n            if (this.resources.length === this.maxResults) {\n                nextPageRequest = null;\n                break;\n            }\n        }\n        // All done?\n        if (!nextPageRequest) {\n            this.resolveCallback(this.resources);\n            return;\n        }\n        // Schedule the next call\n        const callback = (...args) => this.callback(...args);\n        setImmediate(this.apiCall, nextPageRequest, callback);\n    }\n    processAllPages(firstRequest) {\n        return new Promise((resolve, reject) => {\n            this.resolveCallback = resolve;\n            this.rejectCallback = reject;\n            // Schedule the first call\n            const callback = (...args) => this.callback(...args);\n            setImmediate(this.apiCall, firstRequest, callback);\n        });\n    }\n}\nexports.ResourceCollector = ResourceCollector;\n//# sourceMappingURL=resourceCollector.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvZ29vZ2xlLWdheC9idWlsZC9zcmMvcGFnaW5hdGlvbkNhbGxzL3Jlc291cmNlQ29sbGVjdG9yLmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsOENBQTZDLEVBQUUsYUFBYSxFQUFDO0FBQzdELHlCQUF5QjtBQUN6QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsMkVBQTJFO0FBQzNFO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQSx5QkFBeUI7QUFDekIiLCJzb3VyY2VzIjpbIi9Vc2Vycy9iYWcteW9zZWIvRGVza3RvcC/hhJHhhanhhIfhhbXhhIvhhaEvaGFja2F0aG9uX3RlYW0vbXktYXBwL25vZGVfbW9kdWxlcy9nb29nbGUtZ2F4L2J1aWxkL3NyYy9wYWdpbmF0aW9uQ2FsbHMvcmVzb3VyY2VDb2xsZWN0b3IuanMiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG4vKipcbiAqIENvcHlyaWdodCAyMDIwIEdvb2dsZSBMTENcbiAqXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4gKlxuICogICAgICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbiAqXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuICovXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLlJlc291cmNlQ29sbGVjdG9yID0gdm9pZCAwO1xuLyoqXG4gKiBSZXNvdXJjZUNvbGxlY3RvciBjbGFzcyBpbXBsZW1lbnRzIGFzeW5jaHJvbm91cyBsb2dpYyBvZiBjYWxsaW5nIHRoZSBBUEkgY2FsbCB0aGF0IHN1cHBvcnRzIHBhZ2luYXRpb24sXG4gKiBwYWdlIGJ5IHBhZ2UsIGNvbGxlY3RpbmcgYWxsIHJlc291cmNlcyAodXAgdG8gYG1heFJlc3VsdHNgKSBpbiB0aGUgYXJyYXkuXG4gKlxuICogVXNhZ2U6XG4gKiAgIGNvbnN0IHJlc291cmNlQ29sbGVjdG9yID0gbmV3IFJlc291cmNlQ29sbGVjdG9yKGFwaUNhbGwsIG1heFJlc3VsdHMpOyAvLyAtMSBmb3IgdW5saW1pdGVkXG4gKiAgIHJlc291cmNlQ29sbGVjdG9yLnByb2Nlc3NBbGxQYWdlcyhyZXF1ZXN0KS50aGVuKHJlc291cmNlcyA9PiAuLi4pO1xuICovXG5jbGFzcyBSZXNvdXJjZUNvbGxlY3RvciB7XG4gICAgYXBpQ2FsbDtcbiAgICByZXNvdXJjZXM7XG4gICAgbWF4UmVzdWx0cztcbiAgICByZXNvbHZlQ2FsbGJhY2s7XG4gICAgcmVqZWN0Q2FsbGJhY2s7XG4gICAgY29uc3RydWN0b3IoYXBpQ2FsbCwgbWF4UmVzdWx0cyA9IC0xKSB7XG4gICAgICAgIHRoaXMuYXBpQ2FsbCA9IGFwaUNhbGw7XG4gICAgICAgIHRoaXMucmVzb3VyY2VzID0gW107XG4gICAgICAgIHRoaXMubWF4UmVzdWx0cyA9IG1heFJlc3VsdHM7XG4gICAgfVxuICAgIGNhbGxiYWNrKGVyciwgcmVzb3VyY2VzLCBuZXh0UGFnZVJlcXVlc3QpIHtcbiAgICAgICAgaWYgKGVycikge1xuICAgICAgICAgICAgLy8gU29tZXRoaW5nIHdlbnQgd3Jvbmcgd2l0aCB0aGlzIHJlcXVlc3QgLSBmYWlsaW5nIGV2ZXJ5dGhpbmdcbiAgICAgICAgICAgIHRoaXMucmVqZWN0Q2FsbGJhY2soZXJyKTtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICAvLyBQcm9jZXNzIG9uZSBwYWdlXG4gICAgICAgIGZvciAoY29uc3QgcmVzb3VyY2Ugb2YgcmVzb3VyY2VzKSB7XG4gICAgICAgICAgICB0aGlzLnJlc291cmNlcy5wdXNoKHJlc291cmNlKTtcbiAgICAgICAgICAgIGlmICh0aGlzLnJlc291cmNlcy5sZW5ndGggPT09IHRoaXMubWF4UmVzdWx0cykge1xuICAgICAgICAgICAgICAgIG5leHRQYWdlUmVxdWVzdCA9IG51bGw7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgLy8gQWxsIGRvbmU/XG4gICAgICAgIGlmICghbmV4dFBhZ2VSZXF1ZXN0KSB7XG4gICAgICAgICAgICB0aGlzLnJlc29sdmVDYWxsYmFjayh0aGlzLnJlc291cmNlcyk7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgLy8gU2NoZWR1bGUgdGhlIG5leHQgY2FsbFxuICAgICAgICBjb25zdCBjYWxsYmFjayA9ICguLi5hcmdzKSA9PiB0aGlzLmNhbGxiYWNrKC4uLmFyZ3MpO1xuICAgICAgICBzZXRJbW1lZGlhdGUodGhpcy5hcGlDYWxsLCBuZXh0UGFnZVJlcXVlc3QsIGNhbGxiYWNrKTtcbiAgICB9XG4gICAgcHJvY2Vzc0FsbFBhZ2VzKGZpcnN0UmVxdWVzdCkge1xuICAgICAgICByZXR1cm4gbmV3IFByb21pc2UoKHJlc29sdmUsIHJlamVjdCkgPT4ge1xuICAgICAgICAgICAgdGhpcy5yZXNvbHZlQ2FsbGJhY2sgPSByZXNvbHZlO1xuICAgICAgICAgICAgdGhpcy5yZWplY3RDYWxsYmFjayA9IHJlamVjdDtcbiAgICAgICAgICAgIC8vIFNjaGVkdWxlIHRoZSBmaXJzdCBjYWxsXG4gICAgICAgICAgICBjb25zdCBjYWxsYmFjayA9ICguLi5hcmdzKSA9PiB0aGlzLmNhbGxiYWNrKC4uLmFyZ3MpO1xuICAgICAgICAgICAgc2V0SW1tZWRpYXRlKHRoaXMuYXBpQ2FsbCwgZmlyc3RSZXF1ZXN0LCBjYWxsYmFjayk7XG4gICAgICAgIH0pO1xuICAgIH1cbn1cbmV4cG9ydHMuUmVzb3VyY2VDb2xsZWN0b3IgPSBSZXNvdXJjZUNvbGxlY3Rvcjtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXJlc291cmNlQ29sbGVjdG9yLmpzLm1hcCJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/google-gax/build/src/paginationCalls/resourceCollector.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/google-gax/build/src/pathTemplate.js":
/*!***********************************************************!*\
  !*** ./node_modules/google-gax/build/src/pathTemplate.js ***!
  \***********************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";
eval("\n/**\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.PathTemplate = void 0;\nclass PathTemplate {\n    data;\n    bindings = {};\n    segments;\n    size;\n    /**\n     * @param {String} data the of the template\n     *\n     * @constructor\n     */\n    constructor(data) {\n        this.data = data;\n        this.segments = this.parsePathTemplate(data);\n        this.size = this.segments.length;\n    }\n    /**\n     * Matches a fully-qualified path template string.\n     *\n     * @param {String} path a fully-qualified path template string\n     * @return {Object} contains const names matched to binding values\n     * @throws {TypeError} if path can't be matched to this template\n     */\n    match(path) {\n        let pathSegments = path.split('/');\n        const bindings = {};\n        if (pathSegments.length !== this.segments.length) {\n            // if the path contains a wildcard, then the length may differ by 1.\n            if (!this.data.includes('**')) {\n                throw new TypeError(`This path ${path} does not match path template ${this.data}, the number of parameters is not same.`);\n            }\n            else if (pathSegments.length !== this.segments.length + 1) {\n                throw new TypeError(`This path ${path} does not match path template ${this.data}, the number of parameters is not same with one wildcard.`);\n            }\n        }\n        for (let index = 0; index < this.segments.length && pathSegments.length > 0; index++) {\n            if (this.segments[index] !== pathSegments[0]) {\n                if (!this.segments[index].includes('*')) {\n                    throw new TypeError(`segment does not match, ${this.segments[index]} and  ${pathSegments[index]}.`);\n                }\n                else {\n                    let segment = this.segments[index];\n                    const matches = segment.match(/\\{[$0-9a-zA-Z_]+=.*?\\}/g);\n                    if (!matches) {\n                        throw new Error(`Error processing path template segment ${segment}`);\n                    }\n                    const variables = matches.map(str => str.replace(/^\\{/, '').replace(/=.*/, ''));\n                    if (segment.includes('**')) {\n                        bindings[variables[0]] = pathSegments[0] + '/' + pathSegments[1];\n                        pathSegments = pathSegments.slice(2);\n                    }\n                    else {\n                        // atomic resource\n                        if (variables.length === 1) {\n                            bindings[variables[0]] = pathSegments[0];\n                        }\n                        else {\n                            // non-slash resource\n                            // segment: {blurb_id=*}.{legacy_user=*} to match pathSegments: ['bar.user2']\n                            // split the match pathSegments[0] -> value: ['bar', 'user2']\n                            // compare the length of two arrays, and compare array items\n                            const value = pathSegments[0].split(/[-_.~]/);\n                            if (value.length !== variables.length) {\n                                throw new Error(`segment ${segment} does not match ${pathSegments[0]}`);\n                            }\n                            for (const v of variables) {\n                                bindings[v] = value[0];\n                                segment = segment.replace(`{${v}=*}`, `${value[0]}`);\n                                value.shift();\n                            }\n                            // segment: {blurb_id=*}.{legacy_user=*} matching pathSegments: ['bar~user2'] should fail\n                            if (segment !== pathSegments[0]) {\n                                throw new TypeError(`non slash resource pattern ${this.segments[index]} and ${pathSegments[0]} should have same separator`);\n                            }\n                        }\n                        pathSegments.shift();\n                    }\n                }\n            }\n            else {\n                pathSegments.shift();\n            }\n        }\n        return bindings;\n    }\n    /**\n     * Renders a path template using the provided bindings.\n     *\n     * @param {Object} bindings a mapping of const names to binding strings\n     * @return {String} a rendered representation of the path template\n     * @throws {TypeError} if a key is missing, or if a sub-template cannot be\n     *   parsed\n     */\n    render(bindings) {\n        if (Object.keys(bindings).length !== Object.keys(this.bindings).length) {\n            throw new TypeError(`The number of variables ${Object.keys(bindings).length} does not match the number of needed variables ${Object.keys(this.bindings).length}`);\n        }\n        let path = this.inspect();\n        for (const key of Object.keys(bindings)) {\n            const b = bindings[key].toString();\n            if (!this.bindings[key]) {\n                throw new TypeError(`render fails for not matching ${bindings[key]}`);\n            }\n            const variable = this.bindings[key];\n            if (variable === '*') {\n                if (!b.match(/[^/{}]+/)) {\n                    throw new TypeError(`render fails for not matching ${b}`);\n                }\n                path = path.replace(`{${key}=*}`, `${b}`);\n            }\n            else if (variable === '**') {\n                if (!b.match(/[^{}]+/)) {\n                    throw new TypeError(`render fails for not matching ${b}`);\n                }\n                path = path.replace(`{${key}=**}`, `${b}`);\n            }\n        }\n        return path;\n    }\n    /**\n     * Renders the path template.\n     *\n     * @return {string} contains const names matched to binding values\n     */\n    inspect() {\n        return this.segments.join('/');\n    }\n    /**\n     * Parse the path template.\n     *\n     * @return {string[]} return segments of the input path.\n     * For example: 'buckets/{hello}'' will give back ['buckets', {hello=*}]\n     */\n    parsePathTemplate(data) {\n        const pathSegments = splitPathTemplate(data);\n        let index = 0;\n        let wildCardCount = 0;\n        const segments = [];\n        let matches;\n        pathSegments.forEach(segment => {\n            // * or ** -> segments.push('{$0=*}');\n            //         -> bindings['$0'] = '*'\n            if (segment === '*' || segment === '**') {\n                this.bindings[`$${index}`] = segment;\n                segments.push(`{$${index}=${segment}}`);\n                index = index + 1;\n                if (segment === '**') {\n                    ++wildCardCount;\n                }\n            }\n            else if ((matches = segment.match(/\\{[0-9a-zA-Z-.~_]+(?:=.*?)?\\}/g))) {\n                for (const subsegment of matches) {\n                    const pairMatch = subsegment.match(/^\\{([0-9a-zA-Z-.~_]+)(?:=(.*?))?\\}$/);\n                    if (!pairMatch) {\n                        throw new Error(`Cannot process path template segment ${subsegment}`);\n                    }\n                    const key = pairMatch[1];\n                    let value = pairMatch[2];\n                    if (!value) {\n                        value = '*';\n                        segment = segment.replace(key, key + '=*');\n                        this.bindings[key] = value;\n                    }\n                    else if (value === '*') {\n                        this.bindings[key] = value;\n                    }\n                    else if (value === '**') {\n                        ++wildCardCount;\n                        this.bindings[key] = value;\n                    }\n                }\n                segments.push(segment);\n            }\n            else if (segment.match(/[0-9a-zA-Z-.~_]+/)) {\n                segments.push(segment);\n            }\n        });\n        if (wildCardCount > 1) {\n            throw new TypeError('Can not have more than one wildcard.');\n        }\n        return segments;\n    }\n}\nexports.PathTemplate = PathTemplate;\n/**\n * Split the path template by `/`.\n * It can not be simply splitted by `/` because there might be `/` in the segments.\n * For example: 'a/b/{a=hello/world}' we do not want to break the brackets pair\n * so above path will be splitted as ['a', 'b', '{a=hello/world}']\n */\nfunction splitPathTemplate(data) {\n    let left = 0;\n    let right = 0;\n    let bracketCount = 0;\n    const segments = [];\n    while (right >= left && right < data.length) {\n        if (data.charAt(right) === '{') {\n            bracketCount = bracketCount + 1;\n        }\n        else if (data.charAt(right) === '}') {\n            bracketCount = bracketCount - 1;\n        }\n        else if (data.charAt(right) === '/') {\n            if (right === data.length - 1) {\n                throw new TypeError('Invalid path, it can not be ended by /');\n            }\n            if (bracketCount === 0) {\n                // complete bracket, to avoid the case a/b/**/*/{a=hello/world}\n                segments.push(data.substring(left, right));\n                left = right + 1;\n            }\n        }\n        if (right === data.length - 1) {\n            if (bracketCount !== 0) {\n                throw new TypeError('Brackets are invalid.');\n            }\n            segments.push(data.substring(left));\n        }\n        right = right + 1;\n    }\n    return segments;\n}\n//# sourceMappingURL=pathTemplate.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/google-gax/build/src/pathTemplate.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/google-gax/build/src/protosList.json":
/*!***********************************************************!*\
  !*** ./node_modules/google-gax/build/src/protosList.json ***!
  \***********************************************************/
/***/ ((module) => {

"use strict";
module.exports = /*#__PURE__*/JSON.parse('["google/api/annotations.proto","google/api/apikeys/v2/apikeys.proto","google/api/apikeys/v2/resources.proto","google/api/auth.proto","google/api/backend.proto","google/api/billing.proto","google/api/client.proto","google/api/cloudquotas/v1/cloudquotas.proto","google/api/cloudquotas/v1/resources.proto","google/api/config_change.proto","google/api/consumer.proto","google/api/context.proto","google/api/control.proto","google/api/distribution.proto","google/api/documentation.proto","google/api/endpoint.proto","google/api/error_reason.proto","google/api/expr/conformance/v1alpha1/conformance_service.proto","google/api/expr/v1alpha1/checked.proto","google/api/expr/v1alpha1/eval.proto","google/api/expr/v1alpha1/explain.proto","google/api/expr/v1alpha1/syntax.proto","google/api/expr/v1alpha1/value.proto","google/api/expr/v1beta1/decl.proto","google/api/expr/v1beta1/eval.proto","google/api/expr/v1beta1/expr.proto","google/api/expr/v1beta1/source.proto","google/api/expr/v1beta1/value.proto","google/api/field_behavior.proto","google/api/field_info.proto","google/api/http.proto","google/api/httpbody.proto","google/api/label.proto","google/api/launch_stage.proto","google/api/log.proto","google/api/logging.proto","google/api/metric.proto","google/api/monitored_resource.proto","google/api/monitoring.proto","google/api/policy.proto","google/api/quota.proto","google/api/resource.proto","google/api/routing.proto","google/api/service.proto","google/api/servicecontrol/v1/check_error.proto","google/api/servicecontrol/v1/distribution.proto","google/api/servicecontrol/v1/http_request.proto","google/api/servicecontrol/v1/log_entry.proto","google/api/servicecontrol/v1/metric_value.proto","google/api/servicecontrol/v1/operation.proto","google/api/servicecontrol/v1/quota_controller.proto","google/api/servicecontrol/v1/service_controller.proto","google/api/servicecontrol/v2/service_controller.proto","google/api/servicemanagement/v1/resources.proto","google/api/servicemanagement/v1/servicemanager.proto","google/api/serviceusage/v1/resources.proto","google/api/serviceusage/v1/serviceusage.proto","google/api/serviceusage/v1beta1/resources.proto","google/api/serviceusage/v1beta1/serviceusage.proto","google/api/source_info.proto","google/api/system_parameter.proto","google/api/usage.proto","google/api/visibility.proto","google/cloud/location/locations.proto","google/iam/v1/iam_policy.proto","google/iam/v1/logging/audit_data.proto","google/iam/v1/options.proto","google/iam/v1/policy.proto","google/logging/type/http_request.proto","google/logging/type/log_severity.proto","google/longrunning/operations.proto","google/monitoring/v3/alert.proto","google/monitoring/v3/alert_service.proto","google/monitoring/v3/common.proto","google/monitoring/v3/dropped_labels.proto","google/monitoring/v3/group.proto","google/monitoring/v3/group_service.proto","google/monitoring/v3/metric.proto","google/monitoring/v3/metric_service.proto","google/monitoring/v3/mutation_record.proto","google/monitoring/v3/notification.proto","google/monitoring/v3/notification_service.proto","google/monitoring/v3/query_service.proto","google/monitoring/v3/service.proto","google/monitoring/v3/service_service.proto","google/monitoring/v3/snooze.proto","google/monitoring/v3/snooze_service.proto","google/monitoring/v3/span_context.proto","google/monitoring/v3/uptime.proto","google/monitoring/v3/uptime_service.proto","google/protobuf/any.proto","google/protobuf/api.proto","google/protobuf/bridge/message_set.proto","google/protobuf/compiler/plugin.proto","google/protobuf/compiler/ruby/ruby_generated_code.proto","google/protobuf/compiler/ruby/ruby_generated_code_proto2.proto","google/protobuf/compiler/ruby/ruby_generated_code_proto2_import.proto","google/protobuf/compiler/ruby/ruby_generated_pkg_explicit.proto","google/protobuf/compiler/ruby/ruby_generated_pkg_explicit_legacy.proto","google/protobuf/compiler/ruby/ruby_generated_pkg_implicit.proto","google/protobuf/cpp_features.proto","google/protobuf/descriptor.proto","google/protobuf/duration.proto","google/protobuf/empty.proto","google/protobuf/field_mask.proto","google/protobuf/source_context.proto","google/protobuf/struct.proto","google/protobuf/timestamp.proto","google/protobuf/type.proto","google/protobuf/util/json_format.proto","google/protobuf/util/json_format_proto3.proto","google/protobuf/wrappers.proto","google/rpc/code.proto","google/rpc/context/attribute_context.proto","google/rpc/context/audit_context.proto","google/rpc/error_details.proto","google/rpc/http.proto","google/rpc/status.proto","google/type/calendar_period.proto","google/type/color.proto","google/type/date.proto","google/type/datetime.proto","google/type/dayofweek.proto","google/type/decimal.proto","google/type/expr.proto","google/type/fraction.proto","google/type/interval.proto","google/type/latlng.proto","google/type/localized_text.proto","google/type/money.proto","google/type/month.proto","google/type/phone_number.proto","google/type/postal_address.proto","google/type/quaternion.proto","google/type/timeofday.proto"]');

/***/ }),

/***/ "(rsc)/./node_modules/google-gax/build/src/routingHeader.js":
/*!************************************************************!*\
  !*** ./node_modules/google-gax/build/src/routingHeader.js ***!
  \************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";
eval("\n/**\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    var desc = Object.getOwnPropertyDescriptor(m, k);\n    if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n      desc = { enumerable: true, get: function() { return m[k]; } };\n    }\n    Object.defineProperty(o, k2, desc);\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {\n    Object.defineProperty(o, \"default\", { enumerable: true, value: v });\n}) : function(o, v) {\n    o[\"default\"] = v;\n});\nvar __importStar = (this && this.__importStar) || (function () {\n    var ownKeys = function(o) {\n        ownKeys = Object.getOwnPropertyNames || function (o) {\n            var ar = [];\n            for (var k in o) if (Object.prototype.hasOwnProperty.call(o, k)) ar[ar.length] = k;\n            return ar;\n        };\n        return ownKeys(o);\n    };\n    return function (mod) {\n        if (mod && mod.__esModule) return mod;\n        var result = {};\n        if (mod != null) for (var k = ownKeys(mod), i = 0; i < k.length; i++) if (k[i] !== \"default\") __createBinding(result, mod, k[i]);\n        __setModuleDefault(result, mod);\n        return result;\n    };\n})();\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.fromParams = fromParams;\nconst querystring = __importStar(__webpack_require__(/*! querystring */ \"querystring\"));\n/**\n * Helpers for constructing routing headers.\n *\n * These headers are used by Google infrastructure to determine how to route\n * requests, especially for services that are regional.\n *\n * Generally, these headers are specified as gRPC metadata.\n */\n/**\n * Constructs the routing header from the given params\n *\n * @param {Object} params - the request header parameters.\n * @return {string} the routing header value.\n */\nfunction fromParams(params) {\n    return querystring.stringify(params);\n}\n//# sourceMappingURL=routingHeader.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvZ29vZ2xlLWdheC9idWlsZC9zcmMvcm91dGluZ0hlYWRlci5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZUFBZSxvQ0FBb0M7QUFDbkQ7QUFDQTtBQUNBLENBQUM7QUFDRDtBQUNBO0FBQ0EsQ0FBQztBQUNEO0FBQ0EsMENBQTBDLDRCQUE0QjtBQUN0RSxDQUFDO0FBQ0Q7QUFDQSxDQUFDO0FBQ0Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsMkRBQTJELGNBQWM7QUFDekU7QUFDQTtBQUNBO0FBQ0EsQ0FBQztBQUNELDhDQUE2QyxFQUFFLGFBQWEsRUFBQztBQUM3RCxrQkFBa0I7QUFDbEIsaUNBQWlDLG1CQUFPLENBQUMsZ0NBQWE7QUFDdEQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFdBQVcsUUFBUTtBQUNuQixZQUFZLFFBQVE7QUFDcEI7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsInNvdXJjZXMiOlsiL1VzZXJzL2JhZy15b3NlYi9EZXNrdG9wL+GEkeGFqeGEh+GFteGEi+GFoS9oYWNrYXRob25fdGVhbS9teS1hcHAvbm9kZV9tb2R1bGVzL2dvb2dsZS1nYXgvYnVpbGQvc3JjL3JvdXRpbmdIZWFkZXIuanMiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG4vKipcbiAqIENvcHlyaWdodCAyMDIwIEdvb2dsZSBMTENcbiAqXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4gKlxuICogICAgICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbiAqXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuICovXG52YXIgX19jcmVhdGVCaW5kaW5nID0gKHRoaXMgJiYgdGhpcy5fX2NyZWF0ZUJpbmRpbmcpIHx8IChPYmplY3QuY3JlYXRlID8gKGZ1bmN0aW9uKG8sIG0sIGssIGsyKSB7XG4gICAgaWYgKGsyID09PSB1bmRlZmluZWQpIGsyID0gaztcbiAgICB2YXIgZGVzYyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IobSwgayk7XG4gICAgaWYgKCFkZXNjIHx8IChcImdldFwiIGluIGRlc2MgPyAhbS5fX2VzTW9kdWxlIDogZGVzYy53cml0YWJsZSB8fCBkZXNjLmNvbmZpZ3VyYWJsZSkpIHtcbiAgICAgIGRlc2MgPSB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZnVuY3Rpb24oKSB7IHJldHVybiBtW2tdOyB9IH07XG4gICAgfVxuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShvLCBrMiwgZGVzYyk7XG59KSA6IChmdW5jdGlvbihvLCBtLCBrLCBrMikge1xuICAgIGlmIChrMiA9PT0gdW5kZWZpbmVkKSBrMiA9IGs7XG4gICAgb1trMl0gPSBtW2tdO1xufSkpO1xudmFyIF9fc2V0TW9kdWxlRGVmYXVsdCA9ICh0aGlzICYmIHRoaXMuX19zZXRNb2R1bGVEZWZhdWx0KSB8fCAoT2JqZWN0LmNyZWF0ZSA/IChmdW5jdGlvbihvLCB2KSB7XG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KG8sIFwiZGVmYXVsdFwiLCB7IGVudW1lcmFibGU6IHRydWUsIHZhbHVlOiB2IH0pO1xufSkgOiBmdW5jdGlvbihvLCB2KSB7XG4gICAgb1tcImRlZmF1bHRcIl0gPSB2O1xufSk7XG52YXIgX19pbXBvcnRTdGFyID0gKHRoaXMgJiYgdGhpcy5fX2ltcG9ydFN0YXIpIHx8IChmdW5jdGlvbiAoKSB7XG4gICAgdmFyIG93bktleXMgPSBmdW5jdGlvbihvKSB7XG4gICAgICAgIG93bktleXMgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lcyB8fCBmdW5jdGlvbiAobykge1xuICAgICAgICAgICAgdmFyIGFyID0gW107XG4gICAgICAgICAgICBmb3IgKHZhciBrIGluIG8pIGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwobywgaykpIGFyW2FyLmxlbmd0aF0gPSBrO1xuICAgICAgICAgICAgcmV0dXJuIGFyO1xuICAgICAgICB9O1xuICAgICAgICByZXR1cm4gb3duS2V5cyhvKTtcbiAgICB9O1xuICAgIHJldHVybiBmdW5jdGlvbiAobW9kKSB7XG4gICAgICAgIGlmIChtb2QgJiYgbW9kLl9fZXNNb2R1bGUpIHJldHVybiBtb2Q7XG4gICAgICAgIHZhciByZXN1bHQgPSB7fTtcbiAgICAgICAgaWYgKG1vZCAhPSBudWxsKSBmb3IgKHZhciBrID0gb3duS2V5cyhtb2QpLCBpID0gMDsgaSA8IGsubGVuZ3RoOyBpKyspIGlmIChrW2ldICE9PSBcImRlZmF1bHRcIikgX19jcmVhdGVCaW5kaW5nKHJlc3VsdCwgbW9kLCBrW2ldKTtcbiAgICAgICAgX19zZXRNb2R1bGVEZWZhdWx0KHJlc3VsdCwgbW9kKTtcbiAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9O1xufSkoKTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuZnJvbVBhcmFtcyA9IGZyb21QYXJhbXM7XG5jb25zdCBxdWVyeXN0cmluZyA9IF9faW1wb3J0U3RhcihyZXF1aXJlKFwicXVlcnlzdHJpbmdcIikpO1xuLyoqXG4gKiBIZWxwZXJzIGZvciBjb25zdHJ1Y3Rpbmcgcm91dGluZyBoZWFkZXJzLlxuICpcbiAqIFRoZXNlIGhlYWRlcnMgYXJlIHVzZWQgYnkgR29vZ2xlIGluZnJhc3RydWN0dXJlIHRvIGRldGVybWluZSBob3cgdG8gcm91dGVcbiAqIHJlcXVlc3RzLCBlc3BlY2lhbGx5IGZvciBzZXJ2aWNlcyB0aGF0IGFyZSByZWdpb25hbC5cbiAqXG4gKiBHZW5lcmFsbHksIHRoZXNlIGhlYWRlcnMgYXJlIHNwZWNpZmllZCBhcyBnUlBDIG1ldGFkYXRhLlxuICovXG4vKipcbiAqIENvbnN0cnVjdHMgdGhlIHJvdXRpbmcgaGVhZGVyIGZyb20gdGhlIGdpdmVuIHBhcmFtc1xuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSBwYXJhbXMgLSB0aGUgcmVxdWVzdCBoZWFkZXIgcGFyYW1ldGVycy5cbiAqIEByZXR1cm4ge3N0cmluZ30gdGhlIHJvdXRpbmcgaGVhZGVyIHZhbHVlLlxuICovXG5mdW5jdGlvbiBmcm9tUGFyYW1zKHBhcmFtcykge1xuICAgIHJldHVybiBxdWVyeXN0cmluZy5zdHJpbmdpZnkocGFyYW1zKTtcbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXJvdXRpbmdIZWFkZXIuanMubWFwIl0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/google-gax/build/src/routingHeader.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/google-gax/build/src/status.js":
/*!*****************************************************!*\
  !*** ./node_modules/google-gax/build/src/status.js ***!
  \*****************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";
eval("\n/**\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.HttpCodeToRpcCodeMap = exports.Status = void 0;\nexports.rpcCodeFromHttpStatusCode = rpcCodeFromHttpStatusCode;\n// The following is a copy of the Status enum defined in @grpc/grpc-js,\n// src/constants.ts. We need to use some of these statuses here and there,\n// but we don't want to include the whole @grpc/grpc-js into the browser\n// bundle just to have this small enum.\nvar Status;\n(function (Status) {\n    Status[Status[\"OK\"] = 0] = \"OK\";\n    Status[Status[\"CANCELLED\"] = 1] = \"CANCELLED\";\n    Status[Status[\"UNKNOWN\"] = 2] = \"UNKNOWN\";\n    Status[Status[\"INVALID_ARGUMENT\"] = 3] = \"INVALID_ARGUMENT\";\n    Status[Status[\"DEADLINE_EXCEEDED\"] = 4] = \"DEADLINE_EXCEEDED\";\n    Status[Status[\"NOT_FOUND\"] = 5] = \"NOT_FOUND\";\n    Status[Status[\"ALREADY_EXISTS\"] = 6] = \"ALREADY_EXISTS\";\n    Status[Status[\"PERMISSION_DENIED\"] = 7] = \"PERMISSION_DENIED\";\n    Status[Status[\"RESOURCE_EXHAUSTED\"] = 8] = \"RESOURCE_EXHAUSTED\";\n    Status[Status[\"FAILED_PRECONDITION\"] = 9] = \"FAILED_PRECONDITION\";\n    Status[Status[\"ABORTED\"] = 10] = \"ABORTED\";\n    Status[Status[\"OUT_OF_RANGE\"] = 11] = \"OUT_OF_RANGE\";\n    Status[Status[\"UNIMPLEMENTED\"] = 12] = \"UNIMPLEMENTED\";\n    Status[Status[\"INTERNAL\"] = 13] = \"INTERNAL\";\n    Status[Status[\"UNAVAILABLE\"] = 14] = \"UNAVAILABLE\";\n    Status[Status[\"DATA_LOSS\"] = 15] = \"DATA_LOSS\";\n    Status[Status[\"UNAUTHENTICATED\"] = 16] = \"UNAUTHENTICATED\";\n})(Status || (exports.Status = Status = {}));\nexports.HttpCodeToRpcCodeMap = new Map([\n    [400, Status.INVALID_ARGUMENT],\n    [401, Status.UNAUTHENTICATED],\n    [403, Status.PERMISSION_DENIED],\n    [404, Status.NOT_FOUND],\n    [409, Status.ABORTED],\n    [416, Status.OUT_OF_RANGE],\n    [429, Status.RESOURCE_EXHAUSTED],\n    [499, Status.CANCELLED],\n    [501, Status.UNIMPLEMENTED],\n    [503, Status.UNAVAILABLE],\n    [504, Status.DEADLINE_EXCEEDED],\n]);\n// Maps HTTP status codes to gRPC status codes above.\nfunction rpcCodeFromHttpStatusCode(httpStatusCode) {\n    if (exports.HttpCodeToRpcCodeMap.has(httpStatusCode)) {\n        return exports.HttpCodeToRpcCodeMap.get(httpStatusCode);\n    }\n    // All 2xx\n    if (httpStatusCode >= 200 && httpStatusCode < 300) {\n        return Status.OK;\n    }\n    // All other 4xx\n    if (httpStatusCode >= 400 && httpStatusCode < 500) {\n        return Status.FAILED_PRECONDITION;\n    }\n    // All other 5xx\n    if (httpStatusCode >= 500 && httpStatusCode < 600) {\n        return Status.INTERNAL;\n    }\n    // Everything else\n    return Status.UNKNOWN;\n}\n//# sourceMappingURL=status.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvZ29vZ2xlLWdheC9idWlsZC9zcmMvc3RhdHVzLmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsOENBQTZDLEVBQUUsYUFBYSxFQUFDO0FBQzdELDRCQUE0QixHQUFHLGNBQWM7QUFDN0MsaUNBQWlDO0FBQ2pDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDLGFBQWEsY0FBYyxjQUFjO0FBQzFDLDRCQUE0QjtBQUM1QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJzb3VyY2VzIjpbIi9Vc2Vycy9iYWcteW9zZWIvRGVza3RvcC/hhJHhhanhhIfhhbXhhIvhhaEvaGFja2F0aG9uX3RlYW0vbXktYXBwL25vZGVfbW9kdWxlcy9nb29nbGUtZ2F4L2J1aWxkL3NyYy9zdGF0dXMuanMiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG4vKipcbiAqIENvcHlyaWdodCAyMDIwIEdvb2dsZSBMTENcbiAqXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4gKlxuICogICAgICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbiAqXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuICovXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLkh0dHBDb2RlVG9ScGNDb2RlTWFwID0gZXhwb3J0cy5TdGF0dXMgPSB2b2lkIDA7XG5leHBvcnRzLnJwY0NvZGVGcm9tSHR0cFN0YXR1c0NvZGUgPSBycGNDb2RlRnJvbUh0dHBTdGF0dXNDb2RlO1xuLy8gVGhlIGZvbGxvd2luZyBpcyBhIGNvcHkgb2YgdGhlIFN0YXR1cyBlbnVtIGRlZmluZWQgaW4gQGdycGMvZ3JwYy1qcyxcbi8vIHNyYy9jb25zdGFudHMudHMuIFdlIG5lZWQgdG8gdXNlIHNvbWUgb2YgdGhlc2Ugc3RhdHVzZXMgaGVyZSBhbmQgdGhlcmUsXG4vLyBidXQgd2UgZG9uJ3Qgd2FudCB0byBpbmNsdWRlIHRoZSB3aG9sZSBAZ3JwYy9ncnBjLWpzIGludG8gdGhlIGJyb3dzZXJcbi8vIGJ1bmRsZSBqdXN0IHRvIGhhdmUgdGhpcyBzbWFsbCBlbnVtLlxudmFyIFN0YXR1cztcbihmdW5jdGlvbiAoU3RhdHVzKSB7XG4gICAgU3RhdHVzW1N0YXR1c1tcIk9LXCJdID0gMF0gPSBcIk9LXCI7XG4gICAgU3RhdHVzW1N0YXR1c1tcIkNBTkNFTExFRFwiXSA9IDFdID0gXCJDQU5DRUxMRURcIjtcbiAgICBTdGF0dXNbU3RhdHVzW1wiVU5LTk9XTlwiXSA9IDJdID0gXCJVTktOT1dOXCI7XG4gICAgU3RhdHVzW1N0YXR1c1tcIklOVkFMSURfQVJHVU1FTlRcIl0gPSAzXSA9IFwiSU5WQUxJRF9BUkdVTUVOVFwiO1xuICAgIFN0YXR1c1tTdGF0dXNbXCJERUFETElORV9FWENFRURFRFwiXSA9IDRdID0gXCJERUFETElORV9FWENFRURFRFwiO1xuICAgIFN0YXR1c1tTdGF0dXNbXCJOT1RfRk9VTkRcIl0gPSA1XSA9IFwiTk9UX0ZPVU5EXCI7XG4gICAgU3RhdHVzW1N0YXR1c1tcIkFMUkVBRFlfRVhJU1RTXCJdID0gNl0gPSBcIkFMUkVBRFlfRVhJU1RTXCI7XG4gICAgU3RhdHVzW1N0YXR1c1tcIlBFUk1JU1NJT05fREVOSUVEXCJdID0gN10gPSBcIlBFUk1JU1NJT05fREVOSUVEXCI7XG4gICAgU3RhdHVzW1N0YXR1c1tcIlJFU09VUkNFX0VYSEFVU1RFRFwiXSA9IDhdID0gXCJSRVNPVVJDRV9FWEhBVVNURURcIjtcbiAgICBTdGF0dXNbU3RhdHVzW1wiRkFJTEVEX1BSRUNPTkRJVElPTlwiXSA9IDldID0gXCJGQUlMRURfUFJFQ09ORElUSU9OXCI7XG4gICAgU3RhdHVzW1N0YXR1c1tcIkFCT1JURURcIl0gPSAxMF0gPSBcIkFCT1JURURcIjtcbiAgICBTdGF0dXNbU3RhdHVzW1wiT1VUX09GX1JBTkdFXCJdID0gMTFdID0gXCJPVVRfT0ZfUkFOR0VcIjtcbiAgICBTdGF0dXNbU3RhdHVzW1wiVU5JTVBMRU1FTlRFRFwiXSA9IDEyXSA9IFwiVU5JTVBMRU1FTlRFRFwiO1xuICAgIFN0YXR1c1tTdGF0dXNbXCJJTlRFUk5BTFwiXSA9IDEzXSA9IFwiSU5URVJOQUxcIjtcbiAgICBTdGF0dXNbU3RhdHVzW1wiVU5BVkFJTEFCTEVcIl0gPSAxNF0gPSBcIlVOQVZBSUxBQkxFXCI7XG4gICAgU3RhdHVzW1N0YXR1c1tcIkRBVEFfTE9TU1wiXSA9IDE1XSA9IFwiREFUQV9MT1NTXCI7XG4gICAgU3RhdHVzW1N0YXR1c1tcIlVOQVVUSEVOVElDQVRFRFwiXSA9IDE2XSA9IFwiVU5BVVRIRU5USUNBVEVEXCI7XG59KShTdGF0dXMgfHwgKGV4cG9ydHMuU3RhdHVzID0gU3RhdHVzID0ge30pKTtcbmV4cG9ydHMuSHR0cENvZGVUb1JwY0NvZGVNYXAgPSBuZXcgTWFwKFtcbiAgICBbNDAwLCBTdGF0dXMuSU5WQUxJRF9BUkdVTUVOVF0sXG4gICAgWzQwMSwgU3RhdHVzLlVOQVVUSEVOVElDQVRFRF0sXG4gICAgWzQwMywgU3RhdHVzLlBFUk1JU1NJT05fREVOSUVEXSxcbiAgICBbNDA0LCBTdGF0dXMuTk9UX0ZPVU5EXSxcbiAgICBbNDA5LCBTdGF0dXMuQUJPUlRFRF0sXG4gICAgWzQxNiwgU3RhdHVzLk9VVF9PRl9SQU5HRV0sXG4gICAgWzQyOSwgU3RhdHVzLlJFU09VUkNFX0VYSEFVU1RFRF0sXG4gICAgWzQ5OSwgU3RhdHVzLkNBTkNFTExFRF0sXG4gICAgWzUwMSwgU3RhdHVzLlVOSU1QTEVNRU5URURdLFxuICAgIFs1MDMsIFN0YXR1cy5VTkFWQUlMQUJMRV0sXG4gICAgWzUwNCwgU3RhdHVzLkRFQURMSU5FX0VYQ0VFREVEXSxcbl0pO1xuLy8gTWFwcyBIVFRQIHN0YXR1cyBjb2RlcyB0byBnUlBDIHN0YXR1cyBjb2RlcyBhYm92ZS5cbmZ1bmN0aW9uIHJwY0NvZGVGcm9tSHR0cFN0YXR1c0NvZGUoaHR0cFN0YXR1c0NvZGUpIHtcbiAgICBpZiAoZXhwb3J0cy5IdHRwQ29kZVRvUnBjQ29kZU1hcC5oYXMoaHR0cFN0YXR1c0NvZGUpKSB7XG4gICAgICAgIHJldHVybiBleHBvcnRzLkh0dHBDb2RlVG9ScGNDb2RlTWFwLmdldChodHRwU3RhdHVzQ29kZSk7XG4gICAgfVxuICAgIC8vIEFsbCAyeHhcbiAgICBpZiAoaHR0cFN0YXR1c0NvZGUgPj0gMjAwICYmIGh0dHBTdGF0dXNDb2RlIDwgMzAwKSB7XG4gICAgICAgIHJldHVybiBTdGF0dXMuT0s7XG4gICAgfVxuICAgIC8vIEFsbCBvdGhlciA0eHhcbiAgICBpZiAoaHR0cFN0YXR1c0NvZGUgPj0gNDAwICYmIGh0dHBTdGF0dXNDb2RlIDwgNTAwKSB7XG4gICAgICAgIHJldHVybiBTdGF0dXMuRkFJTEVEX1BSRUNPTkRJVElPTjtcbiAgICB9XG4gICAgLy8gQWxsIG90aGVyIDV4eFxuICAgIGlmIChodHRwU3RhdHVzQ29kZSA+PSA1MDAgJiYgaHR0cFN0YXR1c0NvZGUgPCA2MDApIHtcbiAgICAgICAgcmV0dXJuIFN0YXR1cy5JTlRFUk5BTDtcbiAgICB9XG4gICAgLy8gRXZlcnl0aGluZyBlbHNlXG4gICAgcmV0dXJuIFN0YXR1cy5VTktOT1dOO1xufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9c3RhdHVzLmpzLm1hcCJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/google-gax/build/src/status.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/google-gax/build/src/streamArrayParser.js":
/*!****************************************************************!*\
  !*** ./node_modules/google-gax/build/src/streamArrayParser.js ***!
  \****************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\n/**\n * Copyright 2021 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.StreamArrayParser = void 0;\nconst abort_controller_1 = __webpack_require__(/*! abort-controller */ \"(rsc)/./node_modules/abort-controller/dist/abort-controller.js\");\nconst stream_1 = __webpack_require__(/*! stream */ \"stream\");\nconst fallbackRest_1 = __webpack_require__(/*! ./fallbackRest */ \"(rsc)/./node_modules/google-gax/build/src/fallbackRest.js\");\nconst featureDetection_1 = __webpack_require__(/*! ./featureDetection */ \"(rsc)/./node_modules/google-gax/build/src/featureDetection.js\");\nclass StreamArrayParser extends stream_1.Transform {\n    _done;\n    _prevBlock;\n    _isInString;\n    _isSkipped;\n    _level;\n    rpc;\n    cancelController;\n    cancelSignal;\n    cancelRequested;\n    /**\n     * StreamArrayParser processes array of valid JSON objects in random chunks\n     * through readable stream, and produces a stream of plain Javascript objects\n     * where it converted from the corresponding protobuf message instance.\n     *\n     * The default JSON parser decodes the input stream under the\n     * following rules:\n     *  1. The stream represents a valid JSON array (must start with a \"[\" and\n     * close with the corresponding \"]\"). Each element of this array is assumed to\n     * be either an array or an object, and will be decoded as a JS object and\n     *    delivered.\n     *  2. All JSON elements in the buffer will be decoded and delivered in a\n     * stream.\n     *\n     * @private\n     * @constructor\n     * @param {protobuf.Method} rpc - the protobuf method produce array of JSON.\n     * @param {Object} options - the options pass to Transform Stream. See more\n     * details\n     * https://nodejs.org/api/stream.html#stream_new_stream_transform_options.\n     */\n    constructor(rpc, options) {\n        super(Object.assign({}, options, { readableObjectMode: true }));\n        this._done = false;\n        this._prevBlock = Buffer.from('');\n        this._isInString = false;\n        this._isSkipped = false;\n        this._level = 0;\n        this.rpc = rpc;\n        this.cancelController = (0, featureDetection_1.hasAbortController)()\n            ? new AbortController()\n            : new abort_controller_1.AbortController();\n        this.cancelSignal = this.cancelController.signal;\n        this.cancelRequested = false;\n    }\n    _transform(chunk, _, callback) {\n        let objectStart = 0;\n        let curIndex = 0;\n        if (this._level === 0 && curIndex === 0) {\n            if (String.fromCharCode(chunk[0]) !== '[') {\n                this.emit('error', new Error(`Internal Error: API service stream data must start with a '[' and close with the corresponding ']', but it start with ${String.fromCharCode(chunk[0])}`));\n            }\n            curIndex++;\n            this._level++;\n        }\n        while (curIndex < chunk.length) {\n            const curValue = String.fromCharCode(chunk[curIndex]);\n            if (!this._isSkipped) {\n                switch (curValue) {\n                    case '{':\n                        // Check if it's in string, we ignore the curly brace in string.\n                        // Otherwise the object level++.\n                        if (!this._isInString) {\n                            this._level++;\n                        }\n                        if (!this._isInString && this._level === 2) {\n                            objectStart = curIndex;\n                        }\n                        break;\n                    case '\"':\n                        // Flip the string status\n                        this._isInString = !this._isInString;\n                        break;\n                    case '}':\n                        // check if it's in string\n                        // if true, do nothing\n                        // if false and level = 0, push data\n                        if (!this._isInString) {\n                            this._level--;\n                        }\n                        if (!this._isInString && this._level === 1) {\n                            // find a object\n                            const objBuff = Buffer.concat([\n                                this._prevBlock,\n                                chunk.slice(objectStart, curIndex + 1),\n                            ]);\n                            try {\n                                // HTTP response.ok is true.\n                                const msgObj = (0, fallbackRest_1.decodeResponse)(this.rpc, true, objBuff);\n                                this.push(msgObj);\n                            }\n                            catch (err) {\n                                this.emit('error', err);\n                            }\n                            objectStart = curIndex + 1;\n                            this._prevBlock = Buffer.from('');\n                        }\n                        break;\n                    case ']':\n                        if (!this._isInString && this._level === 1) {\n                            this._done = true;\n                            this.push(null);\n                        }\n                        break;\n                    case '\\\\':\n                        // Escaping escape character.\n                        this._isSkipped = true;\n                        break;\n                    default:\n                        break;\n                }\n            }\n            else {\n                this._isSkipped = false;\n            }\n            curIndex++;\n        }\n        if (this._level > 1) {\n            this._prevBlock = Buffer.concat([\n                this._prevBlock,\n                chunk.slice(objectStart, curIndex),\n            ]);\n        }\n        callback();\n    }\n    _flush(callback) {\n        callback();\n    }\n    cancel() {\n        this._done = true;\n        this.cancelRequested = true;\n        this.cancelController.abort();\n        this.end();\n    }\n}\nexports.StreamArrayParser = StreamArrayParser;\n//# sourceMappingURL=streamArrayParser.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/google-gax/build/src/streamArrayParser.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/google-gax/build/src/streamingCalls/streamDescriptor.js":
/*!******************************************************************************!*\
  !*** ./node_modules/google-gax/build/src/streamingCalls/streamDescriptor.js ***!
  \******************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\n/**\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.StreamDescriptor = void 0;\nconst streamingApiCaller_1 = __webpack_require__(/*! ./streamingApiCaller */ \"(rsc)/./node_modules/google-gax/build/src/streamingCalls/streamingApiCaller.js\");\n/**\n * A descriptor for streaming calls.\n */\nclass StreamDescriptor {\n    type;\n    streaming; // needed for browser support\n    rest;\n    gaxStreamingRetries;\n    constructor(streamType, rest, gaxStreamingRetries) {\n        this.type = streamType;\n        this.streaming = true;\n        this.rest = rest;\n        this.gaxStreamingRetries = gaxStreamingRetries;\n    }\n    getApiCaller() {\n        // Right now retrying does not work with gRPC-streaming, because retryable\n        // assumes an API call returns an event emitter while gRPC-streaming methods\n        // return Stream.\n        return new streamingApiCaller_1.StreamingApiCaller(this);\n    }\n}\nexports.StreamDescriptor = StreamDescriptor;\n//# sourceMappingURL=streamDescriptor.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvZ29vZ2xlLWdheC9idWlsZC9zcmMvc3RyZWFtaW5nQ2FsbHMvc3RyZWFtRGVzY3JpcHRvci5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDhDQUE2QyxFQUFFLGFBQWEsRUFBQztBQUM3RCx3QkFBd0I7QUFDeEIsNkJBQTZCLG1CQUFPLENBQUMsNEdBQXNCO0FBQzNEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxlQUFlO0FBQ2Y7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esd0JBQXdCO0FBQ3hCIiwic291cmNlcyI6WyIvVXNlcnMvYmFnLXlvc2ViL0Rlc2t0b3Av4YSR4YWp4YSH4YW14YSL4YWhL2hhY2thdGhvbl90ZWFtL215LWFwcC9ub2RlX21vZHVsZXMvZ29vZ2xlLWdheC9idWlsZC9zcmMvc3RyZWFtaW5nQ2FsbHMvc3RyZWFtRGVzY3JpcHRvci5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbi8qKlxuICogQ29weXJpZ2h0IDIwMjAgR29vZ2xlIExMQ1xuICpcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbiAqXG4gKiAgICAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuICpcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4gKi9cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuU3RyZWFtRGVzY3JpcHRvciA9IHZvaWQgMDtcbmNvbnN0IHN0cmVhbWluZ0FwaUNhbGxlcl8xID0gcmVxdWlyZShcIi4vc3RyZWFtaW5nQXBpQ2FsbGVyXCIpO1xuLyoqXG4gKiBBIGRlc2NyaXB0b3IgZm9yIHN0cmVhbWluZyBjYWxscy5cbiAqL1xuY2xhc3MgU3RyZWFtRGVzY3JpcHRvciB7XG4gICAgdHlwZTtcbiAgICBzdHJlYW1pbmc7IC8vIG5lZWRlZCBmb3IgYnJvd3NlciBzdXBwb3J0XG4gICAgcmVzdDtcbiAgICBnYXhTdHJlYW1pbmdSZXRyaWVzO1xuICAgIGNvbnN0cnVjdG9yKHN0cmVhbVR5cGUsIHJlc3QsIGdheFN0cmVhbWluZ1JldHJpZXMpIHtcbiAgICAgICAgdGhpcy50eXBlID0gc3RyZWFtVHlwZTtcbiAgICAgICAgdGhpcy5zdHJlYW1pbmcgPSB0cnVlO1xuICAgICAgICB0aGlzLnJlc3QgPSByZXN0O1xuICAgICAgICB0aGlzLmdheFN0cmVhbWluZ1JldHJpZXMgPSBnYXhTdHJlYW1pbmdSZXRyaWVzO1xuICAgIH1cbiAgICBnZXRBcGlDYWxsZXIoKSB7XG4gICAgICAgIC8vIFJpZ2h0IG5vdyByZXRyeWluZyBkb2VzIG5vdCB3b3JrIHdpdGggZ1JQQy1zdHJlYW1pbmcsIGJlY2F1c2UgcmV0cnlhYmxlXG4gICAgICAgIC8vIGFzc3VtZXMgYW4gQVBJIGNhbGwgcmV0dXJucyBhbiBldmVudCBlbWl0dGVyIHdoaWxlIGdSUEMtc3RyZWFtaW5nIG1ldGhvZHNcbiAgICAgICAgLy8gcmV0dXJuIFN0cmVhbS5cbiAgICAgICAgcmV0dXJuIG5ldyBzdHJlYW1pbmdBcGlDYWxsZXJfMS5TdHJlYW1pbmdBcGlDYWxsZXIodGhpcyk7XG4gICAgfVxufVxuZXhwb3J0cy5TdHJlYW1EZXNjcmlwdG9yID0gU3RyZWFtRGVzY3JpcHRvcjtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXN0cmVhbURlc2NyaXB0b3IuanMubWFwIl0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/google-gax/build/src/streamingCalls/streamDescriptor.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/google-gax/build/src/streamingCalls/streaming.js":
/*!***********************************************************************!*\
  !*** ./node_modules/google-gax/build/src/streamingCalls/streaming.js ***!
  \***********************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\n/**\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.StreamProxy = exports.StreamType = void 0;\nconst gax_1 = __webpack_require__(/*! ../gax */ \"(rsc)/./node_modules/google-gax/build/src/gax.js\");\nconst googleError_1 = __webpack_require__(/*! ../googleError */ \"(rsc)/./node_modules/google-gax/build/src/googleError.js\");\nconst status_1 = __webpack_require__(/*! ../status */ \"(rsc)/./node_modules/google-gax/build/src/status.js\");\nconst stream_1 = __webpack_require__(/*! stream */ \"stream\");\n// eslint-disable-next-line @typescript-eslint/no-var-requires\nconst duplexify = __webpack_require__(/*! duplexify */ \"(rsc)/./node_modules/duplexify/index.js\");\n// eslint-disable-next-line @typescript-eslint/no-var-requires\nconst retryRequest = __webpack_require__(/*! retry-request */ \"(rsc)/./node_modules/retry-request/index.js\");\n/**\n * The type of gRPC streaming.\n * @enum {number}\n */\nvar StreamType;\n(function (StreamType) {\n    /** Client sends a single request, server streams responses. */\n    StreamType[StreamType[\"SERVER_STREAMING\"] = 1] = \"SERVER_STREAMING\";\n    /** Client streams requests, server returns a single response. */\n    StreamType[StreamType[\"CLIENT_STREAMING\"] = 2] = \"CLIENT_STREAMING\";\n    /** Both client and server stream objects. */\n    StreamType[StreamType[\"BIDI_STREAMING\"] = 3] = \"BIDI_STREAMING\";\n})(StreamType || (exports.StreamType = StreamType = {}));\n// In retry-request, you could pass parameters to request using the requestOpts parameter\n// when we called retry-request from gax, we always passed null\n// passing null here removes an unnecessary parameter from this implementation\nconst requestOps = null;\nclass StreamProxy extends duplexify {\n    type;\n    _callback;\n    _isCancelCalled;\n    stream;\n    _responseHasSent;\n    rest;\n    gaxServerStreamingRetries;\n    apiCall;\n    argument;\n    /**\n     * StreamProxy is a proxy to gRPC-streaming method.\n     *\n     * @private\n     * @constructor\n     * @param {StreamType} type - the type of gRPC stream.\n     * @param {ApiCallback} callback - the callback for further API call.\n     */\n    constructor(type, callback, rest, gaxServerStreamingRetries) {\n        super(undefined, undefined, {\n            objectMode: true,\n            readable: type !== StreamType.CLIENT_STREAMING,\n            writable: type !== StreamType.SERVER_STREAMING,\n        });\n        this.type = type;\n        this._callback = callback;\n        this._isCancelCalled = false;\n        this._responseHasSent = false;\n        this.rest = rest;\n        this.gaxServerStreamingRetries = gaxServerStreamingRetries;\n    }\n    shouldRetryRequest(error, retry) {\n        const e = googleError_1.GoogleError.parseGRPCStatusDetails(error);\n        let shouldRetry = this.defaultShouldRetry(e, retry);\n        if (retry.shouldRetryFn) {\n            shouldRetry = retry.shouldRetryFn(e);\n        }\n        return shouldRetry;\n    }\n    cancel() {\n        if (this.stream) {\n            this.stream.cancel();\n        }\n        else {\n            this._isCancelCalled = true;\n        }\n    }\n    /**\n     * Helper function to handle total timeout + max retry check for server streaming retries\n     * @param {number} deadline - the current retry deadline\n     * @param {number} maxRetries - maximum total number of retries\n     * @param {number} totalTimeoutMillis - total timeout in milliseconds used in timeout calculation\n     * @param {GoogleError} originalError - underlying error received by the stream\n     * @param {originalTimeout} originalTimeout - the original Timeout set in backoff settings\n     * @param {retries} retries - the number of retries the call has made so far\n     */\n    throwIfMaxRetriesOrTotalTimeoutExceeded(deadline, maxRetries, totalTimeoutMillis, originalError, originalTimeout, retries) {\n        const now = new Date();\n        const nowTime = now.getTime();\n        if (originalTimeout &&\n            (totalTimeoutMillis === 0 ||\n                totalTimeoutMillis < 0 ||\n                (deadline && nowTime >= deadline))) {\n            const error = new googleError_1.GoogleError(`Total timeout of API exceeded ${originalTimeout} milliseconds ${originalError ? `retrying error ${originalError} ` : ''} before any response was received.`);\n            error.code = status_1.Status.DEADLINE_EXCEEDED;\n            throw error;\n        }\n        if (maxRetries === 0) {\n            const error = originalError;\n            error.note = 'Max retries is set to zero.';\n            throw error;\n        }\n        if (retries && retries >= maxRetries) {\n            const error = new googleError_1.GoogleError('Exceeded maximum number of retries ' +\n                (originalError ? `retrying error ${originalError} ` : '') +\n                'before any response was received');\n            error.code = status_1.Status.DEADLINE_EXCEEDED;\n            throw error;\n        }\n    }\n    /**\n     * Forwards events from an API request stream to the user's stream.\n     * @param {Stream} stream - The API request stream.\n     */\n    eventForwardHelper(stream) {\n        const eventsToForward = ['metadata', 'response', 'status'];\n        eventsToForward.forEach(event => {\n            stream.on(event, this.emit.bind(this, event));\n        });\n    }\n    /**\n     * Helper function that emits a response on the stream after either a 'metadata'\n     * or a 'status' event - this helps streams to behave more like http consumers expect\n     * @param {Stream} stream - The API request stream.\n     */\n    statusMetadataHelper(stream) {\n        // gRPC is guaranteed emit the 'status' event but not 'metadata', and 'status' is the last event to emit.\n        // Emit the 'response' event if stream has no 'metadata' event.\n        // This avoids the stream swallowing the other events, such as 'end'.\n        stream.on('status', () => {\n            if (!this._responseHasSent) {\n                stream.emit('response', {\n                    code: 200,\n                    details: '',\n                    message: 'OK',\n                });\n            }\n        });\n        // We also want to supply the status data as 'response' event to support\n        // the behavior of google-cloud-node expects.\n        // see:\n        // https://github.com/GoogleCloudPlatform/google-cloud-node/pull/1775#issuecomment-259141029\n        // https://github.com/GoogleCloudPlatform/google-cloud-node/blob/116436fa789d8b0f7fc5100b19b424e3ec63e6bf/packages/common/src/grpc-service.js#L355\n        stream.on('metadata', metadata => {\n            // Create a response object with succeeds.\n            // TODO: unify this logic with the decoration of gRPC response when it's\n            // added. see: https://github.com/googleapis/gax-nodejs/issues/65\n            stream.emit('response', {\n                code: 200,\n                details: '',\n                message: 'OK',\n                metadata,\n            });\n            this._responseHasSent = true;\n        });\n    }\n    /**\n     * Forward events from an API request stream to the user's stream.\n     *  gRPC is guaranteed emit the 'status' event but not 'metadata'\n     * 'status' is the last event to emit; if 'metadata' emits, it will\n     * be the first event to emit. It should only emit once; if it emits\n     * more than once, unexpected side effects will occur.\n     *\n     * @param {Stream} stream - The API request stream.\n     * @param {RetryOptions} retry - Configures the exceptions upon which the\n     *   function should retry, and the parameters to the exponential backoff retry\n     *   algorithm.\n     */\n    forwardEvents(stream) {\n        this.eventForwardHelper(stream);\n        this.statusMetadataHelper(stream);\n        stream.on('error', error => {\n            googleError_1.GoogleError.parseGRPCStatusDetails(error);\n        });\n    }\n    /**\n     * Default mechanism for determining whether a streaming call should retry\n     * If a user passes in a \"shouldRetryFn\", this will not be used\n     * @param {GoogleError} errpr - The error we need to determine is retryable or not\n     * @param {RetryOptions} retry - Configures the exceptions upon which the\n     *   function should retry, and the parameters to the exponential backoff retry\n     *   algorithm.\n     */\n    defaultShouldRetry(error, retry) {\n        if ((retry.retryCodes.length > 0 &&\n            retry.retryCodes.indexOf(error.code) < 0) ||\n            retry.retryCodes.length === 0) {\n            return false;\n        }\n        return true;\n    }\n    /**\n     * Specifies the target stream.\n     * @param {ApiCall} apiCall - the API function to be called.\n     * @param {Object} argument - the argument to be passed to the apiCall.\n     * @param {RetryOptions} retry - Configures the exceptions upon which the\n     *   function should retry, and the parameters to the exponential backoff retry\n     *   algorithm.\n     */\n    setStream(apiCall, argument, retryRequestOptions = {}, retry) {\n        this.apiCall = apiCall;\n        this.argument = argument;\n        if (this.type === StreamType.SERVER_STREAMING) {\n            if (this.rest) {\n                const stream = apiCall(argument, this._callback);\n                this.stream = stream;\n                this.setReadable(stream);\n            }\n            else if (this.gaxServerStreamingRetries) {\n                const request = () => {\n                    if (this._isCancelCalled) {\n                        if (this.stream) {\n                            this.stream.cancel();\n                        }\n                        return;\n                    }\n                    const stream = apiCall(argument, this._callback);\n                    return stream;\n                };\n                const retryStream = this.newStreamingRetryRequest({ request, retry });\n                this.stream = retryStream;\n                this.eventForwardHelper(retryStream);\n                this.setReadable(retryStream);\n            }\n            else {\n                const retryStream = retryRequest(null, {\n                    objectMode: true,\n                    request: () => {\n                        if (this._isCancelCalled) {\n                            if (this.stream) {\n                                this.stream.cancel();\n                            }\n                            return;\n                        }\n                        const stream = apiCall(argument, this._callback);\n                        this.stream = stream;\n                        this.forwardEvents(stream);\n                        return stream;\n                    },\n                    retries: retryRequestOptions.retries,\n                    currentRetryAttempt: retryRequestOptions.currentRetryAttempt,\n                    noResponseRetries: retryRequestOptions.noResponseRetries,\n                    shouldRetryFn: retryRequestOptions.shouldRetryFn,\n                });\n                this.setReadable(retryStream);\n            }\n            return;\n        }\n        const stream = apiCall(argument, this._callback);\n        this.stream = stream;\n        this.forwardEvents(stream);\n        if (this.type === StreamType.CLIENT_STREAMING) {\n            this.setWritable(stream);\n        }\n        if (this.type === StreamType.BIDI_STREAMING) {\n            this.setReadable(stream);\n            this.setWritable(stream);\n        }\n        if (this._isCancelCalled && this.stream) {\n            this.stream.cancel();\n        }\n    }\n    /**\n     * Creates a new retry request stream -\n     *inner arrow function \"newMakeRequest\" handles retrying and resumption\n     * @param {streamingRetryRequestOptions} opts\n     *   {request} - the request to be made if the stream errors\n     *   {retry} - the retry options associated with the call\n     * @returns {CancellableStream} - the stream that handles retry logic\n     */\n    newStreamingRetryRequest(opts) {\n        // at this point, it would be unexpected if retry were undefined\n        // but if it is, provide a logical default so we don't run into trouble\n        const retry = opts.retry ?? {\n            retryCodes: [],\n            backoffSettings: (0, gax_1.createDefaultBackoffSettings)(),\n        };\n        let retries = 0;\n        const retryStream = new stream_1.PassThrough({\n            objectMode: true,\n        });\n        const totalTimeout = retry.backoffSettings.totalTimeoutMillis ?? undefined;\n        const maxRetries = retry.backoffSettings.maxRetries ?? undefined;\n        let timeout = retry.backoffSettings.initialRpcTimeoutMillis ?? undefined;\n        let now = new Date();\n        let deadline = 0;\n        if (totalTimeout) {\n            deadline = now.getTime() + totalTimeout;\n        }\n        const transientErrorHelper = (error, requestStream) => {\n            const e = googleError_1.GoogleError.parseGRPCStatusDetails(error);\n            e.note =\n                'Exception occurred in retry method that was ' +\n                    'not classified as transient';\n            // clean up the request stream and retryStreams, silently destroy it on the request stream\n            // but do raise it on destructin of the retryStream so the consumer can see it\n            requestStream.destroy();\n            retryStream.destroy(e);\n            return retryStream;\n        };\n        const newMakeRequest = (newopts) => {\n            let dataEnd = false;\n            let statusReceived = false;\n            let enteredError = false;\n            // make the request\n            const requestStream = newopts.request(requestOps);\n            retryStream.cancel = requestStream.cancel; // make sure the retryStream is also cancellable by the user\n            const eventsToForward = ['metadata', 'response', 'status'];\n            eventsToForward.forEach(event => {\n                requestStream.on(event, retryStream.emit.bind(retryStream, event));\n            });\n            this.statusMetadataHelper(requestStream);\n            // TODO - b/353262542 address buffer stuff\n            requestStream.on('data', (data) => {\n                retries = 0;\n                this.emit.bind(this, 'data')(data);\n            });\n            /* in retry-request, which previously handled retries,\n             * \"end\" could be emitted on a request stream before other gRPC events.\n             * To ensure it doesn't reach the consumer stream prematurely, retry-request piped\n             * two streams together (delayStream and retryStream)\n             * to ensure that \"end\" only emitted after a \"response\" event\n             *\n             * We are consciously NOT using pipeline or .pipe as part of similar logic here\n             * because we want more control over what happens during event handoff and we want to\n             * avoid the undesired behavior that can happen with error events\n             * if consumers in client libraries are also using pipes\n             *\n             * Since \"status\" is guaranteed to be the last event emitted by gRPC.\n             * If we have seen an \"end\" event, the dataEnd boolean will be true and we can safely\n             * end the stream.\n             *\n             * The \"statusReceived\" boolean covers the opposite case - that we receive the \"status\" event before\n             * a successful stream end event - this signals the .on('end') event handler that it's okay to end the stream\n             *\n             *\n             */\n            requestStream.on('status', () => {\n                statusReceived = true;\n                if (dataEnd) {\n                    retryStream.end();\n                }\n                return retryStream;\n            });\n            requestStream.on('end', () => {\n                if (!enteredError) {\n                    dataEnd = true;\n                    // in this case, we've already received \"status\"\n                    // which is the last event from gRPC, so it's cool to end the stream\n                    if (statusReceived) {\n                        retryStream.end();\n                    }\n                }\n                return retryStream;\n                // there is no else case because if enteredError\n                // is true, we will handle stream destruction as part of\n                // either retrying (where we don't want to end the stream)\n                // or as part of error handling, which will take care of stream destruction\n            });\n            requestStream.on('error', (error) => {\n                enteredError = true;\n                // type check for undefined instead of for truthiness in case maxRetries or timeout is equal to zero\n                if (typeof maxRetries !== undefined ||\n                    typeof totalTimeout !== undefined) {\n                    if (this.shouldRetryRequest(error, retry)) {\n                        if (maxRetries && totalTimeout) {\n                            const newError = new googleError_1.GoogleError('Cannot set both totalTimeoutMillis and maxRetries ' +\n                                'in backoffSettings.');\n                            newError.code = status_1.Status.INVALID_ARGUMENT;\n                            // clean up the request stream and retryStreams, silently destroy it on the request stream\n                            // but do raise it on destructin of the retryStream so the consumer can see it\n                            requestStream.destroy();\n                            retryStream.destroy(newError);\n                            return retryStream;\n                        }\n                        else {\n                            // check for exceeding timeout or max retries\n                            try {\n                                this.throwIfMaxRetriesOrTotalTimeoutExceeded(deadline, maxRetries, timeout, error, totalTimeout, retries);\n                            }\n                            catch (error) {\n                                const e = googleError_1.GoogleError.parseGRPCStatusDetails(error);\n                                // clean up the request stream and retryStreams, silently destroy it on the request stream\n                                // but do raise it on destruction of the retryStream so the consumer can see it\n                                requestStream.destroy();\n                                retryStream.destroy(e);\n                                return retryStream;\n                            }\n                            const delayMult = retry.backoffSettings.retryDelayMultiplier;\n                            const maxDelay = retry.backoffSettings.maxRetryDelayMillis;\n                            const timeoutMult = retry.backoffSettings.rpcTimeoutMultiplier;\n                            const maxTimeout = retry.backoffSettings.maxRpcTimeoutMillis;\n                            let delay = retry.backoffSettings.initialRetryDelayMillis;\n                            // calculate new deadlines\n                            const toSleep = Math.random() * delay;\n                            const calculateTimeoutAndResumptionFunction = () => {\n                                setTimeout(() => {\n                                    // only do timeout calculations if not using maxRetries\n                                    if (timeout) {\n                                        now = new Date();\n                                        delay = Math.min(delay * delayMult, maxDelay);\n                                        const timeoutCal = timeout && timeoutMult ? timeout * timeoutMult : 0;\n                                        const rpcTimeout = maxTimeout ? maxTimeout : 0;\n                                        const newDeadline = deadline ? deadline - now.getTime() : 0;\n                                        timeout = Math.min(timeoutCal, rpcTimeout, newDeadline);\n                                    }\n                                    retries++;\n                                    let retryArgument = this.argument;\n                                    // if resumption logic is passed, use it to determined the\n                                    // new argument for the new request made to the server\n                                    // otherwise, the original argument will be passed\n                                    if (retry.getResumptionRequestFn !== undefined) {\n                                        retryArgument = retry.getResumptionRequestFn(retryArgument);\n                                    }\n                                    const newRequest = () => {\n                                        if (this._isCancelCalled) {\n                                            if (this.stream) {\n                                                this.stream.cancel();\n                                            }\n                                            return;\n                                        }\n                                        const newStream = this.apiCall(retryArgument, this._callback);\n                                        return newStream;\n                                    };\n                                    opts.request = newRequest;\n                                    // make a request with the updated parameters\n                                    // based on the resumption strategy\n                                    return newMakeRequest(opts);\n                                }, toSleep);\n                            };\n                            return calculateTimeoutAndResumptionFunction();\n                        }\n                    }\n                    else {\n                        // non retryable error\n                        return transientErrorHelper(error, requestStream);\n                    }\n                }\n                else {\n                    // neither timeout nor maxRetries are defined, surface the error to the caller\n                    return transientErrorHelper(error, requestStream);\n                }\n            });\n            // return the stream if we didn't return it as\n            // part of an error state\n            return retryStream;\n        };\n        // this is the first make request call with the options the user passed in\n        return newMakeRequest(opts);\n    }\n}\nexports.StreamProxy = StreamProxy;\n//# sourceMappingURL=streaming.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvZ29vZ2xlLWdheC9idWlsZC9zcmMvc3RyZWFtaW5nQ2FsbHMvc3RyZWFtaW5nLmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsOENBQTZDLEVBQUUsYUFBYSxFQUFDO0FBQzdELG1CQUFtQixHQUFHLGtCQUFrQjtBQUN4QyxjQUFjLG1CQUFPLENBQUMsZ0VBQVE7QUFDOUIsc0JBQXNCLG1CQUFPLENBQUMsZ0ZBQWdCO0FBQzlDLGlCQUFpQixtQkFBTyxDQUFDLHNFQUFXO0FBQ3BDLGlCQUFpQixtQkFBTyxDQUFDLHNCQUFRO0FBQ2pDO0FBQ0Esa0JBQWtCLG1CQUFPLENBQUMsMERBQVc7QUFDckM7QUFDQSxxQkFBcUIsbUJBQU8sQ0FBQyxrRUFBZTtBQUM1QztBQUNBO0FBQ0EsVUFBVTtBQUNWO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLENBQUMsaUJBQWlCLGtCQUFrQixrQkFBa0I7QUFDdEQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxlQUFlLFlBQVk7QUFDM0IsZUFBZSxhQUFhO0FBQzVCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGVBQWUsUUFBUTtBQUN2QixlQUFlLFFBQVE7QUFDdkIsZUFBZSxRQUFRO0FBQ3ZCLGVBQWUsYUFBYTtBQUM1QixlQUFlLGlCQUFpQjtBQUNoQyxlQUFlLFNBQVM7QUFDeEI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHlGQUF5RixpQkFBaUIsZUFBZSxrQ0FBa0MsZUFBZSxRQUFRO0FBQ2xMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsbURBQW1ELGVBQWU7QUFDbEU7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxlQUFlLFFBQVE7QUFDdkI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBLGVBQWUsUUFBUTtBQUN2QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsaUJBQWlCO0FBQ2pCO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxhQUFhO0FBQ2I7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQSwyQ0FBMkM7QUFDM0MsNkRBQTZEO0FBQzdEO0FBQ0E7QUFDQSxlQUFlLFFBQVE7QUFDdkIsZUFBZSxjQUFjO0FBQzdCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQSxlQUFlLGFBQWE7QUFDNUIsZUFBZSxjQUFjO0FBQzdCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZUFBZSxTQUFTO0FBQ3hCLGVBQWUsUUFBUTtBQUN2QixlQUFlLGNBQWM7QUFDN0I7QUFDQTtBQUNBO0FBQ0EseURBQXlEO0FBQ3pEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esb0VBQW9FLGdCQUFnQjtBQUNwRjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxxQkFBcUI7QUFDckI7QUFDQTtBQUNBO0FBQ0E7QUFDQSxpQkFBaUI7QUFDakI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZUFBZSw4QkFBOEI7QUFDN0MsVUFBVSxTQUFTO0FBQ25CLFVBQVUsT0FBTztBQUNqQixpQkFBaUIsbUJBQW1CO0FBQ3BDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSx1REFBdUQ7QUFDdkQ7QUFDQTtBQUNBO0FBQ0EsYUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxhQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGFBQWE7QUFDYjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsYUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGlDQUFpQztBQUNqQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGFBQWE7QUFDYjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsbUJBQW1CO0FBQ25CIiwic291cmNlcyI6WyIvVXNlcnMvYmFnLXlvc2ViL0Rlc2t0b3Av4YSR4YWp4YSH4YW14YSL4YWhL2hhY2thdGhvbl90ZWFtL215LWFwcC9ub2RlX21vZHVsZXMvZ29vZ2xlLWdheC9idWlsZC9zcmMvc3RyZWFtaW5nQ2FsbHMvc3RyZWFtaW5nLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuLyoqXG4gKiBDb3B5cmlnaHQgMjAyMCBHb29nbGUgTExDXG4gKlxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuICpcbiAqICAgICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4gKlxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbiAqL1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5TdHJlYW1Qcm94eSA9IGV4cG9ydHMuU3RyZWFtVHlwZSA9IHZvaWQgMDtcbmNvbnN0IGdheF8xID0gcmVxdWlyZShcIi4uL2dheFwiKTtcbmNvbnN0IGdvb2dsZUVycm9yXzEgPSByZXF1aXJlKFwiLi4vZ29vZ2xlRXJyb3JcIik7XG5jb25zdCBzdGF0dXNfMSA9IHJlcXVpcmUoXCIuLi9zdGF0dXNcIik7XG5jb25zdCBzdHJlYW1fMSA9IHJlcXVpcmUoXCJzdHJlYW1cIik7XG4vLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L25vLXZhci1yZXF1aXJlc1xuY29uc3QgZHVwbGV4aWZ5ID0gcmVxdWlyZSgnZHVwbGV4aWZ5Jyk7XG4vLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L25vLXZhci1yZXF1aXJlc1xuY29uc3QgcmV0cnlSZXF1ZXN0ID0gcmVxdWlyZSgncmV0cnktcmVxdWVzdCcpO1xuLyoqXG4gKiBUaGUgdHlwZSBvZiBnUlBDIHN0cmVhbWluZy5cbiAqIEBlbnVtIHtudW1iZXJ9XG4gKi9cbnZhciBTdHJlYW1UeXBlO1xuKGZ1bmN0aW9uIChTdHJlYW1UeXBlKSB7XG4gICAgLyoqIENsaWVudCBzZW5kcyBhIHNpbmdsZSByZXF1ZXN0LCBzZXJ2ZXIgc3RyZWFtcyByZXNwb25zZXMuICovXG4gICAgU3RyZWFtVHlwZVtTdHJlYW1UeXBlW1wiU0VSVkVSX1NUUkVBTUlOR1wiXSA9IDFdID0gXCJTRVJWRVJfU1RSRUFNSU5HXCI7XG4gICAgLyoqIENsaWVudCBzdHJlYW1zIHJlcXVlc3RzLCBzZXJ2ZXIgcmV0dXJucyBhIHNpbmdsZSByZXNwb25zZS4gKi9cbiAgICBTdHJlYW1UeXBlW1N0cmVhbVR5cGVbXCJDTElFTlRfU1RSRUFNSU5HXCJdID0gMl0gPSBcIkNMSUVOVF9TVFJFQU1JTkdcIjtcbiAgICAvKiogQm90aCBjbGllbnQgYW5kIHNlcnZlciBzdHJlYW0gb2JqZWN0cy4gKi9cbiAgICBTdHJlYW1UeXBlW1N0cmVhbVR5cGVbXCJCSURJX1NUUkVBTUlOR1wiXSA9IDNdID0gXCJCSURJX1NUUkVBTUlOR1wiO1xufSkoU3RyZWFtVHlwZSB8fCAoZXhwb3J0cy5TdHJlYW1UeXBlID0gU3RyZWFtVHlwZSA9IHt9KSk7XG4vLyBJbiByZXRyeS1yZXF1ZXN0LCB5b3UgY291bGQgcGFzcyBwYXJhbWV0ZXJzIHRvIHJlcXVlc3QgdXNpbmcgdGhlIHJlcXVlc3RPcHRzIHBhcmFtZXRlclxuLy8gd2hlbiB3ZSBjYWxsZWQgcmV0cnktcmVxdWVzdCBmcm9tIGdheCwgd2UgYWx3YXlzIHBhc3NlZCBudWxsXG4vLyBwYXNzaW5nIG51bGwgaGVyZSByZW1vdmVzIGFuIHVubmVjZXNzYXJ5IHBhcmFtZXRlciBmcm9tIHRoaXMgaW1wbGVtZW50YXRpb25cbmNvbnN0IHJlcXVlc3RPcHMgPSBudWxsO1xuY2xhc3MgU3RyZWFtUHJveHkgZXh0ZW5kcyBkdXBsZXhpZnkge1xuICAgIHR5cGU7XG4gICAgX2NhbGxiYWNrO1xuICAgIF9pc0NhbmNlbENhbGxlZDtcbiAgICBzdHJlYW07XG4gICAgX3Jlc3BvbnNlSGFzU2VudDtcbiAgICByZXN0O1xuICAgIGdheFNlcnZlclN0cmVhbWluZ1JldHJpZXM7XG4gICAgYXBpQ2FsbDtcbiAgICBhcmd1bWVudDtcbiAgICAvKipcbiAgICAgKiBTdHJlYW1Qcm94eSBpcyBhIHByb3h5IHRvIGdSUEMtc3RyZWFtaW5nIG1ldGhvZC5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQGNvbnN0cnVjdG9yXG4gICAgICogQHBhcmFtIHtTdHJlYW1UeXBlfSB0eXBlIC0gdGhlIHR5cGUgb2YgZ1JQQyBzdHJlYW0uXG4gICAgICogQHBhcmFtIHtBcGlDYWxsYmFja30gY2FsbGJhY2sgLSB0aGUgY2FsbGJhY2sgZm9yIGZ1cnRoZXIgQVBJIGNhbGwuXG4gICAgICovXG4gICAgY29uc3RydWN0b3IodHlwZSwgY2FsbGJhY2ssIHJlc3QsIGdheFNlcnZlclN0cmVhbWluZ1JldHJpZXMpIHtcbiAgICAgICAgc3VwZXIodW5kZWZpbmVkLCB1bmRlZmluZWQsIHtcbiAgICAgICAgICAgIG9iamVjdE1vZGU6IHRydWUsXG4gICAgICAgICAgICByZWFkYWJsZTogdHlwZSAhPT0gU3RyZWFtVHlwZS5DTElFTlRfU1RSRUFNSU5HLFxuICAgICAgICAgICAgd3JpdGFibGU6IHR5cGUgIT09IFN0cmVhbVR5cGUuU0VSVkVSX1NUUkVBTUlORyxcbiAgICAgICAgfSk7XG4gICAgICAgIHRoaXMudHlwZSA9IHR5cGU7XG4gICAgICAgIHRoaXMuX2NhbGxiYWNrID0gY2FsbGJhY2s7XG4gICAgICAgIHRoaXMuX2lzQ2FuY2VsQ2FsbGVkID0gZmFsc2U7XG4gICAgICAgIHRoaXMuX3Jlc3BvbnNlSGFzU2VudCA9IGZhbHNlO1xuICAgICAgICB0aGlzLnJlc3QgPSByZXN0O1xuICAgICAgICB0aGlzLmdheFNlcnZlclN0cmVhbWluZ1JldHJpZXMgPSBnYXhTZXJ2ZXJTdHJlYW1pbmdSZXRyaWVzO1xuICAgIH1cbiAgICBzaG91bGRSZXRyeVJlcXVlc3QoZXJyb3IsIHJldHJ5KSB7XG4gICAgICAgIGNvbnN0IGUgPSBnb29nbGVFcnJvcl8xLkdvb2dsZUVycm9yLnBhcnNlR1JQQ1N0YXR1c0RldGFpbHMoZXJyb3IpO1xuICAgICAgICBsZXQgc2hvdWxkUmV0cnkgPSB0aGlzLmRlZmF1bHRTaG91bGRSZXRyeShlLCByZXRyeSk7XG4gICAgICAgIGlmIChyZXRyeS5zaG91bGRSZXRyeUZuKSB7XG4gICAgICAgICAgICBzaG91bGRSZXRyeSA9IHJldHJ5LnNob3VsZFJldHJ5Rm4oZSk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHNob3VsZFJldHJ5O1xuICAgIH1cbiAgICBjYW5jZWwoKSB7XG4gICAgICAgIGlmICh0aGlzLnN0cmVhbSkge1xuICAgICAgICAgICAgdGhpcy5zdHJlYW0uY2FuY2VsKCk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICB0aGlzLl9pc0NhbmNlbENhbGxlZCA9IHRydWU7XG4gICAgICAgIH1cbiAgICB9XG4gICAgLyoqXG4gICAgICogSGVscGVyIGZ1bmN0aW9uIHRvIGhhbmRsZSB0b3RhbCB0aW1lb3V0ICsgbWF4IHJldHJ5IGNoZWNrIGZvciBzZXJ2ZXIgc3RyZWFtaW5nIHJldHJpZXNcbiAgICAgKiBAcGFyYW0ge251bWJlcn0gZGVhZGxpbmUgLSB0aGUgY3VycmVudCByZXRyeSBkZWFkbGluZVxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBtYXhSZXRyaWVzIC0gbWF4aW11bSB0b3RhbCBudW1iZXIgb2YgcmV0cmllc1xuICAgICAqIEBwYXJhbSB7bnVtYmVyfSB0b3RhbFRpbWVvdXRNaWxsaXMgLSB0b3RhbCB0aW1lb3V0IGluIG1pbGxpc2Vjb25kcyB1c2VkIGluIHRpbWVvdXQgY2FsY3VsYXRpb25cbiAgICAgKiBAcGFyYW0ge0dvb2dsZUVycm9yfSBvcmlnaW5hbEVycm9yIC0gdW5kZXJseWluZyBlcnJvciByZWNlaXZlZCBieSB0aGUgc3RyZWFtXG4gICAgICogQHBhcmFtIHtvcmlnaW5hbFRpbWVvdXR9IG9yaWdpbmFsVGltZW91dCAtIHRoZSBvcmlnaW5hbCBUaW1lb3V0IHNldCBpbiBiYWNrb2ZmIHNldHRpbmdzXG4gICAgICogQHBhcmFtIHtyZXRyaWVzfSByZXRyaWVzIC0gdGhlIG51bWJlciBvZiByZXRyaWVzIHRoZSBjYWxsIGhhcyBtYWRlIHNvIGZhclxuICAgICAqL1xuICAgIHRocm93SWZNYXhSZXRyaWVzT3JUb3RhbFRpbWVvdXRFeGNlZWRlZChkZWFkbGluZSwgbWF4UmV0cmllcywgdG90YWxUaW1lb3V0TWlsbGlzLCBvcmlnaW5hbEVycm9yLCBvcmlnaW5hbFRpbWVvdXQsIHJldHJpZXMpIHtcbiAgICAgICAgY29uc3Qgbm93ID0gbmV3IERhdGUoKTtcbiAgICAgICAgY29uc3Qgbm93VGltZSA9IG5vdy5nZXRUaW1lKCk7XG4gICAgICAgIGlmIChvcmlnaW5hbFRpbWVvdXQgJiZcbiAgICAgICAgICAgICh0b3RhbFRpbWVvdXRNaWxsaXMgPT09IDAgfHxcbiAgICAgICAgICAgICAgICB0b3RhbFRpbWVvdXRNaWxsaXMgPCAwIHx8XG4gICAgICAgICAgICAgICAgKGRlYWRsaW5lICYmIG5vd1RpbWUgPj0gZGVhZGxpbmUpKSkge1xuICAgICAgICAgICAgY29uc3QgZXJyb3IgPSBuZXcgZ29vZ2xlRXJyb3JfMS5Hb29nbGVFcnJvcihgVG90YWwgdGltZW91dCBvZiBBUEkgZXhjZWVkZWQgJHtvcmlnaW5hbFRpbWVvdXR9IG1pbGxpc2Vjb25kcyAke29yaWdpbmFsRXJyb3IgPyBgcmV0cnlpbmcgZXJyb3IgJHtvcmlnaW5hbEVycm9yfSBgIDogJyd9IGJlZm9yZSBhbnkgcmVzcG9uc2Ugd2FzIHJlY2VpdmVkLmApO1xuICAgICAgICAgICAgZXJyb3IuY29kZSA9IHN0YXR1c18xLlN0YXR1cy5ERUFETElORV9FWENFRURFRDtcbiAgICAgICAgICAgIHRocm93IGVycm9yO1xuICAgICAgICB9XG4gICAgICAgIGlmIChtYXhSZXRyaWVzID09PSAwKSB7XG4gICAgICAgICAgICBjb25zdCBlcnJvciA9IG9yaWdpbmFsRXJyb3I7XG4gICAgICAgICAgICBlcnJvci5ub3RlID0gJ01heCByZXRyaWVzIGlzIHNldCB0byB6ZXJvLic7XG4gICAgICAgICAgICB0aHJvdyBlcnJvcjtcbiAgICAgICAgfVxuICAgICAgICBpZiAocmV0cmllcyAmJiByZXRyaWVzID49IG1heFJldHJpZXMpIHtcbiAgICAgICAgICAgIGNvbnN0IGVycm9yID0gbmV3IGdvb2dsZUVycm9yXzEuR29vZ2xlRXJyb3IoJ0V4Y2VlZGVkIG1heGltdW0gbnVtYmVyIG9mIHJldHJpZXMgJyArXG4gICAgICAgICAgICAgICAgKG9yaWdpbmFsRXJyb3IgPyBgcmV0cnlpbmcgZXJyb3IgJHtvcmlnaW5hbEVycm9yfSBgIDogJycpICtcbiAgICAgICAgICAgICAgICAnYmVmb3JlIGFueSByZXNwb25zZSB3YXMgcmVjZWl2ZWQnKTtcbiAgICAgICAgICAgIGVycm9yLmNvZGUgPSBzdGF0dXNfMS5TdGF0dXMuREVBRExJTkVfRVhDRUVERUQ7XG4gICAgICAgICAgICB0aHJvdyBlcnJvcjtcbiAgICAgICAgfVxuICAgIH1cbiAgICAvKipcbiAgICAgKiBGb3J3YXJkcyBldmVudHMgZnJvbSBhbiBBUEkgcmVxdWVzdCBzdHJlYW0gdG8gdGhlIHVzZXIncyBzdHJlYW0uXG4gICAgICogQHBhcmFtIHtTdHJlYW19IHN0cmVhbSAtIFRoZSBBUEkgcmVxdWVzdCBzdHJlYW0uXG4gICAgICovXG4gICAgZXZlbnRGb3J3YXJkSGVscGVyKHN0cmVhbSkge1xuICAgICAgICBjb25zdCBldmVudHNUb0ZvcndhcmQgPSBbJ21ldGFkYXRhJywgJ3Jlc3BvbnNlJywgJ3N0YXR1cyddO1xuICAgICAgICBldmVudHNUb0ZvcndhcmQuZm9yRWFjaChldmVudCA9PiB7XG4gICAgICAgICAgICBzdHJlYW0ub24oZXZlbnQsIHRoaXMuZW1pdC5iaW5kKHRoaXMsIGV2ZW50KSk7XG4gICAgICAgIH0pO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBIZWxwZXIgZnVuY3Rpb24gdGhhdCBlbWl0cyBhIHJlc3BvbnNlIG9uIHRoZSBzdHJlYW0gYWZ0ZXIgZWl0aGVyIGEgJ21ldGFkYXRhJ1xuICAgICAqIG9yIGEgJ3N0YXR1cycgZXZlbnQgLSB0aGlzIGhlbHBzIHN0cmVhbXMgdG8gYmVoYXZlIG1vcmUgbGlrZSBodHRwIGNvbnN1bWVycyBleHBlY3RcbiAgICAgKiBAcGFyYW0ge1N0cmVhbX0gc3RyZWFtIC0gVGhlIEFQSSByZXF1ZXN0IHN0cmVhbS5cbiAgICAgKi9cbiAgICBzdGF0dXNNZXRhZGF0YUhlbHBlcihzdHJlYW0pIHtcbiAgICAgICAgLy8gZ1JQQyBpcyBndWFyYW50ZWVkIGVtaXQgdGhlICdzdGF0dXMnIGV2ZW50IGJ1dCBub3QgJ21ldGFkYXRhJywgYW5kICdzdGF0dXMnIGlzIHRoZSBsYXN0IGV2ZW50IHRvIGVtaXQuXG4gICAgICAgIC8vIEVtaXQgdGhlICdyZXNwb25zZScgZXZlbnQgaWYgc3RyZWFtIGhhcyBubyAnbWV0YWRhdGEnIGV2ZW50LlxuICAgICAgICAvLyBUaGlzIGF2b2lkcyB0aGUgc3RyZWFtIHN3YWxsb3dpbmcgdGhlIG90aGVyIGV2ZW50cywgc3VjaCBhcyAnZW5kJy5cbiAgICAgICAgc3RyZWFtLm9uKCdzdGF0dXMnLCAoKSA9PiB7XG4gICAgICAgICAgICBpZiAoIXRoaXMuX3Jlc3BvbnNlSGFzU2VudCkge1xuICAgICAgICAgICAgICAgIHN0cmVhbS5lbWl0KCdyZXNwb25zZScsIHtcbiAgICAgICAgICAgICAgICAgICAgY29kZTogMjAwLFxuICAgICAgICAgICAgICAgICAgICBkZXRhaWxzOiAnJyxcbiAgICAgICAgICAgICAgICAgICAgbWVzc2FnZTogJ09LJyxcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgICAgIC8vIFdlIGFsc28gd2FudCB0byBzdXBwbHkgdGhlIHN0YXR1cyBkYXRhIGFzICdyZXNwb25zZScgZXZlbnQgdG8gc3VwcG9ydFxuICAgICAgICAvLyB0aGUgYmVoYXZpb3Igb2YgZ29vZ2xlLWNsb3VkLW5vZGUgZXhwZWN0cy5cbiAgICAgICAgLy8gc2VlOlxuICAgICAgICAvLyBodHRwczovL2dpdGh1Yi5jb20vR29vZ2xlQ2xvdWRQbGF0Zm9ybS9nb29nbGUtY2xvdWQtbm9kZS9wdWxsLzE3NzUjaXNzdWVjb21tZW50LTI1OTE0MTAyOVxuICAgICAgICAvLyBodHRwczovL2dpdGh1Yi5jb20vR29vZ2xlQ2xvdWRQbGF0Zm9ybS9nb29nbGUtY2xvdWQtbm9kZS9ibG9iLzExNjQzNmZhNzg5ZDhiMGY3ZmM1MTAwYjE5YjQyNGUzZWM2M2U2YmYvcGFja2FnZXMvY29tbW9uL3NyYy9ncnBjLXNlcnZpY2UuanMjTDM1NVxuICAgICAgICBzdHJlYW0ub24oJ21ldGFkYXRhJywgbWV0YWRhdGEgPT4ge1xuICAgICAgICAgICAgLy8gQ3JlYXRlIGEgcmVzcG9uc2Ugb2JqZWN0IHdpdGggc3VjY2VlZHMuXG4gICAgICAgICAgICAvLyBUT0RPOiB1bmlmeSB0aGlzIGxvZ2ljIHdpdGggdGhlIGRlY29yYXRpb24gb2YgZ1JQQyByZXNwb25zZSB3aGVuIGl0J3NcbiAgICAgICAgICAgIC8vIGFkZGVkLiBzZWU6IGh0dHBzOi8vZ2l0aHViLmNvbS9nb29nbGVhcGlzL2dheC1ub2RlanMvaXNzdWVzLzY1XG4gICAgICAgICAgICBzdHJlYW0uZW1pdCgncmVzcG9uc2UnLCB7XG4gICAgICAgICAgICAgICAgY29kZTogMjAwLFxuICAgICAgICAgICAgICAgIGRldGFpbHM6ICcnLFxuICAgICAgICAgICAgICAgIG1lc3NhZ2U6ICdPSycsXG4gICAgICAgICAgICAgICAgbWV0YWRhdGEsXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIHRoaXMuX3Jlc3BvbnNlSGFzU2VudCA9IHRydWU7XG4gICAgICAgIH0pO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBGb3J3YXJkIGV2ZW50cyBmcm9tIGFuIEFQSSByZXF1ZXN0IHN0cmVhbSB0byB0aGUgdXNlcidzIHN0cmVhbS5cbiAgICAgKiAgZ1JQQyBpcyBndWFyYW50ZWVkIGVtaXQgdGhlICdzdGF0dXMnIGV2ZW50IGJ1dCBub3QgJ21ldGFkYXRhJ1xuICAgICAqICdzdGF0dXMnIGlzIHRoZSBsYXN0IGV2ZW50IHRvIGVtaXQ7IGlmICdtZXRhZGF0YScgZW1pdHMsIGl0IHdpbGxcbiAgICAgKiBiZSB0aGUgZmlyc3QgZXZlbnQgdG8gZW1pdC4gSXQgc2hvdWxkIG9ubHkgZW1pdCBvbmNlOyBpZiBpdCBlbWl0c1xuICAgICAqIG1vcmUgdGhhbiBvbmNlLCB1bmV4cGVjdGVkIHNpZGUgZWZmZWN0cyB3aWxsIG9jY3VyLlxuICAgICAqXG4gICAgICogQHBhcmFtIHtTdHJlYW19IHN0cmVhbSAtIFRoZSBBUEkgcmVxdWVzdCBzdHJlYW0uXG4gICAgICogQHBhcmFtIHtSZXRyeU9wdGlvbnN9IHJldHJ5IC0gQ29uZmlndXJlcyB0aGUgZXhjZXB0aW9ucyB1cG9uIHdoaWNoIHRoZVxuICAgICAqICAgZnVuY3Rpb24gc2hvdWxkIHJldHJ5LCBhbmQgdGhlIHBhcmFtZXRlcnMgdG8gdGhlIGV4cG9uZW50aWFsIGJhY2tvZmYgcmV0cnlcbiAgICAgKiAgIGFsZ29yaXRobS5cbiAgICAgKi9cbiAgICBmb3J3YXJkRXZlbnRzKHN0cmVhbSkge1xuICAgICAgICB0aGlzLmV2ZW50Rm9yd2FyZEhlbHBlcihzdHJlYW0pO1xuICAgICAgICB0aGlzLnN0YXR1c01ldGFkYXRhSGVscGVyKHN0cmVhbSk7XG4gICAgICAgIHN0cmVhbS5vbignZXJyb3InLCBlcnJvciA9PiB7XG4gICAgICAgICAgICBnb29nbGVFcnJvcl8xLkdvb2dsZUVycm9yLnBhcnNlR1JQQ1N0YXR1c0RldGFpbHMoZXJyb3IpO1xuICAgICAgICB9KTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogRGVmYXVsdCBtZWNoYW5pc20gZm9yIGRldGVybWluaW5nIHdoZXRoZXIgYSBzdHJlYW1pbmcgY2FsbCBzaG91bGQgcmV0cnlcbiAgICAgKiBJZiBhIHVzZXIgcGFzc2VzIGluIGEgXCJzaG91bGRSZXRyeUZuXCIsIHRoaXMgd2lsbCBub3QgYmUgdXNlZFxuICAgICAqIEBwYXJhbSB7R29vZ2xlRXJyb3J9IGVycnByIC0gVGhlIGVycm9yIHdlIG5lZWQgdG8gZGV0ZXJtaW5lIGlzIHJldHJ5YWJsZSBvciBub3RcbiAgICAgKiBAcGFyYW0ge1JldHJ5T3B0aW9uc30gcmV0cnkgLSBDb25maWd1cmVzIHRoZSBleGNlcHRpb25zIHVwb24gd2hpY2ggdGhlXG4gICAgICogICBmdW5jdGlvbiBzaG91bGQgcmV0cnksIGFuZCB0aGUgcGFyYW1ldGVycyB0byB0aGUgZXhwb25lbnRpYWwgYmFja29mZiByZXRyeVxuICAgICAqICAgYWxnb3JpdGhtLlxuICAgICAqL1xuICAgIGRlZmF1bHRTaG91bGRSZXRyeShlcnJvciwgcmV0cnkpIHtcbiAgICAgICAgaWYgKChyZXRyeS5yZXRyeUNvZGVzLmxlbmd0aCA+IDAgJiZcbiAgICAgICAgICAgIHJldHJ5LnJldHJ5Q29kZXMuaW5kZXhPZihlcnJvci5jb2RlKSA8IDApIHx8XG4gICAgICAgICAgICByZXRyeS5yZXRyeUNvZGVzLmxlbmd0aCA9PT0gMCkge1xuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBTcGVjaWZpZXMgdGhlIHRhcmdldCBzdHJlYW0uXG4gICAgICogQHBhcmFtIHtBcGlDYWxsfSBhcGlDYWxsIC0gdGhlIEFQSSBmdW5jdGlvbiB0byBiZSBjYWxsZWQuXG4gICAgICogQHBhcmFtIHtPYmplY3R9IGFyZ3VtZW50IC0gdGhlIGFyZ3VtZW50IHRvIGJlIHBhc3NlZCB0byB0aGUgYXBpQ2FsbC5cbiAgICAgKiBAcGFyYW0ge1JldHJ5T3B0aW9uc30gcmV0cnkgLSBDb25maWd1cmVzIHRoZSBleGNlcHRpb25zIHVwb24gd2hpY2ggdGhlXG4gICAgICogICBmdW5jdGlvbiBzaG91bGQgcmV0cnksIGFuZCB0aGUgcGFyYW1ldGVycyB0byB0aGUgZXhwb25lbnRpYWwgYmFja29mZiByZXRyeVxuICAgICAqICAgYWxnb3JpdGhtLlxuICAgICAqL1xuICAgIHNldFN0cmVhbShhcGlDYWxsLCBhcmd1bWVudCwgcmV0cnlSZXF1ZXN0T3B0aW9ucyA9IHt9LCByZXRyeSkge1xuICAgICAgICB0aGlzLmFwaUNhbGwgPSBhcGlDYWxsO1xuICAgICAgICB0aGlzLmFyZ3VtZW50ID0gYXJndW1lbnQ7XG4gICAgICAgIGlmICh0aGlzLnR5cGUgPT09IFN0cmVhbVR5cGUuU0VSVkVSX1NUUkVBTUlORykge1xuICAgICAgICAgICAgaWYgKHRoaXMucmVzdCkge1xuICAgICAgICAgICAgICAgIGNvbnN0IHN0cmVhbSA9IGFwaUNhbGwoYXJndW1lbnQsIHRoaXMuX2NhbGxiYWNrKTtcbiAgICAgICAgICAgICAgICB0aGlzLnN0cmVhbSA9IHN0cmVhbTtcbiAgICAgICAgICAgICAgICB0aGlzLnNldFJlYWRhYmxlKHN0cmVhbSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIGlmICh0aGlzLmdheFNlcnZlclN0cmVhbWluZ1JldHJpZXMpIHtcbiAgICAgICAgICAgICAgICBjb25zdCByZXF1ZXN0ID0gKCkgPT4ge1xuICAgICAgICAgICAgICAgICAgICBpZiAodGhpcy5faXNDYW5jZWxDYWxsZWQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICh0aGlzLnN0cmVhbSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuc3RyZWFtLmNhbmNlbCgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IHN0cmVhbSA9IGFwaUNhbGwoYXJndW1lbnQsIHRoaXMuX2NhbGxiYWNrKTtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHN0cmVhbTtcbiAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgIGNvbnN0IHJldHJ5U3RyZWFtID0gdGhpcy5uZXdTdHJlYW1pbmdSZXRyeVJlcXVlc3QoeyByZXF1ZXN0LCByZXRyeSB9KTtcbiAgICAgICAgICAgICAgICB0aGlzLnN0cmVhbSA9IHJldHJ5U3RyZWFtO1xuICAgICAgICAgICAgICAgIHRoaXMuZXZlbnRGb3J3YXJkSGVscGVyKHJldHJ5U3RyZWFtKTtcbiAgICAgICAgICAgICAgICB0aGlzLnNldFJlYWRhYmxlKHJldHJ5U3RyZWFtKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIGNvbnN0IHJldHJ5U3RyZWFtID0gcmV0cnlSZXF1ZXN0KG51bGwsIHtcbiAgICAgICAgICAgICAgICAgICAgb2JqZWN0TW9kZTogdHJ1ZSxcbiAgICAgICAgICAgICAgICAgICAgcmVxdWVzdDogKCkgPT4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHRoaXMuX2lzQ2FuY2VsQ2FsbGVkKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHRoaXMuc3RyZWFtKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuc3RyZWFtLmNhbmNlbCgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBzdHJlYW0gPSBhcGlDYWxsKGFyZ3VtZW50LCB0aGlzLl9jYWxsYmFjayk7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnN0cmVhbSA9IHN0cmVhbTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuZm9yd2FyZEV2ZW50cyhzdHJlYW0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHN0cmVhbTtcbiAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgcmV0cmllczogcmV0cnlSZXF1ZXN0T3B0aW9ucy5yZXRyaWVzLFxuICAgICAgICAgICAgICAgICAgICBjdXJyZW50UmV0cnlBdHRlbXB0OiByZXRyeVJlcXVlc3RPcHRpb25zLmN1cnJlbnRSZXRyeUF0dGVtcHQsXG4gICAgICAgICAgICAgICAgICAgIG5vUmVzcG9uc2VSZXRyaWVzOiByZXRyeVJlcXVlc3RPcHRpb25zLm5vUmVzcG9uc2VSZXRyaWVzLFxuICAgICAgICAgICAgICAgICAgICBzaG91bGRSZXRyeUZuOiByZXRyeVJlcXVlc3RPcHRpb25zLnNob3VsZFJldHJ5Rm4sXG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgdGhpcy5zZXRSZWFkYWJsZShyZXRyeVN0cmVhbSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgY29uc3Qgc3RyZWFtID0gYXBpQ2FsbChhcmd1bWVudCwgdGhpcy5fY2FsbGJhY2spO1xuICAgICAgICB0aGlzLnN0cmVhbSA9IHN0cmVhbTtcbiAgICAgICAgdGhpcy5mb3J3YXJkRXZlbnRzKHN0cmVhbSk7XG4gICAgICAgIGlmICh0aGlzLnR5cGUgPT09IFN0cmVhbVR5cGUuQ0xJRU5UX1NUUkVBTUlORykge1xuICAgICAgICAgICAgdGhpcy5zZXRXcml0YWJsZShzdHJlYW0pO1xuICAgICAgICB9XG4gICAgICAgIGlmICh0aGlzLnR5cGUgPT09IFN0cmVhbVR5cGUuQklESV9TVFJFQU1JTkcpIHtcbiAgICAgICAgICAgIHRoaXMuc2V0UmVhZGFibGUoc3RyZWFtKTtcbiAgICAgICAgICAgIHRoaXMuc2V0V3JpdGFibGUoc3RyZWFtKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAodGhpcy5faXNDYW5jZWxDYWxsZWQgJiYgdGhpcy5zdHJlYW0pIHtcbiAgICAgICAgICAgIHRoaXMuc3RyZWFtLmNhbmNlbCgpO1xuICAgICAgICB9XG4gICAgfVxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBuZXcgcmV0cnkgcmVxdWVzdCBzdHJlYW0gLVxuICAgICAqaW5uZXIgYXJyb3cgZnVuY3Rpb24gXCJuZXdNYWtlUmVxdWVzdFwiIGhhbmRsZXMgcmV0cnlpbmcgYW5kIHJlc3VtcHRpb25cbiAgICAgKiBAcGFyYW0ge3N0cmVhbWluZ1JldHJ5UmVxdWVzdE9wdGlvbnN9IG9wdHNcbiAgICAgKiAgIHtyZXF1ZXN0fSAtIHRoZSByZXF1ZXN0IHRvIGJlIG1hZGUgaWYgdGhlIHN0cmVhbSBlcnJvcnNcbiAgICAgKiAgIHtyZXRyeX0gLSB0aGUgcmV0cnkgb3B0aW9ucyBhc3NvY2lhdGVkIHdpdGggdGhlIGNhbGxcbiAgICAgKiBAcmV0dXJucyB7Q2FuY2VsbGFibGVTdHJlYW19IC0gdGhlIHN0cmVhbSB0aGF0IGhhbmRsZXMgcmV0cnkgbG9naWNcbiAgICAgKi9cbiAgICBuZXdTdHJlYW1pbmdSZXRyeVJlcXVlc3Qob3B0cykge1xuICAgICAgICAvLyBhdCB0aGlzIHBvaW50LCBpdCB3b3VsZCBiZSB1bmV4cGVjdGVkIGlmIHJldHJ5IHdlcmUgdW5kZWZpbmVkXG4gICAgICAgIC8vIGJ1dCBpZiBpdCBpcywgcHJvdmlkZSBhIGxvZ2ljYWwgZGVmYXVsdCBzbyB3ZSBkb24ndCBydW4gaW50byB0cm91YmxlXG4gICAgICAgIGNvbnN0IHJldHJ5ID0gb3B0cy5yZXRyeSA/PyB7XG4gICAgICAgICAgICByZXRyeUNvZGVzOiBbXSxcbiAgICAgICAgICAgIGJhY2tvZmZTZXR0aW5nczogKDAsIGdheF8xLmNyZWF0ZURlZmF1bHRCYWNrb2ZmU2V0dGluZ3MpKCksXG4gICAgICAgIH07XG4gICAgICAgIGxldCByZXRyaWVzID0gMDtcbiAgICAgICAgY29uc3QgcmV0cnlTdHJlYW0gPSBuZXcgc3RyZWFtXzEuUGFzc1Rocm91Z2goe1xuICAgICAgICAgICAgb2JqZWN0TW9kZTogdHJ1ZSxcbiAgICAgICAgfSk7XG4gICAgICAgIGNvbnN0IHRvdGFsVGltZW91dCA9IHJldHJ5LmJhY2tvZmZTZXR0aW5ncy50b3RhbFRpbWVvdXRNaWxsaXMgPz8gdW5kZWZpbmVkO1xuICAgICAgICBjb25zdCBtYXhSZXRyaWVzID0gcmV0cnkuYmFja29mZlNldHRpbmdzLm1heFJldHJpZXMgPz8gdW5kZWZpbmVkO1xuICAgICAgICBsZXQgdGltZW91dCA9IHJldHJ5LmJhY2tvZmZTZXR0aW5ncy5pbml0aWFsUnBjVGltZW91dE1pbGxpcyA/PyB1bmRlZmluZWQ7XG4gICAgICAgIGxldCBub3cgPSBuZXcgRGF0ZSgpO1xuICAgICAgICBsZXQgZGVhZGxpbmUgPSAwO1xuICAgICAgICBpZiAodG90YWxUaW1lb3V0KSB7XG4gICAgICAgICAgICBkZWFkbGluZSA9IG5vdy5nZXRUaW1lKCkgKyB0b3RhbFRpbWVvdXQ7XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgdHJhbnNpZW50RXJyb3JIZWxwZXIgPSAoZXJyb3IsIHJlcXVlc3RTdHJlYW0pID0+IHtcbiAgICAgICAgICAgIGNvbnN0IGUgPSBnb29nbGVFcnJvcl8xLkdvb2dsZUVycm9yLnBhcnNlR1JQQ1N0YXR1c0RldGFpbHMoZXJyb3IpO1xuICAgICAgICAgICAgZS5ub3RlID1cbiAgICAgICAgICAgICAgICAnRXhjZXB0aW9uIG9jY3VycmVkIGluIHJldHJ5IG1ldGhvZCB0aGF0IHdhcyAnICtcbiAgICAgICAgICAgICAgICAgICAgJ25vdCBjbGFzc2lmaWVkIGFzIHRyYW5zaWVudCc7XG4gICAgICAgICAgICAvLyBjbGVhbiB1cCB0aGUgcmVxdWVzdCBzdHJlYW0gYW5kIHJldHJ5U3RyZWFtcywgc2lsZW50bHkgZGVzdHJveSBpdCBvbiB0aGUgcmVxdWVzdCBzdHJlYW1cbiAgICAgICAgICAgIC8vIGJ1dCBkbyByYWlzZSBpdCBvbiBkZXN0cnVjdGluIG9mIHRoZSByZXRyeVN0cmVhbSBzbyB0aGUgY29uc3VtZXIgY2FuIHNlZSBpdFxuICAgICAgICAgICAgcmVxdWVzdFN0cmVhbS5kZXN0cm95KCk7XG4gICAgICAgICAgICByZXRyeVN0cmVhbS5kZXN0cm95KGUpO1xuICAgICAgICAgICAgcmV0dXJuIHJldHJ5U3RyZWFtO1xuICAgICAgICB9O1xuICAgICAgICBjb25zdCBuZXdNYWtlUmVxdWVzdCA9IChuZXdvcHRzKSA9PiB7XG4gICAgICAgICAgICBsZXQgZGF0YUVuZCA9IGZhbHNlO1xuICAgICAgICAgICAgbGV0IHN0YXR1c1JlY2VpdmVkID0gZmFsc2U7XG4gICAgICAgICAgICBsZXQgZW50ZXJlZEVycm9yID0gZmFsc2U7XG4gICAgICAgICAgICAvLyBtYWtlIHRoZSByZXF1ZXN0XG4gICAgICAgICAgICBjb25zdCByZXF1ZXN0U3RyZWFtID0gbmV3b3B0cy5yZXF1ZXN0KHJlcXVlc3RPcHMpO1xuICAgICAgICAgICAgcmV0cnlTdHJlYW0uY2FuY2VsID0gcmVxdWVzdFN0cmVhbS5jYW5jZWw7IC8vIG1ha2Ugc3VyZSB0aGUgcmV0cnlTdHJlYW0gaXMgYWxzbyBjYW5jZWxsYWJsZSBieSB0aGUgdXNlclxuICAgICAgICAgICAgY29uc3QgZXZlbnRzVG9Gb3J3YXJkID0gWydtZXRhZGF0YScsICdyZXNwb25zZScsICdzdGF0dXMnXTtcbiAgICAgICAgICAgIGV2ZW50c1RvRm9yd2FyZC5mb3JFYWNoKGV2ZW50ID0+IHtcbiAgICAgICAgICAgICAgICByZXF1ZXN0U3RyZWFtLm9uKGV2ZW50LCByZXRyeVN0cmVhbS5lbWl0LmJpbmQocmV0cnlTdHJlYW0sIGV2ZW50KSk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIHRoaXMuc3RhdHVzTWV0YWRhdGFIZWxwZXIocmVxdWVzdFN0cmVhbSk7XG4gICAgICAgICAgICAvLyBUT0RPIC0gYi8zNTMyNjI1NDIgYWRkcmVzcyBidWZmZXIgc3R1ZmZcbiAgICAgICAgICAgIHJlcXVlc3RTdHJlYW0ub24oJ2RhdGEnLCAoZGF0YSkgPT4ge1xuICAgICAgICAgICAgICAgIHJldHJpZXMgPSAwO1xuICAgICAgICAgICAgICAgIHRoaXMuZW1pdC5iaW5kKHRoaXMsICdkYXRhJykoZGF0YSk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIC8qIGluIHJldHJ5LXJlcXVlc3QsIHdoaWNoIHByZXZpb3VzbHkgaGFuZGxlZCByZXRyaWVzLFxuICAgICAgICAgICAgICogXCJlbmRcIiBjb3VsZCBiZSBlbWl0dGVkIG9uIGEgcmVxdWVzdCBzdHJlYW0gYmVmb3JlIG90aGVyIGdSUEMgZXZlbnRzLlxuICAgICAgICAgICAgICogVG8gZW5zdXJlIGl0IGRvZXNuJ3QgcmVhY2ggdGhlIGNvbnN1bWVyIHN0cmVhbSBwcmVtYXR1cmVseSwgcmV0cnktcmVxdWVzdCBwaXBlZFxuICAgICAgICAgICAgICogdHdvIHN0cmVhbXMgdG9nZXRoZXIgKGRlbGF5U3RyZWFtIGFuZCByZXRyeVN0cmVhbSlcbiAgICAgICAgICAgICAqIHRvIGVuc3VyZSB0aGF0IFwiZW5kXCIgb25seSBlbWl0dGVkIGFmdGVyIGEgXCJyZXNwb25zZVwiIGV2ZW50XG4gICAgICAgICAgICAgKlxuICAgICAgICAgICAgICogV2UgYXJlIGNvbnNjaW91c2x5IE5PVCB1c2luZyBwaXBlbGluZSBvciAucGlwZSBhcyBwYXJ0IG9mIHNpbWlsYXIgbG9naWMgaGVyZVxuICAgICAgICAgICAgICogYmVjYXVzZSB3ZSB3YW50IG1vcmUgY29udHJvbCBvdmVyIHdoYXQgaGFwcGVucyBkdXJpbmcgZXZlbnQgaGFuZG9mZiBhbmQgd2Ugd2FudCB0b1xuICAgICAgICAgICAgICogYXZvaWQgdGhlIHVuZGVzaXJlZCBiZWhhdmlvciB0aGF0IGNhbiBoYXBwZW4gd2l0aCBlcnJvciBldmVudHNcbiAgICAgICAgICAgICAqIGlmIGNvbnN1bWVycyBpbiBjbGllbnQgbGlicmFyaWVzIGFyZSBhbHNvIHVzaW5nIHBpcGVzXG4gICAgICAgICAgICAgKlxuICAgICAgICAgICAgICogU2luY2UgXCJzdGF0dXNcIiBpcyBndWFyYW50ZWVkIHRvIGJlIHRoZSBsYXN0IGV2ZW50IGVtaXR0ZWQgYnkgZ1JQQy5cbiAgICAgICAgICAgICAqIElmIHdlIGhhdmUgc2VlbiBhbiBcImVuZFwiIGV2ZW50LCB0aGUgZGF0YUVuZCBib29sZWFuIHdpbGwgYmUgdHJ1ZSBhbmQgd2UgY2FuIHNhZmVseVxuICAgICAgICAgICAgICogZW5kIHRoZSBzdHJlYW0uXG4gICAgICAgICAgICAgKlxuICAgICAgICAgICAgICogVGhlIFwic3RhdHVzUmVjZWl2ZWRcIiBib29sZWFuIGNvdmVycyB0aGUgb3Bwb3NpdGUgY2FzZSAtIHRoYXQgd2UgcmVjZWl2ZSB0aGUgXCJzdGF0dXNcIiBldmVudCBiZWZvcmVcbiAgICAgICAgICAgICAqIGEgc3VjY2Vzc2Z1bCBzdHJlYW0gZW5kIGV2ZW50IC0gdGhpcyBzaWduYWxzIHRoZSAub24oJ2VuZCcpIGV2ZW50IGhhbmRsZXIgdGhhdCBpdCdzIG9rYXkgdG8gZW5kIHRoZSBzdHJlYW1cbiAgICAgICAgICAgICAqXG4gICAgICAgICAgICAgKlxuICAgICAgICAgICAgICovXG4gICAgICAgICAgICByZXF1ZXN0U3RyZWFtLm9uKCdzdGF0dXMnLCAoKSA9PiB7XG4gICAgICAgICAgICAgICAgc3RhdHVzUmVjZWl2ZWQgPSB0cnVlO1xuICAgICAgICAgICAgICAgIGlmIChkYXRhRW5kKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHJ5U3RyZWFtLmVuZCgpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICByZXR1cm4gcmV0cnlTdHJlYW07XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIHJlcXVlc3RTdHJlYW0ub24oJ2VuZCcsICgpID0+IHtcbiAgICAgICAgICAgICAgICBpZiAoIWVudGVyZWRFcnJvcikge1xuICAgICAgICAgICAgICAgICAgICBkYXRhRW5kID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICAgICAgLy8gaW4gdGhpcyBjYXNlLCB3ZSd2ZSBhbHJlYWR5IHJlY2VpdmVkIFwic3RhdHVzXCJcbiAgICAgICAgICAgICAgICAgICAgLy8gd2hpY2ggaXMgdGhlIGxhc3QgZXZlbnQgZnJvbSBnUlBDLCBzbyBpdCdzIGNvb2wgdG8gZW5kIHRoZSBzdHJlYW1cbiAgICAgICAgICAgICAgICAgICAgaWYgKHN0YXR1c1JlY2VpdmVkKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXRyeVN0cmVhbS5lbmQoKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICByZXR1cm4gcmV0cnlTdHJlYW07XG4gICAgICAgICAgICAgICAgLy8gdGhlcmUgaXMgbm8gZWxzZSBjYXNlIGJlY2F1c2UgaWYgZW50ZXJlZEVycm9yXG4gICAgICAgICAgICAgICAgLy8gaXMgdHJ1ZSwgd2Ugd2lsbCBoYW5kbGUgc3RyZWFtIGRlc3RydWN0aW9uIGFzIHBhcnQgb2ZcbiAgICAgICAgICAgICAgICAvLyBlaXRoZXIgcmV0cnlpbmcgKHdoZXJlIHdlIGRvbid0IHdhbnQgdG8gZW5kIHRoZSBzdHJlYW0pXG4gICAgICAgICAgICAgICAgLy8gb3IgYXMgcGFydCBvZiBlcnJvciBoYW5kbGluZywgd2hpY2ggd2lsbCB0YWtlIGNhcmUgb2Ygc3RyZWFtIGRlc3RydWN0aW9uXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIHJlcXVlc3RTdHJlYW0ub24oJ2Vycm9yJywgKGVycm9yKSA9PiB7XG4gICAgICAgICAgICAgICAgZW50ZXJlZEVycm9yID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICAvLyB0eXBlIGNoZWNrIGZvciB1bmRlZmluZWQgaW5zdGVhZCBvZiBmb3IgdHJ1dGhpbmVzcyBpbiBjYXNlIG1heFJldHJpZXMgb3IgdGltZW91dCBpcyBlcXVhbCB0byB6ZXJvXG4gICAgICAgICAgICAgICAgaWYgKHR5cGVvZiBtYXhSZXRyaWVzICE9PSB1bmRlZmluZWQgfHxcbiAgICAgICAgICAgICAgICAgICAgdHlwZW9mIHRvdGFsVGltZW91dCAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmICh0aGlzLnNob3VsZFJldHJ5UmVxdWVzdChlcnJvciwgcmV0cnkpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAobWF4UmV0cmllcyAmJiB0b3RhbFRpbWVvdXQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBuZXdFcnJvciA9IG5ldyBnb29nbGVFcnJvcl8xLkdvb2dsZUVycm9yKCdDYW5ub3Qgc2V0IGJvdGggdG90YWxUaW1lb3V0TWlsbGlzIGFuZCBtYXhSZXRyaWVzICcgK1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAnaW4gYmFja29mZlNldHRpbmdzLicpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5ld0Vycm9yLmNvZGUgPSBzdGF0dXNfMS5TdGF0dXMuSU5WQUxJRF9BUkdVTUVOVDtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBjbGVhbiB1cCB0aGUgcmVxdWVzdCBzdHJlYW0gYW5kIHJldHJ5U3RyZWFtcywgc2lsZW50bHkgZGVzdHJveSBpdCBvbiB0aGUgcmVxdWVzdCBzdHJlYW1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBidXQgZG8gcmFpc2UgaXQgb24gZGVzdHJ1Y3RpbiBvZiB0aGUgcmV0cnlTdHJlYW0gc28gdGhlIGNvbnN1bWVyIGNhbiBzZWUgaXRcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXF1ZXN0U3RyZWFtLmRlc3Ryb3koKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXRyeVN0cmVhbS5kZXN0cm95KG5ld0Vycm9yKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gcmV0cnlTdHJlYW07XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBjaGVjayBmb3IgZXhjZWVkaW5nIHRpbWVvdXQgb3IgbWF4IHJldHJpZXNcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnRocm93SWZNYXhSZXRyaWVzT3JUb3RhbFRpbWVvdXRFeGNlZWRlZChkZWFkbGluZSwgbWF4UmV0cmllcywgdGltZW91dCwgZXJyb3IsIHRvdGFsVGltZW91dCwgcmV0cmllcyk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhdGNoIChlcnJvcikge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBlID0gZ29vZ2xlRXJyb3JfMS5Hb29nbGVFcnJvci5wYXJzZUdSUENTdGF0dXNEZXRhaWxzKGVycm9yKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gY2xlYW4gdXAgdGhlIHJlcXVlc3Qgc3RyZWFtIGFuZCByZXRyeVN0cmVhbXMsIHNpbGVudGx5IGRlc3Ryb3kgaXQgb24gdGhlIHJlcXVlc3Qgc3RyZWFtXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIGJ1dCBkbyByYWlzZSBpdCBvbiBkZXN0cnVjdGlvbiBvZiB0aGUgcmV0cnlTdHJlYW0gc28gdGhlIGNvbnN1bWVyIGNhbiBzZWUgaXRcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVxdWVzdFN0cmVhbS5kZXN0cm95KCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHJ5U3RyZWFtLmRlc3Ryb3koZSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiByZXRyeVN0cmVhbTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgZGVsYXlNdWx0ID0gcmV0cnkuYmFja29mZlNldHRpbmdzLnJldHJ5RGVsYXlNdWx0aXBsaWVyO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IG1heERlbGF5ID0gcmV0cnkuYmFja29mZlNldHRpbmdzLm1heFJldHJ5RGVsYXlNaWxsaXM7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgdGltZW91dE11bHQgPSByZXRyeS5iYWNrb2ZmU2V0dGluZ3MucnBjVGltZW91dE11bHRpcGxpZXI7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgbWF4VGltZW91dCA9IHJldHJ5LmJhY2tvZmZTZXR0aW5ncy5tYXhScGNUaW1lb3V0TWlsbGlzO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxldCBkZWxheSA9IHJldHJ5LmJhY2tvZmZTZXR0aW5ncy5pbml0aWFsUmV0cnlEZWxheU1pbGxpcztcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBjYWxjdWxhdGUgbmV3IGRlYWRsaW5lc1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IHRvU2xlZXAgPSBNYXRoLnJhbmRvbSgpICogZGVsYXk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgY2FsY3VsYXRlVGltZW91dEFuZFJlc3VtcHRpb25GdW5jdGlvbiA9ICgpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc2V0VGltZW91dCgoKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBvbmx5IGRvIHRpbWVvdXQgY2FsY3VsYXRpb25zIGlmIG5vdCB1c2luZyBtYXhSZXRyaWVzXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAodGltZW91dCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5vdyA9IG5ldyBEYXRlKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZGVsYXkgPSBNYXRoLm1pbihkZWxheSAqIGRlbGF5TXVsdCwgbWF4RGVsYXkpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IHRpbWVvdXRDYWwgPSB0aW1lb3V0ICYmIHRpbWVvdXRNdWx0ID8gdGltZW91dCAqIHRpbWVvdXRNdWx0IDogMDtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBycGNUaW1lb3V0ID0gbWF4VGltZW91dCA/IG1heFRpbWVvdXQgOiAwO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IG5ld0RlYWRsaW5lID0gZGVhZGxpbmUgPyBkZWFkbGluZSAtIG5vdy5nZXRUaW1lKCkgOiAwO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRpbWVvdXQgPSBNYXRoLm1pbih0aW1lb3V0Q2FsLCBycGNUaW1lb3V0LCBuZXdEZWFkbGluZSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXRyaWVzKys7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBsZXQgcmV0cnlBcmd1bWVudCA9IHRoaXMuYXJndW1lbnQ7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBpZiByZXN1bXB0aW9uIGxvZ2ljIGlzIHBhc3NlZCwgdXNlIGl0IHRvIGRldGVybWluZWQgdGhlXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBuZXcgYXJndW1lbnQgZm9yIHRoZSBuZXcgcmVxdWVzdCBtYWRlIHRvIHRoZSBzZXJ2ZXJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIG90aGVyd2lzZSwgdGhlIG9yaWdpbmFsIGFyZ3VtZW50IHdpbGwgYmUgcGFzc2VkXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAocmV0cnkuZ2V0UmVzdW1wdGlvblJlcXVlc3RGbiAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0cnlBcmd1bWVudCA9IHJldHJ5LmdldFJlc3VtcHRpb25SZXF1ZXN0Rm4ocmV0cnlBcmd1bWVudCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBuZXdSZXF1ZXN0ID0gKCkgPT4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICh0aGlzLl9pc0NhbmNlbENhbGxlZCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAodGhpcy5zdHJlYW0pIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuc3RyZWFtLmNhbmNlbCgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgbmV3U3RyZWFtID0gdGhpcy5hcGlDYWxsKHJldHJ5QXJndW1lbnQsIHRoaXMuX2NhbGxiYWNrKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gbmV3U3RyZWFtO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9wdHMucmVxdWVzdCA9IG5ld1JlcXVlc3Q7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBtYWtlIGEgcmVxdWVzdCB3aXRoIHRoZSB1cGRhdGVkIHBhcmFtZXRlcnNcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIGJhc2VkIG9uIHRoZSByZXN1bXB0aW9uIHN0cmF0ZWd5XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gbmV3TWFrZVJlcXVlc3Qob3B0cyk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0sIHRvU2xlZXApO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGNhbGN1bGF0ZVRpbWVvdXRBbmRSZXN1bXB0aW9uRnVuY3Rpb24oKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIG5vbiByZXRyeWFibGUgZXJyb3JcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB0cmFuc2llbnRFcnJvckhlbHBlcihlcnJvciwgcmVxdWVzdFN0cmVhbSk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIC8vIG5laXRoZXIgdGltZW91dCBub3IgbWF4UmV0cmllcyBhcmUgZGVmaW5lZCwgc3VyZmFjZSB0aGUgZXJyb3IgdG8gdGhlIGNhbGxlclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gdHJhbnNpZW50RXJyb3JIZWxwZXIoZXJyb3IsIHJlcXVlc3RTdHJlYW0pO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgLy8gcmV0dXJuIHRoZSBzdHJlYW0gaWYgd2UgZGlkbid0IHJldHVybiBpdCBhc1xuICAgICAgICAgICAgLy8gcGFydCBvZiBhbiBlcnJvciBzdGF0ZVxuICAgICAgICAgICAgcmV0dXJuIHJldHJ5U3RyZWFtO1xuICAgICAgICB9O1xuICAgICAgICAvLyB0aGlzIGlzIHRoZSBmaXJzdCBtYWtlIHJlcXVlc3QgY2FsbCB3aXRoIHRoZSBvcHRpb25zIHRoZSB1c2VyIHBhc3NlZCBpblxuICAgICAgICByZXR1cm4gbmV3TWFrZVJlcXVlc3Qob3B0cyk7XG4gICAgfVxufVxuZXhwb3J0cy5TdHJlYW1Qcm94eSA9IFN0cmVhbVByb3h5O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9c3RyZWFtaW5nLmpzLm1hcCJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/google-gax/build/src/streamingCalls/streaming.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/google-gax/build/src/streamingCalls/streamingApiCaller.js":
/*!********************************************************************************!*\
  !*** ./node_modules/google-gax/build/src/streamingCalls/streamingApiCaller.js ***!
  \********************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\n/**\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.StreamingApiCaller = void 0;\nconst warnings_1 = __webpack_require__(/*! ../warnings */ \"(rsc)/./node_modules/google-gax/build/src/warnings.js\");\nconst streaming_1 = __webpack_require__(/*! ./streaming */ \"(rsc)/./node_modules/google-gax/build/src/streamingCalls/streaming.js\");\nclass StreamingApiCaller {\n    descriptor;\n    /**\n     * An API caller for methods of gRPC streaming.\n     * @private\n     * @constructor\n     * @param {StreamDescriptor} descriptor - the descriptor of the method structure.\n     */\n    constructor(descriptor) {\n        this.descriptor = descriptor;\n    }\n    init(callback) {\n        return new streaming_1.StreamProxy(this.descriptor.type, callback, this.descriptor.rest, this.descriptor.gaxStreamingRetries);\n    }\n    wrap(func) {\n        switch (this.descriptor.type) {\n            case streaming_1.StreamType.SERVER_STREAMING:\n                return (argument, metadata, options) => {\n                    return func(argument, metadata, options);\n                };\n            case streaming_1.StreamType.CLIENT_STREAMING:\n                return (argument, metadata, options, callback) => {\n                    return func(metadata, options, callback);\n                };\n            case streaming_1.StreamType.BIDI_STREAMING:\n                return (argument, metadata, options) => {\n                    return func(metadata, options);\n                };\n            default:\n                (0, warnings_1.warn)('streaming_wrap_unknown_stream_type', `Unknown stream type: ${this.descriptor.type}`);\n        }\n        return func;\n    }\n    call(apiCall, argument, settings, stream) {\n        stream.setStream(apiCall, argument, settings.retryRequestOptions, settings.retry);\n    }\n    fail(stream, err) {\n        stream.emit('error', err);\n    }\n    result(stream) {\n        return stream;\n    }\n}\nexports.StreamingApiCaller = StreamingApiCaller;\n//# sourceMappingURL=streamingApiCaller.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvZ29vZ2xlLWdheC9idWlsZC9zcmMvc3RyZWFtaW5nQ2FsbHMvc3RyZWFtaW5nQXBpQ2FsbGVyLmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsOENBQTZDLEVBQUUsYUFBYSxFQUFDO0FBQzdELDBCQUEwQjtBQUMxQixtQkFBbUIsbUJBQU8sQ0FBQywwRUFBYTtBQUN4QyxvQkFBb0IsbUJBQU8sQ0FBQywwRkFBYTtBQUN6QztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxlQUFlLGtCQUFrQjtBQUNqQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLG1HQUFtRyxxQkFBcUI7QUFDeEg7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSwwQkFBMEI7QUFDMUIiLCJzb3VyY2VzIjpbIi9Vc2Vycy9iYWcteW9zZWIvRGVza3RvcC/hhJHhhanhhIfhhbXhhIvhhaEvaGFja2F0aG9uX3RlYW0vbXktYXBwL25vZGVfbW9kdWxlcy9nb29nbGUtZ2F4L2J1aWxkL3NyYy9zdHJlYW1pbmdDYWxscy9zdHJlYW1pbmdBcGlDYWxsZXIuanMiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG4vKipcbiAqIENvcHlyaWdodCAyMDIwIEdvb2dsZSBMTENcbiAqXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4gKlxuICogICAgICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbiAqXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuICovXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLlN0cmVhbWluZ0FwaUNhbGxlciA9IHZvaWQgMDtcbmNvbnN0IHdhcm5pbmdzXzEgPSByZXF1aXJlKFwiLi4vd2FybmluZ3NcIik7XG5jb25zdCBzdHJlYW1pbmdfMSA9IHJlcXVpcmUoXCIuL3N0cmVhbWluZ1wiKTtcbmNsYXNzIFN0cmVhbWluZ0FwaUNhbGxlciB7XG4gICAgZGVzY3JpcHRvcjtcbiAgICAvKipcbiAgICAgKiBBbiBBUEkgY2FsbGVyIGZvciBtZXRob2RzIG9mIGdSUEMgc3RyZWFtaW5nLlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQGNvbnN0cnVjdG9yXG4gICAgICogQHBhcmFtIHtTdHJlYW1EZXNjcmlwdG9yfSBkZXNjcmlwdG9yIC0gdGhlIGRlc2NyaXB0b3Igb2YgdGhlIG1ldGhvZCBzdHJ1Y3R1cmUuXG4gICAgICovXG4gICAgY29uc3RydWN0b3IoZGVzY3JpcHRvcikge1xuICAgICAgICB0aGlzLmRlc2NyaXB0b3IgPSBkZXNjcmlwdG9yO1xuICAgIH1cbiAgICBpbml0KGNhbGxiYWNrKSB7XG4gICAgICAgIHJldHVybiBuZXcgc3RyZWFtaW5nXzEuU3RyZWFtUHJveHkodGhpcy5kZXNjcmlwdG9yLnR5cGUsIGNhbGxiYWNrLCB0aGlzLmRlc2NyaXB0b3IucmVzdCwgdGhpcy5kZXNjcmlwdG9yLmdheFN0cmVhbWluZ1JldHJpZXMpO1xuICAgIH1cbiAgICB3cmFwKGZ1bmMpIHtcbiAgICAgICAgc3dpdGNoICh0aGlzLmRlc2NyaXB0b3IudHlwZSkge1xuICAgICAgICAgICAgY2FzZSBzdHJlYW1pbmdfMS5TdHJlYW1UeXBlLlNFUlZFUl9TVFJFQU1JTkc6XG4gICAgICAgICAgICAgICAgcmV0dXJuIChhcmd1bWVudCwgbWV0YWRhdGEsIG9wdGlvbnMpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGZ1bmMoYXJndW1lbnQsIG1ldGFkYXRhLCBvcHRpb25zKTtcbiAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgY2FzZSBzdHJlYW1pbmdfMS5TdHJlYW1UeXBlLkNMSUVOVF9TVFJFQU1JTkc6XG4gICAgICAgICAgICAgICAgcmV0dXJuIChhcmd1bWVudCwgbWV0YWRhdGEsIG9wdGlvbnMsIGNhbGxiYWNrKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBmdW5jKG1ldGFkYXRhLCBvcHRpb25zLCBjYWxsYmFjayk7XG4gICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIGNhc2Ugc3RyZWFtaW5nXzEuU3RyZWFtVHlwZS5CSURJX1NUUkVBTUlORzpcbiAgICAgICAgICAgICAgICByZXR1cm4gKGFyZ3VtZW50LCBtZXRhZGF0YSwgb3B0aW9ucykgPT4ge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gZnVuYyhtZXRhZGF0YSwgb3B0aW9ucyk7XG4gICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICAgICAgKDAsIHdhcm5pbmdzXzEud2FybikoJ3N0cmVhbWluZ193cmFwX3Vua25vd25fc3RyZWFtX3R5cGUnLCBgVW5rbm93biBzdHJlYW0gdHlwZTogJHt0aGlzLmRlc2NyaXB0b3IudHlwZX1gKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gZnVuYztcbiAgICB9XG4gICAgY2FsbChhcGlDYWxsLCBhcmd1bWVudCwgc2V0dGluZ3MsIHN0cmVhbSkge1xuICAgICAgICBzdHJlYW0uc2V0U3RyZWFtKGFwaUNhbGwsIGFyZ3VtZW50LCBzZXR0aW5ncy5yZXRyeVJlcXVlc3RPcHRpb25zLCBzZXR0aW5ncy5yZXRyeSk7XG4gICAgfVxuICAgIGZhaWwoc3RyZWFtLCBlcnIpIHtcbiAgICAgICAgc3RyZWFtLmVtaXQoJ2Vycm9yJywgZXJyKTtcbiAgICB9XG4gICAgcmVzdWx0KHN0cmVhbSkge1xuICAgICAgICByZXR1cm4gc3RyZWFtO1xuICAgIH1cbn1cbmV4cG9ydHMuU3RyZWFtaW5nQXBpQ2FsbGVyID0gU3RyZWFtaW5nQXBpQ2FsbGVyO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9c3RyZWFtaW5nQXBpQ2FsbGVyLmpzLm1hcCJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/google-gax/build/src/streamingCalls/streamingApiCaller.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/google-gax/build/src/transcoding.js":
/*!**********************************************************!*\
  !*** ./node_modules/google-gax/build/src/transcoding.js ***!
  \**********************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\n/**\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.getField = getField;\nexports.deepCopyWithoutMatchedFields = deepCopyWithoutMatchedFields;\nexports.deleteField = deleteField;\nexports.buildQueryStringComponents = buildQueryStringComponents;\nexports.encodeWithSlashes = encodeWithSlashes;\nexports.encodeWithoutSlashes = encodeWithoutSlashes;\nexports.applyPattern = applyPattern;\nexports.match = match;\nexports.flattenObject = flattenObject;\nexports.isProto3OptionalField = isProto3OptionalField;\nexports.transcode = transcode;\nexports.overrideHttpRules = overrideHttpRules;\nconst util_1 = __webpack_require__(/*! ./util */ \"(rsc)/./node_modules/google-gax/build/src/util.js\");\nconst httpOptionName = '(google.api.http)';\nconst proto3OptionalName = 'proto3_optional';\n// List of methods as defined in google/api/http.proto (see HttpRule)\nconst supportedHttpMethods = ['get', 'post', 'put', 'patch', 'delete'];\nfunction getField(request, field, allowObjects = false) {\n    const parts = field.split('.');\n    let value = request;\n    for (const part of parts) {\n        if (typeof value !== 'object') {\n            return undefined;\n        }\n        value = value[part];\n    }\n    if (!allowObjects &&\n        typeof value === 'object' &&\n        !Array.isArray(value) &&\n        value !== null) {\n        return undefined;\n    }\n    return value;\n}\nfunction deepCopyWithoutMatchedFields(request, fieldsToSkip, fullNamePrefix = '') {\n    if (typeof request !== 'object' || request === null) {\n        return request;\n    }\n    const copy = Object.assign({}, request);\n    for (const key in copy) {\n        if (fieldsToSkip.has(`${fullNamePrefix}${key}`)) {\n            delete copy[key];\n            continue;\n        }\n        const nextFullNamePrefix = `${fullNamePrefix}${key}.`;\n        if (Array.isArray(copy[key])) {\n            // a field of an array cannot be addressed as \"request.field\", so we omit the skipping logic for array descendants\n            copy[key] = copy[key].map(value => deepCopyWithoutMatchedFields(value, new Set()));\n        }\n        else if (typeof copy[key] === 'object' && copy[key] !== null) {\n            copy[key] = deepCopyWithoutMatchedFields(copy[key], fieldsToSkip, nextFullNamePrefix);\n        }\n    }\n    return copy;\n}\nfunction deleteField(request, field) {\n    const parts = field.split('.');\n    while (parts.length > 1) {\n        if (typeof request !== 'object') {\n            return;\n        }\n        const part = parts.shift();\n        request = request[part];\n    }\n    const part = parts.shift();\n    if (typeof request !== 'object') {\n        return;\n    }\n    delete request[part];\n}\nfunction buildQueryStringComponents(request, prefix = '') {\n    const resultList = [];\n    for (const key in request) {\n        if (Array.isArray(request[key])) {\n            for (const value of request[key]) {\n                resultList.push(`${prefix}${encodeWithoutSlashes(key)}=${encodeWithoutSlashes(value.toString())}`);\n            }\n        }\n        else if (typeof request[key] === 'object' && request[key] !== null) {\n            resultList.push(...buildQueryStringComponents(request[key], `${key}.`));\n        }\n        else {\n            resultList.push(`${prefix}${encodeWithoutSlashes(key)}=${encodeWithoutSlashes(request[key] === null ? 'null' : request[key].toString())}`);\n        }\n    }\n    return resultList;\n}\nfunction encodeWithSlashes(str) {\n    return str\n        .split('')\n        .map(c => (c.match(/[-_.~0-9a-zA-Z]/) ? c : encodeURIComponent(c)))\n        .join('');\n}\nfunction encodeWithoutSlashes(str) {\n    return str\n        .split('')\n        .map(c => (c.match(/[-_.~0-9a-zA-Z/]/) ? c : encodeURIComponent(c)))\n        .join('');\n}\nfunction escapeRegExp(str) {\n    return str.replace(/[.*+?^${}()|[\\]\\\\]/g, '\\\\$&');\n}\nfunction applyPattern(pattern, fieldValue) {\n    if (!pattern || pattern === '*') {\n        return encodeWithSlashes(fieldValue);\n    }\n    if (!pattern.includes('*') && pattern !== fieldValue) {\n        return undefined;\n    }\n    // since we're converting the pattern to a regex, make necessary precautions:\n    const regex = new RegExp('^' +\n        escapeRegExp(pattern)\n            .replace(/\\\\\\*\\\\\\*/g, '(.+)')\n            .replace(/\\\\\\*/g, '([^/]+)') +\n        '$');\n    if (!fieldValue.match(regex)) {\n        return undefined;\n    }\n    return encodeWithoutSlashes(fieldValue);\n}\nfunction fieldToCamelCase(field) {\n    const parts = field.split('.');\n    return parts.map(part => (0, util_1.toCamelCase)(part)).join('.');\n}\nfunction match(request, pattern) {\n    let url = pattern;\n    const matchedFields = [];\n    for (;;) {\n        const match = url.match(/^(.*)\\{([^}=]+)(?:=([^}]*))?\\}(.*)/);\n        if (!match) {\n            break;\n        }\n        const [, before, field, pattern, after] = match;\n        const camelCasedField = fieldToCamelCase(field);\n        matchedFields.push(fieldToCamelCase(camelCasedField));\n        const fieldValue = getField(request, camelCasedField);\n        if (fieldValue === undefined) {\n            return undefined;\n        }\n        const appliedPattern = applyPattern(pattern, fieldValue === null ? 'null' : fieldValue.toString());\n        if (appliedPattern === undefined) {\n            return undefined;\n        }\n        url = before + appliedPattern + after;\n    }\n    return { matchedFields, url };\n}\nfunction flattenObject(request) {\n    const result = {};\n    for (const key in request) {\n        if (request[key] === undefined) {\n            continue;\n        }\n        if (Array.isArray(request[key])) {\n            // According to the http.proto comments, a repeated field may only\n            // contain primitive types, so no extra recursion here.\n            result[key] = request[key];\n            continue;\n        }\n        if (typeof request[key] === 'object' && request[key] !== null) {\n            const nested = flattenObject(request[key]);\n            for (const nestedKey in nested) {\n                result[`${key}.${nestedKey}`] = nested[nestedKey];\n            }\n            continue;\n        }\n        result[key] = request[key];\n    }\n    return result;\n}\nfunction isProto3OptionalField(field) {\n    return field && field.options && field.options[proto3OptionalName];\n}\nfunction transcode(request, parsedOptions) {\n    const httpRules = [];\n    for (const option of parsedOptions) {\n        if (!(httpOptionName in option)) {\n            continue;\n        }\n        const httpRule = option[httpOptionName];\n        httpRules.push(httpRule);\n        if (httpRule?.additional_bindings) {\n            const additionalBindings = Array.isArray(httpRule.additional_bindings)\n                ? httpRule.additional_bindings\n                : [httpRule.additional_bindings];\n            httpRules.push(...additionalBindings);\n        }\n    }\n    for (const httpRule of httpRules) {\n        for (const httpMethod of supportedHttpMethods) {\n            if (!(httpMethod in httpRule)) {\n                continue;\n            }\n            const pathTemplate = httpRule[httpMethod];\n            const matchResult = match(request, pathTemplate);\n            if (matchResult === undefined) {\n                continue;\n            }\n            const { url, matchedFields } = matchResult;\n            let data = deepCopyWithoutMatchedFields(request, new Set(matchedFields));\n            if (httpRule.body === '*') {\n                return { httpMethod, url, queryString: '', data };\n            }\n            // one field possibly goes to request data, others go to query string\n            const queryStringObject = data;\n            if (httpRule.body) {\n                data = getField(queryStringObject, fieldToCamelCase(httpRule.body), \n                /*allowObjects:*/ true);\n                deleteField(queryStringObject, fieldToCamelCase(httpRule.body));\n            }\n            else {\n                data = '';\n            }\n            const queryStringComponents = buildQueryStringComponents(queryStringObject);\n            const queryString = queryStringComponents.join('&');\n            if (!data ||\n                (typeof data === 'object' && Object.keys(data).length === 0)) {\n                data = '';\n            }\n            return { httpMethod, url, queryString, data };\n        }\n    }\n    return undefined;\n}\n// Override the protobuf json's the http rules.\nfunction overrideHttpRules(httpRules, protoJson) {\n    for (const rule of httpRules) {\n        if (!rule.selector) {\n            continue;\n        }\n        const rpc = protoJson.lookup(rule.selector);\n        // Not support override on non-exist RPC or a RPC without an annotation.\n        // We could reconsider if we have the use case later.\n        if (!rpc || !rpc.parsedOptions) {\n            continue;\n        }\n        for (const item of rpc.parsedOptions) {\n            if (!(httpOptionName in item)) {\n                continue;\n            }\n            const httpOptions = item[httpOptionName];\n            for (const httpMethod in httpOptions) {\n                if (httpMethod in rule) {\n                    if (httpMethod === 'additional_bindings') {\n                        continue;\n                    }\n                    httpOptions[httpMethod] =\n                        rule[httpMethod];\n                }\n                if (rule.additional_bindings) {\n                    httpOptions['additional_bindings'] = !httpOptions['additional_bindings']\n                        ? []\n                        : Array.isArray(httpOptions['additional_bindings'])\n                            ? httpOptions['additional_bindings']\n                            : [httpOptions['additional_bindings']];\n                    // Make the additional_binding to be an array if it is not.\n                    httpOptions['additional_bindings'].push(...rule.additional_bindings);\n                }\n            }\n        }\n    }\n}\n//# sourceMappingURL=transcoding.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/google-gax/build/src/transcoding.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/google-gax/build/src/util.js":
/*!***************************************************!*\
  !*** ./node_modules/google-gax/build/src/util.js ***!
  \***************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.camelToSnakeCase = camelToSnakeCase;\nexports.toCamelCase = toCamelCase;\nexports.toLowerCamelCase = toLowerCamelCase;\nexports.makeUUID = makeUUID;\n/**\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nconst randomUUID = () => globalThis.crypto?.randomUUID() || (__webpack_require__(/*! crypto */ \"crypto\").randomUUID)();\nfunction words(str, normalize = false) {\n    if (normalize) {\n        // strings like somethingABCSomething are special case for protobuf.js,\n        // they should be split as \"something\", \"abc\", \"something\".\n        // Deal with sequences of capital letters first.\n        str = str.replace(/([A-Z])([A-Z]+)([A-Z])/g, (str) => {\n            return (str[0] +\n                str.slice(1, str.length - 1).toLowerCase() +\n                str[str.length - 1]);\n        });\n    }\n    // split on spaces, non-alphanumeric, or capital letters\n    // note: we keep the capitalization of the first word (special case: IPProtocol)\n    return str\n        .split(/(?=[A-Z])|[^A-Za-z0-9.]+/)\n        .filter(w => w.length > 0)\n        .map((w, index) => (index === 0 ? w : w.toLowerCase()));\n}\n/**\n * Converts the first character of the given string to lower case.\n */\nfunction lowercase(str) {\n    if (str.length === 0) {\n        return str;\n    }\n    return str[0].toLowerCase() + str.slice(1);\n}\n/**\n * Converts a given string from camelCase (used by protobuf.js and in JSON)\n * to snake_case (normally used in proto definitions).\n */\nfunction camelToSnakeCase(str) {\n    // Keep the first position capitalization, otherwise decapitalize with underscore.\n    const wordsList = words(str);\n    if (wordsList.length === 0) {\n        return str;\n    }\n    const result = [wordsList[0]];\n    result.push(...wordsList.slice(1).map(lowercase));\n    return result.join('_');\n}\n/**\n * Capitalizes the first character of the given string.\n */\nfunction capitalize(str) {\n    if (str.length === 0) {\n        return str;\n    }\n    return str[0].toUpperCase() + str.slice(1);\n}\n/**\n * Converts a given string from snake_case (normally used in proto definitions) or\n * PascalCase (also used in proto definitions) to camelCase (used by protobuf.js).\n * Preserves capitalization of the first character.\n */\nfunction toCamelCase(str) {\n    const wordsList = words(str, /*normalize:*/ true);\n    if (wordsList.length === 0) {\n        return str;\n    }\n    const result = [wordsList[0]];\n    result.push(...wordsList.slice(1).map(w => {\n        if (w.match(/^\\d+$/)) {\n            return '_' + w;\n        }\n        return capitalize(w);\n    }));\n    return result.join('');\n}\n/**\n * Converts a given string to lower camel case (forcing the first character to be\n * in lower case).\n */\nfunction toLowerCamelCase(str) {\n    const camelCase = toCamelCase(str);\n    if (camelCase.length === 0) {\n        return camelCase;\n    }\n    return camelCase[0].toLowerCase() + camelCase.slice(1);\n}\n/**\n * Converts a given string to lower camel case (forcing the first character to be\n * in lower case).\n */\nfunction makeUUID() {\n    return randomUUID();\n}\n//# sourceMappingURL=util.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvZ29vZ2xlLWdheC9idWlsZC9zcmMvdXRpbC5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiLDhDQUE2QyxFQUFFLGFBQWEsRUFBQztBQUM3RCx3QkFBd0I7QUFDeEIsbUJBQW1CO0FBQ25CLHdCQUF3QjtBQUN4QixnQkFBZ0I7QUFDaEI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsNERBQTRELHdEQUE0QjtBQUN4RjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJzb3VyY2VzIjpbIi9Vc2Vycy9iYWcteW9zZWIvRGVza3RvcC/hhJHhhanhhIfhhbXhhIvhhaEvaGFja2F0aG9uX3RlYW0vbXktYXBwL25vZGVfbW9kdWxlcy9nb29nbGUtZ2F4L2J1aWxkL3NyYy91dGlsLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5jYW1lbFRvU25ha2VDYXNlID0gY2FtZWxUb1NuYWtlQ2FzZTtcbmV4cG9ydHMudG9DYW1lbENhc2UgPSB0b0NhbWVsQ2FzZTtcbmV4cG9ydHMudG9Mb3dlckNhbWVsQ2FzZSA9IHRvTG93ZXJDYW1lbENhc2U7XG5leHBvcnRzLm1ha2VVVUlEID0gbWFrZVVVSUQ7XG4vKipcbiAqIENvcHlyaWdodCAyMDIwIEdvb2dsZSBMTENcbiAqXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4gKlxuICogICAgICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbiAqXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuICovXG5jb25zdCByYW5kb21VVUlEID0gKCkgPT4gZ2xvYmFsVGhpcy5jcnlwdG8/LnJhbmRvbVVVSUQoKSB8fCByZXF1aXJlKCdjcnlwdG8nKS5yYW5kb21VVUlEKCk7XG5mdW5jdGlvbiB3b3JkcyhzdHIsIG5vcm1hbGl6ZSA9IGZhbHNlKSB7XG4gICAgaWYgKG5vcm1hbGl6ZSkge1xuICAgICAgICAvLyBzdHJpbmdzIGxpa2Ugc29tZXRoaW5nQUJDU29tZXRoaW5nIGFyZSBzcGVjaWFsIGNhc2UgZm9yIHByb3RvYnVmLmpzLFxuICAgICAgICAvLyB0aGV5IHNob3VsZCBiZSBzcGxpdCBhcyBcInNvbWV0aGluZ1wiLCBcImFiY1wiLCBcInNvbWV0aGluZ1wiLlxuICAgICAgICAvLyBEZWFsIHdpdGggc2VxdWVuY2VzIG9mIGNhcGl0YWwgbGV0dGVycyBmaXJzdC5cbiAgICAgICAgc3RyID0gc3RyLnJlcGxhY2UoLyhbQS1aXSkoW0EtWl0rKShbQS1aXSkvZywgKHN0cikgPT4ge1xuICAgICAgICAgICAgcmV0dXJuIChzdHJbMF0gK1xuICAgICAgICAgICAgICAgIHN0ci5zbGljZSgxLCBzdHIubGVuZ3RoIC0gMSkudG9Mb3dlckNhc2UoKSArXG4gICAgICAgICAgICAgICAgc3RyW3N0ci5sZW5ndGggLSAxXSk7XG4gICAgICAgIH0pO1xuICAgIH1cbiAgICAvLyBzcGxpdCBvbiBzcGFjZXMsIG5vbi1hbHBoYW51bWVyaWMsIG9yIGNhcGl0YWwgbGV0dGVyc1xuICAgIC8vIG5vdGU6IHdlIGtlZXAgdGhlIGNhcGl0YWxpemF0aW9uIG9mIHRoZSBmaXJzdCB3b3JkIChzcGVjaWFsIGNhc2U6IElQUHJvdG9jb2wpXG4gICAgcmV0dXJuIHN0clxuICAgICAgICAuc3BsaXQoLyg/PVtBLVpdKXxbXkEtWmEtejAtOS5dKy8pXG4gICAgICAgIC5maWx0ZXIodyA9PiB3Lmxlbmd0aCA+IDApXG4gICAgICAgIC5tYXAoKHcsIGluZGV4KSA9PiAoaW5kZXggPT09IDAgPyB3IDogdy50b0xvd2VyQ2FzZSgpKSk7XG59XG4vKipcbiAqIENvbnZlcnRzIHRoZSBmaXJzdCBjaGFyYWN0ZXIgb2YgdGhlIGdpdmVuIHN0cmluZyB0byBsb3dlciBjYXNlLlxuICovXG5mdW5jdGlvbiBsb3dlcmNhc2Uoc3RyKSB7XG4gICAgaWYgKHN0ci5sZW5ndGggPT09IDApIHtcbiAgICAgICAgcmV0dXJuIHN0cjtcbiAgICB9XG4gICAgcmV0dXJuIHN0clswXS50b0xvd2VyQ2FzZSgpICsgc3RyLnNsaWNlKDEpO1xufVxuLyoqXG4gKiBDb252ZXJ0cyBhIGdpdmVuIHN0cmluZyBmcm9tIGNhbWVsQ2FzZSAodXNlZCBieSBwcm90b2J1Zi5qcyBhbmQgaW4gSlNPTilcbiAqIHRvIHNuYWtlX2Nhc2UgKG5vcm1hbGx5IHVzZWQgaW4gcHJvdG8gZGVmaW5pdGlvbnMpLlxuICovXG5mdW5jdGlvbiBjYW1lbFRvU25ha2VDYXNlKHN0cikge1xuICAgIC8vIEtlZXAgdGhlIGZpcnN0IHBvc2l0aW9uIGNhcGl0YWxpemF0aW9uLCBvdGhlcndpc2UgZGVjYXBpdGFsaXplIHdpdGggdW5kZXJzY29yZS5cbiAgICBjb25zdCB3b3Jkc0xpc3QgPSB3b3JkcyhzdHIpO1xuICAgIGlmICh3b3Jkc0xpc3QubGVuZ3RoID09PSAwKSB7XG4gICAgICAgIHJldHVybiBzdHI7XG4gICAgfVxuICAgIGNvbnN0IHJlc3VsdCA9IFt3b3Jkc0xpc3RbMF1dO1xuICAgIHJlc3VsdC5wdXNoKC4uLndvcmRzTGlzdC5zbGljZSgxKS5tYXAobG93ZXJjYXNlKSk7XG4gICAgcmV0dXJuIHJlc3VsdC5qb2luKCdfJyk7XG59XG4vKipcbiAqIENhcGl0YWxpemVzIHRoZSBmaXJzdCBjaGFyYWN0ZXIgb2YgdGhlIGdpdmVuIHN0cmluZy5cbiAqL1xuZnVuY3Rpb24gY2FwaXRhbGl6ZShzdHIpIHtcbiAgICBpZiAoc3RyLmxlbmd0aCA9PT0gMCkge1xuICAgICAgICByZXR1cm4gc3RyO1xuICAgIH1cbiAgICByZXR1cm4gc3RyWzBdLnRvVXBwZXJDYXNlKCkgKyBzdHIuc2xpY2UoMSk7XG59XG4vKipcbiAqIENvbnZlcnRzIGEgZ2l2ZW4gc3RyaW5nIGZyb20gc25ha2VfY2FzZSAobm9ybWFsbHkgdXNlZCBpbiBwcm90byBkZWZpbml0aW9ucykgb3JcbiAqIFBhc2NhbENhc2UgKGFsc28gdXNlZCBpbiBwcm90byBkZWZpbml0aW9ucykgdG8gY2FtZWxDYXNlICh1c2VkIGJ5IHByb3RvYnVmLmpzKS5cbiAqIFByZXNlcnZlcyBjYXBpdGFsaXphdGlvbiBvZiB0aGUgZmlyc3QgY2hhcmFjdGVyLlxuICovXG5mdW5jdGlvbiB0b0NhbWVsQ2FzZShzdHIpIHtcbiAgICBjb25zdCB3b3Jkc0xpc3QgPSB3b3JkcyhzdHIsIC8qbm9ybWFsaXplOiovIHRydWUpO1xuICAgIGlmICh3b3Jkc0xpc3QubGVuZ3RoID09PSAwKSB7XG4gICAgICAgIHJldHVybiBzdHI7XG4gICAgfVxuICAgIGNvbnN0IHJlc3VsdCA9IFt3b3Jkc0xpc3RbMF1dO1xuICAgIHJlc3VsdC5wdXNoKC4uLndvcmRzTGlzdC5zbGljZSgxKS5tYXAodyA9PiB7XG4gICAgICAgIGlmICh3Lm1hdGNoKC9eXFxkKyQvKSkge1xuICAgICAgICAgICAgcmV0dXJuICdfJyArIHc7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGNhcGl0YWxpemUodyk7XG4gICAgfSkpO1xuICAgIHJldHVybiByZXN1bHQuam9pbignJyk7XG59XG4vKipcbiAqIENvbnZlcnRzIGEgZ2l2ZW4gc3RyaW5nIHRvIGxvd2VyIGNhbWVsIGNhc2UgKGZvcmNpbmcgdGhlIGZpcnN0IGNoYXJhY3RlciB0byBiZVxuICogaW4gbG93ZXIgY2FzZSkuXG4gKi9cbmZ1bmN0aW9uIHRvTG93ZXJDYW1lbENhc2Uoc3RyKSB7XG4gICAgY29uc3QgY2FtZWxDYXNlID0gdG9DYW1lbENhc2Uoc3RyKTtcbiAgICBpZiAoY2FtZWxDYXNlLmxlbmd0aCA9PT0gMCkge1xuICAgICAgICByZXR1cm4gY2FtZWxDYXNlO1xuICAgIH1cbiAgICByZXR1cm4gY2FtZWxDYXNlWzBdLnRvTG93ZXJDYXNlKCkgKyBjYW1lbENhc2Uuc2xpY2UoMSk7XG59XG4vKipcbiAqIENvbnZlcnRzIGEgZ2l2ZW4gc3RyaW5nIHRvIGxvd2VyIGNhbWVsIGNhc2UgKGZvcmNpbmcgdGhlIGZpcnN0IGNoYXJhY3RlciB0byBiZVxuICogaW4gbG93ZXIgY2FzZSkuXG4gKi9cbmZ1bmN0aW9uIG1ha2VVVUlEKCkge1xuICAgIHJldHVybiByYW5kb21VVUlEKCk7XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD11dGlsLmpzLm1hcCJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/google-gax/build/src/util.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/google-gax/build/src/warnings.js":
/*!*******************************************************!*\
  !*** ./node_modules/google-gax/build/src/warnings.js ***!
  \*******************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\n/**\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.warn = warn;\nconst featureDetection_1 = __webpack_require__(/*! ./featureDetection */ \"(rsc)/./node_modules/google-gax/build/src/featureDetection.js\");\nconst emittedWarnings = new Set();\n// warnType is the type of warning (e.g. 'DeprecationWarning', 'ExperimentalWarning', etc.)\nfunction warn(code, message, warnType) {\n    // Only show a given warning once\n    if (emittedWarnings.has(code)) {\n        return;\n    }\n    emittedWarnings.add(code);\n    if (!(0, featureDetection_1.isNodeJS)()) {\n        console.warn(message);\n    }\n    else if (typeof warnType !== 'undefined') {\n        process.emitWarning(message, {\n            type: warnType,\n        });\n    }\n    else {\n        process.emitWarning(message);\n    }\n}\n//# sourceMappingURL=warnings.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvZ29vZ2xlLWdheC9idWlsZC9zcmMvd2FybmluZ3MuanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSw4Q0FBNkMsRUFBRSxhQUFhLEVBQUM7QUFDN0QsWUFBWTtBQUNaLDJCQUEyQixtQkFBTyxDQUFDLHlGQUFvQjtBQUN2RDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsInNvdXJjZXMiOlsiL1VzZXJzL2JhZy15b3NlYi9EZXNrdG9wL+GEkeGFqeGEh+GFteGEi+GFoS9oYWNrYXRob25fdGVhbS9teS1hcHAvbm9kZV9tb2R1bGVzL2dvb2dsZS1nYXgvYnVpbGQvc3JjL3dhcm5pbmdzLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuLyoqXG4gKiBDb3B5cmlnaHQgMjAyMCBHb29nbGUgTExDXG4gKlxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuICpcbiAqICAgICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4gKlxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbiAqL1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy53YXJuID0gd2FybjtcbmNvbnN0IGZlYXR1cmVEZXRlY3Rpb25fMSA9IHJlcXVpcmUoXCIuL2ZlYXR1cmVEZXRlY3Rpb25cIik7XG5jb25zdCBlbWl0dGVkV2FybmluZ3MgPSBuZXcgU2V0KCk7XG4vLyB3YXJuVHlwZSBpcyB0aGUgdHlwZSBvZiB3YXJuaW5nIChlLmcuICdEZXByZWNhdGlvbldhcm5pbmcnLCAnRXhwZXJpbWVudGFsV2FybmluZycsIGV0Yy4pXG5mdW5jdGlvbiB3YXJuKGNvZGUsIG1lc3NhZ2UsIHdhcm5UeXBlKSB7XG4gICAgLy8gT25seSBzaG93IGEgZ2l2ZW4gd2FybmluZyBvbmNlXG4gICAgaWYgKGVtaXR0ZWRXYXJuaW5ncy5oYXMoY29kZSkpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBlbWl0dGVkV2FybmluZ3MuYWRkKGNvZGUpO1xuICAgIGlmICghKDAsIGZlYXR1cmVEZXRlY3Rpb25fMS5pc05vZGVKUykoKSkge1xuICAgICAgICBjb25zb2xlLndhcm4obWVzc2FnZSk7XG4gICAgfVxuICAgIGVsc2UgaWYgKHR5cGVvZiB3YXJuVHlwZSAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgcHJvY2Vzcy5lbWl0V2FybmluZyhtZXNzYWdlLCB7XG4gICAgICAgICAgICB0eXBlOiB3YXJuVHlwZSxcbiAgICAgICAgfSk7XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgICBwcm9jZXNzLmVtaXRXYXJuaW5nKG1lc3NhZ2UpO1xuICAgIH1cbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXdhcm5pbmdzLmpzLm1hcCJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/google-gax/build/src/warnings.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/google-gax/node_modules/@grpc/grpc-js/build/src/admin.js":
/*!*******************************************************************************!*\
  !*** ./node_modules/google-gax/node_modules/@grpc/grpc-js/build/src/admin.js ***!
  \*******************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";
eval("\n/*\n * Copyright 2021 gRPC authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n */\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.registerAdminService = registerAdminService;\nexports.addAdminServicesToServer = addAdminServicesToServer;\nconst registeredAdminServices = [];\nfunction registerAdminService(getServiceDefinition, getHandlers) {\n    registeredAdminServices.push({ getServiceDefinition, getHandlers });\n}\nfunction addAdminServicesToServer(server) {\n    for (const { getServiceDefinition, getHandlers } of registeredAdminServices) {\n        server.addService(getServiceDefinition(), getHandlers());\n    }\n}\n//# sourceMappingURL=admin.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvZ29vZ2xlLWdheC9ub2RlX21vZHVsZXMvQGdycGMvZ3JwYy1qcy9idWlsZC9zcmMvYWRtaW4uanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDhDQUE2QyxFQUFFLGFBQWEsRUFBQztBQUM3RCw0QkFBNEI7QUFDNUIsZ0NBQWdDO0FBQ2hDO0FBQ0E7QUFDQSxtQ0FBbUMsbUNBQW1DO0FBQ3RFO0FBQ0E7QUFDQSxpQkFBaUIsb0NBQW9DO0FBQ3JEO0FBQ0E7QUFDQTtBQUNBIiwic291cmNlcyI6WyIvVXNlcnMvYmFnLXlvc2ViL0Rlc2t0b3Av4YSR4YWp4YSH4YW14YSL4YWhL2hhY2thdGhvbl90ZWFtL215LWFwcC9ub2RlX21vZHVsZXMvZ29vZ2xlLWdheC9ub2RlX21vZHVsZXMvQGdycGMvZ3JwYy1qcy9idWlsZC9zcmMvYWRtaW4uanMiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG4vKlxuICogQ29weXJpZ2h0IDIwMjEgZ1JQQyBhdXRob3JzLlxuICpcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbiAqXG4gKiAgICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4gKlxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbiAqXG4gKi9cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMucmVnaXN0ZXJBZG1pblNlcnZpY2UgPSByZWdpc3RlckFkbWluU2VydmljZTtcbmV4cG9ydHMuYWRkQWRtaW5TZXJ2aWNlc1RvU2VydmVyID0gYWRkQWRtaW5TZXJ2aWNlc1RvU2VydmVyO1xuY29uc3QgcmVnaXN0ZXJlZEFkbWluU2VydmljZXMgPSBbXTtcbmZ1bmN0aW9uIHJlZ2lzdGVyQWRtaW5TZXJ2aWNlKGdldFNlcnZpY2VEZWZpbml0aW9uLCBnZXRIYW5kbGVycykge1xuICAgIHJlZ2lzdGVyZWRBZG1pblNlcnZpY2VzLnB1c2goeyBnZXRTZXJ2aWNlRGVmaW5pdGlvbiwgZ2V0SGFuZGxlcnMgfSk7XG59XG5mdW5jdGlvbiBhZGRBZG1pblNlcnZpY2VzVG9TZXJ2ZXIoc2VydmVyKSB7XG4gICAgZm9yIChjb25zdCB7IGdldFNlcnZpY2VEZWZpbml0aW9uLCBnZXRIYW5kbGVycyB9IG9mIHJlZ2lzdGVyZWRBZG1pblNlcnZpY2VzKSB7XG4gICAgICAgIHNlcnZlci5hZGRTZXJ2aWNlKGdldFNlcnZpY2VEZWZpbml0aW9uKCksIGdldEhhbmRsZXJzKCkpO1xuICAgIH1cbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWFkbWluLmpzLm1hcCJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/google-gax/node_modules/@grpc/grpc-js/build/src/admin.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/google-gax/node_modules/@grpc/grpc-js/build/src/backoff-timeout.js":
/*!*****************************************************************************************!*\
  !*** ./node_modules/google-gax/node_modules/@grpc/grpc-js/build/src/backoff-timeout.js ***!
  \*****************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\n/*\n * Copyright 2019 gRPC authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n */\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.BackoffTimeout = void 0;\nconst constants_1 = __webpack_require__(/*! ./constants */ \"(rsc)/./node_modules/google-gax/node_modules/@grpc/grpc-js/build/src/constants.js\");\nconst logging = __webpack_require__(/*! ./logging */ \"(rsc)/./node_modules/google-gax/node_modules/@grpc/grpc-js/build/src/logging.js\");\nconst TRACER_NAME = 'backoff';\nconst INITIAL_BACKOFF_MS = 1000;\nconst BACKOFF_MULTIPLIER = 1.6;\nconst MAX_BACKOFF_MS = 120000;\nconst BACKOFF_JITTER = 0.2;\n/**\n * Get a number uniformly at random in the range [min, max)\n * @param min\n * @param max\n */\nfunction uniformRandom(min, max) {\n    return Math.random() * (max - min) + min;\n}\nclass BackoffTimeout {\n    constructor(callback, options) {\n        this.callback = callback;\n        /**\n         * The delay time at the start, and after each reset.\n         */\n        this.initialDelay = INITIAL_BACKOFF_MS;\n        /**\n         * The exponential backoff multiplier.\n         */\n        this.multiplier = BACKOFF_MULTIPLIER;\n        /**\n         * The maximum delay time\n         */\n        this.maxDelay = MAX_BACKOFF_MS;\n        /**\n         * The maximum fraction by which the delay time can randomly vary after\n         * applying the multiplier.\n         */\n        this.jitter = BACKOFF_JITTER;\n        /**\n         * Indicates whether the timer is currently running.\n         */\n        this.running = false;\n        /**\n         * Indicates whether the timer should keep the Node process running if no\n         * other async operation is doing so.\n         */\n        this.hasRef = true;\n        /**\n         * The time that the currently running timer was started. Only valid if\n         * running is true.\n         */\n        this.startTime = new Date();\n        /**\n         * The approximate time that the currently running timer will end. Only valid\n         * if running is true.\n         */\n        this.endTime = new Date();\n        this.id = BackoffTimeout.getNextId();\n        if (options) {\n            if (options.initialDelay) {\n                this.initialDelay = options.initialDelay;\n            }\n            if (options.multiplier) {\n                this.multiplier = options.multiplier;\n            }\n            if (options.jitter) {\n                this.jitter = options.jitter;\n            }\n            if (options.maxDelay) {\n                this.maxDelay = options.maxDelay;\n            }\n        }\n        this.trace('constructed initialDelay=' + this.initialDelay + ' multiplier=' + this.multiplier + ' jitter=' + this.jitter + ' maxDelay=' + this.maxDelay);\n        this.nextDelay = this.initialDelay;\n        this.timerId = setTimeout(() => { }, 0);\n        clearTimeout(this.timerId);\n    }\n    static getNextId() {\n        return this.nextId++;\n    }\n    trace(text) {\n        logging.trace(constants_1.LogVerbosity.DEBUG, TRACER_NAME, '{' + this.id + '} ' + text);\n    }\n    runTimer(delay) {\n        var _a, _b;\n        this.trace('runTimer(delay=' + delay + ')');\n        this.endTime = this.startTime;\n        this.endTime.setMilliseconds(this.endTime.getMilliseconds() + delay);\n        clearTimeout(this.timerId);\n        this.timerId = setTimeout(() => {\n            this.trace('timer fired');\n            this.running = false;\n            this.callback();\n        }, delay);\n        if (!this.hasRef) {\n            (_b = (_a = this.timerId).unref) === null || _b === void 0 ? void 0 : _b.call(_a);\n        }\n    }\n    /**\n     * Call the callback after the current amount of delay time\n     */\n    runOnce() {\n        this.trace('runOnce()');\n        this.running = true;\n        this.startTime = new Date();\n        this.runTimer(this.nextDelay);\n        const nextBackoff = Math.min(this.nextDelay * this.multiplier, this.maxDelay);\n        const jitterMagnitude = nextBackoff * this.jitter;\n        this.nextDelay =\n            nextBackoff + uniformRandom(-jitterMagnitude, jitterMagnitude);\n    }\n    /**\n     * Stop the timer. The callback will not be called until `runOnce` is called\n     * again.\n     */\n    stop() {\n        this.trace('stop()');\n        clearTimeout(this.timerId);\n        this.running = false;\n    }\n    /**\n     * Reset the delay time to its initial value. If the timer is still running,\n     * retroactively apply that reset to the current timer.\n     */\n    reset() {\n        this.trace('reset() running=' + this.running);\n        this.nextDelay = this.initialDelay;\n        if (this.running) {\n            const now = new Date();\n            const newEndTime = this.startTime;\n            newEndTime.setMilliseconds(newEndTime.getMilliseconds() + this.nextDelay);\n            clearTimeout(this.timerId);\n            if (now < newEndTime) {\n                this.runTimer(newEndTime.getTime() - now.getTime());\n            }\n            else {\n                this.running = false;\n            }\n        }\n    }\n    /**\n     * Check whether the timer is currently running.\n     */\n    isRunning() {\n        return this.running;\n    }\n    /**\n     * Set that while the timer is running, it should keep the Node process\n     * running.\n     */\n    ref() {\n        var _a, _b;\n        this.hasRef = true;\n        (_b = (_a = this.timerId).ref) === null || _b === void 0 ? void 0 : _b.call(_a);\n    }\n    /**\n     * Set that while the timer is running, it should not keep the Node process\n     * running.\n     */\n    unref() {\n        var _a, _b;\n        this.hasRef = false;\n        (_b = (_a = this.timerId).unref) === null || _b === void 0 ? void 0 : _b.call(_a);\n    }\n    /**\n     * Get the approximate timestamp of when the timer will fire. Only valid if\n     * this.isRunning() is true.\n     */\n    getEndTime() {\n        return this.endTime;\n    }\n}\nexports.BackoffTimeout = BackoffTimeout;\nBackoffTimeout.nextId = 0;\n//# sourceMappingURL=backoff-timeout.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/google-gax/node_modules/@grpc/grpc-js/build/src/backoff-timeout.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/google-gax/node_modules/@grpc/grpc-js/build/src/call-credentials.js":
/*!******************************************************************************************!*\
  !*** ./node_modules/google-gax/node_modules/@grpc/grpc-js/build/src/call-credentials.js ***!
  \******************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\n/*\n * Copyright 2019 gRPC authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n */\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.CallCredentials = void 0;\nconst metadata_1 = __webpack_require__(/*! ./metadata */ \"(rsc)/./node_modules/google-gax/node_modules/@grpc/grpc-js/build/src/metadata.js\");\nfunction isCurrentOauth2Client(client) {\n    return ('getRequestHeaders' in client &&\n        typeof client.getRequestHeaders === 'function');\n}\n/**\n * A class that represents a generic method of adding authentication-related\n * metadata on a per-request basis.\n */\nclass CallCredentials {\n    /**\n     * Creates a new CallCredentials object from a given function that generates\n     * Metadata objects.\n     * @param metadataGenerator A function that accepts a set of options, and\n     * generates a Metadata object based on these options, which is passed back\n     * to the caller via a supplied (err, metadata) callback.\n     */\n    static createFromMetadataGenerator(metadataGenerator) {\n        return new SingleCallCredentials(metadataGenerator);\n    }\n    /**\n     * Create a gRPC credential from a Google credential object.\n     * @param googleCredentials The authentication client to use.\n     * @return The resulting CallCredentials object.\n     */\n    static createFromGoogleCredential(googleCredentials) {\n        return CallCredentials.createFromMetadataGenerator((options, callback) => {\n            let getHeaders;\n            if (isCurrentOauth2Client(googleCredentials)) {\n                getHeaders = googleCredentials.getRequestHeaders(options.service_url);\n            }\n            else {\n                getHeaders = new Promise((resolve, reject) => {\n                    googleCredentials.getRequestMetadata(options.service_url, (err, headers) => {\n                        if (err) {\n                            reject(err);\n                            return;\n                        }\n                        if (!headers) {\n                            reject(new Error('Headers not set by metadata plugin'));\n                            return;\n                        }\n                        resolve(headers);\n                    });\n                });\n            }\n            getHeaders.then(headers => {\n                const metadata = new metadata_1.Metadata();\n                for (const key of Object.keys(headers)) {\n                    metadata.add(key, headers[key]);\n                }\n                callback(null, metadata);\n            }, err => {\n                callback(err);\n            });\n        });\n    }\n    static createEmpty() {\n        return new EmptyCallCredentials();\n    }\n}\nexports.CallCredentials = CallCredentials;\nclass ComposedCallCredentials extends CallCredentials {\n    constructor(creds) {\n        super();\n        this.creds = creds;\n    }\n    async generateMetadata(options) {\n        const base = new metadata_1.Metadata();\n        const generated = await Promise.all(this.creds.map(cred => cred.generateMetadata(options)));\n        for (const gen of generated) {\n            base.merge(gen);\n        }\n        return base;\n    }\n    compose(other) {\n        return new ComposedCallCredentials(this.creds.concat([other]));\n    }\n    _equals(other) {\n        if (this === other) {\n            return true;\n        }\n        if (other instanceof ComposedCallCredentials) {\n            return this.creds.every((value, index) => value._equals(other.creds[index]));\n        }\n        else {\n            return false;\n        }\n    }\n}\nclass SingleCallCredentials extends CallCredentials {\n    constructor(metadataGenerator) {\n        super();\n        this.metadataGenerator = metadataGenerator;\n    }\n    generateMetadata(options) {\n        return new Promise((resolve, reject) => {\n            this.metadataGenerator(options, (err, metadata) => {\n                if (metadata !== undefined) {\n                    resolve(metadata);\n                }\n                else {\n                    reject(err);\n                }\n            });\n        });\n    }\n    compose(other) {\n        return new ComposedCallCredentials([this, other]);\n    }\n    _equals(other) {\n        if (this === other) {\n            return true;\n        }\n        if (other instanceof SingleCallCredentials) {\n            return this.metadataGenerator === other.metadataGenerator;\n        }\n        else {\n            return false;\n        }\n    }\n}\nclass EmptyCallCredentials extends CallCredentials {\n    generateMetadata(options) {\n        return Promise.resolve(new metadata_1.Metadata());\n    }\n    compose(other) {\n        return other;\n    }\n    _equals(other) {\n        return other instanceof EmptyCallCredentials;\n    }\n}\n//# sourceMappingURL=call-credentials.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvZ29vZ2xlLWdheC9ub2RlX21vZHVsZXMvQGdycGMvZ3JwYy1qcy9idWlsZC9zcmMvY2FsbC1jcmVkZW50aWFscy5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsOENBQTZDLEVBQUUsYUFBYSxFQUFDO0FBQzdELHVCQUF1QjtBQUN2QixtQkFBbUIsbUJBQU8sQ0FBQyxvR0FBWTtBQUN2QztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxxQkFBcUI7QUFDckIsaUJBQWlCO0FBQ2pCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsYUFBYTtBQUNiO0FBQ0EsYUFBYTtBQUNiLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsdUJBQXVCO0FBQ3ZCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGFBQWE7QUFDYixTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJzb3VyY2VzIjpbIi9Vc2Vycy9iYWcteW9zZWIvRGVza3RvcC/hhJHhhanhhIfhhbXhhIvhhaEvaGFja2F0aG9uX3RlYW0vbXktYXBwL25vZGVfbW9kdWxlcy9nb29nbGUtZ2F4L25vZGVfbW9kdWxlcy9AZ3JwYy9ncnBjLWpzL2J1aWxkL3NyYy9jYWxsLWNyZWRlbnRpYWxzLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuLypcbiAqIENvcHlyaWdodCAyMDE5IGdSUEMgYXV0aG9ycy5cbiAqXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4gKlxuICogICAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuICpcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4gKlxuICovXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLkNhbGxDcmVkZW50aWFscyA9IHZvaWQgMDtcbmNvbnN0IG1ldGFkYXRhXzEgPSByZXF1aXJlKFwiLi9tZXRhZGF0YVwiKTtcbmZ1bmN0aW9uIGlzQ3VycmVudE9hdXRoMkNsaWVudChjbGllbnQpIHtcbiAgICByZXR1cm4gKCdnZXRSZXF1ZXN0SGVhZGVycycgaW4gY2xpZW50ICYmXG4gICAgICAgIHR5cGVvZiBjbGllbnQuZ2V0UmVxdWVzdEhlYWRlcnMgPT09ICdmdW5jdGlvbicpO1xufVxuLyoqXG4gKiBBIGNsYXNzIHRoYXQgcmVwcmVzZW50cyBhIGdlbmVyaWMgbWV0aG9kIG9mIGFkZGluZyBhdXRoZW50aWNhdGlvbi1yZWxhdGVkXG4gKiBtZXRhZGF0YSBvbiBhIHBlci1yZXF1ZXN0IGJhc2lzLlxuICovXG5jbGFzcyBDYWxsQ3JlZGVudGlhbHMge1xuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBuZXcgQ2FsbENyZWRlbnRpYWxzIG9iamVjdCBmcm9tIGEgZ2l2ZW4gZnVuY3Rpb24gdGhhdCBnZW5lcmF0ZXNcbiAgICAgKiBNZXRhZGF0YSBvYmplY3RzLlxuICAgICAqIEBwYXJhbSBtZXRhZGF0YUdlbmVyYXRvciBBIGZ1bmN0aW9uIHRoYXQgYWNjZXB0cyBhIHNldCBvZiBvcHRpb25zLCBhbmRcbiAgICAgKiBnZW5lcmF0ZXMgYSBNZXRhZGF0YSBvYmplY3QgYmFzZWQgb24gdGhlc2Ugb3B0aW9ucywgd2hpY2ggaXMgcGFzc2VkIGJhY2tcbiAgICAgKiB0byB0aGUgY2FsbGVyIHZpYSBhIHN1cHBsaWVkIChlcnIsIG1ldGFkYXRhKSBjYWxsYmFjay5cbiAgICAgKi9cbiAgICBzdGF0aWMgY3JlYXRlRnJvbU1ldGFkYXRhR2VuZXJhdG9yKG1ldGFkYXRhR2VuZXJhdG9yKSB7XG4gICAgICAgIHJldHVybiBuZXcgU2luZ2xlQ2FsbENyZWRlbnRpYWxzKG1ldGFkYXRhR2VuZXJhdG9yKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogQ3JlYXRlIGEgZ1JQQyBjcmVkZW50aWFsIGZyb20gYSBHb29nbGUgY3JlZGVudGlhbCBvYmplY3QuXG4gICAgICogQHBhcmFtIGdvb2dsZUNyZWRlbnRpYWxzIFRoZSBhdXRoZW50aWNhdGlvbiBjbGllbnQgdG8gdXNlLlxuICAgICAqIEByZXR1cm4gVGhlIHJlc3VsdGluZyBDYWxsQ3JlZGVudGlhbHMgb2JqZWN0LlxuICAgICAqL1xuICAgIHN0YXRpYyBjcmVhdGVGcm9tR29vZ2xlQ3JlZGVudGlhbChnb29nbGVDcmVkZW50aWFscykge1xuICAgICAgICByZXR1cm4gQ2FsbENyZWRlbnRpYWxzLmNyZWF0ZUZyb21NZXRhZGF0YUdlbmVyYXRvcigob3B0aW9ucywgY2FsbGJhY2spID0+IHtcbiAgICAgICAgICAgIGxldCBnZXRIZWFkZXJzO1xuICAgICAgICAgICAgaWYgKGlzQ3VycmVudE9hdXRoMkNsaWVudChnb29nbGVDcmVkZW50aWFscykpIHtcbiAgICAgICAgICAgICAgICBnZXRIZWFkZXJzID0gZ29vZ2xlQ3JlZGVudGlhbHMuZ2V0UmVxdWVzdEhlYWRlcnMob3B0aW9ucy5zZXJ2aWNlX3VybCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICBnZXRIZWFkZXJzID0gbmV3IFByb21pc2UoKHJlc29sdmUsIHJlamVjdCkgPT4ge1xuICAgICAgICAgICAgICAgICAgICBnb29nbGVDcmVkZW50aWFscy5nZXRSZXF1ZXN0TWV0YWRhdGEob3B0aW9ucy5zZXJ2aWNlX3VybCwgKGVyciwgaGVhZGVycykgPT4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGVycikge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlamVjdChlcnIpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICghaGVhZGVycykge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlamVjdChuZXcgRXJyb3IoJ0hlYWRlcnMgbm90IHNldCBieSBtZXRhZGF0YSBwbHVnaW4nKSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgcmVzb2x2ZShoZWFkZXJzKTtcbiAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBnZXRIZWFkZXJzLnRoZW4oaGVhZGVycyA9PiB7XG4gICAgICAgICAgICAgICAgY29uc3QgbWV0YWRhdGEgPSBuZXcgbWV0YWRhdGFfMS5NZXRhZGF0YSgpO1xuICAgICAgICAgICAgICAgIGZvciAoY29uc3Qga2V5IG9mIE9iamVjdC5rZXlzKGhlYWRlcnMpKSB7XG4gICAgICAgICAgICAgICAgICAgIG1ldGFkYXRhLmFkZChrZXksIGhlYWRlcnNba2V5XSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGNhbGxiYWNrKG51bGwsIG1ldGFkYXRhKTtcbiAgICAgICAgICAgIH0sIGVyciA9PiB7XG4gICAgICAgICAgICAgICAgY2FsbGJhY2soZXJyKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9KTtcbiAgICB9XG4gICAgc3RhdGljIGNyZWF0ZUVtcHR5KCkge1xuICAgICAgICByZXR1cm4gbmV3IEVtcHR5Q2FsbENyZWRlbnRpYWxzKCk7XG4gICAgfVxufVxuZXhwb3J0cy5DYWxsQ3JlZGVudGlhbHMgPSBDYWxsQ3JlZGVudGlhbHM7XG5jbGFzcyBDb21wb3NlZENhbGxDcmVkZW50aWFscyBleHRlbmRzIENhbGxDcmVkZW50aWFscyB7XG4gICAgY29uc3RydWN0b3IoY3JlZHMpIHtcbiAgICAgICAgc3VwZXIoKTtcbiAgICAgICAgdGhpcy5jcmVkcyA9IGNyZWRzO1xuICAgIH1cbiAgICBhc3luYyBnZW5lcmF0ZU1ldGFkYXRhKG9wdGlvbnMpIHtcbiAgICAgICAgY29uc3QgYmFzZSA9IG5ldyBtZXRhZGF0YV8xLk1ldGFkYXRhKCk7XG4gICAgICAgIGNvbnN0IGdlbmVyYXRlZCA9IGF3YWl0IFByb21pc2UuYWxsKHRoaXMuY3JlZHMubWFwKGNyZWQgPT4gY3JlZC5nZW5lcmF0ZU1ldGFkYXRhKG9wdGlvbnMpKSk7XG4gICAgICAgIGZvciAoY29uc3QgZ2VuIG9mIGdlbmVyYXRlZCkge1xuICAgICAgICAgICAgYmFzZS5tZXJnZShnZW4pO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBiYXNlO1xuICAgIH1cbiAgICBjb21wb3NlKG90aGVyKSB7XG4gICAgICAgIHJldHVybiBuZXcgQ29tcG9zZWRDYWxsQ3JlZGVudGlhbHModGhpcy5jcmVkcy5jb25jYXQoW290aGVyXSkpO1xuICAgIH1cbiAgICBfZXF1YWxzKG90aGVyKSB7XG4gICAgICAgIGlmICh0aGlzID09PSBvdGhlcikge1xuICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKG90aGVyIGluc3RhbmNlb2YgQ29tcG9zZWRDYWxsQ3JlZGVudGlhbHMpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLmNyZWRzLmV2ZXJ5KCh2YWx1ZSwgaW5kZXgpID0+IHZhbHVlLl9lcXVhbHMob3RoZXIuY3JlZHNbaW5kZXhdKSk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH1cbiAgICB9XG59XG5jbGFzcyBTaW5nbGVDYWxsQ3JlZGVudGlhbHMgZXh0ZW5kcyBDYWxsQ3JlZGVudGlhbHMge1xuICAgIGNvbnN0cnVjdG9yKG1ldGFkYXRhR2VuZXJhdG9yKSB7XG4gICAgICAgIHN1cGVyKCk7XG4gICAgICAgIHRoaXMubWV0YWRhdGFHZW5lcmF0b3IgPSBtZXRhZGF0YUdlbmVyYXRvcjtcbiAgICB9XG4gICAgZ2VuZXJhdGVNZXRhZGF0YShvcHRpb25zKSB7XG4gICAgICAgIHJldHVybiBuZXcgUHJvbWlzZSgocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XG4gICAgICAgICAgICB0aGlzLm1ldGFkYXRhR2VuZXJhdG9yKG9wdGlvbnMsIChlcnIsIG1ldGFkYXRhKSA9PiB7XG4gICAgICAgICAgICAgICAgaWYgKG1ldGFkYXRhICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgICAgICAgICAgcmVzb2x2ZShtZXRhZGF0YSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICByZWplY3QoZXJyKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfSk7XG4gICAgfVxuICAgIGNvbXBvc2Uob3RoZXIpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBDb21wb3NlZENhbGxDcmVkZW50aWFscyhbdGhpcywgb3RoZXJdKTtcbiAgICB9XG4gICAgX2VxdWFscyhvdGhlcikge1xuICAgICAgICBpZiAodGhpcyA9PT0gb3RoZXIpIHtcbiAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICB9XG4gICAgICAgIGlmIChvdGhlciBpbnN0YW5jZW9mIFNpbmdsZUNhbGxDcmVkZW50aWFscykge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMubWV0YWRhdGFHZW5lcmF0b3IgPT09IG90aGVyLm1ldGFkYXRhR2VuZXJhdG9yO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9XG4gICAgfVxufVxuY2xhc3MgRW1wdHlDYWxsQ3JlZGVudGlhbHMgZXh0ZW5kcyBDYWxsQ3JlZGVudGlhbHMge1xuICAgIGdlbmVyYXRlTWV0YWRhdGEob3B0aW9ucykge1xuICAgICAgICByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKG5ldyBtZXRhZGF0YV8xLk1ldGFkYXRhKCkpO1xuICAgIH1cbiAgICBjb21wb3NlKG90aGVyKSB7XG4gICAgICAgIHJldHVybiBvdGhlcjtcbiAgICB9XG4gICAgX2VxdWFscyhvdGhlcikge1xuICAgICAgICByZXR1cm4gb3RoZXIgaW5zdGFuY2VvZiBFbXB0eUNhbGxDcmVkZW50aWFscztcbiAgICB9XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1jYWxsLWNyZWRlbnRpYWxzLmpzLm1hcCJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/google-gax/node_modules/@grpc/grpc-js/build/src/call-credentials.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/google-gax/node_modules/@grpc/grpc-js/build/src/call-interface.js":
/*!****************************************************************************************!*\
  !*** ./node_modules/google-gax/node_modules/@grpc/grpc-js/build/src/call-interface.js ***!
  \****************************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";
eval("\n/*\n * Copyright 2022 gRPC authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n */\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.InterceptingListenerImpl = void 0;\nexports.isInterceptingListener = isInterceptingListener;\nfunction isInterceptingListener(listener) {\n    return (listener.onReceiveMetadata !== undefined &&\n        listener.onReceiveMetadata.length === 1);\n}\nclass InterceptingListenerImpl {\n    constructor(listener, nextListener) {\n        this.listener = listener;\n        this.nextListener = nextListener;\n        this.processingMetadata = false;\n        this.hasPendingMessage = false;\n        this.processingMessage = false;\n        this.pendingStatus = null;\n    }\n    processPendingMessage() {\n        if (this.hasPendingMessage) {\n            this.nextListener.onReceiveMessage(this.pendingMessage);\n            this.pendingMessage = null;\n            this.hasPendingMessage = false;\n        }\n    }\n    processPendingStatus() {\n        if (this.pendingStatus) {\n            this.nextListener.onReceiveStatus(this.pendingStatus);\n        }\n    }\n    onReceiveMetadata(metadata) {\n        this.processingMetadata = true;\n        this.listener.onReceiveMetadata(metadata, metadata => {\n            this.processingMetadata = false;\n            this.nextListener.onReceiveMetadata(metadata);\n            this.processPendingMessage();\n            this.processPendingStatus();\n        });\n    }\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    onReceiveMessage(message) {\n        /* If this listener processes messages asynchronously, the last message may\n         * be reordered with respect to the status */\n        this.processingMessage = true;\n        this.listener.onReceiveMessage(message, msg => {\n            this.processingMessage = false;\n            if (this.processingMetadata) {\n                this.pendingMessage = msg;\n                this.hasPendingMessage = true;\n            }\n            else {\n                this.nextListener.onReceiveMessage(msg);\n                this.processPendingStatus();\n            }\n        });\n    }\n    onReceiveStatus(status) {\n        this.listener.onReceiveStatus(status, processedStatus => {\n            if (this.processingMetadata || this.processingMessage) {\n                this.pendingStatus = processedStatus;\n            }\n            else {\n                this.nextListener.onReceiveStatus(processedStatus);\n            }\n        });\n    }\n}\nexports.InterceptingListenerImpl = InterceptingListenerImpl;\n//# sourceMappingURL=call-interface.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvZ29vZ2xlLWdheC9ub2RlX21vZHVsZXMvQGdycGMvZ3JwYy1qcy9idWlsZC9zcmMvY2FsbC1pbnRlcmZhY2UuanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDhDQUE2QyxFQUFFLGFBQWEsRUFBQztBQUM3RCxnQ0FBZ0M7QUFDaEMsOEJBQThCO0FBQzlCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQSxnQ0FBZ0M7QUFDaEMiLCJzb3VyY2VzIjpbIi9Vc2Vycy9iYWcteW9zZWIvRGVza3RvcC/hhJHhhanhhIfhhbXhhIvhhaEvaGFja2F0aG9uX3RlYW0vbXktYXBwL25vZGVfbW9kdWxlcy9nb29nbGUtZ2F4L25vZGVfbW9kdWxlcy9AZ3JwYy9ncnBjLWpzL2J1aWxkL3NyYy9jYWxsLWludGVyZmFjZS5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbi8qXG4gKiBDb3B5cmlnaHQgMjAyMiBnUlBDIGF1dGhvcnMuXG4gKlxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuICpcbiAqICAgICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbiAqXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuICpcbiAqL1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5JbnRlcmNlcHRpbmdMaXN0ZW5lckltcGwgPSB2b2lkIDA7XG5leHBvcnRzLmlzSW50ZXJjZXB0aW5nTGlzdGVuZXIgPSBpc0ludGVyY2VwdGluZ0xpc3RlbmVyO1xuZnVuY3Rpb24gaXNJbnRlcmNlcHRpbmdMaXN0ZW5lcihsaXN0ZW5lcikge1xuICAgIHJldHVybiAobGlzdGVuZXIub25SZWNlaXZlTWV0YWRhdGEgIT09IHVuZGVmaW5lZCAmJlxuICAgICAgICBsaXN0ZW5lci5vblJlY2VpdmVNZXRhZGF0YS5sZW5ndGggPT09IDEpO1xufVxuY2xhc3MgSW50ZXJjZXB0aW5nTGlzdGVuZXJJbXBsIHtcbiAgICBjb25zdHJ1Y3RvcihsaXN0ZW5lciwgbmV4dExpc3RlbmVyKSB7XG4gICAgICAgIHRoaXMubGlzdGVuZXIgPSBsaXN0ZW5lcjtcbiAgICAgICAgdGhpcy5uZXh0TGlzdGVuZXIgPSBuZXh0TGlzdGVuZXI7XG4gICAgICAgIHRoaXMucHJvY2Vzc2luZ01ldGFkYXRhID0gZmFsc2U7XG4gICAgICAgIHRoaXMuaGFzUGVuZGluZ01lc3NhZ2UgPSBmYWxzZTtcbiAgICAgICAgdGhpcy5wcm9jZXNzaW5nTWVzc2FnZSA9IGZhbHNlO1xuICAgICAgICB0aGlzLnBlbmRpbmdTdGF0dXMgPSBudWxsO1xuICAgIH1cbiAgICBwcm9jZXNzUGVuZGluZ01lc3NhZ2UoKSB7XG4gICAgICAgIGlmICh0aGlzLmhhc1BlbmRpbmdNZXNzYWdlKSB7XG4gICAgICAgICAgICB0aGlzLm5leHRMaXN0ZW5lci5vblJlY2VpdmVNZXNzYWdlKHRoaXMucGVuZGluZ01lc3NhZ2UpO1xuICAgICAgICAgICAgdGhpcy5wZW5kaW5nTWVzc2FnZSA9IG51bGw7XG4gICAgICAgICAgICB0aGlzLmhhc1BlbmRpbmdNZXNzYWdlID0gZmFsc2U7XG4gICAgICAgIH1cbiAgICB9XG4gICAgcHJvY2Vzc1BlbmRpbmdTdGF0dXMoKSB7XG4gICAgICAgIGlmICh0aGlzLnBlbmRpbmdTdGF0dXMpIHtcbiAgICAgICAgICAgIHRoaXMubmV4dExpc3RlbmVyLm9uUmVjZWl2ZVN0YXR1cyh0aGlzLnBlbmRpbmdTdGF0dXMpO1xuICAgICAgICB9XG4gICAgfVxuICAgIG9uUmVjZWl2ZU1ldGFkYXRhKG1ldGFkYXRhKSB7XG4gICAgICAgIHRoaXMucHJvY2Vzc2luZ01ldGFkYXRhID0gdHJ1ZTtcbiAgICAgICAgdGhpcy5saXN0ZW5lci5vblJlY2VpdmVNZXRhZGF0YShtZXRhZGF0YSwgbWV0YWRhdGEgPT4ge1xuICAgICAgICAgICAgdGhpcy5wcm9jZXNzaW5nTWV0YWRhdGEgPSBmYWxzZTtcbiAgICAgICAgICAgIHRoaXMubmV4dExpc3RlbmVyLm9uUmVjZWl2ZU1ldGFkYXRhKG1ldGFkYXRhKTtcbiAgICAgICAgICAgIHRoaXMucHJvY2Vzc1BlbmRpbmdNZXNzYWdlKCk7XG4gICAgICAgICAgICB0aGlzLnByb2Nlc3NQZW5kaW5nU3RhdHVzKCk7XG4gICAgICAgIH0pO1xuICAgIH1cbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L25vLWV4cGxpY2l0LWFueVxuICAgIG9uUmVjZWl2ZU1lc3NhZ2UobWVzc2FnZSkge1xuICAgICAgICAvKiBJZiB0aGlzIGxpc3RlbmVyIHByb2Nlc3NlcyBtZXNzYWdlcyBhc3luY2hyb25vdXNseSwgdGhlIGxhc3QgbWVzc2FnZSBtYXlcbiAgICAgICAgICogYmUgcmVvcmRlcmVkIHdpdGggcmVzcGVjdCB0byB0aGUgc3RhdHVzICovXG4gICAgICAgIHRoaXMucHJvY2Vzc2luZ01lc3NhZ2UgPSB0cnVlO1xuICAgICAgICB0aGlzLmxpc3RlbmVyLm9uUmVjZWl2ZU1lc3NhZ2UobWVzc2FnZSwgbXNnID0+IHtcbiAgICAgICAgICAgIHRoaXMucHJvY2Vzc2luZ01lc3NhZ2UgPSBmYWxzZTtcbiAgICAgICAgICAgIGlmICh0aGlzLnByb2Nlc3NpbmdNZXRhZGF0YSkge1xuICAgICAgICAgICAgICAgIHRoaXMucGVuZGluZ01lc3NhZ2UgPSBtc2c7XG4gICAgICAgICAgICAgICAgdGhpcy5oYXNQZW5kaW5nTWVzc2FnZSA9IHRydWU7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICB0aGlzLm5leHRMaXN0ZW5lci5vblJlY2VpdmVNZXNzYWdlKG1zZyk7XG4gICAgICAgICAgICAgICAgdGhpcy5wcm9jZXNzUGVuZGluZ1N0YXR1cygpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICB9XG4gICAgb25SZWNlaXZlU3RhdHVzKHN0YXR1cykge1xuICAgICAgICB0aGlzLmxpc3RlbmVyLm9uUmVjZWl2ZVN0YXR1cyhzdGF0dXMsIHByb2Nlc3NlZFN0YXR1cyA9PiB7XG4gICAgICAgICAgICBpZiAodGhpcy5wcm9jZXNzaW5nTWV0YWRhdGEgfHwgdGhpcy5wcm9jZXNzaW5nTWVzc2FnZSkge1xuICAgICAgICAgICAgICAgIHRoaXMucGVuZGluZ1N0YXR1cyA9IHByb2Nlc3NlZFN0YXR1cztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIHRoaXMubmV4dExpc3RlbmVyLm9uUmVjZWl2ZVN0YXR1cyhwcm9jZXNzZWRTdGF0dXMpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICB9XG59XG5leHBvcnRzLkludGVyY2VwdGluZ0xpc3RlbmVySW1wbCA9IEludGVyY2VwdGluZ0xpc3RlbmVySW1wbDtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWNhbGwtaW50ZXJmYWNlLmpzLm1hcCJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/google-gax/node_modules/@grpc/grpc-js/build/src/call-interface.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/google-gax/node_modules/@grpc/grpc-js/build/src/call-number.js":
/*!*************************************************************************************!*\
  !*** ./node_modules/google-gax/node_modules/@grpc/grpc-js/build/src/call-number.js ***!
  \*************************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";
eval("\n/*\n * Copyright 2022 gRPC authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n */\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.getNextCallNumber = getNextCallNumber;\nlet nextCallNumber = 0;\nfunction getNextCallNumber() {\n    return nextCallNumber++;\n}\n//# sourceMappingURL=call-number.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvZ29vZ2xlLWdheC9ub2RlX21vZHVsZXMvQGdycGMvZ3JwYy1qcy9idWlsZC9zcmMvY2FsbC1udW1iZXIuanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDhDQUE2QyxFQUFFLGFBQWEsRUFBQztBQUM3RCx5QkFBeUI7QUFDekI7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsInNvdXJjZXMiOlsiL1VzZXJzL2JhZy15b3NlYi9EZXNrdG9wL+GEkeGFqeGEh+GFteGEi+GFoS9oYWNrYXRob25fdGVhbS9teS1hcHAvbm9kZV9tb2R1bGVzL2dvb2dsZS1nYXgvbm9kZV9tb2R1bGVzL0BncnBjL2dycGMtanMvYnVpbGQvc3JjL2NhbGwtbnVtYmVyLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuLypcbiAqIENvcHlyaWdodCAyMDIyIGdSUEMgYXV0aG9ycy5cbiAqXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4gKlxuICogICAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuICpcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4gKlxuICovXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLmdldE5leHRDYWxsTnVtYmVyID0gZ2V0TmV4dENhbGxOdW1iZXI7XG5sZXQgbmV4dENhbGxOdW1iZXIgPSAwO1xuZnVuY3Rpb24gZ2V0TmV4dENhbGxOdW1iZXIoKSB7XG4gICAgcmV0dXJuIG5leHRDYWxsTnVtYmVyKys7XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1jYWxsLW51bWJlci5qcy5tYXAiXSwibmFtZXMiOltdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/google-gax/node_modules/@grpc/grpc-js/build/src/call-number.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/google-gax/node_modules/@grpc/grpc-js/build/src/call.js":
/*!******************************************************************************!*\
  !*** ./node_modules/google-gax/node_modules/@grpc/grpc-js/build/src/call.js ***!
  \******************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\n/*\n * Copyright 2019 gRPC authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n */\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.ClientDuplexStreamImpl = exports.ClientWritableStreamImpl = exports.ClientReadableStreamImpl = exports.ClientUnaryCallImpl = void 0;\nexports.callErrorFromStatus = callErrorFromStatus;\nconst events_1 = __webpack_require__(/*! events */ \"events\");\nconst stream_1 = __webpack_require__(/*! stream */ \"stream\");\nconst constants_1 = __webpack_require__(/*! ./constants */ \"(rsc)/./node_modules/google-gax/node_modules/@grpc/grpc-js/build/src/constants.js\");\n/**\n * Construct a ServiceError from a StatusObject. This function exists primarily\n * as an attempt to make the error stack trace clearly communicate that the\n * error is not necessarily a problem in gRPC itself.\n * @param status\n */\nfunction callErrorFromStatus(status, callerStack) {\n    const message = `${status.code} ${constants_1.Status[status.code]}: ${status.details}`;\n    const error = new Error(message);\n    const stack = `${error.stack}\\nfor call at\\n${callerStack}`;\n    return Object.assign(new Error(message), status, { stack });\n}\nclass ClientUnaryCallImpl extends events_1.EventEmitter {\n    constructor() {\n        super();\n    }\n    cancel() {\n        var _a;\n        (_a = this.call) === null || _a === void 0 ? void 0 : _a.cancelWithStatus(constants_1.Status.CANCELLED, 'Cancelled on client');\n    }\n    getPeer() {\n        var _a, _b;\n        return (_b = (_a = this.call) === null || _a === void 0 ? void 0 : _a.getPeer()) !== null && _b !== void 0 ? _b : 'unknown';\n    }\n}\nexports.ClientUnaryCallImpl = ClientUnaryCallImpl;\nclass ClientReadableStreamImpl extends stream_1.Readable {\n    constructor(deserialize) {\n        super({ objectMode: true });\n        this.deserialize = deserialize;\n    }\n    cancel() {\n        var _a;\n        (_a = this.call) === null || _a === void 0 ? void 0 : _a.cancelWithStatus(constants_1.Status.CANCELLED, 'Cancelled on client');\n    }\n    getPeer() {\n        var _a, _b;\n        return (_b = (_a = this.call) === null || _a === void 0 ? void 0 : _a.getPeer()) !== null && _b !== void 0 ? _b : 'unknown';\n    }\n    _read(_size) {\n        var _a;\n        (_a = this.call) === null || _a === void 0 ? void 0 : _a.startRead();\n    }\n}\nexports.ClientReadableStreamImpl = ClientReadableStreamImpl;\nclass ClientWritableStreamImpl extends stream_1.Writable {\n    constructor(serialize) {\n        super({ objectMode: true });\n        this.serialize = serialize;\n    }\n    cancel() {\n        var _a;\n        (_a = this.call) === null || _a === void 0 ? void 0 : _a.cancelWithStatus(constants_1.Status.CANCELLED, 'Cancelled on client');\n    }\n    getPeer() {\n        var _a, _b;\n        return (_b = (_a = this.call) === null || _a === void 0 ? void 0 : _a.getPeer()) !== null && _b !== void 0 ? _b : 'unknown';\n    }\n    _write(chunk, encoding, cb) {\n        var _a;\n        const context = {\n            callback: cb,\n        };\n        const flags = Number(encoding);\n        if (!Number.isNaN(flags)) {\n            context.flags = flags;\n        }\n        (_a = this.call) === null || _a === void 0 ? void 0 : _a.sendMessageWithContext(context, chunk);\n    }\n    _final(cb) {\n        var _a;\n        (_a = this.call) === null || _a === void 0 ? void 0 : _a.halfClose();\n        cb();\n    }\n}\nexports.ClientWritableStreamImpl = ClientWritableStreamImpl;\nclass ClientDuplexStreamImpl extends stream_1.Duplex {\n    constructor(serialize, deserialize) {\n        super({ objectMode: true });\n        this.serialize = serialize;\n        this.deserialize = deserialize;\n    }\n    cancel() {\n        var _a;\n        (_a = this.call) === null || _a === void 0 ? void 0 : _a.cancelWithStatus(constants_1.Status.CANCELLED, 'Cancelled on client');\n    }\n    getPeer() {\n        var _a, _b;\n        return (_b = (_a = this.call) === null || _a === void 0 ? void 0 : _a.getPeer()) !== null && _b !== void 0 ? _b : 'unknown';\n    }\n    _read(_size) {\n        var _a;\n        (_a = this.call) === null || _a === void 0 ? void 0 : _a.startRead();\n    }\n    _write(chunk, encoding, cb) {\n        var _a;\n        const context = {\n            callback: cb,\n        };\n        const flags = Number(encoding);\n        if (!Number.isNaN(flags)) {\n            context.flags = flags;\n        }\n        (_a = this.call) === null || _a === void 0 ? void 0 : _a.sendMessageWithContext(context, chunk);\n    }\n    _final(cb) {\n        var _a;\n        (_a = this.call) === null || _a === void 0 ? void 0 : _a.halfClose();\n        cb();\n    }\n}\nexports.ClientDuplexStreamImpl = ClientDuplexStreamImpl;\n//# sourceMappingURL=call.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/google-gax/node_modules/@grpc/grpc-js/build/src/call.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/google-gax/node_modules/@grpc/grpc-js/build/src/certificate-provider.js":
/*!**********************************************************************************************!*\
  !*** ./node_modules/google-gax/node_modules/@grpc/grpc-js/build/src/certificate-provider.js ***!
  \**********************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\n/*\n * Copyright 2024 gRPC authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n */\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.FileWatcherCertificateProvider = void 0;\nconst fs = __webpack_require__(/*! fs */ \"fs\");\nconst logging = __webpack_require__(/*! ./logging */ \"(rsc)/./node_modules/google-gax/node_modules/@grpc/grpc-js/build/src/logging.js\");\nconst constants_1 = __webpack_require__(/*! ./constants */ \"(rsc)/./node_modules/google-gax/node_modules/@grpc/grpc-js/build/src/constants.js\");\nconst util_1 = __webpack_require__(/*! util */ \"util\");\nconst TRACER_NAME = 'certificate_provider';\nfunction trace(text) {\n    logging.trace(constants_1.LogVerbosity.DEBUG, TRACER_NAME, text);\n}\nconst readFilePromise = (0, util_1.promisify)(fs.readFile);\nclass FileWatcherCertificateProvider {\n    constructor(config) {\n        this.config = config;\n        this.refreshTimer = null;\n        this.fileResultPromise = null;\n        this.latestCaUpdate = undefined;\n        this.caListeners = new Set();\n        this.latestIdentityUpdate = undefined;\n        this.identityListeners = new Set();\n        this.lastUpdateTime = null;\n        if ((config.certificateFile === undefined) !== (config.privateKeyFile === undefined)) {\n            throw new Error('certificateFile and privateKeyFile must be set or unset together');\n        }\n        if (config.certificateFile === undefined && config.caCertificateFile === undefined) {\n            throw new Error('At least one of certificateFile and caCertificateFile must be set');\n        }\n        trace('File watcher constructed with config ' + JSON.stringify(config));\n    }\n    updateCertificates() {\n        if (this.fileResultPromise) {\n            return;\n        }\n        this.fileResultPromise = Promise.allSettled([\n            this.config.certificateFile ? readFilePromise(this.config.certificateFile) : Promise.reject(),\n            this.config.privateKeyFile ? readFilePromise(this.config.privateKeyFile) : Promise.reject(),\n            this.config.caCertificateFile ? readFilePromise(this.config.caCertificateFile) : Promise.reject()\n        ]);\n        this.fileResultPromise.then(([certificateResult, privateKeyResult, caCertificateResult]) => {\n            if (!this.refreshTimer) {\n                return;\n            }\n            trace('File watcher read certificates certificate ' + certificateResult.status + ', privateKey ' + privateKeyResult.status + ', CA certificate ' + caCertificateResult.status);\n            this.lastUpdateTime = new Date();\n            this.fileResultPromise = null;\n            if (certificateResult.status === 'fulfilled' && privateKeyResult.status === 'fulfilled') {\n                this.latestIdentityUpdate = {\n                    certificate: certificateResult.value,\n                    privateKey: privateKeyResult.value\n                };\n            }\n            else {\n                this.latestIdentityUpdate = null;\n            }\n            if (caCertificateResult.status === 'fulfilled') {\n                this.latestCaUpdate = {\n                    caCertificate: caCertificateResult.value\n                };\n            }\n            else {\n                this.latestCaUpdate = null;\n            }\n            for (const listener of this.identityListeners) {\n                listener(this.latestIdentityUpdate);\n            }\n            for (const listener of this.caListeners) {\n                listener(this.latestCaUpdate);\n            }\n        });\n        trace('File watcher initiated certificate update');\n    }\n    maybeStartWatchingFiles() {\n        if (!this.refreshTimer) {\n            /* Perform the first read immediately, but only if there was not already\n             * a recent read, to avoid reading from the filesystem significantly more\n             * frequently than configured if the provider quickly switches between\n             * used and unused. */\n            const timeSinceLastUpdate = this.lastUpdateTime ? (new Date()).getTime() - this.lastUpdateTime.getTime() : Infinity;\n            if (timeSinceLastUpdate > this.config.refreshIntervalMs) {\n                this.updateCertificates();\n            }\n            if (timeSinceLastUpdate > this.config.refreshIntervalMs * 2) {\n                // Clear out old updates if they are definitely stale\n                this.latestCaUpdate = undefined;\n                this.latestIdentityUpdate = undefined;\n            }\n            this.refreshTimer = setInterval(() => this.updateCertificates(), this.config.refreshIntervalMs);\n            trace('File watcher started watching');\n        }\n    }\n    maybeStopWatchingFiles() {\n        if (this.caListeners.size === 0 && this.identityListeners.size === 0) {\n            this.fileResultPromise = null;\n            if (this.refreshTimer) {\n                clearInterval(this.refreshTimer);\n                this.refreshTimer = null;\n            }\n        }\n    }\n    addCaCertificateListener(listener) {\n        this.caListeners.add(listener);\n        this.maybeStartWatchingFiles();\n        if (this.latestCaUpdate !== undefined) {\n            process.nextTick(listener, this.latestCaUpdate);\n        }\n    }\n    removeCaCertificateListener(listener) {\n        this.caListeners.delete(listener);\n        this.maybeStopWatchingFiles();\n    }\n    addIdentityCertificateListener(listener) {\n        this.identityListeners.add(listener);\n        this.maybeStartWatchingFiles();\n        if (this.latestIdentityUpdate !== undefined) {\n            process.nextTick(listener, this.latestIdentityUpdate);\n        }\n    }\n    removeIdentityCertificateListener(listener) {\n        this.identityListeners.delete(listener);\n        this.maybeStopWatchingFiles();\n    }\n}\nexports.FileWatcherCertificateProvider = FileWatcherCertificateProvider;\n//# sourceMappingURL=certificate-provider.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/google-gax/node_modules/@grpc/grpc-js/build/src/certificate-provider.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/google-gax/node_modules/@grpc/grpc-js/build/src/channel-credentials.js":
/*!*********************************************************************************************!*\
  !*** ./node_modules/google-gax/node_modules/@grpc/grpc-js/build/src/channel-credentials.js ***!
  \*********************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\n/*\n * Copyright 2019 gRPC authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n */\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.ChannelCredentials = void 0;\nexports.createCertificateProviderChannelCredentials = createCertificateProviderChannelCredentials;\nconst tls_1 = __webpack_require__(/*! tls */ \"tls\");\nconst call_credentials_1 = __webpack_require__(/*! ./call-credentials */ \"(rsc)/./node_modules/google-gax/node_modules/@grpc/grpc-js/build/src/call-credentials.js\");\nconst tls_helpers_1 = __webpack_require__(/*! ./tls-helpers */ \"(rsc)/./node_modules/google-gax/node_modules/@grpc/grpc-js/build/src/tls-helpers.js\");\nconst uri_parser_1 = __webpack_require__(/*! ./uri-parser */ \"(rsc)/./node_modules/google-gax/node_modules/@grpc/grpc-js/build/src/uri-parser.js\");\nconst resolver_1 = __webpack_require__(/*! ./resolver */ \"(rsc)/./node_modules/google-gax/node_modules/@grpc/grpc-js/build/src/resolver.js\");\nconst logging_1 = __webpack_require__(/*! ./logging */ \"(rsc)/./node_modules/google-gax/node_modules/@grpc/grpc-js/build/src/logging.js\");\nconst constants_1 = __webpack_require__(/*! ./constants */ \"(rsc)/./node_modules/google-gax/node_modules/@grpc/grpc-js/build/src/constants.js\");\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nfunction verifyIsBufferOrNull(obj, friendlyName) {\n    if (obj && !(obj instanceof Buffer)) {\n        throw new TypeError(`${friendlyName}, if provided, must be a Buffer.`);\n    }\n}\n/**\n * A class that contains credentials for communicating over a channel, as well\n * as a set of per-call credentials, which are applied to every method call made\n * over a channel initialized with an instance of this class.\n */\nclass ChannelCredentials {\n    /**\n     * Returns a copy of this object with the included set of per-call credentials\n     * expanded to include callCredentials.\n     * @param callCredentials A CallCredentials object to associate with this\n     * instance.\n     */\n    compose(callCredentials) {\n        return new ComposedChannelCredentialsImpl(this, callCredentials);\n    }\n    /**\n     * Return a new ChannelCredentials instance with a given set of credentials.\n     * The resulting instance can be used to construct a Channel that communicates\n     * over TLS.\n     * @param rootCerts The root certificate data.\n     * @param privateKey The client certificate private key, if available.\n     * @param certChain The client certificate key chain, if available.\n     * @param verifyOptions Additional options to modify certificate verification\n     */\n    static createSsl(rootCerts, privateKey, certChain, verifyOptions) {\n        var _a;\n        verifyIsBufferOrNull(rootCerts, 'Root certificate');\n        verifyIsBufferOrNull(privateKey, 'Private key');\n        verifyIsBufferOrNull(certChain, 'Certificate chain');\n        if (privateKey && !certChain) {\n            throw new Error('Private key must be given with accompanying certificate chain');\n        }\n        if (!privateKey && certChain) {\n            throw new Error('Certificate chain must be given with accompanying private key');\n        }\n        const secureContext = (0, tls_1.createSecureContext)({\n            ca: (_a = rootCerts !== null && rootCerts !== void 0 ? rootCerts : (0, tls_helpers_1.getDefaultRootsData)()) !== null && _a !== void 0 ? _a : undefined,\n            key: privateKey !== null && privateKey !== void 0 ? privateKey : undefined,\n            cert: certChain !== null && certChain !== void 0 ? certChain : undefined,\n            ciphers: tls_helpers_1.CIPHER_SUITES,\n        });\n        return new SecureChannelCredentialsImpl(secureContext, verifyOptions !== null && verifyOptions !== void 0 ? verifyOptions : {});\n    }\n    /**\n     * Return a new ChannelCredentials instance with credentials created using\n     * the provided secureContext. The resulting instances can be used to\n     * construct a Channel that communicates over TLS. gRPC will not override\n     * anything in the provided secureContext, so the environment variables\n     * GRPC_SSL_CIPHER_SUITES and GRPC_DEFAULT_SSL_ROOTS_FILE_PATH will\n     * not be applied.\n     * @param secureContext The return value of tls.createSecureContext()\n     * @param verifyOptions Additional options to modify certificate verification\n     */\n    static createFromSecureContext(secureContext, verifyOptions) {\n        return new SecureChannelCredentialsImpl(secureContext, verifyOptions !== null && verifyOptions !== void 0 ? verifyOptions : {});\n    }\n    /**\n     * Return a new ChannelCredentials instance with no credentials.\n     */\n    static createInsecure() {\n        return new InsecureChannelCredentialsImpl();\n    }\n}\nexports.ChannelCredentials = ChannelCredentials;\nclass InsecureChannelCredentialsImpl extends ChannelCredentials {\n    constructor() {\n        super();\n    }\n    compose(callCredentials) {\n        throw new Error('Cannot compose insecure credentials');\n    }\n    _isSecure() {\n        return false;\n    }\n    _equals(other) {\n        return other instanceof InsecureChannelCredentialsImpl;\n    }\n    _createSecureConnector(channelTarget, options, callCredentials) {\n        return {\n            connect(socket) {\n                return Promise.resolve({\n                    socket,\n                    secure: false\n                });\n            },\n            waitForReady: () => {\n                return Promise.resolve();\n            },\n            getCallCredentials: () => {\n                return callCredentials !== null && callCredentials !== void 0 ? callCredentials : call_credentials_1.CallCredentials.createEmpty();\n            },\n            destroy() { }\n        };\n    }\n}\nfunction getConnectionOptions(secureContext, verifyOptions, channelTarget, options) {\n    var _a, _b;\n    const connectionOptions = {\n        secureContext: secureContext\n    };\n    let realTarget = channelTarget;\n    if ('grpc.http_connect_target' in options) {\n        const parsedTarget = (0, uri_parser_1.parseUri)(options['grpc.http_connect_target']);\n        if (parsedTarget) {\n            realTarget = parsedTarget;\n        }\n    }\n    const targetPath = (0, resolver_1.getDefaultAuthority)(realTarget);\n    const hostPort = (0, uri_parser_1.splitHostPort)(targetPath);\n    const remoteHost = (_a = hostPort === null || hostPort === void 0 ? void 0 : hostPort.host) !== null && _a !== void 0 ? _a : targetPath;\n    connectionOptions.host = remoteHost;\n    if (verifyOptions.checkServerIdentity) {\n        connectionOptions.checkServerIdentity = verifyOptions.checkServerIdentity;\n    }\n    if (verifyOptions.rejectUnauthorized !== undefined) {\n        connectionOptions.rejectUnauthorized = verifyOptions.rejectUnauthorized;\n    }\n    connectionOptions.ALPNProtocols = ['h2'];\n    if (options['grpc.ssl_target_name_override']) {\n        const sslTargetNameOverride = options['grpc.ssl_target_name_override'];\n        const originalCheckServerIdentity = (_b = connectionOptions.checkServerIdentity) !== null && _b !== void 0 ? _b : tls_1.checkServerIdentity;\n        connectionOptions.checkServerIdentity = (host, cert) => {\n            return originalCheckServerIdentity(sslTargetNameOverride, cert);\n        };\n        connectionOptions.servername = sslTargetNameOverride;\n    }\n    else {\n        connectionOptions.servername = remoteHost;\n    }\n    if (options['grpc-node.tls_enable_trace']) {\n        connectionOptions.enableTrace = true;\n    }\n    return connectionOptions;\n}\nclass SecureConnectorImpl {\n    constructor(connectionOptions, callCredentials) {\n        this.connectionOptions = connectionOptions;\n        this.callCredentials = callCredentials;\n    }\n    connect(socket) {\n        const tlsConnectOptions = Object.assign({ socket: socket }, this.connectionOptions);\n        return new Promise((resolve, reject) => {\n            const tlsSocket = (0, tls_1.connect)(tlsConnectOptions, () => {\n                var _a;\n                if (((_a = this.connectionOptions.rejectUnauthorized) !== null && _a !== void 0 ? _a : true) && !tlsSocket.authorized) {\n                    reject(tlsSocket.authorizationError);\n                    return;\n                }\n                resolve({\n                    socket: tlsSocket,\n                    secure: true\n                });\n            });\n            tlsSocket.on('error', (error) => {\n                reject(error);\n            });\n        });\n    }\n    waitForReady() {\n        return Promise.resolve();\n    }\n    getCallCredentials() {\n        return this.callCredentials;\n    }\n    destroy() { }\n}\nclass SecureChannelCredentialsImpl extends ChannelCredentials {\n    constructor(secureContext, verifyOptions) {\n        super();\n        this.secureContext = secureContext;\n        this.verifyOptions = verifyOptions;\n    }\n    _isSecure() {\n        return true;\n    }\n    _equals(other) {\n        if (this === other) {\n            return true;\n        }\n        if (other instanceof SecureChannelCredentialsImpl) {\n            return (this.secureContext === other.secureContext &&\n                this.verifyOptions.checkServerIdentity ===\n                    other.verifyOptions.checkServerIdentity);\n        }\n        else {\n            return false;\n        }\n    }\n    _createSecureConnector(channelTarget, options, callCredentials) {\n        const connectionOptions = getConnectionOptions(this.secureContext, this.verifyOptions, channelTarget, options);\n        return new SecureConnectorImpl(connectionOptions, callCredentials !== null && callCredentials !== void 0 ? callCredentials : call_credentials_1.CallCredentials.createEmpty());\n    }\n}\nclass CertificateProviderChannelCredentialsImpl extends ChannelCredentials {\n    constructor(caCertificateProvider, identityCertificateProvider, verifyOptions) {\n        super();\n        this.caCertificateProvider = caCertificateProvider;\n        this.identityCertificateProvider = identityCertificateProvider;\n        this.verifyOptions = verifyOptions;\n        this.refcount = 0;\n        /**\n         * `undefined` means that the certificates have not yet been loaded. `null`\n         * means that an attempt to load them has completed, and has failed.\n         */\n        this.latestCaUpdate = undefined;\n        /**\n         * `undefined` means that the certificates have not yet been loaded. `null`\n         * means that an attempt to load them has completed, and has failed.\n         */\n        this.latestIdentityUpdate = undefined;\n        this.caCertificateUpdateListener = this.handleCaCertificateUpdate.bind(this);\n        this.identityCertificateUpdateListener = this.handleIdentityCertitificateUpdate.bind(this);\n        this.secureContextWatchers = [];\n    }\n    _isSecure() {\n        return true;\n    }\n    _equals(other) {\n        var _a, _b;\n        if (this === other) {\n            return true;\n        }\n        if (other instanceof CertificateProviderChannelCredentialsImpl) {\n            return this.caCertificateProvider === other.caCertificateProvider &&\n                this.identityCertificateProvider === other.identityCertificateProvider &&\n                ((_a = this.verifyOptions) === null || _a === void 0 ? void 0 : _a.checkServerIdentity) === ((_b = other.verifyOptions) === null || _b === void 0 ? void 0 : _b.checkServerIdentity);\n        }\n        else {\n            return false;\n        }\n    }\n    ref() {\n        var _a;\n        if (this.refcount === 0) {\n            this.caCertificateProvider.addCaCertificateListener(this.caCertificateUpdateListener);\n            (_a = this.identityCertificateProvider) === null || _a === void 0 ? void 0 : _a.addIdentityCertificateListener(this.identityCertificateUpdateListener);\n        }\n        this.refcount += 1;\n    }\n    unref() {\n        var _a;\n        this.refcount -= 1;\n        if (this.refcount === 0) {\n            this.caCertificateProvider.removeCaCertificateListener(this.caCertificateUpdateListener);\n            (_a = this.identityCertificateProvider) === null || _a === void 0 ? void 0 : _a.removeIdentityCertificateListener(this.identityCertificateUpdateListener);\n        }\n    }\n    _createSecureConnector(channelTarget, options, callCredentials) {\n        this.ref();\n        return new CertificateProviderChannelCredentialsImpl.SecureConnectorImpl(this, channelTarget, options, callCredentials !== null && callCredentials !== void 0 ? callCredentials : call_credentials_1.CallCredentials.createEmpty());\n    }\n    maybeUpdateWatchers() {\n        if (this.hasReceivedUpdates()) {\n            for (const watcher of this.secureContextWatchers) {\n                watcher(this.getLatestSecureContext());\n            }\n            this.secureContextWatchers = [];\n        }\n    }\n    handleCaCertificateUpdate(update) {\n        this.latestCaUpdate = update;\n        this.maybeUpdateWatchers();\n    }\n    handleIdentityCertitificateUpdate(update) {\n        this.latestIdentityUpdate = update;\n        this.maybeUpdateWatchers();\n    }\n    hasReceivedUpdates() {\n        if (this.latestCaUpdate === undefined) {\n            return false;\n        }\n        if (this.identityCertificateProvider && this.latestIdentityUpdate === undefined) {\n            return false;\n        }\n        return true;\n    }\n    getSecureContext() {\n        if (this.hasReceivedUpdates()) {\n            return Promise.resolve(this.getLatestSecureContext());\n        }\n        else {\n            return new Promise(resolve => {\n                this.secureContextWatchers.push(resolve);\n            });\n        }\n    }\n    getLatestSecureContext() {\n        var _a, _b;\n        if (!this.latestCaUpdate) {\n            return null;\n        }\n        if (this.identityCertificateProvider !== null && !this.latestIdentityUpdate) {\n            return null;\n        }\n        try {\n            return (0, tls_1.createSecureContext)({\n                ca: this.latestCaUpdate.caCertificate,\n                key: (_a = this.latestIdentityUpdate) === null || _a === void 0 ? void 0 : _a.privateKey,\n                cert: (_b = this.latestIdentityUpdate) === null || _b === void 0 ? void 0 : _b.certificate,\n                ciphers: tls_helpers_1.CIPHER_SUITES\n            });\n        }\n        catch (e) {\n            (0, logging_1.log)(constants_1.LogVerbosity.ERROR, 'Failed to createSecureContext with error ' + e.message);\n            return null;\n        }\n    }\n}\nCertificateProviderChannelCredentialsImpl.SecureConnectorImpl = class {\n    constructor(parent, channelTarget, options, callCredentials) {\n        this.parent = parent;\n        this.channelTarget = channelTarget;\n        this.options = options;\n        this.callCredentials = callCredentials;\n    }\n    connect(socket) {\n        return new Promise((resolve, reject) => {\n            const secureContext = this.parent.getLatestSecureContext();\n            if (!secureContext) {\n                reject(new Error('Failed to load credentials'));\n                return;\n            }\n            if (socket.closed) {\n                reject(new Error('Socket closed while loading credentials'));\n            }\n            const connnectionOptions = getConnectionOptions(secureContext, this.parent.verifyOptions, this.channelTarget, this.options);\n            const tlsConnectOptions = Object.assign({ socket: socket }, connnectionOptions);\n            const closeCallback = () => {\n                reject(new Error('Socket closed'));\n            };\n            const errorCallback = (error) => {\n                reject(error);\n            };\n            const tlsSocket = (0, tls_1.connect)(tlsConnectOptions, () => {\n                var _a;\n                tlsSocket.removeListener('close', closeCallback);\n                tlsSocket.removeListener('error', errorCallback);\n                if (((_a = this.parent.verifyOptions.rejectUnauthorized) !== null && _a !== void 0 ? _a : true) && !tlsSocket.authorized) {\n                    reject(tlsSocket.authorizationError);\n                    return;\n                }\n                resolve({\n                    socket: tlsSocket,\n                    secure: true\n                });\n            });\n            tlsSocket.once('close', closeCallback);\n            tlsSocket.once('error', errorCallback);\n        });\n    }\n    async waitForReady() {\n        await this.parent.getSecureContext();\n    }\n    getCallCredentials() {\n        return this.callCredentials;\n    }\n    destroy() {\n        this.parent.unref();\n    }\n};\nfunction createCertificateProviderChannelCredentials(caCertificateProvider, identityCertificateProvider, verifyOptions) {\n    return new CertificateProviderChannelCredentialsImpl(caCertificateProvider, identityCertificateProvider, verifyOptions !== null && verifyOptions !== void 0 ? verifyOptions : {});\n}\nclass ComposedChannelCredentialsImpl extends ChannelCredentials {\n    constructor(channelCredentials, callCredentials) {\n        super();\n        this.channelCredentials = channelCredentials;\n        this.callCredentials = callCredentials;\n        if (!channelCredentials._isSecure()) {\n            throw new Error('Cannot compose insecure credentials');\n        }\n    }\n    compose(callCredentials) {\n        const combinedCallCredentials = this.callCredentials.compose(callCredentials);\n        return new ComposedChannelCredentialsImpl(this.channelCredentials, combinedCallCredentials);\n    }\n    _isSecure() {\n        return true;\n    }\n    _equals(other) {\n        if (this === other) {\n            return true;\n        }\n        if (other instanceof ComposedChannelCredentialsImpl) {\n            return (this.channelCredentials._equals(other.channelCredentials) &&\n                this.callCredentials._equals(other.callCredentials));\n        }\n        else {\n            return false;\n        }\n    }\n    _createSecureConnector(channelTarget, options, callCredentials) {\n        const combinedCallCredentials = this.callCredentials.compose(callCredentials !== null && callCredentials !== void 0 ? callCredentials : call_credentials_1.CallCredentials.createEmpty());\n        return this.channelCredentials._createSecureConnector(channelTarget, options, combinedCallCredentials);\n    }\n}\n//# sourceMappingURL=channel-credentials.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/google-gax/node_modules/@grpc/grpc-js/build/src/channel-credentials.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/google-gax/node_modules/@grpc/grpc-js/build/src/channel-options.js":
/*!*****************************************************************************************!*\
  !*** ./node_modules/google-gax/node_modules/@grpc/grpc-js/build/src/channel-options.js ***!
  \*****************************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";
eval("\n/*\n * Copyright 2019 gRPC authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n */\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.recognizedOptions = void 0;\nexports.channelOptionsEqual = channelOptionsEqual;\n/**\n * This is for checking provided options at runtime. This is an object for\n * easier membership checking.\n */\nexports.recognizedOptions = {\n    'grpc.ssl_target_name_override': true,\n    'grpc.primary_user_agent': true,\n    'grpc.secondary_user_agent': true,\n    'grpc.default_authority': true,\n    'grpc.keepalive_time_ms': true,\n    'grpc.keepalive_timeout_ms': true,\n    'grpc.keepalive_permit_without_calls': true,\n    'grpc.service_config': true,\n    'grpc.max_concurrent_streams': true,\n    'grpc.initial_reconnect_backoff_ms': true,\n    'grpc.max_reconnect_backoff_ms': true,\n    'grpc.use_local_subchannel_pool': true,\n    'grpc.max_send_message_length': true,\n    'grpc.max_receive_message_length': true,\n    'grpc.enable_http_proxy': true,\n    'grpc.enable_channelz': true,\n    'grpc.dns_min_time_between_resolutions_ms': true,\n    'grpc.enable_retries': true,\n    'grpc.per_rpc_retry_buffer_size': true,\n    'grpc.retry_buffer_size': true,\n    'grpc.max_connection_age_ms': true,\n    'grpc.max_connection_age_grace_ms': true,\n    'grpc-node.max_session_memory': true,\n    'grpc.service_config_disable_resolution': true,\n    'grpc.client_idle_timeout_ms': true,\n    'grpc-node.tls_enable_trace': true,\n    'grpc.lb.ring_hash.ring_size_cap': true,\n    'grpc-node.retry_max_attempts_limit': true,\n    'grpc-node.flow_control_window': true,\n};\nfunction channelOptionsEqual(options1, options2) {\n    const keys1 = Object.keys(options1).sort();\n    const keys2 = Object.keys(options2).sort();\n    if (keys1.length !== keys2.length) {\n        return false;\n    }\n    for (let i = 0; i < keys1.length; i += 1) {\n        if (keys1[i] !== keys2[i]) {\n            return false;\n        }\n        if (options1[keys1[i]] !== options2[keys2[i]]) {\n            return false;\n        }\n    }\n    return true;\n}\n//# sourceMappingURL=channel-options.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvZ29vZ2xlLWdheC9ub2RlX21vZHVsZXMvQGdycGMvZ3JwYy1qcy9idWlsZC9zcmMvY2hhbm5lbC1vcHRpb25zLmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSw4Q0FBNkMsRUFBRSxhQUFhLEVBQUM7QUFDN0QseUJBQXlCO0FBQ3pCLDJCQUEyQjtBQUMzQjtBQUNBO0FBQ0E7QUFDQTtBQUNBLHlCQUF5QjtBQUN6QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxvQkFBb0Isa0JBQWtCO0FBQ3RDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwic291cmNlcyI6WyIvVXNlcnMvYmFnLXlvc2ViL0Rlc2t0b3Av4YSR4YWp4YSH4YW14YSL4YWhL2hhY2thdGhvbl90ZWFtL215LWFwcC9ub2RlX21vZHVsZXMvZ29vZ2xlLWdheC9ub2RlX21vZHVsZXMvQGdycGMvZ3JwYy1qcy9idWlsZC9zcmMvY2hhbm5lbC1vcHRpb25zLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuLypcbiAqIENvcHlyaWdodCAyMDE5IGdSUEMgYXV0aG9ycy5cbiAqXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4gKlxuICogICAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuICpcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4gKlxuICovXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLnJlY29nbml6ZWRPcHRpb25zID0gdm9pZCAwO1xuZXhwb3J0cy5jaGFubmVsT3B0aW9uc0VxdWFsID0gY2hhbm5lbE9wdGlvbnNFcXVhbDtcbi8qKlxuICogVGhpcyBpcyBmb3IgY2hlY2tpbmcgcHJvdmlkZWQgb3B0aW9ucyBhdCBydW50aW1lLiBUaGlzIGlzIGFuIG9iamVjdCBmb3JcbiAqIGVhc2llciBtZW1iZXJzaGlwIGNoZWNraW5nLlxuICovXG5leHBvcnRzLnJlY29nbml6ZWRPcHRpb25zID0ge1xuICAgICdncnBjLnNzbF90YXJnZXRfbmFtZV9vdmVycmlkZSc6IHRydWUsXG4gICAgJ2dycGMucHJpbWFyeV91c2VyX2FnZW50JzogdHJ1ZSxcbiAgICAnZ3JwYy5zZWNvbmRhcnlfdXNlcl9hZ2VudCc6IHRydWUsXG4gICAgJ2dycGMuZGVmYXVsdF9hdXRob3JpdHknOiB0cnVlLFxuICAgICdncnBjLmtlZXBhbGl2ZV90aW1lX21zJzogdHJ1ZSxcbiAgICAnZ3JwYy5rZWVwYWxpdmVfdGltZW91dF9tcyc6IHRydWUsXG4gICAgJ2dycGMua2VlcGFsaXZlX3Blcm1pdF93aXRob3V0X2NhbGxzJzogdHJ1ZSxcbiAgICAnZ3JwYy5zZXJ2aWNlX2NvbmZpZyc6IHRydWUsXG4gICAgJ2dycGMubWF4X2NvbmN1cnJlbnRfc3RyZWFtcyc6IHRydWUsXG4gICAgJ2dycGMuaW5pdGlhbF9yZWNvbm5lY3RfYmFja29mZl9tcyc6IHRydWUsXG4gICAgJ2dycGMubWF4X3JlY29ubmVjdF9iYWNrb2ZmX21zJzogdHJ1ZSxcbiAgICAnZ3JwYy51c2VfbG9jYWxfc3ViY2hhbm5lbF9wb29sJzogdHJ1ZSxcbiAgICAnZ3JwYy5tYXhfc2VuZF9tZXNzYWdlX2xlbmd0aCc6IHRydWUsXG4gICAgJ2dycGMubWF4X3JlY2VpdmVfbWVzc2FnZV9sZW5ndGgnOiB0cnVlLFxuICAgICdncnBjLmVuYWJsZV9odHRwX3Byb3h5JzogdHJ1ZSxcbiAgICAnZ3JwYy5lbmFibGVfY2hhbm5lbHonOiB0cnVlLFxuICAgICdncnBjLmRuc19taW5fdGltZV9iZXR3ZWVuX3Jlc29sdXRpb25zX21zJzogdHJ1ZSxcbiAgICAnZ3JwYy5lbmFibGVfcmV0cmllcyc6IHRydWUsXG4gICAgJ2dycGMucGVyX3JwY19yZXRyeV9idWZmZXJfc2l6ZSc6IHRydWUsXG4gICAgJ2dycGMucmV0cnlfYnVmZmVyX3NpemUnOiB0cnVlLFxuICAgICdncnBjLm1heF9jb25uZWN0aW9uX2FnZV9tcyc6IHRydWUsXG4gICAgJ2dycGMubWF4X2Nvbm5lY3Rpb25fYWdlX2dyYWNlX21zJzogdHJ1ZSxcbiAgICAnZ3JwYy1ub2RlLm1heF9zZXNzaW9uX21lbW9yeSc6IHRydWUsXG4gICAgJ2dycGMuc2VydmljZV9jb25maWdfZGlzYWJsZV9yZXNvbHV0aW9uJzogdHJ1ZSxcbiAgICAnZ3JwYy5jbGllbnRfaWRsZV90aW1lb3V0X21zJzogdHJ1ZSxcbiAgICAnZ3JwYy1ub2RlLnRsc19lbmFibGVfdHJhY2UnOiB0cnVlLFxuICAgICdncnBjLmxiLnJpbmdfaGFzaC5yaW5nX3NpemVfY2FwJzogdHJ1ZSxcbiAgICAnZ3JwYy1ub2RlLnJldHJ5X21heF9hdHRlbXB0c19saW1pdCc6IHRydWUsXG4gICAgJ2dycGMtbm9kZS5mbG93X2NvbnRyb2xfd2luZG93JzogdHJ1ZSxcbn07XG5mdW5jdGlvbiBjaGFubmVsT3B0aW9uc0VxdWFsKG9wdGlvbnMxLCBvcHRpb25zMikge1xuICAgIGNvbnN0IGtleXMxID0gT2JqZWN0LmtleXMob3B0aW9uczEpLnNvcnQoKTtcbiAgICBjb25zdCBrZXlzMiA9IE9iamVjdC5rZXlzKG9wdGlvbnMyKS5zb3J0KCk7XG4gICAgaWYgKGtleXMxLmxlbmd0aCAhPT0ga2V5czIubGVuZ3RoKSB7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBrZXlzMS5sZW5ndGg7IGkgKz0gMSkge1xuICAgICAgICBpZiAoa2V5czFbaV0gIT09IGtleXMyW2ldKSB7XG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKG9wdGlvbnMxW2tleXMxW2ldXSAhPT0gb3B0aW9uczJba2V5czJbaV1dKSB7XG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHRydWU7XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1jaGFubmVsLW9wdGlvbnMuanMubWFwIl0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/google-gax/node_modules/@grpc/grpc-js/build/src/channel-options.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/google-gax/node_modules/@grpc/grpc-js/build/src/channel.js":
/*!*********************************************************************************!*\
  !*** ./node_modules/google-gax/node_modules/@grpc/grpc-js/build/src/channel.js ***!
  \*********************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\n/*\n * Copyright 2019 gRPC authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n */\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.ChannelImplementation = void 0;\nconst channel_credentials_1 = __webpack_require__(/*! ./channel-credentials */ \"(rsc)/./node_modules/google-gax/node_modules/@grpc/grpc-js/build/src/channel-credentials.js\");\nconst internal_channel_1 = __webpack_require__(/*! ./internal-channel */ \"(rsc)/./node_modules/google-gax/node_modules/@grpc/grpc-js/build/src/internal-channel.js\");\nclass ChannelImplementation {\n    constructor(target, credentials, options) {\n        if (typeof target !== 'string') {\n            throw new TypeError('Channel target must be a string');\n        }\n        if (!(credentials instanceof channel_credentials_1.ChannelCredentials)) {\n            throw new TypeError('Channel credentials must be a ChannelCredentials object');\n        }\n        if (options) {\n            if (typeof options !== 'object') {\n                throw new TypeError('Channel options must be an object');\n            }\n        }\n        this.internalChannel = new internal_channel_1.InternalChannel(target, credentials, options);\n    }\n    close() {\n        this.internalChannel.close();\n    }\n    getTarget() {\n        return this.internalChannel.getTarget();\n    }\n    getConnectivityState(tryToConnect) {\n        return this.internalChannel.getConnectivityState(tryToConnect);\n    }\n    watchConnectivityState(currentState, deadline, callback) {\n        this.internalChannel.watchConnectivityState(currentState, deadline, callback);\n    }\n    /**\n     * Get the channelz reference object for this channel. The returned value is\n     * garbage if channelz is disabled for this channel.\n     * @returns\n     */\n    getChannelzRef() {\n        return this.internalChannel.getChannelzRef();\n    }\n    createCall(method, deadline, host, parentCall, propagateFlags) {\n        if (typeof method !== 'string') {\n            throw new TypeError('Channel#createCall: method must be a string');\n        }\n        if (!(typeof deadline === 'number' || deadline instanceof Date)) {\n            throw new TypeError('Channel#createCall: deadline must be a number or Date');\n        }\n        return this.internalChannel.createCall(method, deadline, host, parentCall, propagateFlags);\n    }\n}\nexports.ChannelImplementation = ChannelImplementation;\n//# sourceMappingURL=channel.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvZ29vZ2xlLWdheC9ub2RlX21vZHVsZXMvQGdycGMvZ3JwYy1qcy9idWlsZC9zcmMvY2hhbm5lbC5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsOENBQTZDLEVBQUUsYUFBYSxFQUFDO0FBQzdELDZCQUE2QjtBQUM3Qiw4QkFBOEIsbUJBQU8sQ0FBQywwSEFBdUI7QUFDN0QsMkJBQTJCLG1CQUFPLENBQUMsb0hBQW9CO0FBQ3ZEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDZCQUE2QjtBQUM3QiIsInNvdXJjZXMiOlsiL1VzZXJzL2JhZy15b3NlYi9EZXNrdG9wL+GEkeGFqeGEh+GFteGEi+GFoS9oYWNrYXRob25fdGVhbS9teS1hcHAvbm9kZV9tb2R1bGVzL2dvb2dsZS1nYXgvbm9kZV9tb2R1bGVzL0BncnBjL2dycGMtanMvYnVpbGQvc3JjL2NoYW5uZWwuanMiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG4vKlxuICogQ29weXJpZ2h0IDIwMTkgZ1JQQyBhdXRob3JzLlxuICpcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbiAqXG4gKiAgICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4gKlxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbiAqXG4gKi9cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuQ2hhbm5lbEltcGxlbWVudGF0aW9uID0gdm9pZCAwO1xuY29uc3QgY2hhbm5lbF9jcmVkZW50aWFsc18xID0gcmVxdWlyZShcIi4vY2hhbm5lbC1jcmVkZW50aWFsc1wiKTtcbmNvbnN0IGludGVybmFsX2NoYW5uZWxfMSA9IHJlcXVpcmUoXCIuL2ludGVybmFsLWNoYW5uZWxcIik7XG5jbGFzcyBDaGFubmVsSW1wbGVtZW50YXRpb24ge1xuICAgIGNvbnN0cnVjdG9yKHRhcmdldCwgY3JlZGVudGlhbHMsIG9wdGlvbnMpIHtcbiAgICAgICAgaWYgKHR5cGVvZiB0YXJnZXQgIT09ICdzdHJpbmcnKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdDaGFubmVsIHRhcmdldCBtdXN0IGJlIGEgc3RyaW5nJyk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKCEoY3JlZGVudGlhbHMgaW5zdGFuY2VvZiBjaGFubmVsX2NyZWRlbnRpYWxzXzEuQ2hhbm5lbENyZWRlbnRpYWxzKSkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignQ2hhbm5lbCBjcmVkZW50aWFscyBtdXN0IGJlIGEgQ2hhbm5lbENyZWRlbnRpYWxzIG9iamVjdCcpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChvcHRpb25zKSB7XG4gICAgICAgICAgICBpZiAodHlwZW9mIG9wdGlvbnMgIT09ICdvYmplY3QnKSB7XG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignQ2hhbm5lbCBvcHRpb25zIG11c3QgYmUgYW4gb2JqZWN0Jyk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5pbnRlcm5hbENoYW5uZWwgPSBuZXcgaW50ZXJuYWxfY2hhbm5lbF8xLkludGVybmFsQ2hhbm5lbCh0YXJnZXQsIGNyZWRlbnRpYWxzLCBvcHRpb25zKTtcbiAgICB9XG4gICAgY2xvc2UoKSB7XG4gICAgICAgIHRoaXMuaW50ZXJuYWxDaGFubmVsLmNsb3NlKCk7XG4gICAgfVxuICAgIGdldFRhcmdldCgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuaW50ZXJuYWxDaGFubmVsLmdldFRhcmdldCgpO1xuICAgIH1cbiAgICBnZXRDb25uZWN0aXZpdHlTdGF0ZSh0cnlUb0Nvbm5lY3QpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuaW50ZXJuYWxDaGFubmVsLmdldENvbm5lY3Rpdml0eVN0YXRlKHRyeVRvQ29ubmVjdCk7XG4gICAgfVxuICAgIHdhdGNoQ29ubmVjdGl2aXR5U3RhdGUoY3VycmVudFN0YXRlLCBkZWFkbGluZSwgY2FsbGJhY2spIHtcbiAgICAgICAgdGhpcy5pbnRlcm5hbENoYW5uZWwud2F0Y2hDb25uZWN0aXZpdHlTdGF0ZShjdXJyZW50U3RhdGUsIGRlYWRsaW5lLCBjYWxsYmFjayk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIEdldCB0aGUgY2hhbm5lbHogcmVmZXJlbmNlIG9iamVjdCBmb3IgdGhpcyBjaGFubmVsLiBUaGUgcmV0dXJuZWQgdmFsdWUgaXNcbiAgICAgKiBnYXJiYWdlIGlmIGNoYW5uZWx6IGlzIGRpc2FibGVkIGZvciB0aGlzIGNoYW5uZWwuXG4gICAgICogQHJldHVybnNcbiAgICAgKi9cbiAgICBnZXRDaGFubmVselJlZigpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuaW50ZXJuYWxDaGFubmVsLmdldENoYW5uZWx6UmVmKCk7XG4gICAgfVxuICAgIGNyZWF0ZUNhbGwobWV0aG9kLCBkZWFkbGluZSwgaG9zdCwgcGFyZW50Q2FsbCwgcHJvcGFnYXRlRmxhZ3MpIHtcbiAgICAgICAgaWYgKHR5cGVvZiBtZXRob2QgIT09ICdzdHJpbmcnKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdDaGFubmVsI2NyZWF0ZUNhbGw6IG1ldGhvZCBtdXN0IGJlIGEgc3RyaW5nJyk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKCEodHlwZW9mIGRlYWRsaW5lID09PSAnbnVtYmVyJyB8fCBkZWFkbGluZSBpbnN0YW5jZW9mIERhdGUpKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdDaGFubmVsI2NyZWF0ZUNhbGw6IGRlYWRsaW5lIG11c3QgYmUgYSBudW1iZXIgb3IgRGF0ZScpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0aGlzLmludGVybmFsQ2hhbm5lbC5jcmVhdGVDYWxsKG1ldGhvZCwgZGVhZGxpbmUsIGhvc3QsIHBhcmVudENhbGwsIHByb3BhZ2F0ZUZsYWdzKTtcbiAgICB9XG59XG5leHBvcnRzLkNoYW5uZWxJbXBsZW1lbnRhdGlvbiA9IENoYW5uZWxJbXBsZW1lbnRhdGlvbjtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWNoYW5uZWwuanMubWFwIl0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/google-gax/node_modules/@grpc/grpc-js/build/src/channel.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/google-gax/node_modules/@grpc/grpc-js/build/src/channelz.js":
/*!**********************************************************************************!*\
  !*** ./node_modules/google-gax/node_modules/@grpc/grpc-js/build/src/channelz.js ***!
  \**********************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\n/*\n * Copyright 2021 gRPC authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n */\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.registerChannelzSocket = exports.registerChannelzServer = exports.registerChannelzSubchannel = exports.registerChannelzChannel = exports.ChannelzCallTrackerStub = exports.ChannelzCallTracker = exports.ChannelzChildrenTrackerStub = exports.ChannelzChildrenTracker = exports.ChannelzTrace = exports.ChannelzTraceStub = void 0;\nexports.unregisterChannelzRef = unregisterChannelzRef;\nexports.getChannelzHandlers = getChannelzHandlers;\nexports.getChannelzServiceDefinition = getChannelzServiceDefinition;\nexports.setup = setup;\nconst net_1 = __webpack_require__(/*! net */ \"net\");\nconst ordered_map_1 = __webpack_require__(/*! @js-sdsl/ordered-map */ \"(rsc)/./node_modules/@js-sdsl/ordered-map/dist/esm/index.js\");\nconst connectivity_state_1 = __webpack_require__(/*! ./connectivity-state */ \"(rsc)/./node_modules/google-gax/node_modules/@grpc/grpc-js/build/src/connectivity-state.js\");\nconst constants_1 = __webpack_require__(/*! ./constants */ \"(rsc)/./node_modules/google-gax/node_modules/@grpc/grpc-js/build/src/constants.js\");\nconst subchannel_address_1 = __webpack_require__(/*! ./subchannel-address */ \"(rsc)/./node_modules/google-gax/node_modules/@grpc/grpc-js/build/src/subchannel-address.js\");\nconst admin_1 = __webpack_require__(/*! ./admin */ \"(rsc)/./node_modules/google-gax/node_modules/@grpc/grpc-js/build/src/admin.js\");\nconst make_client_1 = __webpack_require__(/*! ./make-client */ \"(rsc)/./node_modules/google-gax/node_modules/@grpc/grpc-js/build/src/make-client.js\");\nfunction channelRefToMessage(ref) {\n    return {\n        channel_id: ref.id,\n        name: ref.name,\n    };\n}\nfunction subchannelRefToMessage(ref) {\n    return {\n        subchannel_id: ref.id,\n        name: ref.name,\n    };\n}\nfunction serverRefToMessage(ref) {\n    return {\n        server_id: ref.id,\n    };\n}\nfunction socketRefToMessage(ref) {\n    return {\n        socket_id: ref.id,\n        name: ref.name,\n    };\n}\n/**\n * The loose upper bound on the number of events that should be retained in a\n * trace. This may be exceeded by up to a factor of 2. Arbitrarily chosen as a\n * number that should be large enough to contain the recent relevant\n * information, but small enough to not use excessive memory.\n */\nconst TARGET_RETAINED_TRACES = 32;\n/**\n * Default number of sockets/servers/channels/subchannels to return\n */\nconst DEFAULT_MAX_RESULTS = 100;\nclass ChannelzTraceStub {\n    constructor() {\n        this.events = [];\n        this.creationTimestamp = new Date();\n        this.eventsLogged = 0;\n    }\n    addTrace() { }\n    getTraceMessage() {\n        return {\n            creation_timestamp: dateToProtoTimestamp(this.creationTimestamp),\n            num_events_logged: this.eventsLogged,\n            events: [],\n        };\n    }\n}\nexports.ChannelzTraceStub = ChannelzTraceStub;\nclass ChannelzTrace {\n    constructor() {\n        this.events = [];\n        this.eventsLogged = 0;\n        this.creationTimestamp = new Date();\n    }\n    addTrace(severity, description, child) {\n        const timestamp = new Date();\n        this.events.push({\n            description: description,\n            severity: severity,\n            timestamp: timestamp,\n            childChannel: (child === null || child === void 0 ? void 0 : child.kind) === 'channel' ? child : undefined,\n            childSubchannel: (child === null || child === void 0 ? void 0 : child.kind) === 'subchannel' ? child : undefined,\n        });\n        // Whenever the trace array gets too large, discard the first half\n        if (this.events.length >= TARGET_RETAINED_TRACES * 2) {\n            this.events = this.events.slice(TARGET_RETAINED_TRACES);\n        }\n        this.eventsLogged += 1;\n    }\n    getTraceMessage() {\n        return {\n            creation_timestamp: dateToProtoTimestamp(this.creationTimestamp),\n            num_events_logged: this.eventsLogged,\n            events: this.events.map(event => {\n                return {\n                    description: event.description,\n                    severity: event.severity,\n                    timestamp: dateToProtoTimestamp(event.timestamp),\n                    channel_ref: event.childChannel\n                        ? channelRefToMessage(event.childChannel)\n                        : null,\n                    subchannel_ref: event.childSubchannel\n                        ? subchannelRefToMessage(event.childSubchannel)\n                        : null,\n                };\n            }),\n        };\n    }\n}\nexports.ChannelzTrace = ChannelzTrace;\nclass ChannelzChildrenTracker {\n    constructor() {\n        this.channelChildren = new ordered_map_1.OrderedMap();\n        this.subchannelChildren = new ordered_map_1.OrderedMap();\n        this.socketChildren = new ordered_map_1.OrderedMap();\n        this.trackerMap = {\n            [\"channel\" /* EntityTypes.channel */]: this.channelChildren,\n            [\"subchannel\" /* EntityTypes.subchannel */]: this.subchannelChildren,\n            [\"socket\" /* EntityTypes.socket */]: this.socketChildren,\n        };\n    }\n    refChild(child) {\n        const tracker = this.trackerMap[child.kind];\n        const trackedChild = tracker.find(child.id);\n        if (trackedChild.equals(tracker.end())) {\n            tracker.setElement(child.id, {\n                ref: child,\n                count: 1,\n            }, trackedChild);\n        }\n        else {\n            trackedChild.pointer[1].count += 1;\n        }\n    }\n    unrefChild(child) {\n        const tracker = this.trackerMap[child.kind];\n        const trackedChild = tracker.getElementByKey(child.id);\n        if (trackedChild !== undefined) {\n            trackedChild.count -= 1;\n            if (trackedChild.count === 0) {\n                tracker.eraseElementByKey(child.id);\n            }\n        }\n    }\n    getChildLists() {\n        return {\n            channels: this.channelChildren,\n            subchannels: this.subchannelChildren,\n            sockets: this.socketChildren,\n        };\n    }\n}\nexports.ChannelzChildrenTracker = ChannelzChildrenTracker;\nclass ChannelzChildrenTrackerStub extends ChannelzChildrenTracker {\n    refChild() { }\n    unrefChild() { }\n}\nexports.ChannelzChildrenTrackerStub = ChannelzChildrenTrackerStub;\nclass ChannelzCallTracker {\n    constructor() {\n        this.callsStarted = 0;\n        this.callsSucceeded = 0;\n        this.callsFailed = 0;\n        this.lastCallStartedTimestamp = null;\n    }\n    addCallStarted() {\n        this.callsStarted += 1;\n        this.lastCallStartedTimestamp = new Date();\n    }\n    addCallSucceeded() {\n        this.callsSucceeded += 1;\n    }\n    addCallFailed() {\n        this.callsFailed += 1;\n    }\n}\nexports.ChannelzCallTracker = ChannelzCallTracker;\nclass ChannelzCallTrackerStub extends ChannelzCallTracker {\n    addCallStarted() { }\n    addCallSucceeded() { }\n    addCallFailed() { }\n}\nexports.ChannelzCallTrackerStub = ChannelzCallTrackerStub;\nconst entityMaps = {\n    [\"channel\" /* EntityTypes.channel */]: new ordered_map_1.OrderedMap(),\n    [\"subchannel\" /* EntityTypes.subchannel */]: new ordered_map_1.OrderedMap(),\n    [\"server\" /* EntityTypes.server */]: new ordered_map_1.OrderedMap(),\n    [\"socket\" /* EntityTypes.socket */]: new ordered_map_1.OrderedMap(),\n};\nconst generateRegisterFn = (kind) => {\n    let nextId = 1;\n    function getNextId() {\n        return nextId++;\n    }\n    const entityMap = entityMaps[kind];\n    return (name, getInfo, channelzEnabled) => {\n        const id = getNextId();\n        const ref = { id, name, kind };\n        if (channelzEnabled) {\n            entityMap.setElement(id, { ref, getInfo });\n        }\n        return ref;\n    };\n};\nexports.registerChannelzChannel = generateRegisterFn(\"channel\" /* EntityTypes.channel */);\nexports.registerChannelzSubchannel = generateRegisterFn(\"subchannel\" /* EntityTypes.subchannel */);\nexports.registerChannelzServer = generateRegisterFn(\"server\" /* EntityTypes.server */);\nexports.registerChannelzSocket = generateRegisterFn(\"socket\" /* EntityTypes.socket */);\nfunction unregisterChannelzRef(ref) {\n    entityMaps[ref.kind].eraseElementByKey(ref.id);\n}\n/**\n * Parse a single section of an IPv6 address as two bytes\n * @param addressSection A hexadecimal string of length up to 4\n * @returns The pair of bytes representing this address section\n */\nfunction parseIPv6Section(addressSection) {\n    const numberValue = Number.parseInt(addressSection, 16);\n    return [(numberValue / 256) | 0, numberValue % 256];\n}\n/**\n * Parse a chunk of an IPv6 address string to some number of bytes\n * @param addressChunk Some number of segments of up to 4 hexadecimal\n *   characters each, joined by colons.\n * @returns The list of bytes representing this address chunk\n */\nfunction parseIPv6Chunk(addressChunk) {\n    if (addressChunk === '') {\n        return [];\n    }\n    const bytePairs = addressChunk\n        .split(':')\n        .map(section => parseIPv6Section(section));\n    const result = [];\n    return result.concat(...bytePairs);\n}\nfunction isIPv6MappedIPv4(ipAddress) {\n    return (0, net_1.isIPv6)(ipAddress) && ipAddress.toLowerCase().startsWith('::ffff:') && (0, net_1.isIPv4)(ipAddress.substring(7));\n}\n/**\n * Prerequisite: isIPv4(ipAddress)\n * @param ipAddress\n * @returns\n */\nfunction ipv4AddressStringToBuffer(ipAddress) {\n    return Buffer.from(Uint8Array.from(ipAddress.split('.').map(segment => Number.parseInt(segment))));\n}\n/**\n * Converts an IPv4 or IPv6 address from string representation to binary\n * representation\n * @param ipAddress an IP address in standard IPv4 or IPv6 text format\n * @returns\n */\nfunction ipAddressStringToBuffer(ipAddress) {\n    if ((0, net_1.isIPv4)(ipAddress)) {\n        return ipv4AddressStringToBuffer(ipAddress);\n    }\n    else if (isIPv6MappedIPv4(ipAddress)) {\n        return ipv4AddressStringToBuffer(ipAddress.substring(7));\n    }\n    else if ((0, net_1.isIPv6)(ipAddress)) {\n        let leftSection;\n        let rightSection;\n        const doubleColonIndex = ipAddress.indexOf('::');\n        if (doubleColonIndex === -1) {\n            leftSection = ipAddress;\n            rightSection = '';\n        }\n        else {\n            leftSection = ipAddress.substring(0, doubleColonIndex);\n            rightSection = ipAddress.substring(doubleColonIndex + 2);\n        }\n        const leftBuffer = Buffer.from(parseIPv6Chunk(leftSection));\n        const rightBuffer = Buffer.from(parseIPv6Chunk(rightSection));\n        const middleBuffer = Buffer.alloc(16 - leftBuffer.length - rightBuffer.length, 0);\n        return Buffer.concat([leftBuffer, middleBuffer, rightBuffer]);\n    }\n    else {\n        return null;\n    }\n}\nfunction connectivityStateToMessage(state) {\n    switch (state) {\n        case connectivity_state_1.ConnectivityState.CONNECTING:\n            return {\n                state: 'CONNECTING',\n            };\n        case connectivity_state_1.ConnectivityState.IDLE:\n            return {\n                state: 'IDLE',\n            };\n        case connectivity_state_1.ConnectivityState.READY:\n            return {\n                state: 'READY',\n            };\n        case connectivity_state_1.ConnectivityState.SHUTDOWN:\n            return {\n                state: 'SHUTDOWN',\n            };\n        case connectivity_state_1.ConnectivityState.TRANSIENT_FAILURE:\n            return {\n                state: 'TRANSIENT_FAILURE',\n            };\n        default:\n            return {\n                state: 'UNKNOWN',\n            };\n    }\n}\nfunction dateToProtoTimestamp(date) {\n    if (!date) {\n        return null;\n    }\n    const millisSinceEpoch = date.getTime();\n    return {\n        seconds: (millisSinceEpoch / 1000) | 0,\n        nanos: (millisSinceEpoch % 1000) * 1000000,\n    };\n}\nfunction getChannelMessage(channelEntry) {\n    const resolvedInfo = channelEntry.getInfo();\n    const channelRef = [];\n    const subchannelRef = [];\n    resolvedInfo.children.channels.forEach(el => {\n        channelRef.push(channelRefToMessage(el[1].ref));\n    });\n    resolvedInfo.children.subchannels.forEach(el => {\n        subchannelRef.push(subchannelRefToMessage(el[1].ref));\n    });\n    return {\n        ref: channelRefToMessage(channelEntry.ref),\n        data: {\n            target: resolvedInfo.target,\n            state: connectivityStateToMessage(resolvedInfo.state),\n            calls_started: resolvedInfo.callTracker.callsStarted,\n            calls_succeeded: resolvedInfo.callTracker.callsSucceeded,\n            calls_failed: resolvedInfo.callTracker.callsFailed,\n            last_call_started_timestamp: dateToProtoTimestamp(resolvedInfo.callTracker.lastCallStartedTimestamp),\n            trace: resolvedInfo.trace.getTraceMessage(),\n        },\n        channel_ref: channelRef,\n        subchannel_ref: subchannelRef,\n    };\n}\nfunction GetChannel(call, callback) {\n    const channelId = parseInt(call.request.channel_id, 10);\n    const channelEntry = entityMaps[\"channel\" /* EntityTypes.channel */].getElementByKey(channelId);\n    if (channelEntry === undefined) {\n        callback({\n            code: constants_1.Status.NOT_FOUND,\n            details: 'No channel data found for id ' + channelId,\n        });\n        return;\n    }\n    callback(null, { channel: getChannelMessage(channelEntry) });\n}\nfunction GetTopChannels(call, callback) {\n    const maxResults = parseInt(call.request.max_results, 10) || DEFAULT_MAX_RESULTS;\n    const resultList = [];\n    const startId = parseInt(call.request.start_channel_id, 10);\n    const channelEntries = entityMaps[\"channel\" /* EntityTypes.channel */];\n    let i;\n    for (i = channelEntries.lowerBound(startId); !i.equals(channelEntries.end()) && resultList.length < maxResults; i = i.next()) {\n        resultList.push(getChannelMessage(i.pointer[1]));\n    }\n    callback(null, {\n        channel: resultList,\n        end: i.equals(channelEntries.end()),\n    });\n}\nfunction getServerMessage(serverEntry) {\n    const resolvedInfo = serverEntry.getInfo();\n    const listenSocket = [];\n    resolvedInfo.listenerChildren.sockets.forEach(el => {\n        listenSocket.push(socketRefToMessage(el[1].ref));\n    });\n    return {\n        ref: serverRefToMessage(serverEntry.ref),\n        data: {\n            calls_started: resolvedInfo.callTracker.callsStarted,\n            calls_succeeded: resolvedInfo.callTracker.callsSucceeded,\n            calls_failed: resolvedInfo.callTracker.callsFailed,\n            last_call_started_timestamp: dateToProtoTimestamp(resolvedInfo.callTracker.lastCallStartedTimestamp),\n            trace: resolvedInfo.trace.getTraceMessage(),\n        },\n        listen_socket: listenSocket,\n    };\n}\nfunction GetServer(call, callback) {\n    const serverId = parseInt(call.request.server_id, 10);\n    const serverEntries = entityMaps[\"server\" /* EntityTypes.server */];\n    const serverEntry = serverEntries.getElementByKey(serverId);\n    if (serverEntry === undefined) {\n        callback({\n            code: constants_1.Status.NOT_FOUND,\n            details: 'No server data found for id ' + serverId,\n        });\n        return;\n    }\n    callback(null, { server: getServerMessage(serverEntry) });\n}\nfunction GetServers(call, callback) {\n    const maxResults = parseInt(call.request.max_results, 10) || DEFAULT_MAX_RESULTS;\n    const startId = parseInt(call.request.start_server_id, 10);\n    const serverEntries = entityMaps[\"server\" /* EntityTypes.server */];\n    const resultList = [];\n    let i;\n    for (i = serverEntries.lowerBound(startId); !i.equals(serverEntries.end()) && resultList.length < maxResults; i = i.next()) {\n        resultList.push(getServerMessage(i.pointer[1]));\n    }\n    callback(null, {\n        server: resultList,\n        end: i.equals(serverEntries.end()),\n    });\n}\nfunction GetSubchannel(call, callback) {\n    const subchannelId = parseInt(call.request.subchannel_id, 10);\n    const subchannelEntry = entityMaps[\"subchannel\" /* EntityTypes.subchannel */].getElementByKey(subchannelId);\n    if (subchannelEntry === undefined) {\n        callback({\n            code: constants_1.Status.NOT_FOUND,\n            details: 'No subchannel data found for id ' + subchannelId,\n        });\n        return;\n    }\n    const resolvedInfo = subchannelEntry.getInfo();\n    const listenSocket = [];\n    resolvedInfo.children.sockets.forEach(el => {\n        listenSocket.push(socketRefToMessage(el[1].ref));\n    });\n    const subchannelMessage = {\n        ref: subchannelRefToMessage(subchannelEntry.ref),\n        data: {\n            target: resolvedInfo.target,\n            state: connectivityStateToMessage(resolvedInfo.state),\n            calls_started: resolvedInfo.callTracker.callsStarted,\n            calls_succeeded: resolvedInfo.callTracker.callsSucceeded,\n            calls_failed: resolvedInfo.callTracker.callsFailed,\n            last_call_started_timestamp: dateToProtoTimestamp(resolvedInfo.callTracker.lastCallStartedTimestamp),\n            trace: resolvedInfo.trace.getTraceMessage(),\n        },\n        socket_ref: listenSocket,\n    };\n    callback(null, { subchannel: subchannelMessage });\n}\nfunction subchannelAddressToAddressMessage(subchannelAddress) {\n    var _a;\n    if ((0, subchannel_address_1.isTcpSubchannelAddress)(subchannelAddress)) {\n        return {\n            address: 'tcpip_address',\n            tcpip_address: {\n                ip_address: (_a = ipAddressStringToBuffer(subchannelAddress.host)) !== null && _a !== void 0 ? _a : undefined,\n                port: subchannelAddress.port,\n            },\n        };\n    }\n    else {\n        return {\n            address: 'uds_address',\n            uds_address: {\n                filename: subchannelAddress.path,\n            },\n        };\n    }\n}\nfunction GetSocket(call, callback) {\n    var _a, _b, _c, _d, _e;\n    const socketId = parseInt(call.request.socket_id, 10);\n    const socketEntry = entityMaps[\"socket\" /* EntityTypes.socket */].getElementByKey(socketId);\n    if (socketEntry === undefined) {\n        callback({\n            code: constants_1.Status.NOT_FOUND,\n            details: 'No socket data found for id ' + socketId,\n        });\n        return;\n    }\n    const resolvedInfo = socketEntry.getInfo();\n    const securityMessage = resolvedInfo.security\n        ? {\n            model: 'tls',\n            tls: {\n                cipher_suite: resolvedInfo.security.cipherSuiteStandardName\n                    ? 'standard_name'\n                    : 'other_name',\n                standard_name: (_a = resolvedInfo.security.cipherSuiteStandardName) !== null && _a !== void 0 ? _a : undefined,\n                other_name: (_b = resolvedInfo.security.cipherSuiteOtherName) !== null && _b !== void 0 ? _b : undefined,\n                local_certificate: (_c = resolvedInfo.security.localCertificate) !== null && _c !== void 0 ? _c : undefined,\n                remote_certificate: (_d = resolvedInfo.security.remoteCertificate) !== null && _d !== void 0 ? _d : undefined,\n            },\n        }\n        : null;\n    const socketMessage = {\n        ref: socketRefToMessage(socketEntry.ref),\n        local: resolvedInfo.localAddress\n            ? subchannelAddressToAddressMessage(resolvedInfo.localAddress)\n            : null,\n        remote: resolvedInfo.remoteAddress\n            ? subchannelAddressToAddressMessage(resolvedInfo.remoteAddress)\n            : null,\n        remote_name: (_e = resolvedInfo.remoteName) !== null && _e !== void 0 ? _e : undefined,\n        security: securityMessage,\n        data: {\n            keep_alives_sent: resolvedInfo.keepAlivesSent,\n            streams_started: resolvedInfo.streamsStarted,\n            streams_succeeded: resolvedInfo.streamsSucceeded,\n            streams_failed: resolvedInfo.streamsFailed,\n            last_local_stream_created_timestamp: dateToProtoTimestamp(resolvedInfo.lastLocalStreamCreatedTimestamp),\n            last_remote_stream_created_timestamp: dateToProtoTimestamp(resolvedInfo.lastRemoteStreamCreatedTimestamp),\n            messages_received: resolvedInfo.messagesReceived,\n            messages_sent: resolvedInfo.messagesSent,\n            last_message_received_timestamp: dateToProtoTimestamp(resolvedInfo.lastMessageReceivedTimestamp),\n            last_message_sent_timestamp: dateToProtoTimestamp(resolvedInfo.lastMessageSentTimestamp),\n            local_flow_control_window: resolvedInfo.localFlowControlWindow\n                ? { value: resolvedInfo.localFlowControlWindow }\n                : null,\n            remote_flow_control_window: resolvedInfo.remoteFlowControlWindow\n                ? { value: resolvedInfo.remoteFlowControlWindow }\n                : null,\n        },\n    };\n    callback(null, { socket: socketMessage });\n}\nfunction GetServerSockets(call, callback) {\n    const serverId = parseInt(call.request.server_id, 10);\n    const serverEntry = entityMaps[\"server\" /* EntityTypes.server */].getElementByKey(serverId);\n    if (serverEntry === undefined) {\n        callback({\n            code: constants_1.Status.NOT_FOUND,\n            details: 'No server data found for id ' + serverId,\n        });\n        return;\n    }\n    const startId = parseInt(call.request.start_socket_id, 10);\n    const maxResults = parseInt(call.request.max_results, 10) || DEFAULT_MAX_RESULTS;\n    const resolvedInfo = serverEntry.getInfo();\n    // If we wanted to include listener sockets in the result, this line would\n    // instead say\n    // const allSockets = resolvedInfo.listenerChildren.sockets.concat(resolvedInfo.sessionChildren.sockets).sort((ref1, ref2) => ref1.id - ref2.id);\n    const allSockets = resolvedInfo.sessionChildren.sockets;\n    const resultList = [];\n    let i;\n    for (i = allSockets.lowerBound(startId); !i.equals(allSockets.end()) && resultList.length < maxResults; i = i.next()) {\n        resultList.push(socketRefToMessage(i.pointer[1].ref));\n    }\n    callback(null, {\n        socket_ref: resultList,\n        end: i.equals(allSockets.end()),\n    });\n}\nfunction getChannelzHandlers() {\n    return {\n        GetChannel,\n        GetTopChannels,\n        GetServer,\n        GetServers,\n        GetSubchannel,\n        GetSocket,\n        GetServerSockets,\n    };\n}\nlet loadedChannelzDefinition = null;\nfunction getChannelzServiceDefinition() {\n    if (loadedChannelzDefinition) {\n        return loadedChannelzDefinition;\n    }\n    /* The purpose of this complexity is to avoid loading @grpc/proto-loader at\n     * runtime for users who will not use/enable channelz. */\n    const loaderLoadSync = (__webpack_require__(/*! @grpc/proto-loader */ \"(rsc)/./node_modules/@grpc/proto-loader/build/src/index.js\").loadSync);\n    const loadedProto = loaderLoadSync('channelz.proto', {\n        keepCase: true,\n        longs: String,\n        enums: String,\n        defaults: true,\n        oneofs: true,\n        includeDirs: [`${__dirname}/../../proto`],\n    });\n    const channelzGrpcObject = (0, make_client_1.loadPackageDefinition)(loadedProto);\n    loadedChannelzDefinition =\n        channelzGrpcObject.grpc.channelz.v1.Channelz.service;\n    return loadedChannelzDefinition;\n}\nfunction setup() {\n    (0, admin_1.registerAdminService)(getChannelzServiceDefinition, getChannelzHandlers);\n}\n//# sourceMappingURL=channelz.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/google-gax/node_modules/@grpc/grpc-js/build/src/channelz.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/google-gax/node_modules/@grpc/grpc-js/build/src/client-interceptors.js":
/*!*********************************************************************************************!*\
  !*** ./node_modules/google-gax/node_modules/@grpc/grpc-js/build/src/client-interceptors.js ***!
  \*********************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\n/*\n * Copyright 2019 gRPC authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n */\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.InterceptingCall = exports.RequesterBuilder = exports.ListenerBuilder = exports.InterceptorConfigurationError = void 0;\nexports.getInterceptingCall = getInterceptingCall;\nconst metadata_1 = __webpack_require__(/*! ./metadata */ \"(rsc)/./node_modules/google-gax/node_modules/@grpc/grpc-js/build/src/metadata.js\");\nconst call_interface_1 = __webpack_require__(/*! ./call-interface */ \"(rsc)/./node_modules/google-gax/node_modules/@grpc/grpc-js/build/src/call-interface.js\");\nconst constants_1 = __webpack_require__(/*! ./constants */ \"(rsc)/./node_modules/google-gax/node_modules/@grpc/grpc-js/build/src/constants.js\");\nconst error_1 = __webpack_require__(/*! ./error */ \"(rsc)/./node_modules/google-gax/node_modules/@grpc/grpc-js/build/src/error.js\");\n/**\n * Error class associated with passing both interceptors and interceptor\n * providers to a client constructor or as call options.\n */\nclass InterceptorConfigurationError extends Error {\n    constructor(message) {\n        super(message);\n        this.name = 'InterceptorConfigurationError';\n        Error.captureStackTrace(this, InterceptorConfigurationError);\n    }\n}\nexports.InterceptorConfigurationError = InterceptorConfigurationError;\nclass ListenerBuilder {\n    constructor() {\n        this.metadata = undefined;\n        this.message = undefined;\n        this.status = undefined;\n    }\n    withOnReceiveMetadata(onReceiveMetadata) {\n        this.metadata = onReceiveMetadata;\n        return this;\n    }\n    withOnReceiveMessage(onReceiveMessage) {\n        this.message = onReceiveMessage;\n        return this;\n    }\n    withOnReceiveStatus(onReceiveStatus) {\n        this.status = onReceiveStatus;\n        return this;\n    }\n    build() {\n        return {\n            onReceiveMetadata: this.metadata,\n            onReceiveMessage: this.message,\n            onReceiveStatus: this.status,\n        };\n    }\n}\nexports.ListenerBuilder = ListenerBuilder;\nclass RequesterBuilder {\n    constructor() {\n        this.start = undefined;\n        this.message = undefined;\n        this.halfClose = undefined;\n        this.cancel = undefined;\n    }\n    withStart(start) {\n        this.start = start;\n        return this;\n    }\n    withSendMessage(sendMessage) {\n        this.message = sendMessage;\n        return this;\n    }\n    withHalfClose(halfClose) {\n        this.halfClose = halfClose;\n        return this;\n    }\n    withCancel(cancel) {\n        this.cancel = cancel;\n        return this;\n    }\n    build() {\n        return {\n            start: this.start,\n            sendMessage: this.message,\n            halfClose: this.halfClose,\n            cancel: this.cancel,\n        };\n    }\n}\nexports.RequesterBuilder = RequesterBuilder;\n/**\n * A Listener with a default pass-through implementation of each method. Used\n * for filling out Listeners with some methods omitted.\n */\nconst defaultListener = {\n    onReceiveMetadata: (metadata, next) => {\n        next(metadata);\n    },\n    onReceiveMessage: (message, next) => {\n        next(message);\n    },\n    onReceiveStatus: (status, next) => {\n        next(status);\n    },\n};\n/**\n * A Requester with a default pass-through implementation of each method. Used\n * for filling out Requesters with some methods omitted.\n */\nconst defaultRequester = {\n    start: (metadata, listener, next) => {\n        next(metadata, listener);\n    },\n    sendMessage: (message, next) => {\n        next(message);\n    },\n    halfClose: next => {\n        next();\n    },\n    cancel: next => {\n        next();\n    },\n};\nclass InterceptingCall {\n    constructor(nextCall, requester) {\n        var _a, _b, _c, _d;\n        this.nextCall = nextCall;\n        /**\n         * Indicates that metadata has been passed to the requester's start\n         * method but it has not been passed to the corresponding next callback\n         */\n        this.processingMetadata = false;\n        /**\n         * Message context for a pending message that is waiting for\n         */\n        this.pendingMessageContext = null;\n        /**\n         * Indicates that a message has been passed to the requester's sendMessage\n         * method but it has not been passed to the corresponding next callback\n         */\n        this.processingMessage = false;\n        /**\n         * Indicates that a status was received but could not be propagated because\n         * a message was still being processed.\n         */\n        this.pendingHalfClose = false;\n        if (requester) {\n            this.requester = {\n                start: (_a = requester.start) !== null && _a !== void 0 ? _a : defaultRequester.start,\n                sendMessage: (_b = requester.sendMessage) !== null && _b !== void 0 ? _b : defaultRequester.sendMessage,\n                halfClose: (_c = requester.halfClose) !== null && _c !== void 0 ? _c : defaultRequester.halfClose,\n                cancel: (_d = requester.cancel) !== null && _d !== void 0 ? _d : defaultRequester.cancel,\n            };\n        }\n        else {\n            this.requester = defaultRequester;\n        }\n    }\n    cancelWithStatus(status, details) {\n        this.requester.cancel(() => {\n            this.nextCall.cancelWithStatus(status, details);\n        });\n    }\n    getPeer() {\n        return this.nextCall.getPeer();\n    }\n    processPendingMessage() {\n        if (this.pendingMessageContext) {\n            this.nextCall.sendMessageWithContext(this.pendingMessageContext, this.pendingMessage);\n            this.pendingMessageContext = null;\n            this.pendingMessage = null;\n        }\n    }\n    processPendingHalfClose() {\n        if (this.pendingHalfClose) {\n            this.nextCall.halfClose();\n        }\n    }\n    start(metadata, interceptingListener) {\n        var _a, _b, _c, _d, _e, _f;\n        const fullInterceptingListener = {\n            onReceiveMetadata: (_b = (_a = interceptingListener === null || interceptingListener === void 0 ? void 0 : interceptingListener.onReceiveMetadata) === null || _a === void 0 ? void 0 : _a.bind(interceptingListener)) !== null && _b !== void 0 ? _b : (metadata => { }),\n            onReceiveMessage: (_d = (_c = interceptingListener === null || interceptingListener === void 0 ? void 0 : interceptingListener.onReceiveMessage) === null || _c === void 0 ? void 0 : _c.bind(interceptingListener)) !== null && _d !== void 0 ? _d : (message => { }),\n            onReceiveStatus: (_f = (_e = interceptingListener === null || interceptingListener === void 0 ? void 0 : interceptingListener.onReceiveStatus) === null || _e === void 0 ? void 0 : _e.bind(interceptingListener)) !== null && _f !== void 0 ? _f : (status => { }),\n        };\n        this.processingMetadata = true;\n        this.requester.start(metadata, fullInterceptingListener, (md, listener) => {\n            var _a, _b, _c;\n            this.processingMetadata = false;\n            let finalInterceptingListener;\n            if ((0, call_interface_1.isInterceptingListener)(listener)) {\n                finalInterceptingListener = listener;\n            }\n            else {\n                const fullListener = {\n                    onReceiveMetadata: (_a = listener.onReceiveMetadata) !== null && _a !== void 0 ? _a : defaultListener.onReceiveMetadata,\n                    onReceiveMessage: (_b = listener.onReceiveMessage) !== null && _b !== void 0 ? _b : defaultListener.onReceiveMessage,\n                    onReceiveStatus: (_c = listener.onReceiveStatus) !== null && _c !== void 0 ? _c : defaultListener.onReceiveStatus,\n                };\n                finalInterceptingListener = new call_interface_1.InterceptingListenerImpl(fullListener, fullInterceptingListener);\n            }\n            this.nextCall.start(md, finalInterceptingListener);\n            this.processPendingMessage();\n            this.processPendingHalfClose();\n        });\n    }\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    sendMessageWithContext(context, message) {\n        this.processingMessage = true;\n        this.requester.sendMessage(message, finalMessage => {\n            this.processingMessage = false;\n            if (this.processingMetadata) {\n                this.pendingMessageContext = context;\n                this.pendingMessage = message;\n            }\n            else {\n                this.nextCall.sendMessageWithContext(context, finalMessage);\n                this.processPendingHalfClose();\n            }\n        });\n    }\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    sendMessage(message) {\n        this.sendMessageWithContext({}, message);\n    }\n    startRead() {\n        this.nextCall.startRead();\n    }\n    halfClose() {\n        this.requester.halfClose(() => {\n            if (this.processingMetadata || this.processingMessage) {\n                this.pendingHalfClose = true;\n            }\n            else {\n                this.nextCall.halfClose();\n            }\n        });\n    }\n}\nexports.InterceptingCall = InterceptingCall;\nfunction getCall(channel, path, options) {\n    var _a, _b;\n    const deadline = (_a = options.deadline) !== null && _a !== void 0 ? _a : Infinity;\n    const host = options.host;\n    const parent = (_b = options.parent) !== null && _b !== void 0 ? _b : null;\n    const propagateFlags = options.propagate_flags;\n    const credentials = options.credentials;\n    const call = channel.createCall(path, deadline, host, parent, propagateFlags);\n    if (credentials) {\n        call.setCredentials(credentials);\n    }\n    return call;\n}\n/**\n * InterceptingCall implementation that directly owns the underlying Call\n * object and handles serialization and deseraizliation.\n */\nclass BaseInterceptingCall {\n    constructor(call, \n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    methodDefinition) {\n        this.call = call;\n        this.methodDefinition = methodDefinition;\n    }\n    cancelWithStatus(status, details) {\n        this.call.cancelWithStatus(status, details);\n    }\n    getPeer() {\n        return this.call.getPeer();\n    }\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    sendMessageWithContext(context, message) {\n        let serialized;\n        try {\n            serialized = this.methodDefinition.requestSerialize(message);\n        }\n        catch (e) {\n            this.call.cancelWithStatus(constants_1.Status.INTERNAL, `Request message serialization failure: ${(0, error_1.getErrorMessage)(e)}`);\n            return;\n        }\n        this.call.sendMessageWithContext(context, serialized);\n    }\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    sendMessage(message) {\n        this.sendMessageWithContext({}, message);\n    }\n    start(metadata, interceptingListener) {\n        let readError = null;\n        this.call.start(metadata, {\n            onReceiveMetadata: metadata => {\n                var _a;\n                (_a = interceptingListener === null || interceptingListener === void 0 ? void 0 : interceptingListener.onReceiveMetadata) === null || _a === void 0 ? void 0 : _a.call(interceptingListener, metadata);\n            },\n            onReceiveMessage: message => {\n                var _a;\n                // eslint-disable-next-line @typescript-eslint/no-explicit-any\n                let deserialized;\n                try {\n                    deserialized = this.methodDefinition.responseDeserialize(message);\n                }\n                catch (e) {\n                    readError = {\n                        code: constants_1.Status.INTERNAL,\n                        details: `Response message parsing error: ${(0, error_1.getErrorMessage)(e)}`,\n                        metadata: new metadata_1.Metadata(),\n                    };\n                    this.call.cancelWithStatus(readError.code, readError.details);\n                    return;\n                }\n                (_a = interceptingListener === null || interceptingListener === void 0 ? void 0 : interceptingListener.onReceiveMessage) === null || _a === void 0 ? void 0 : _a.call(interceptingListener, deserialized);\n            },\n            onReceiveStatus: status => {\n                var _a, _b;\n                if (readError) {\n                    (_a = interceptingListener === null || interceptingListener === void 0 ? void 0 : interceptingListener.onReceiveStatus) === null || _a === void 0 ? void 0 : _a.call(interceptingListener, readError);\n                }\n                else {\n                    (_b = interceptingListener === null || interceptingListener === void 0 ? void 0 : interceptingListener.onReceiveStatus) === null || _b === void 0 ? void 0 : _b.call(interceptingListener, status);\n                }\n            },\n        });\n    }\n    startRead() {\n        this.call.startRead();\n    }\n    halfClose() {\n        this.call.halfClose();\n    }\n}\n/**\n * BaseInterceptingCall with special-cased behavior for methods with unary\n * responses.\n */\nclass BaseUnaryInterceptingCall extends BaseInterceptingCall {\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    constructor(call, methodDefinition) {\n        super(call, methodDefinition);\n    }\n    start(metadata, listener) {\n        var _a, _b;\n        let receivedMessage = false;\n        const wrapperListener = {\n            onReceiveMetadata: (_b = (_a = listener === null || listener === void 0 ? void 0 : listener.onReceiveMetadata) === null || _a === void 0 ? void 0 : _a.bind(listener)) !== null && _b !== void 0 ? _b : (metadata => { }),\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\n            onReceiveMessage: (message) => {\n                var _a;\n                receivedMessage = true;\n                (_a = listener === null || listener === void 0 ? void 0 : listener.onReceiveMessage) === null || _a === void 0 ? void 0 : _a.call(listener, message);\n            },\n            onReceiveStatus: (status) => {\n                var _a, _b;\n                if (!receivedMessage) {\n                    (_a = listener === null || listener === void 0 ? void 0 : listener.onReceiveMessage) === null || _a === void 0 ? void 0 : _a.call(listener, null);\n                }\n                (_b = listener === null || listener === void 0 ? void 0 : listener.onReceiveStatus) === null || _b === void 0 ? void 0 : _b.call(listener, status);\n            },\n        };\n        super.start(metadata, wrapperListener);\n        this.call.startRead();\n    }\n}\n/**\n * BaseInterceptingCall with special-cased behavior for methods with streaming\n * responses.\n */\nclass BaseStreamingInterceptingCall extends BaseInterceptingCall {\n}\nfunction getBottomInterceptingCall(channel, options, \n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nmethodDefinition) {\n    const call = getCall(channel, methodDefinition.path, options);\n    if (methodDefinition.responseStream) {\n        return new BaseStreamingInterceptingCall(call, methodDefinition);\n    }\n    else {\n        return new BaseUnaryInterceptingCall(call, methodDefinition);\n    }\n}\nfunction getInterceptingCall(interceptorArgs, \n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nmethodDefinition, options, channel) {\n    if (interceptorArgs.clientInterceptors.length > 0 &&\n        interceptorArgs.clientInterceptorProviders.length > 0) {\n        throw new InterceptorConfigurationError('Both interceptors and interceptor_providers were passed as options ' +\n            'to the client constructor. Only one of these is allowed.');\n    }\n    if (interceptorArgs.callInterceptors.length > 0 &&\n        interceptorArgs.callInterceptorProviders.length > 0) {\n        throw new InterceptorConfigurationError('Both interceptors and interceptor_providers were passed as call ' +\n            'options. Only one of these is allowed.');\n    }\n    let interceptors = [];\n    // Interceptors passed to the call override interceptors passed to the client constructor\n    if (interceptorArgs.callInterceptors.length > 0 ||\n        interceptorArgs.callInterceptorProviders.length > 0) {\n        interceptors = []\n            .concat(interceptorArgs.callInterceptors, interceptorArgs.callInterceptorProviders.map(provider => provider(methodDefinition)))\n            .filter(interceptor => interceptor);\n        // Filter out falsy values when providers return nothing\n    }\n    else {\n        interceptors = []\n            .concat(interceptorArgs.clientInterceptors, interceptorArgs.clientInterceptorProviders.map(provider => provider(methodDefinition)))\n            .filter(interceptor => interceptor);\n        // Filter out falsy values when providers return nothing\n    }\n    const interceptorOptions = Object.assign({}, options, {\n        method_definition: methodDefinition,\n    });\n    /* For each interceptor in the list, the nextCall function passed to it is\n     * based on the next interceptor in the list, using a nextCall function\n     * constructed with the following interceptor in the list, and so on. The\n     * initialValue, which is effectively at the end of the list, is a nextCall\n     * function that invokes getBottomInterceptingCall, the result of which\n     * handles (de)serialization and also gets the underlying call from the\n     * channel. */\n    const getCall = interceptors.reduceRight((nextCall, nextInterceptor) => {\n        return currentOptions => nextInterceptor(currentOptions, nextCall);\n    }, (finalOptions) => getBottomInterceptingCall(channel, finalOptions, methodDefinition));\n    return getCall(interceptorOptions);\n}\n//# sourceMappingURL=client-interceptors.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/google-gax/node_modules/@grpc/grpc-js/build/src/client-interceptors.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/google-gax/node_modules/@grpc/grpc-js/build/src/client.js":
/*!********************************************************************************!*\
  !*** ./node_modules/google-gax/node_modules/@grpc/grpc-js/build/src/client.js ***!
  \********************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\n/*\n * Copyright 2019 gRPC authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n */\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.Client = void 0;\nconst call_1 = __webpack_require__(/*! ./call */ \"(rsc)/./node_modules/google-gax/node_modules/@grpc/grpc-js/build/src/call.js\");\nconst channel_1 = __webpack_require__(/*! ./channel */ \"(rsc)/./node_modules/google-gax/node_modules/@grpc/grpc-js/build/src/channel.js\");\nconst connectivity_state_1 = __webpack_require__(/*! ./connectivity-state */ \"(rsc)/./node_modules/google-gax/node_modules/@grpc/grpc-js/build/src/connectivity-state.js\");\nconst constants_1 = __webpack_require__(/*! ./constants */ \"(rsc)/./node_modules/google-gax/node_modules/@grpc/grpc-js/build/src/constants.js\");\nconst metadata_1 = __webpack_require__(/*! ./metadata */ \"(rsc)/./node_modules/google-gax/node_modules/@grpc/grpc-js/build/src/metadata.js\");\nconst client_interceptors_1 = __webpack_require__(/*! ./client-interceptors */ \"(rsc)/./node_modules/google-gax/node_modules/@grpc/grpc-js/build/src/client-interceptors.js\");\nconst CHANNEL_SYMBOL = Symbol();\nconst INTERCEPTOR_SYMBOL = Symbol();\nconst INTERCEPTOR_PROVIDER_SYMBOL = Symbol();\nconst CALL_INVOCATION_TRANSFORMER_SYMBOL = Symbol();\nfunction isFunction(arg) {\n    return typeof arg === 'function';\n}\nfunction getErrorStackString(error) {\n    var _a;\n    return ((_a = error.stack) === null || _a === void 0 ? void 0 : _a.split('\\n').slice(1).join('\\n')) || 'no stack trace available';\n}\n/**\n * A generic gRPC client. Primarily useful as a base class for all generated\n * clients.\n */\nclass Client {\n    constructor(address, credentials, options = {}) {\n        var _a, _b;\n        options = Object.assign({}, options);\n        this[INTERCEPTOR_SYMBOL] = (_a = options.interceptors) !== null && _a !== void 0 ? _a : [];\n        delete options.interceptors;\n        this[INTERCEPTOR_PROVIDER_SYMBOL] = (_b = options.interceptor_providers) !== null && _b !== void 0 ? _b : [];\n        delete options.interceptor_providers;\n        if (this[INTERCEPTOR_SYMBOL].length > 0 &&\n            this[INTERCEPTOR_PROVIDER_SYMBOL].length > 0) {\n            throw new Error('Both interceptors and interceptor_providers were passed as options ' +\n                'to the client constructor. Only one of these is allowed.');\n        }\n        this[CALL_INVOCATION_TRANSFORMER_SYMBOL] =\n            options.callInvocationTransformer;\n        delete options.callInvocationTransformer;\n        if (options.channelOverride) {\n            this[CHANNEL_SYMBOL] = options.channelOverride;\n        }\n        else if (options.channelFactoryOverride) {\n            const channelFactoryOverride = options.channelFactoryOverride;\n            delete options.channelFactoryOverride;\n            this[CHANNEL_SYMBOL] = channelFactoryOverride(address, credentials, options);\n        }\n        else {\n            this[CHANNEL_SYMBOL] = new channel_1.ChannelImplementation(address, credentials, options);\n        }\n    }\n    close() {\n        this[CHANNEL_SYMBOL].close();\n    }\n    getChannel() {\n        return this[CHANNEL_SYMBOL];\n    }\n    waitForReady(deadline, callback) {\n        const checkState = (err) => {\n            if (err) {\n                callback(new Error('Failed to connect before the deadline'));\n                return;\n            }\n            let newState;\n            try {\n                newState = this[CHANNEL_SYMBOL].getConnectivityState(true);\n            }\n            catch (e) {\n                callback(new Error('The channel has been closed'));\n                return;\n            }\n            if (newState === connectivity_state_1.ConnectivityState.READY) {\n                callback();\n            }\n            else {\n                try {\n                    this[CHANNEL_SYMBOL].watchConnectivityState(newState, deadline, checkState);\n                }\n                catch (e) {\n                    callback(new Error('The channel has been closed'));\n                }\n            }\n        };\n        setImmediate(checkState);\n    }\n    checkOptionalUnaryResponseArguments(arg1, arg2, arg3) {\n        if (isFunction(arg1)) {\n            return { metadata: new metadata_1.Metadata(), options: {}, callback: arg1 };\n        }\n        else if (isFunction(arg2)) {\n            if (arg1 instanceof metadata_1.Metadata) {\n                return { metadata: arg1, options: {}, callback: arg2 };\n            }\n            else {\n                return { metadata: new metadata_1.Metadata(), options: arg1, callback: arg2 };\n            }\n        }\n        else {\n            if (!(arg1 instanceof metadata_1.Metadata &&\n                arg2 instanceof Object &&\n                isFunction(arg3))) {\n                throw new Error('Incorrect arguments passed');\n            }\n            return { metadata: arg1, options: arg2, callback: arg3 };\n        }\n    }\n    makeUnaryRequest(method, serialize, deserialize, argument, metadata, options, callback) {\n        var _a, _b;\n        const checkedArguments = this.checkOptionalUnaryResponseArguments(metadata, options, callback);\n        const methodDefinition = {\n            path: method,\n            requestStream: false,\n            responseStream: false,\n            requestSerialize: serialize,\n            responseDeserialize: deserialize,\n        };\n        let callProperties = {\n            argument: argument,\n            metadata: checkedArguments.metadata,\n            call: new call_1.ClientUnaryCallImpl(),\n            channel: this[CHANNEL_SYMBOL],\n            methodDefinition: methodDefinition,\n            callOptions: checkedArguments.options,\n            callback: checkedArguments.callback,\n        };\n        if (this[CALL_INVOCATION_TRANSFORMER_SYMBOL]) {\n            callProperties = this[CALL_INVOCATION_TRANSFORMER_SYMBOL](callProperties);\n        }\n        const emitter = callProperties.call;\n        const interceptorArgs = {\n            clientInterceptors: this[INTERCEPTOR_SYMBOL],\n            clientInterceptorProviders: this[INTERCEPTOR_PROVIDER_SYMBOL],\n            callInterceptors: (_a = callProperties.callOptions.interceptors) !== null && _a !== void 0 ? _a : [],\n            callInterceptorProviders: (_b = callProperties.callOptions.interceptor_providers) !== null && _b !== void 0 ? _b : [],\n        };\n        const call = (0, client_interceptors_1.getInterceptingCall)(interceptorArgs, callProperties.methodDefinition, callProperties.callOptions, callProperties.channel);\n        /* This needs to happen before the emitter is used. Unfortunately we can't\n         * enforce this with the type system. We need to construct this emitter\n         * before calling the CallInvocationTransformer, and we need to create the\n         * call after that. */\n        emitter.call = call;\n        let responseMessage = null;\n        let receivedStatus = false;\n        let callerStackError = new Error();\n        call.start(callProperties.metadata, {\n            onReceiveMetadata: metadata => {\n                emitter.emit('metadata', metadata);\n            },\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\n            onReceiveMessage(message) {\n                if (responseMessage !== null) {\n                    call.cancelWithStatus(constants_1.Status.UNIMPLEMENTED, 'Too many responses received');\n                }\n                responseMessage = message;\n            },\n            onReceiveStatus(status) {\n                if (receivedStatus) {\n                    return;\n                }\n                receivedStatus = true;\n                if (status.code === constants_1.Status.OK) {\n                    if (responseMessage === null) {\n                        const callerStack = getErrorStackString(callerStackError);\n                        callProperties.callback((0, call_1.callErrorFromStatus)({\n                            code: constants_1.Status.UNIMPLEMENTED,\n                            details: 'No message received',\n                            metadata: status.metadata,\n                        }, callerStack));\n                    }\n                    else {\n                        callProperties.callback(null, responseMessage);\n                    }\n                }\n                else {\n                    const callerStack = getErrorStackString(callerStackError);\n                    callProperties.callback((0, call_1.callErrorFromStatus)(status, callerStack));\n                }\n                /* Avoid retaining the callerStackError object in the call context of\n                 * the status event handler. */\n                callerStackError = null;\n                emitter.emit('status', status);\n            },\n        });\n        call.sendMessage(argument);\n        call.halfClose();\n        return emitter;\n    }\n    makeClientStreamRequest(method, serialize, deserialize, metadata, options, callback) {\n        var _a, _b;\n        const checkedArguments = this.checkOptionalUnaryResponseArguments(metadata, options, callback);\n        const methodDefinition = {\n            path: method,\n            requestStream: true,\n            responseStream: false,\n            requestSerialize: serialize,\n            responseDeserialize: deserialize,\n        };\n        let callProperties = {\n            metadata: checkedArguments.metadata,\n            call: new call_1.ClientWritableStreamImpl(serialize),\n            channel: this[CHANNEL_SYMBOL],\n            methodDefinition: methodDefinition,\n            callOptions: checkedArguments.options,\n            callback: checkedArguments.callback,\n        };\n        if (this[CALL_INVOCATION_TRANSFORMER_SYMBOL]) {\n            callProperties = this[CALL_INVOCATION_TRANSFORMER_SYMBOL](callProperties);\n        }\n        const emitter = callProperties.call;\n        const interceptorArgs = {\n            clientInterceptors: this[INTERCEPTOR_SYMBOL],\n            clientInterceptorProviders: this[INTERCEPTOR_PROVIDER_SYMBOL],\n            callInterceptors: (_a = callProperties.callOptions.interceptors) !== null && _a !== void 0 ? _a : [],\n            callInterceptorProviders: (_b = callProperties.callOptions.interceptor_providers) !== null && _b !== void 0 ? _b : [],\n        };\n        const call = (0, client_interceptors_1.getInterceptingCall)(interceptorArgs, callProperties.methodDefinition, callProperties.callOptions, callProperties.channel);\n        /* This needs to happen before the emitter is used. Unfortunately we can't\n         * enforce this with the type system. We need to construct this emitter\n         * before calling the CallInvocationTransformer, and we need to create the\n         * call after that. */\n        emitter.call = call;\n        let responseMessage = null;\n        let receivedStatus = false;\n        let callerStackError = new Error();\n        call.start(callProperties.metadata, {\n            onReceiveMetadata: metadata => {\n                emitter.emit('metadata', metadata);\n            },\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\n            onReceiveMessage(message) {\n                if (responseMessage !== null) {\n                    call.cancelWithStatus(constants_1.Status.UNIMPLEMENTED, 'Too many responses received');\n                }\n                responseMessage = message;\n                call.startRead();\n            },\n            onReceiveStatus(status) {\n                if (receivedStatus) {\n                    return;\n                }\n                receivedStatus = true;\n                if (status.code === constants_1.Status.OK) {\n                    if (responseMessage === null) {\n                        const callerStack = getErrorStackString(callerStackError);\n                        callProperties.callback((0, call_1.callErrorFromStatus)({\n                            code: constants_1.Status.UNIMPLEMENTED,\n                            details: 'No message received',\n                            metadata: status.metadata,\n                        }, callerStack));\n                    }\n                    else {\n                        callProperties.callback(null, responseMessage);\n                    }\n                }\n                else {\n                    const callerStack = getErrorStackString(callerStackError);\n                    callProperties.callback((0, call_1.callErrorFromStatus)(status, callerStack));\n                }\n                /* Avoid retaining the callerStackError object in the call context of\n                 * the status event handler. */\n                callerStackError = null;\n                emitter.emit('status', status);\n            },\n        });\n        return emitter;\n    }\n    checkMetadataAndOptions(arg1, arg2) {\n        let metadata;\n        let options;\n        if (arg1 instanceof metadata_1.Metadata) {\n            metadata = arg1;\n            if (arg2) {\n                options = arg2;\n            }\n            else {\n                options = {};\n            }\n        }\n        else {\n            if (arg1) {\n                options = arg1;\n            }\n            else {\n                options = {};\n            }\n            metadata = new metadata_1.Metadata();\n        }\n        return { metadata, options };\n    }\n    makeServerStreamRequest(method, serialize, deserialize, argument, metadata, options) {\n        var _a, _b;\n        const checkedArguments = this.checkMetadataAndOptions(metadata, options);\n        const methodDefinition = {\n            path: method,\n            requestStream: false,\n            responseStream: true,\n            requestSerialize: serialize,\n            responseDeserialize: deserialize,\n        };\n        let callProperties = {\n            argument: argument,\n            metadata: checkedArguments.metadata,\n            call: new call_1.ClientReadableStreamImpl(deserialize),\n            channel: this[CHANNEL_SYMBOL],\n            methodDefinition: methodDefinition,\n            callOptions: checkedArguments.options,\n        };\n        if (this[CALL_INVOCATION_TRANSFORMER_SYMBOL]) {\n            callProperties = this[CALL_INVOCATION_TRANSFORMER_SYMBOL](callProperties);\n        }\n        const stream = callProperties.call;\n        const interceptorArgs = {\n            clientInterceptors: this[INTERCEPTOR_SYMBOL],\n            clientInterceptorProviders: this[INTERCEPTOR_PROVIDER_SYMBOL],\n            callInterceptors: (_a = callProperties.callOptions.interceptors) !== null && _a !== void 0 ? _a : [],\n            callInterceptorProviders: (_b = callProperties.callOptions.interceptor_providers) !== null && _b !== void 0 ? _b : [],\n        };\n        const call = (0, client_interceptors_1.getInterceptingCall)(interceptorArgs, callProperties.methodDefinition, callProperties.callOptions, callProperties.channel);\n        /* This needs to happen before the emitter is used. Unfortunately we can't\n         * enforce this with the type system. We need to construct this emitter\n         * before calling the CallInvocationTransformer, and we need to create the\n         * call after that. */\n        stream.call = call;\n        let receivedStatus = false;\n        let callerStackError = new Error();\n        call.start(callProperties.metadata, {\n            onReceiveMetadata(metadata) {\n                stream.emit('metadata', metadata);\n            },\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\n            onReceiveMessage(message) {\n                stream.push(message);\n            },\n            onReceiveStatus(status) {\n                if (receivedStatus) {\n                    return;\n                }\n                receivedStatus = true;\n                stream.push(null);\n                if (status.code !== constants_1.Status.OK) {\n                    const callerStack = getErrorStackString(callerStackError);\n                    stream.emit('error', (0, call_1.callErrorFromStatus)(status, callerStack));\n                }\n                /* Avoid retaining the callerStackError object in the call context of\n                 * the status event handler. */\n                callerStackError = null;\n                stream.emit('status', status);\n            },\n        });\n        call.sendMessage(argument);\n        call.halfClose();\n        return stream;\n    }\n    makeBidiStreamRequest(method, serialize, deserialize, metadata, options) {\n        var _a, _b;\n        const checkedArguments = this.checkMetadataAndOptions(metadata, options);\n        const methodDefinition = {\n            path: method,\n            requestStream: true,\n            responseStream: true,\n            requestSerialize: serialize,\n            responseDeserialize: deserialize,\n        };\n        let callProperties = {\n            metadata: checkedArguments.metadata,\n            call: new call_1.ClientDuplexStreamImpl(serialize, deserialize),\n            channel: this[CHANNEL_SYMBOL],\n            methodDefinition: methodDefinition,\n            callOptions: checkedArguments.options,\n        };\n        if (this[CALL_INVOCATION_TRANSFORMER_SYMBOL]) {\n            callProperties = this[CALL_INVOCATION_TRANSFORMER_SYMBOL](callProperties);\n        }\n        const stream = callProperties.call;\n        const interceptorArgs = {\n            clientInterceptors: this[INTERCEPTOR_SYMBOL],\n            clientInterceptorProviders: this[INTERCEPTOR_PROVIDER_SYMBOL],\n            callInterceptors: (_a = callProperties.callOptions.interceptors) !== null && _a !== void 0 ? _a : [],\n            callInterceptorProviders: (_b = callProperties.callOptions.interceptor_providers) !== null && _b !== void 0 ? _b : [],\n        };\n        const call = (0, client_interceptors_1.getInterceptingCall)(interceptorArgs, callProperties.methodDefinition, callProperties.callOptions, callProperties.channel);\n        /* This needs to happen before the emitter is used. Unfortunately we can't\n         * enforce this with the type system. We need to construct this emitter\n         * before calling the CallInvocationTransformer, and we need to create the\n         * call after that. */\n        stream.call = call;\n        let receivedStatus = false;\n        let callerStackError = new Error();\n        call.start(callProperties.metadata, {\n            onReceiveMetadata(metadata) {\n                stream.emit('metadata', metadata);\n            },\n            onReceiveMessage(message) {\n                stream.push(message);\n            },\n            onReceiveStatus(status) {\n                if (receivedStatus) {\n                    return;\n                }\n                receivedStatus = true;\n                stream.push(null);\n                if (status.code !== constants_1.Status.OK) {\n                    const callerStack = getErrorStackString(callerStackError);\n                    stream.emit('error', (0, call_1.callErrorFromStatus)(status, callerStack));\n                }\n                /* Avoid retaining the callerStackError object in the call context of\n                 * the status event handler. */\n                callerStackError = null;\n                stream.emit('status', status);\n            },\n        });\n        return stream;\n    }\n}\nexports.Client = Client;\n//# sourceMappingURL=client.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/google-gax/node_modules/@grpc/grpc-js/build/src/client.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/google-gax/node_modules/@grpc/grpc-js/build/src/compression-algorithms.js":
/*!************************************************************************************************!*\
  !*** ./node_modules/google-gax/node_modules/@grpc/grpc-js/build/src/compression-algorithms.js ***!
  \************************************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";
eval("\n/*\n * Copyright 2021 gRPC authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n */\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.CompressionAlgorithms = void 0;\nvar CompressionAlgorithms;\n(function (CompressionAlgorithms) {\n    CompressionAlgorithms[CompressionAlgorithms[\"identity\"] = 0] = \"identity\";\n    CompressionAlgorithms[CompressionAlgorithms[\"deflate\"] = 1] = \"deflate\";\n    CompressionAlgorithms[CompressionAlgorithms[\"gzip\"] = 2] = \"gzip\";\n})(CompressionAlgorithms || (exports.CompressionAlgorithms = CompressionAlgorithms = {}));\n//# sourceMappingURL=compression-algorithms.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvZ29vZ2xlLWdheC9ub2RlX21vZHVsZXMvQGdycGMvZ3JwYy1qcy9idWlsZC9zcmMvY29tcHJlc3Npb24tYWxnb3JpdGhtcy5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsOENBQTZDLEVBQUUsYUFBYSxFQUFDO0FBQzdELDZCQUE2QjtBQUM3QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsQ0FBQyw0QkFBNEIsNkJBQTZCLDZCQUE2QjtBQUN2RiIsInNvdXJjZXMiOlsiL1VzZXJzL2JhZy15b3NlYi9EZXNrdG9wL+GEkeGFqeGEh+GFteGEi+GFoS9oYWNrYXRob25fdGVhbS9teS1hcHAvbm9kZV9tb2R1bGVzL2dvb2dsZS1nYXgvbm9kZV9tb2R1bGVzL0BncnBjL2dycGMtanMvYnVpbGQvc3JjL2NvbXByZXNzaW9uLWFsZ29yaXRobXMuanMiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG4vKlxuICogQ29weXJpZ2h0IDIwMjEgZ1JQQyBhdXRob3JzLlxuICpcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbiAqXG4gKiAgICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4gKlxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbiAqXG4gKi9cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuQ29tcHJlc3Npb25BbGdvcml0aG1zID0gdm9pZCAwO1xudmFyIENvbXByZXNzaW9uQWxnb3JpdGhtcztcbihmdW5jdGlvbiAoQ29tcHJlc3Npb25BbGdvcml0aG1zKSB7XG4gICAgQ29tcHJlc3Npb25BbGdvcml0aG1zW0NvbXByZXNzaW9uQWxnb3JpdGhtc1tcImlkZW50aXR5XCJdID0gMF0gPSBcImlkZW50aXR5XCI7XG4gICAgQ29tcHJlc3Npb25BbGdvcml0aG1zW0NvbXByZXNzaW9uQWxnb3JpdGhtc1tcImRlZmxhdGVcIl0gPSAxXSA9IFwiZGVmbGF0ZVwiO1xuICAgIENvbXByZXNzaW9uQWxnb3JpdGhtc1tDb21wcmVzc2lvbkFsZ29yaXRobXNbXCJnemlwXCJdID0gMl0gPSBcImd6aXBcIjtcbn0pKENvbXByZXNzaW9uQWxnb3JpdGhtcyB8fCAoZXhwb3J0cy5Db21wcmVzc2lvbkFsZ29yaXRobXMgPSBDb21wcmVzc2lvbkFsZ29yaXRobXMgPSB7fSkpO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9Y29tcHJlc3Npb24tYWxnb3JpdGhtcy5qcy5tYXAiXSwibmFtZXMiOltdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/google-gax/node_modules/@grpc/grpc-js/build/src/compression-algorithms.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/google-gax/node_modules/@grpc/grpc-js/build/src/compression-filter.js":
/*!********************************************************************************************!*\
  !*** ./node_modules/google-gax/node_modules/@grpc/grpc-js/build/src/compression-filter.js ***!
  \********************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\n/*\n * Copyright 2019 gRPC authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n */\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.CompressionFilterFactory = exports.CompressionFilter = void 0;\nconst zlib = __webpack_require__(/*! zlib */ \"zlib\");\nconst compression_algorithms_1 = __webpack_require__(/*! ./compression-algorithms */ \"(rsc)/./node_modules/google-gax/node_modules/@grpc/grpc-js/build/src/compression-algorithms.js\");\nconst constants_1 = __webpack_require__(/*! ./constants */ \"(rsc)/./node_modules/google-gax/node_modules/@grpc/grpc-js/build/src/constants.js\");\nconst filter_1 = __webpack_require__(/*! ./filter */ \"(rsc)/./node_modules/google-gax/node_modules/@grpc/grpc-js/build/src/filter.js\");\nconst logging = __webpack_require__(/*! ./logging */ \"(rsc)/./node_modules/google-gax/node_modules/@grpc/grpc-js/build/src/logging.js\");\nconst isCompressionAlgorithmKey = (key) => {\n    return (typeof key === 'number' && typeof compression_algorithms_1.CompressionAlgorithms[key] === 'string');\n};\nclass CompressionHandler {\n    /**\n     * @param message Raw uncompressed message bytes\n     * @param compress Indicates whether the message should be compressed\n     * @return Framed message, compressed if applicable\n     */\n    async writeMessage(message, compress) {\n        let messageBuffer = message;\n        if (compress) {\n            messageBuffer = await this.compressMessage(messageBuffer);\n        }\n        const output = Buffer.allocUnsafe(messageBuffer.length + 5);\n        output.writeUInt8(compress ? 1 : 0, 0);\n        output.writeUInt32BE(messageBuffer.length, 1);\n        messageBuffer.copy(output, 5);\n        return output;\n    }\n    /**\n     * @param data Framed message, possibly compressed\n     * @return Uncompressed message\n     */\n    async readMessage(data) {\n        const compressed = data.readUInt8(0) === 1;\n        let messageBuffer = data.slice(5);\n        if (compressed) {\n            messageBuffer = await this.decompressMessage(messageBuffer);\n        }\n        return messageBuffer;\n    }\n}\nclass IdentityHandler extends CompressionHandler {\n    async compressMessage(message) {\n        return message;\n    }\n    async writeMessage(message, compress) {\n        const output = Buffer.allocUnsafe(message.length + 5);\n        /* With \"identity\" compression, messages should always be marked as\n         * uncompressed */\n        output.writeUInt8(0, 0);\n        output.writeUInt32BE(message.length, 1);\n        message.copy(output, 5);\n        return output;\n    }\n    decompressMessage(message) {\n        return Promise.reject(new Error('Received compressed message but \"grpc-encoding\" header was identity'));\n    }\n}\nclass DeflateHandler extends CompressionHandler {\n    constructor(maxRecvMessageLength) {\n        super();\n        this.maxRecvMessageLength = maxRecvMessageLength;\n    }\n    compressMessage(message) {\n        return new Promise((resolve, reject) => {\n            zlib.deflate(message, (err, output) => {\n                if (err) {\n                    reject(err);\n                }\n                else {\n                    resolve(output);\n                }\n            });\n        });\n    }\n    decompressMessage(message) {\n        return new Promise((resolve, reject) => {\n            let totalLength = 0;\n            const messageParts = [];\n            const decompresser = zlib.createInflate();\n            decompresser.on('data', (chunk) => {\n                messageParts.push(chunk);\n                totalLength += chunk.byteLength;\n                if (this.maxRecvMessageLength !== -1 && totalLength > this.maxRecvMessageLength) {\n                    decompresser.destroy();\n                    reject({\n                        code: constants_1.Status.RESOURCE_EXHAUSTED,\n                        details: `Received message that decompresses to a size larger than ${this.maxRecvMessageLength}`\n                    });\n                }\n            });\n            decompresser.on('end', () => {\n                resolve(Buffer.concat(messageParts));\n            });\n            decompresser.write(message);\n            decompresser.end();\n        });\n    }\n}\nclass GzipHandler extends CompressionHandler {\n    constructor(maxRecvMessageLength) {\n        super();\n        this.maxRecvMessageLength = maxRecvMessageLength;\n    }\n    compressMessage(message) {\n        return new Promise((resolve, reject) => {\n            zlib.gzip(message, (err, output) => {\n                if (err) {\n                    reject(err);\n                }\n                else {\n                    resolve(output);\n                }\n            });\n        });\n    }\n    decompressMessage(message) {\n        return new Promise((resolve, reject) => {\n            let totalLength = 0;\n            const messageParts = [];\n            const decompresser = zlib.createGunzip();\n            decompresser.on('data', (chunk) => {\n                messageParts.push(chunk);\n                totalLength += chunk.byteLength;\n                if (this.maxRecvMessageLength !== -1 && totalLength > this.maxRecvMessageLength) {\n                    decompresser.destroy();\n                    reject({\n                        code: constants_1.Status.RESOURCE_EXHAUSTED,\n                        details: `Received message that decompresses to a size larger than ${this.maxRecvMessageLength}`\n                    });\n                }\n            });\n            decompresser.on('end', () => {\n                resolve(Buffer.concat(messageParts));\n            });\n            decompresser.write(message);\n            decompresser.end();\n        });\n    }\n}\nclass UnknownHandler extends CompressionHandler {\n    constructor(compressionName) {\n        super();\n        this.compressionName = compressionName;\n    }\n    compressMessage(message) {\n        return Promise.reject(new Error(`Received message compressed with unsupported compression method ${this.compressionName}`));\n    }\n    decompressMessage(message) {\n        // This should be unreachable\n        return Promise.reject(new Error(`Compression method not supported: ${this.compressionName}`));\n    }\n}\nfunction getCompressionHandler(compressionName, maxReceiveMessageSize) {\n    switch (compressionName) {\n        case 'identity':\n            return new IdentityHandler();\n        case 'deflate':\n            return new DeflateHandler(maxReceiveMessageSize);\n        case 'gzip':\n            return new GzipHandler(maxReceiveMessageSize);\n        default:\n            return new UnknownHandler(compressionName);\n    }\n}\nclass CompressionFilter extends filter_1.BaseFilter {\n    constructor(channelOptions, sharedFilterConfig) {\n        var _a, _b, _c;\n        super();\n        this.sharedFilterConfig = sharedFilterConfig;\n        this.sendCompression = new IdentityHandler();\n        this.receiveCompression = new IdentityHandler();\n        this.currentCompressionAlgorithm = 'identity';\n        const compressionAlgorithmKey = channelOptions['grpc.default_compression_algorithm'];\n        this.maxReceiveMessageLength = (_a = channelOptions['grpc.max_receive_message_length']) !== null && _a !== void 0 ? _a : constants_1.DEFAULT_MAX_RECEIVE_MESSAGE_LENGTH;\n        this.maxSendMessageLength = (_b = channelOptions['grpc.max_send_message_length']) !== null && _b !== void 0 ? _b : constants_1.DEFAULT_MAX_SEND_MESSAGE_LENGTH;\n        if (compressionAlgorithmKey !== undefined) {\n            if (isCompressionAlgorithmKey(compressionAlgorithmKey)) {\n                const clientSelectedEncoding = compression_algorithms_1.CompressionAlgorithms[compressionAlgorithmKey];\n                const serverSupportedEncodings = (_c = sharedFilterConfig.serverSupportedEncodingHeader) === null || _c === void 0 ? void 0 : _c.split(',');\n                /**\n                 * There are two possible situations here:\n                 * 1) We don't have any info yet from the server about what compression it supports\n                 *    In that case we should just use what the client tells us to use\n                 * 2) We've previously received a response from the server including a grpc-accept-encoding header\n                 *    In that case we only want to use the encoding chosen by the client if the server supports it\n                 */\n                if (!serverSupportedEncodings ||\n                    serverSupportedEncodings.includes(clientSelectedEncoding)) {\n                    this.currentCompressionAlgorithm = clientSelectedEncoding;\n                    this.sendCompression = getCompressionHandler(this.currentCompressionAlgorithm, -1);\n                }\n            }\n            else {\n                logging.log(constants_1.LogVerbosity.ERROR, `Invalid value provided for grpc.default_compression_algorithm option: ${compressionAlgorithmKey}`);\n            }\n        }\n    }\n    async sendMetadata(metadata) {\n        const headers = await metadata;\n        headers.set('grpc-accept-encoding', 'identity,deflate,gzip');\n        headers.set('accept-encoding', 'identity');\n        // No need to send the header if it's \"identity\" -  behavior is identical; save the bandwidth\n        if (this.currentCompressionAlgorithm === 'identity') {\n            headers.remove('grpc-encoding');\n        }\n        else {\n            headers.set('grpc-encoding', this.currentCompressionAlgorithm);\n        }\n        return headers;\n    }\n    receiveMetadata(metadata) {\n        const receiveEncoding = metadata.get('grpc-encoding');\n        if (receiveEncoding.length > 0) {\n            const encoding = receiveEncoding[0];\n            if (typeof encoding === 'string') {\n                this.receiveCompression = getCompressionHandler(encoding, this.maxReceiveMessageLength);\n            }\n        }\n        metadata.remove('grpc-encoding');\n        /* Check to see if the compression we're using to send messages is supported by the server\n         * If not, reset the sendCompression filter and have it use the default IdentityHandler */\n        const serverSupportedEncodingsHeader = metadata.get('grpc-accept-encoding')[0];\n        if (serverSupportedEncodingsHeader) {\n            this.sharedFilterConfig.serverSupportedEncodingHeader =\n                serverSupportedEncodingsHeader;\n            const serverSupportedEncodings = serverSupportedEncodingsHeader.split(',');\n            if (!serverSupportedEncodings.includes(this.currentCompressionAlgorithm)) {\n                this.sendCompression = new IdentityHandler();\n                this.currentCompressionAlgorithm = 'identity';\n            }\n        }\n        metadata.remove('grpc-accept-encoding');\n        return metadata;\n    }\n    async sendMessage(message) {\n        var _a;\n        /* This filter is special. The input message is the bare message bytes,\n         * and the output is a framed and possibly compressed message. For this\n         * reason, this filter should be at the bottom of the filter stack */\n        const resolvedMessage = await message;\n        if (this.maxSendMessageLength !== -1 && resolvedMessage.message.length > this.maxSendMessageLength) {\n            throw {\n                code: constants_1.Status.RESOURCE_EXHAUSTED,\n                details: `Attempted to send message with a size larger than ${this.maxSendMessageLength}`\n            };\n        }\n        let compress;\n        if (this.sendCompression instanceof IdentityHandler) {\n            compress = false;\n        }\n        else {\n            compress = (((_a = resolvedMessage.flags) !== null && _a !== void 0 ? _a : 0) & 2 /* WriteFlags.NoCompress */) === 0;\n        }\n        return {\n            message: await this.sendCompression.writeMessage(resolvedMessage.message, compress),\n            flags: resolvedMessage.flags,\n        };\n    }\n    async receiveMessage(message) {\n        /* This filter is also special. The input message is framed and possibly\n         * compressed, and the output message is deframed and uncompressed. So\n         * this is another reason that this filter should be at the bottom of the\n         * filter stack. */\n        return this.receiveCompression.readMessage(await message);\n    }\n}\nexports.CompressionFilter = CompressionFilter;\nclass CompressionFilterFactory {\n    constructor(channel, options) {\n        this.options = options;\n        this.sharedFilterConfig = {};\n    }\n    createFilter() {\n        return new CompressionFilter(this.options, this.sharedFilterConfig);\n    }\n}\nexports.CompressionFilterFactory = CompressionFilterFactory;\n//# sourceMappingURL=compression-filter.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/google-gax/node_modules/@grpc/grpc-js/build/src/compression-filter.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/google-gax/node_modules/@grpc/grpc-js/build/src/connectivity-state.js":
/*!********************************************************************************************!*\
  !*** ./node_modules/google-gax/node_modules/@grpc/grpc-js/build/src/connectivity-state.js ***!
  \********************************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";
eval("\n/*\n * Copyright 2021 gRPC authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n */\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.ConnectivityState = void 0;\nvar ConnectivityState;\n(function (ConnectivityState) {\n    ConnectivityState[ConnectivityState[\"IDLE\"] = 0] = \"IDLE\";\n    ConnectivityState[ConnectivityState[\"CONNECTING\"] = 1] = \"CONNECTING\";\n    ConnectivityState[ConnectivityState[\"READY\"] = 2] = \"READY\";\n    ConnectivityState[ConnectivityState[\"TRANSIENT_FAILURE\"] = 3] = \"TRANSIENT_FAILURE\";\n    ConnectivityState[ConnectivityState[\"SHUTDOWN\"] = 4] = \"SHUTDOWN\";\n})(ConnectivityState || (exports.ConnectivityState = ConnectivityState = {}));\n//# sourceMappingURL=connectivity-state.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvZ29vZ2xlLWdheC9ub2RlX21vZHVsZXMvQGdycGMvZ3JwYy1qcy9idWlsZC9zcmMvY29ubmVjdGl2aXR5LXN0YXRlLmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSw4Q0FBNkMsRUFBRSxhQUFhLEVBQUM7QUFDN0QseUJBQXlCO0FBQ3pCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsQ0FBQyx3QkFBd0IseUJBQXlCLHlCQUF5QjtBQUMzRSIsInNvdXJjZXMiOlsiL1VzZXJzL2JhZy15b3NlYi9EZXNrdG9wL+GEkeGFqeGEh+GFteGEi+GFoS9oYWNrYXRob25fdGVhbS9teS1hcHAvbm9kZV9tb2R1bGVzL2dvb2dsZS1nYXgvbm9kZV9tb2R1bGVzL0BncnBjL2dycGMtanMvYnVpbGQvc3JjL2Nvbm5lY3Rpdml0eS1zdGF0ZS5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbi8qXG4gKiBDb3B5cmlnaHQgMjAyMSBnUlBDIGF1dGhvcnMuXG4gKlxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuICpcbiAqICAgICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbiAqXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuICpcbiAqL1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5Db25uZWN0aXZpdHlTdGF0ZSA9IHZvaWQgMDtcbnZhciBDb25uZWN0aXZpdHlTdGF0ZTtcbihmdW5jdGlvbiAoQ29ubmVjdGl2aXR5U3RhdGUpIHtcbiAgICBDb25uZWN0aXZpdHlTdGF0ZVtDb25uZWN0aXZpdHlTdGF0ZVtcIklETEVcIl0gPSAwXSA9IFwiSURMRVwiO1xuICAgIENvbm5lY3Rpdml0eVN0YXRlW0Nvbm5lY3Rpdml0eVN0YXRlW1wiQ09OTkVDVElOR1wiXSA9IDFdID0gXCJDT05ORUNUSU5HXCI7XG4gICAgQ29ubmVjdGl2aXR5U3RhdGVbQ29ubmVjdGl2aXR5U3RhdGVbXCJSRUFEWVwiXSA9IDJdID0gXCJSRUFEWVwiO1xuICAgIENvbm5lY3Rpdml0eVN0YXRlW0Nvbm5lY3Rpdml0eVN0YXRlW1wiVFJBTlNJRU5UX0ZBSUxVUkVcIl0gPSAzXSA9IFwiVFJBTlNJRU5UX0ZBSUxVUkVcIjtcbiAgICBDb25uZWN0aXZpdHlTdGF0ZVtDb25uZWN0aXZpdHlTdGF0ZVtcIlNIVVRET1dOXCJdID0gNF0gPSBcIlNIVVRET1dOXCI7XG59KShDb25uZWN0aXZpdHlTdGF0ZSB8fCAoZXhwb3J0cy5Db25uZWN0aXZpdHlTdGF0ZSA9IENvbm5lY3Rpdml0eVN0YXRlID0ge30pKTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWNvbm5lY3Rpdml0eS1zdGF0ZS5qcy5tYXAiXSwibmFtZXMiOltdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/google-gax/node_modules/@grpc/grpc-js/build/src/connectivity-state.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/google-gax/node_modules/@grpc/grpc-js/build/src/constants.js":
/*!***********************************************************************************!*\
  !*** ./node_modules/google-gax/node_modules/@grpc/grpc-js/build/src/constants.js ***!
  \***********************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";
eval("\n/*\n * Copyright 2019 gRPC authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n */\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.DEFAULT_MAX_RECEIVE_MESSAGE_LENGTH = exports.DEFAULT_MAX_SEND_MESSAGE_LENGTH = exports.Propagate = exports.LogVerbosity = exports.Status = void 0;\nvar Status;\n(function (Status) {\n    Status[Status[\"OK\"] = 0] = \"OK\";\n    Status[Status[\"CANCELLED\"] = 1] = \"CANCELLED\";\n    Status[Status[\"UNKNOWN\"] = 2] = \"UNKNOWN\";\n    Status[Status[\"INVALID_ARGUMENT\"] = 3] = \"INVALID_ARGUMENT\";\n    Status[Status[\"DEADLINE_EXCEEDED\"] = 4] = \"DEADLINE_EXCEEDED\";\n    Status[Status[\"NOT_FOUND\"] = 5] = \"NOT_FOUND\";\n    Status[Status[\"ALREADY_EXISTS\"] = 6] = \"ALREADY_EXISTS\";\n    Status[Status[\"PERMISSION_DENIED\"] = 7] = \"PERMISSION_DENIED\";\n    Status[Status[\"RESOURCE_EXHAUSTED\"] = 8] = \"RESOURCE_EXHAUSTED\";\n    Status[Status[\"FAILED_PRECONDITION\"] = 9] = \"FAILED_PRECONDITION\";\n    Status[Status[\"ABORTED\"] = 10] = \"ABORTED\";\n    Status[Status[\"OUT_OF_RANGE\"] = 11] = \"OUT_OF_RANGE\";\n    Status[Status[\"UNIMPLEMENTED\"] = 12] = \"UNIMPLEMENTED\";\n    Status[Status[\"INTERNAL\"] = 13] = \"INTERNAL\";\n    Status[Status[\"UNAVAILABLE\"] = 14] = \"UNAVAILABLE\";\n    Status[Status[\"DATA_LOSS\"] = 15] = \"DATA_LOSS\";\n    Status[Status[\"UNAUTHENTICATED\"] = 16] = \"UNAUTHENTICATED\";\n})(Status || (exports.Status = Status = {}));\nvar LogVerbosity;\n(function (LogVerbosity) {\n    LogVerbosity[LogVerbosity[\"DEBUG\"] = 0] = \"DEBUG\";\n    LogVerbosity[LogVerbosity[\"INFO\"] = 1] = \"INFO\";\n    LogVerbosity[LogVerbosity[\"ERROR\"] = 2] = \"ERROR\";\n    LogVerbosity[LogVerbosity[\"NONE\"] = 3] = \"NONE\";\n})(LogVerbosity || (exports.LogVerbosity = LogVerbosity = {}));\n/**\n * NOTE: This enum is not currently used in any implemented API in this\n * library. It is included only for type parity with the other implementation.\n */\nvar Propagate;\n(function (Propagate) {\n    Propagate[Propagate[\"DEADLINE\"] = 1] = \"DEADLINE\";\n    Propagate[Propagate[\"CENSUS_STATS_CONTEXT\"] = 2] = \"CENSUS_STATS_CONTEXT\";\n    Propagate[Propagate[\"CENSUS_TRACING_CONTEXT\"] = 4] = \"CENSUS_TRACING_CONTEXT\";\n    Propagate[Propagate[\"CANCELLATION\"] = 8] = \"CANCELLATION\";\n    // https://github.com/grpc/grpc/blob/master/include/grpc/impl/codegen/propagation_bits.h#L43\n    Propagate[Propagate[\"DEFAULTS\"] = 65535] = \"DEFAULTS\";\n})(Propagate || (exports.Propagate = Propagate = {}));\n// -1 means unlimited\nexports.DEFAULT_MAX_SEND_MESSAGE_LENGTH = -1;\n// 4 MB default\nexports.DEFAULT_MAX_RECEIVE_MESSAGE_LENGTH = 4 * 1024 * 1024;\n//# sourceMappingURL=constants.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvZ29vZ2xlLWdheC9ub2RlX21vZHVsZXMvQGdycGMvZ3JwYy1qcy9idWlsZC9zcmMvY29uc3RhbnRzLmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSw4Q0FBNkMsRUFBRSxhQUFhLEVBQUM7QUFDN0QsMENBQTBDLEdBQUcsdUNBQXVDLEdBQUcsaUJBQWlCLEdBQUcsb0JBQW9CLEdBQUcsY0FBYztBQUNoSjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLENBQUMsYUFBYSxjQUFjLGNBQWM7QUFDMUM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsQ0FBQyxtQkFBbUIsb0JBQW9CLG9CQUFvQjtBQUM1RDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDLGdCQUFnQixpQkFBaUIsaUJBQWlCO0FBQ25EO0FBQ0EsdUNBQXVDO0FBQ3ZDO0FBQ0EsMENBQTBDO0FBQzFDIiwic291cmNlcyI6WyIvVXNlcnMvYmFnLXlvc2ViL0Rlc2t0b3Av4YSR4YWp4YSH4YW14YSL4YWhL2hhY2thdGhvbl90ZWFtL215LWFwcC9ub2RlX21vZHVsZXMvZ29vZ2xlLWdheC9ub2RlX21vZHVsZXMvQGdycGMvZ3JwYy1qcy9idWlsZC9zcmMvY29uc3RhbnRzLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuLypcbiAqIENvcHlyaWdodCAyMDE5IGdSUEMgYXV0aG9ycy5cbiAqXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4gKlxuICogICAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuICpcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4gKlxuICovXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLkRFRkFVTFRfTUFYX1JFQ0VJVkVfTUVTU0FHRV9MRU5HVEggPSBleHBvcnRzLkRFRkFVTFRfTUFYX1NFTkRfTUVTU0FHRV9MRU5HVEggPSBleHBvcnRzLlByb3BhZ2F0ZSA9IGV4cG9ydHMuTG9nVmVyYm9zaXR5ID0gZXhwb3J0cy5TdGF0dXMgPSB2b2lkIDA7XG52YXIgU3RhdHVzO1xuKGZ1bmN0aW9uIChTdGF0dXMpIHtcbiAgICBTdGF0dXNbU3RhdHVzW1wiT0tcIl0gPSAwXSA9IFwiT0tcIjtcbiAgICBTdGF0dXNbU3RhdHVzW1wiQ0FOQ0VMTEVEXCJdID0gMV0gPSBcIkNBTkNFTExFRFwiO1xuICAgIFN0YXR1c1tTdGF0dXNbXCJVTktOT1dOXCJdID0gMl0gPSBcIlVOS05PV05cIjtcbiAgICBTdGF0dXNbU3RhdHVzW1wiSU5WQUxJRF9BUkdVTUVOVFwiXSA9IDNdID0gXCJJTlZBTElEX0FSR1VNRU5UXCI7XG4gICAgU3RhdHVzW1N0YXR1c1tcIkRFQURMSU5FX0VYQ0VFREVEXCJdID0gNF0gPSBcIkRFQURMSU5FX0VYQ0VFREVEXCI7XG4gICAgU3RhdHVzW1N0YXR1c1tcIk5PVF9GT1VORFwiXSA9IDVdID0gXCJOT1RfRk9VTkRcIjtcbiAgICBTdGF0dXNbU3RhdHVzW1wiQUxSRUFEWV9FWElTVFNcIl0gPSA2XSA9IFwiQUxSRUFEWV9FWElTVFNcIjtcbiAgICBTdGF0dXNbU3RhdHVzW1wiUEVSTUlTU0lPTl9ERU5JRURcIl0gPSA3XSA9IFwiUEVSTUlTU0lPTl9ERU5JRURcIjtcbiAgICBTdGF0dXNbU3RhdHVzW1wiUkVTT1VSQ0VfRVhIQVVTVEVEXCJdID0gOF0gPSBcIlJFU09VUkNFX0VYSEFVU1RFRFwiO1xuICAgIFN0YXR1c1tTdGF0dXNbXCJGQUlMRURfUFJFQ09ORElUSU9OXCJdID0gOV0gPSBcIkZBSUxFRF9QUkVDT05ESVRJT05cIjtcbiAgICBTdGF0dXNbU3RhdHVzW1wiQUJPUlRFRFwiXSA9IDEwXSA9IFwiQUJPUlRFRFwiO1xuICAgIFN0YXR1c1tTdGF0dXNbXCJPVVRfT0ZfUkFOR0VcIl0gPSAxMV0gPSBcIk9VVF9PRl9SQU5HRVwiO1xuICAgIFN0YXR1c1tTdGF0dXNbXCJVTklNUExFTUVOVEVEXCJdID0gMTJdID0gXCJVTklNUExFTUVOVEVEXCI7XG4gICAgU3RhdHVzW1N0YXR1c1tcIklOVEVSTkFMXCJdID0gMTNdID0gXCJJTlRFUk5BTFwiO1xuICAgIFN0YXR1c1tTdGF0dXNbXCJVTkFWQUlMQUJMRVwiXSA9IDE0XSA9IFwiVU5BVkFJTEFCTEVcIjtcbiAgICBTdGF0dXNbU3RhdHVzW1wiREFUQV9MT1NTXCJdID0gMTVdID0gXCJEQVRBX0xPU1NcIjtcbiAgICBTdGF0dXNbU3RhdHVzW1wiVU5BVVRIRU5USUNBVEVEXCJdID0gMTZdID0gXCJVTkFVVEhFTlRJQ0FURURcIjtcbn0pKFN0YXR1cyB8fCAoZXhwb3J0cy5TdGF0dXMgPSBTdGF0dXMgPSB7fSkpO1xudmFyIExvZ1ZlcmJvc2l0eTtcbihmdW5jdGlvbiAoTG9nVmVyYm9zaXR5KSB7XG4gICAgTG9nVmVyYm9zaXR5W0xvZ1ZlcmJvc2l0eVtcIkRFQlVHXCJdID0gMF0gPSBcIkRFQlVHXCI7XG4gICAgTG9nVmVyYm9zaXR5W0xvZ1ZlcmJvc2l0eVtcIklORk9cIl0gPSAxXSA9IFwiSU5GT1wiO1xuICAgIExvZ1ZlcmJvc2l0eVtMb2dWZXJib3NpdHlbXCJFUlJPUlwiXSA9IDJdID0gXCJFUlJPUlwiO1xuICAgIExvZ1ZlcmJvc2l0eVtMb2dWZXJib3NpdHlbXCJOT05FXCJdID0gM10gPSBcIk5PTkVcIjtcbn0pKExvZ1ZlcmJvc2l0eSB8fCAoZXhwb3J0cy5Mb2dWZXJib3NpdHkgPSBMb2dWZXJib3NpdHkgPSB7fSkpO1xuLyoqXG4gKiBOT1RFOiBUaGlzIGVudW0gaXMgbm90IGN1cnJlbnRseSB1c2VkIGluIGFueSBpbXBsZW1lbnRlZCBBUEkgaW4gdGhpc1xuICogbGlicmFyeS4gSXQgaXMgaW5jbHVkZWQgb25seSBmb3IgdHlwZSBwYXJpdHkgd2l0aCB0aGUgb3RoZXIgaW1wbGVtZW50YXRpb24uXG4gKi9cbnZhciBQcm9wYWdhdGU7XG4oZnVuY3Rpb24gKFByb3BhZ2F0ZSkge1xuICAgIFByb3BhZ2F0ZVtQcm9wYWdhdGVbXCJERUFETElORVwiXSA9IDFdID0gXCJERUFETElORVwiO1xuICAgIFByb3BhZ2F0ZVtQcm9wYWdhdGVbXCJDRU5TVVNfU1RBVFNfQ09OVEVYVFwiXSA9IDJdID0gXCJDRU5TVVNfU1RBVFNfQ09OVEVYVFwiO1xuICAgIFByb3BhZ2F0ZVtQcm9wYWdhdGVbXCJDRU5TVVNfVFJBQ0lOR19DT05URVhUXCJdID0gNF0gPSBcIkNFTlNVU19UUkFDSU5HX0NPTlRFWFRcIjtcbiAgICBQcm9wYWdhdGVbUHJvcGFnYXRlW1wiQ0FOQ0VMTEFUSU9OXCJdID0gOF0gPSBcIkNBTkNFTExBVElPTlwiO1xuICAgIC8vIGh0dHBzOi8vZ2l0aHViLmNvbS9ncnBjL2dycGMvYmxvYi9tYXN0ZXIvaW5jbHVkZS9ncnBjL2ltcGwvY29kZWdlbi9wcm9wYWdhdGlvbl9iaXRzLmgjTDQzXG4gICAgUHJvcGFnYXRlW1Byb3BhZ2F0ZVtcIkRFRkFVTFRTXCJdID0gNjU1MzVdID0gXCJERUZBVUxUU1wiO1xufSkoUHJvcGFnYXRlIHx8IChleHBvcnRzLlByb3BhZ2F0ZSA9IFByb3BhZ2F0ZSA9IHt9KSk7XG4vLyAtMSBtZWFucyB1bmxpbWl0ZWRcbmV4cG9ydHMuREVGQVVMVF9NQVhfU0VORF9NRVNTQUdFX0xFTkdUSCA9IC0xO1xuLy8gNCBNQiBkZWZhdWx0XG5leHBvcnRzLkRFRkFVTFRfTUFYX1JFQ0VJVkVfTUVTU0FHRV9MRU5HVEggPSA0ICogMTAyNCAqIDEwMjQ7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1jb25zdGFudHMuanMubWFwIl0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/google-gax/node_modules/@grpc/grpc-js/build/src/constants.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/google-gax/node_modules/@grpc/grpc-js/build/src/control-plane-status.js":
/*!**********************************************************************************************!*\
  !*** ./node_modules/google-gax/node_modules/@grpc/grpc-js/build/src/control-plane-status.js ***!
  \**********************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\n/*\n * Copyright 2022 gRPC authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n */\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.restrictControlPlaneStatusCode = restrictControlPlaneStatusCode;\nconst constants_1 = __webpack_require__(/*! ./constants */ \"(rsc)/./node_modules/google-gax/node_modules/@grpc/grpc-js/build/src/constants.js\");\nconst INAPPROPRIATE_CONTROL_PLANE_CODES = [\n    constants_1.Status.OK,\n    constants_1.Status.INVALID_ARGUMENT,\n    constants_1.Status.NOT_FOUND,\n    constants_1.Status.ALREADY_EXISTS,\n    constants_1.Status.FAILED_PRECONDITION,\n    constants_1.Status.ABORTED,\n    constants_1.Status.OUT_OF_RANGE,\n    constants_1.Status.DATA_LOSS,\n];\nfunction restrictControlPlaneStatusCode(code, details) {\n    if (INAPPROPRIATE_CONTROL_PLANE_CODES.includes(code)) {\n        return {\n            code: constants_1.Status.INTERNAL,\n            details: `Invalid status from control plane: ${code} ${constants_1.Status[code]} ${details}`,\n        };\n    }\n    else {\n        return { code, details };\n    }\n}\n//# sourceMappingURL=control-plane-status.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvZ29vZ2xlLWdheC9ub2RlX21vZHVsZXMvQGdycGMvZ3JwYy1qcy9idWlsZC9zcmMvY29udHJvbC1wbGFuZS1zdGF0dXMuanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDhDQUE2QyxFQUFFLGFBQWEsRUFBQztBQUM3RCxzQ0FBc0M7QUFDdEMsb0JBQW9CLG1CQUFPLENBQUMsc0dBQWE7QUFDekM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDJEQUEyRCxNQUFNLEVBQUUsMEJBQTBCLEVBQUUsUUFBUTtBQUN2RztBQUNBO0FBQ0E7QUFDQSxpQkFBaUI7QUFDakI7QUFDQTtBQUNBIiwic291cmNlcyI6WyIvVXNlcnMvYmFnLXlvc2ViL0Rlc2t0b3Av4YSR4YWp4YSH4YW14YSL4YWhL2hhY2thdGhvbl90ZWFtL215LWFwcC9ub2RlX21vZHVsZXMvZ29vZ2xlLWdheC9ub2RlX21vZHVsZXMvQGdycGMvZ3JwYy1qcy9idWlsZC9zcmMvY29udHJvbC1wbGFuZS1zdGF0dXMuanMiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG4vKlxuICogQ29weXJpZ2h0IDIwMjIgZ1JQQyBhdXRob3JzLlxuICpcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbiAqXG4gKiAgICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4gKlxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbiAqXG4gKi9cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMucmVzdHJpY3RDb250cm9sUGxhbmVTdGF0dXNDb2RlID0gcmVzdHJpY3RDb250cm9sUGxhbmVTdGF0dXNDb2RlO1xuY29uc3QgY29uc3RhbnRzXzEgPSByZXF1aXJlKFwiLi9jb25zdGFudHNcIik7XG5jb25zdCBJTkFQUFJPUFJJQVRFX0NPTlRST0xfUExBTkVfQ09ERVMgPSBbXG4gICAgY29uc3RhbnRzXzEuU3RhdHVzLk9LLFxuICAgIGNvbnN0YW50c18xLlN0YXR1cy5JTlZBTElEX0FSR1VNRU5ULFxuICAgIGNvbnN0YW50c18xLlN0YXR1cy5OT1RfRk9VTkQsXG4gICAgY29uc3RhbnRzXzEuU3RhdHVzLkFMUkVBRFlfRVhJU1RTLFxuICAgIGNvbnN0YW50c18xLlN0YXR1cy5GQUlMRURfUFJFQ09ORElUSU9OLFxuICAgIGNvbnN0YW50c18xLlN0YXR1cy5BQk9SVEVELFxuICAgIGNvbnN0YW50c18xLlN0YXR1cy5PVVRfT0ZfUkFOR0UsXG4gICAgY29uc3RhbnRzXzEuU3RhdHVzLkRBVEFfTE9TUyxcbl07XG5mdW5jdGlvbiByZXN0cmljdENvbnRyb2xQbGFuZVN0YXR1c0NvZGUoY29kZSwgZGV0YWlscykge1xuICAgIGlmIChJTkFQUFJPUFJJQVRFX0NPTlRST0xfUExBTkVfQ09ERVMuaW5jbHVkZXMoY29kZSkpIHtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIGNvZGU6IGNvbnN0YW50c18xLlN0YXR1cy5JTlRFUk5BTCxcbiAgICAgICAgICAgIGRldGFpbHM6IGBJbnZhbGlkIHN0YXR1cyBmcm9tIGNvbnRyb2wgcGxhbmU6ICR7Y29kZX0gJHtjb25zdGFudHNfMS5TdGF0dXNbY29kZV19ICR7ZGV0YWlsc31gLFxuICAgICAgICB9O1xuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgICAgcmV0dXJuIHsgY29kZSwgZGV0YWlscyB9O1xuICAgIH1cbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWNvbnRyb2wtcGxhbmUtc3RhdHVzLmpzLm1hcCJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/google-gax/node_modules/@grpc/grpc-js/build/src/control-plane-status.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/google-gax/node_modules/@grpc/grpc-js/build/src/deadline.js":
/*!**********************************************************************************!*\
  !*** ./node_modules/google-gax/node_modules/@grpc/grpc-js/build/src/deadline.js ***!
  \**********************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";
eval("\n/*\n * Copyright 2019 gRPC authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n */\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.minDeadline = minDeadline;\nexports.getDeadlineTimeoutString = getDeadlineTimeoutString;\nexports.getRelativeTimeout = getRelativeTimeout;\nexports.deadlineToString = deadlineToString;\nexports.formatDateDifference = formatDateDifference;\nfunction minDeadline(...deadlineList) {\n    let minValue = Infinity;\n    for (const deadline of deadlineList) {\n        const deadlineMsecs = deadline instanceof Date ? deadline.getTime() : deadline;\n        if (deadlineMsecs < minValue) {\n            minValue = deadlineMsecs;\n        }\n    }\n    return minValue;\n}\nconst units = [\n    ['m', 1],\n    ['S', 1000],\n    ['M', 60 * 1000],\n    ['H', 60 * 60 * 1000],\n];\nfunction getDeadlineTimeoutString(deadline) {\n    const now = new Date().getTime();\n    if (deadline instanceof Date) {\n        deadline = deadline.getTime();\n    }\n    const timeoutMs = Math.max(deadline - now, 0);\n    for (const [unit, factor] of units) {\n        const amount = timeoutMs / factor;\n        if (amount < 1e8) {\n            return String(Math.ceil(amount)) + unit;\n        }\n    }\n    throw new Error('Deadline is too far in the future');\n}\n/**\n * See https://nodejs.org/api/timers.html#settimeoutcallback-delay-args\n * In particular, \"When delay is larger than 2147483647 or less than 1, the\n * delay will be set to 1. Non-integer delays are truncated to an integer.\"\n * This number of milliseconds is almost 25 days.\n */\nconst MAX_TIMEOUT_TIME = 2147483647;\n/**\n * Get the timeout value that should be passed to setTimeout now for the timer\n * to end at the deadline. For any deadline before now, the timer should end\n * immediately, represented by a value of 0. For any deadline more than\n * MAX_TIMEOUT_TIME milliseconds in the future, a timer cannot be set that will\n * end at that time, so it is treated as infinitely far in the future.\n * @param deadline\n * @returns\n */\nfunction getRelativeTimeout(deadline) {\n    const deadlineMs = deadline instanceof Date ? deadline.getTime() : deadline;\n    const now = new Date().getTime();\n    const timeout = deadlineMs - now;\n    if (timeout < 0) {\n        return 0;\n    }\n    else if (timeout > MAX_TIMEOUT_TIME) {\n        return Infinity;\n    }\n    else {\n        return timeout;\n    }\n}\nfunction deadlineToString(deadline) {\n    if (deadline instanceof Date) {\n        return deadline.toISOString();\n    }\n    else {\n        const dateDeadline = new Date(deadline);\n        if (Number.isNaN(dateDeadline.getTime())) {\n            return '' + deadline;\n        }\n        else {\n            return dateDeadline.toISOString();\n        }\n    }\n}\n/**\n * Calculate the difference between two dates as a number of seconds and format\n * it as a string.\n * @param startDate\n * @param endDate\n * @returns\n */\nfunction formatDateDifference(startDate, endDate) {\n    return ((endDate.getTime() - startDate.getTime()) / 1000).toFixed(3) + 's';\n}\n//# sourceMappingURL=deadline.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvZ29vZ2xlLWdheC9ub2RlX21vZHVsZXMvQGdycGMvZ3JwYy1qcy9idWlsZC9zcmMvZGVhZGxpbmUuanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDhDQUE2QyxFQUFFLGFBQWEsRUFBQztBQUM3RCxtQkFBbUI7QUFDbkIsZ0NBQWdDO0FBQ2hDLDBCQUEwQjtBQUMxQix3QkFBd0I7QUFDeEIsNEJBQTRCO0FBQzVCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwic291cmNlcyI6WyIvVXNlcnMvYmFnLXlvc2ViL0Rlc2t0b3Av4YSR4YWp4YSH4YW14YSL4YWhL2hhY2thdGhvbl90ZWFtL215LWFwcC9ub2RlX21vZHVsZXMvZ29vZ2xlLWdheC9ub2RlX21vZHVsZXMvQGdycGMvZ3JwYy1qcy9idWlsZC9zcmMvZGVhZGxpbmUuanMiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG4vKlxuICogQ29weXJpZ2h0IDIwMTkgZ1JQQyBhdXRob3JzLlxuICpcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbiAqXG4gKiAgICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4gKlxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbiAqXG4gKi9cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMubWluRGVhZGxpbmUgPSBtaW5EZWFkbGluZTtcbmV4cG9ydHMuZ2V0RGVhZGxpbmVUaW1lb3V0U3RyaW5nID0gZ2V0RGVhZGxpbmVUaW1lb3V0U3RyaW5nO1xuZXhwb3J0cy5nZXRSZWxhdGl2ZVRpbWVvdXQgPSBnZXRSZWxhdGl2ZVRpbWVvdXQ7XG5leHBvcnRzLmRlYWRsaW5lVG9TdHJpbmcgPSBkZWFkbGluZVRvU3RyaW5nO1xuZXhwb3J0cy5mb3JtYXREYXRlRGlmZmVyZW5jZSA9IGZvcm1hdERhdGVEaWZmZXJlbmNlO1xuZnVuY3Rpb24gbWluRGVhZGxpbmUoLi4uZGVhZGxpbmVMaXN0KSB7XG4gICAgbGV0IG1pblZhbHVlID0gSW5maW5pdHk7XG4gICAgZm9yIChjb25zdCBkZWFkbGluZSBvZiBkZWFkbGluZUxpc3QpIHtcbiAgICAgICAgY29uc3QgZGVhZGxpbmVNc2VjcyA9IGRlYWRsaW5lIGluc3RhbmNlb2YgRGF0ZSA/IGRlYWRsaW5lLmdldFRpbWUoKSA6IGRlYWRsaW5lO1xuICAgICAgICBpZiAoZGVhZGxpbmVNc2VjcyA8IG1pblZhbHVlKSB7XG4gICAgICAgICAgICBtaW5WYWx1ZSA9IGRlYWRsaW5lTXNlY3M7XG4gICAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIG1pblZhbHVlO1xufVxuY29uc3QgdW5pdHMgPSBbXG4gICAgWydtJywgMV0sXG4gICAgWydTJywgMTAwMF0sXG4gICAgWydNJywgNjAgKiAxMDAwXSxcbiAgICBbJ0gnLCA2MCAqIDYwICogMTAwMF0sXG5dO1xuZnVuY3Rpb24gZ2V0RGVhZGxpbmVUaW1lb3V0U3RyaW5nKGRlYWRsaW5lKSB7XG4gICAgY29uc3Qgbm93ID0gbmV3IERhdGUoKS5nZXRUaW1lKCk7XG4gICAgaWYgKGRlYWRsaW5lIGluc3RhbmNlb2YgRGF0ZSkge1xuICAgICAgICBkZWFkbGluZSA9IGRlYWRsaW5lLmdldFRpbWUoKTtcbiAgICB9XG4gICAgY29uc3QgdGltZW91dE1zID0gTWF0aC5tYXgoZGVhZGxpbmUgLSBub3csIDApO1xuICAgIGZvciAoY29uc3QgW3VuaXQsIGZhY3Rvcl0gb2YgdW5pdHMpIHtcbiAgICAgICAgY29uc3QgYW1vdW50ID0gdGltZW91dE1zIC8gZmFjdG9yO1xuICAgICAgICBpZiAoYW1vdW50IDwgMWU4KSB7XG4gICAgICAgICAgICByZXR1cm4gU3RyaW5nKE1hdGguY2VpbChhbW91bnQpKSArIHVuaXQ7XG4gICAgICAgIH1cbiAgICB9XG4gICAgdGhyb3cgbmV3IEVycm9yKCdEZWFkbGluZSBpcyB0b28gZmFyIGluIHRoZSBmdXR1cmUnKTtcbn1cbi8qKlxuICogU2VlIGh0dHBzOi8vbm9kZWpzLm9yZy9hcGkvdGltZXJzLmh0bWwjc2V0dGltZW91dGNhbGxiYWNrLWRlbGF5LWFyZ3NcbiAqIEluIHBhcnRpY3VsYXIsIFwiV2hlbiBkZWxheSBpcyBsYXJnZXIgdGhhbiAyMTQ3NDgzNjQ3IG9yIGxlc3MgdGhhbiAxLCB0aGVcbiAqIGRlbGF5IHdpbGwgYmUgc2V0IHRvIDEuIE5vbi1pbnRlZ2VyIGRlbGF5cyBhcmUgdHJ1bmNhdGVkIHRvIGFuIGludGVnZXIuXCJcbiAqIFRoaXMgbnVtYmVyIG9mIG1pbGxpc2Vjb25kcyBpcyBhbG1vc3QgMjUgZGF5cy5cbiAqL1xuY29uc3QgTUFYX1RJTUVPVVRfVElNRSA9IDIxNDc0ODM2NDc7XG4vKipcbiAqIEdldCB0aGUgdGltZW91dCB2YWx1ZSB0aGF0IHNob3VsZCBiZSBwYXNzZWQgdG8gc2V0VGltZW91dCBub3cgZm9yIHRoZSB0aW1lclxuICogdG8gZW5kIGF0IHRoZSBkZWFkbGluZS4gRm9yIGFueSBkZWFkbGluZSBiZWZvcmUgbm93LCB0aGUgdGltZXIgc2hvdWxkIGVuZFxuICogaW1tZWRpYXRlbHksIHJlcHJlc2VudGVkIGJ5IGEgdmFsdWUgb2YgMC4gRm9yIGFueSBkZWFkbGluZSBtb3JlIHRoYW5cbiAqIE1BWF9USU1FT1VUX1RJTUUgbWlsbGlzZWNvbmRzIGluIHRoZSBmdXR1cmUsIGEgdGltZXIgY2Fubm90IGJlIHNldCB0aGF0IHdpbGxcbiAqIGVuZCBhdCB0aGF0IHRpbWUsIHNvIGl0IGlzIHRyZWF0ZWQgYXMgaW5maW5pdGVseSBmYXIgaW4gdGhlIGZ1dHVyZS5cbiAqIEBwYXJhbSBkZWFkbGluZVxuICogQHJldHVybnNcbiAqL1xuZnVuY3Rpb24gZ2V0UmVsYXRpdmVUaW1lb3V0KGRlYWRsaW5lKSB7XG4gICAgY29uc3QgZGVhZGxpbmVNcyA9IGRlYWRsaW5lIGluc3RhbmNlb2YgRGF0ZSA/IGRlYWRsaW5lLmdldFRpbWUoKSA6IGRlYWRsaW5lO1xuICAgIGNvbnN0IG5vdyA9IG5ldyBEYXRlKCkuZ2V0VGltZSgpO1xuICAgIGNvbnN0IHRpbWVvdXQgPSBkZWFkbGluZU1zIC0gbm93O1xuICAgIGlmICh0aW1lb3V0IDwgMCkge1xuICAgICAgICByZXR1cm4gMDtcbiAgICB9XG4gICAgZWxzZSBpZiAodGltZW91dCA+IE1BWF9USU1FT1VUX1RJTUUpIHtcbiAgICAgICAgcmV0dXJuIEluZmluaXR5O1xuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgICAgcmV0dXJuIHRpbWVvdXQ7XG4gICAgfVxufVxuZnVuY3Rpb24gZGVhZGxpbmVUb1N0cmluZyhkZWFkbGluZSkge1xuICAgIGlmIChkZWFkbGluZSBpbnN0YW5jZW9mIERhdGUpIHtcbiAgICAgICAgcmV0dXJuIGRlYWRsaW5lLnRvSVNPU3RyaW5nKCk7XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgICBjb25zdCBkYXRlRGVhZGxpbmUgPSBuZXcgRGF0ZShkZWFkbGluZSk7XG4gICAgICAgIGlmIChOdW1iZXIuaXNOYU4oZGF0ZURlYWRsaW5lLmdldFRpbWUoKSkpIHtcbiAgICAgICAgICAgIHJldHVybiAnJyArIGRlYWRsaW5lO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgcmV0dXJuIGRhdGVEZWFkbGluZS50b0lTT1N0cmluZygpO1xuICAgICAgICB9XG4gICAgfVxufVxuLyoqXG4gKiBDYWxjdWxhdGUgdGhlIGRpZmZlcmVuY2UgYmV0d2VlbiB0d28gZGF0ZXMgYXMgYSBudW1iZXIgb2Ygc2Vjb25kcyBhbmQgZm9ybWF0XG4gKiBpdCBhcyBhIHN0cmluZy5cbiAqIEBwYXJhbSBzdGFydERhdGVcbiAqIEBwYXJhbSBlbmREYXRlXG4gKiBAcmV0dXJuc1xuICovXG5mdW5jdGlvbiBmb3JtYXREYXRlRGlmZmVyZW5jZShzdGFydERhdGUsIGVuZERhdGUpIHtcbiAgICByZXR1cm4gKChlbmREYXRlLmdldFRpbWUoKSAtIHN0YXJ0RGF0ZS5nZXRUaW1lKCkpIC8gMTAwMCkudG9GaXhlZCgzKSArICdzJztcbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRlYWRsaW5lLmpzLm1hcCJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/google-gax/node_modules/@grpc/grpc-js/build/src/deadline.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/google-gax/node_modules/@grpc/grpc-js/build/src/duration.js":
/*!**********************************************************************************!*\
  !*** ./node_modules/google-gax/node_modules/@grpc/grpc-js/build/src/duration.js ***!
  \**********************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";
eval("\n/*\n * Copyright 2022 gRPC authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n */\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.msToDuration = msToDuration;\nexports.durationToMs = durationToMs;\nexports.isDuration = isDuration;\nexports.parseDuration = parseDuration;\nfunction msToDuration(millis) {\n    return {\n        seconds: (millis / 1000) | 0,\n        nanos: ((millis % 1000) * 1000000) | 0,\n    };\n}\nfunction durationToMs(duration) {\n    return (duration.seconds * 1000 + duration.nanos / 1000000) | 0;\n}\nfunction isDuration(value) {\n    return typeof value.seconds === 'number' && typeof value.nanos === 'number';\n}\nconst durationRegex = /^(\\d+)(?:\\.(\\d+))?s$/;\nfunction parseDuration(value) {\n    const match = value.match(durationRegex);\n    if (!match) {\n        return null;\n    }\n    return {\n        seconds: Number.parseInt(match[1], 10),\n        nanos: match[2] ? Number.parseInt(match[2].padEnd(9, '0'), 10) : 0\n    };\n}\n//# sourceMappingURL=duration.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvZ29vZ2xlLWdheC9ub2RlX21vZHVsZXMvQGdycGMvZ3JwYy1qcy9idWlsZC9zcmMvZHVyYXRpb24uanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDhDQUE2QyxFQUFFLGFBQWEsRUFBQztBQUM3RCxvQkFBb0I7QUFDcEIsb0JBQW9CO0FBQ3BCLGtCQUFrQjtBQUNsQixxQkFBcUI7QUFDckI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwic291cmNlcyI6WyIvVXNlcnMvYmFnLXlvc2ViL0Rlc2t0b3Av4YSR4YWp4YSH4YW14YSL4YWhL2hhY2thdGhvbl90ZWFtL215LWFwcC9ub2RlX21vZHVsZXMvZ29vZ2xlLWdheC9ub2RlX21vZHVsZXMvQGdycGMvZ3JwYy1qcy9idWlsZC9zcmMvZHVyYXRpb24uanMiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG4vKlxuICogQ29weXJpZ2h0IDIwMjIgZ1JQQyBhdXRob3JzLlxuICpcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbiAqXG4gKiAgICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4gKlxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbiAqXG4gKi9cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMubXNUb0R1cmF0aW9uID0gbXNUb0R1cmF0aW9uO1xuZXhwb3J0cy5kdXJhdGlvblRvTXMgPSBkdXJhdGlvblRvTXM7XG5leHBvcnRzLmlzRHVyYXRpb24gPSBpc0R1cmF0aW9uO1xuZXhwb3J0cy5wYXJzZUR1cmF0aW9uID0gcGFyc2VEdXJhdGlvbjtcbmZ1bmN0aW9uIG1zVG9EdXJhdGlvbihtaWxsaXMpIHtcbiAgICByZXR1cm4ge1xuICAgICAgICBzZWNvbmRzOiAobWlsbGlzIC8gMTAwMCkgfCAwLFxuICAgICAgICBuYW5vczogKChtaWxsaXMgJSAxMDAwKSAqIDEwMDAwMDApIHwgMCxcbiAgICB9O1xufVxuZnVuY3Rpb24gZHVyYXRpb25Ub01zKGR1cmF0aW9uKSB7XG4gICAgcmV0dXJuIChkdXJhdGlvbi5zZWNvbmRzICogMTAwMCArIGR1cmF0aW9uLm5hbm9zIC8gMTAwMDAwMCkgfCAwO1xufVxuZnVuY3Rpb24gaXNEdXJhdGlvbih2YWx1ZSkge1xuICAgIHJldHVybiB0eXBlb2YgdmFsdWUuc2Vjb25kcyA9PT0gJ251bWJlcicgJiYgdHlwZW9mIHZhbHVlLm5hbm9zID09PSAnbnVtYmVyJztcbn1cbmNvbnN0IGR1cmF0aW9uUmVnZXggPSAvXihcXGQrKSg/OlxcLihcXGQrKSk/cyQvO1xuZnVuY3Rpb24gcGFyc2VEdXJhdGlvbih2YWx1ZSkge1xuICAgIGNvbnN0IG1hdGNoID0gdmFsdWUubWF0Y2goZHVyYXRpb25SZWdleCk7XG4gICAgaWYgKCFtYXRjaCkge1xuICAgICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG4gICAgcmV0dXJuIHtcbiAgICAgICAgc2Vjb25kczogTnVtYmVyLnBhcnNlSW50KG1hdGNoWzFdLCAxMCksXG4gICAgICAgIG5hbm9zOiBtYXRjaFsyXSA/IE51bWJlci5wYXJzZUludChtYXRjaFsyXS5wYWRFbmQoOSwgJzAnKSwgMTApIDogMFxuICAgIH07XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1kdXJhdGlvbi5qcy5tYXAiXSwibmFtZXMiOltdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/google-gax/node_modules/@grpc/grpc-js/build/src/duration.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/google-gax/node_modules/@grpc/grpc-js/build/src/environment.js":
/*!*************************************************************************************!*\
  !*** ./node_modules/google-gax/node_modules/@grpc/grpc-js/build/src/environment.js ***!
  \*************************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";
eval("\n/*\n * Copyright 2024 gRPC authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n */\nvar _a;\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.GRPC_NODE_USE_ALTERNATIVE_RESOLVER = void 0;\nexports.GRPC_NODE_USE_ALTERNATIVE_RESOLVER = ((_a = process.env.GRPC_NODE_USE_ALTERNATIVE_RESOLVER) !== null && _a !== void 0 ? _a : 'false') === 'true';\n//# sourceMappingURL=environment.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvZ29vZ2xlLWdheC9ub2RlX21vZHVsZXMvQGdycGMvZ3JwYy1qcy9idWlsZC9zcmMvZW52aXJvbm1lbnQuanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsOENBQTZDLEVBQUUsYUFBYSxFQUFDO0FBQzdELDBDQUEwQztBQUMxQywwQ0FBMEM7QUFDMUMiLCJzb3VyY2VzIjpbIi9Vc2Vycy9iYWcteW9zZWIvRGVza3RvcC/hhJHhhanhhIfhhbXhhIvhhaEvaGFja2F0aG9uX3RlYW0vbXktYXBwL25vZGVfbW9kdWxlcy9nb29nbGUtZ2F4L25vZGVfbW9kdWxlcy9AZ3JwYy9ncnBjLWpzL2J1aWxkL3NyYy9lbnZpcm9ubWVudC5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbi8qXG4gKiBDb3B5cmlnaHQgMjAyNCBnUlBDIGF1dGhvcnMuXG4gKlxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuICpcbiAqICAgICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbiAqXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuICpcbiAqL1xudmFyIF9hO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5HUlBDX05PREVfVVNFX0FMVEVSTkFUSVZFX1JFU09MVkVSID0gdm9pZCAwO1xuZXhwb3J0cy5HUlBDX05PREVfVVNFX0FMVEVSTkFUSVZFX1JFU09MVkVSID0gKChfYSA9IHByb2Nlc3MuZW52LkdSUENfTk9ERV9VU0VfQUxURVJOQVRJVkVfUkVTT0xWRVIpICE9PSBudWxsICYmIF9hICE9PSB2b2lkIDAgPyBfYSA6ICdmYWxzZScpID09PSAndHJ1ZSc7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1lbnZpcm9ubWVudC5qcy5tYXAiXSwibmFtZXMiOltdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/google-gax/node_modules/@grpc/grpc-js/build/src/environment.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/google-gax/node_modules/@grpc/grpc-js/build/src/error.js":
/*!*******************************************************************************!*\
  !*** ./node_modules/google-gax/node_modules/@grpc/grpc-js/build/src/error.js ***!
  \*******************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";
eval("\n/*\n * Copyright 2022 gRPC authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n */\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.getErrorMessage = getErrorMessage;\nexports.getErrorCode = getErrorCode;\nfunction getErrorMessage(error) {\n    if (error instanceof Error) {\n        return error.message;\n    }\n    else {\n        return String(error);\n    }\n}\nfunction getErrorCode(error) {\n    if (typeof error === 'object' &&\n        error !== null &&\n        'code' in error &&\n        typeof error.code === 'number') {\n        return error.code;\n    }\n    else {\n        return null;\n    }\n}\n//# sourceMappingURL=error.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvZ29vZ2xlLWdheC9ub2RlX21vZHVsZXMvQGdycGMvZ3JwYy1qcy9idWlsZC9zcmMvZXJyb3IuanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDhDQUE2QyxFQUFFLGFBQWEsRUFBQztBQUM3RCx1QkFBdUI7QUFDdkIsb0JBQW9CO0FBQ3BCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJzb3VyY2VzIjpbIi9Vc2Vycy9iYWcteW9zZWIvRGVza3RvcC/hhJHhhanhhIfhhbXhhIvhhaEvaGFja2F0aG9uX3RlYW0vbXktYXBwL25vZGVfbW9kdWxlcy9nb29nbGUtZ2F4L25vZGVfbW9kdWxlcy9AZ3JwYy9ncnBjLWpzL2J1aWxkL3NyYy9lcnJvci5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbi8qXG4gKiBDb3B5cmlnaHQgMjAyMiBnUlBDIGF1dGhvcnMuXG4gKlxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuICpcbiAqICAgICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbiAqXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuICpcbiAqL1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5nZXRFcnJvck1lc3NhZ2UgPSBnZXRFcnJvck1lc3NhZ2U7XG5leHBvcnRzLmdldEVycm9yQ29kZSA9IGdldEVycm9yQ29kZTtcbmZ1bmN0aW9uIGdldEVycm9yTWVzc2FnZShlcnJvcikge1xuICAgIGlmIChlcnJvciBpbnN0YW5jZW9mIEVycm9yKSB7XG4gICAgICAgIHJldHVybiBlcnJvci5tZXNzYWdlO1xuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgICAgcmV0dXJuIFN0cmluZyhlcnJvcik7XG4gICAgfVxufVxuZnVuY3Rpb24gZ2V0RXJyb3JDb2RlKGVycm9yKSB7XG4gICAgaWYgKHR5cGVvZiBlcnJvciA9PT0gJ29iamVjdCcgJiZcbiAgICAgICAgZXJyb3IgIT09IG51bGwgJiZcbiAgICAgICAgJ2NvZGUnIGluIGVycm9yICYmXG4gICAgICAgIHR5cGVvZiBlcnJvci5jb2RlID09PSAnbnVtYmVyJykge1xuICAgICAgICByZXR1cm4gZXJyb3IuY29kZTtcbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICAgIHJldHVybiBudWxsO1xuICAgIH1cbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWVycm9yLmpzLm1hcCJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/google-gax/node_modules/@grpc/grpc-js/build/src/error.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/google-gax/node_modules/@grpc/grpc-js/build/src/experimental.js":
/*!**************************************************************************************!*\
  !*** ./node_modules/google-gax/node_modules/@grpc/grpc-js/build/src/experimental.js ***!
  \**************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.SUBCHANNEL_ARGS_EXCLUDE_KEY_PREFIX = exports.createCertificateProviderChannelCredentials = exports.FileWatcherCertificateProvider = exports.createCertificateProviderServerCredentials = exports.createServerCredentialsWithInterceptors = exports.BaseSubchannelWrapper = exports.registerAdminService = exports.FilterStackFactory = exports.BaseFilter = exports.PickResultType = exports.QueuePicker = exports.UnavailablePicker = exports.ChildLoadBalancerHandler = exports.EndpointMap = exports.endpointHasAddress = exports.endpointToString = exports.subchannelAddressToString = exports.LeafLoadBalancer = exports.isLoadBalancerNameRegistered = exports.parseLoadBalancingConfig = exports.selectLbConfigFromList = exports.registerLoadBalancerType = exports.createChildChannelControlHelper = exports.BackoffTimeout = exports.parseDuration = exports.durationToMs = exports.splitHostPort = exports.uriToString = exports.createResolver = exports.registerResolver = exports.log = exports.trace = void 0;\nvar logging_1 = __webpack_require__(/*! ./logging */ \"(rsc)/./node_modules/google-gax/node_modules/@grpc/grpc-js/build/src/logging.js\");\nObject.defineProperty(exports, \"trace\", ({ enumerable: true, get: function () { return logging_1.trace; } }));\nObject.defineProperty(exports, \"log\", ({ enumerable: true, get: function () { return logging_1.log; } }));\nvar resolver_1 = __webpack_require__(/*! ./resolver */ \"(rsc)/./node_modules/google-gax/node_modules/@grpc/grpc-js/build/src/resolver.js\");\nObject.defineProperty(exports, \"registerResolver\", ({ enumerable: true, get: function () { return resolver_1.registerResolver; } }));\nObject.defineProperty(exports, \"createResolver\", ({ enumerable: true, get: function () { return resolver_1.createResolver; } }));\nvar uri_parser_1 = __webpack_require__(/*! ./uri-parser */ \"(rsc)/./node_modules/google-gax/node_modules/@grpc/grpc-js/build/src/uri-parser.js\");\nObject.defineProperty(exports, \"uriToString\", ({ enumerable: true, get: function () { return uri_parser_1.uriToString; } }));\nObject.defineProperty(exports, \"splitHostPort\", ({ enumerable: true, get: function () { return uri_parser_1.splitHostPort; } }));\nvar duration_1 = __webpack_require__(/*! ./duration */ \"(rsc)/./node_modules/google-gax/node_modules/@grpc/grpc-js/build/src/duration.js\");\nObject.defineProperty(exports, \"durationToMs\", ({ enumerable: true, get: function () { return duration_1.durationToMs; } }));\nObject.defineProperty(exports, \"parseDuration\", ({ enumerable: true, get: function () { return duration_1.parseDuration; } }));\nvar backoff_timeout_1 = __webpack_require__(/*! ./backoff-timeout */ \"(rsc)/./node_modules/google-gax/node_modules/@grpc/grpc-js/build/src/backoff-timeout.js\");\nObject.defineProperty(exports, \"BackoffTimeout\", ({ enumerable: true, get: function () { return backoff_timeout_1.BackoffTimeout; } }));\nvar load_balancer_1 = __webpack_require__(/*! ./load-balancer */ \"(rsc)/./node_modules/google-gax/node_modules/@grpc/grpc-js/build/src/load-balancer.js\");\nObject.defineProperty(exports, \"createChildChannelControlHelper\", ({ enumerable: true, get: function () { return load_balancer_1.createChildChannelControlHelper; } }));\nObject.defineProperty(exports, \"registerLoadBalancerType\", ({ enumerable: true, get: function () { return load_balancer_1.registerLoadBalancerType; } }));\nObject.defineProperty(exports, \"selectLbConfigFromList\", ({ enumerable: true, get: function () { return load_balancer_1.selectLbConfigFromList; } }));\nObject.defineProperty(exports, \"parseLoadBalancingConfig\", ({ enumerable: true, get: function () { return load_balancer_1.parseLoadBalancingConfig; } }));\nObject.defineProperty(exports, \"isLoadBalancerNameRegistered\", ({ enumerable: true, get: function () { return load_balancer_1.isLoadBalancerNameRegistered; } }));\nvar load_balancer_pick_first_1 = __webpack_require__(/*! ./load-balancer-pick-first */ \"(rsc)/./node_modules/google-gax/node_modules/@grpc/grpc-js/build/src/load-balancer-pick-first.js\");\nObject.defineProperty(exports, \"LeafLoadBalancer\", ({ enumerable: true, get: function () { return load_balancer_pick_first_1.LeafLoadBalancer; } }));\nvar subchannel_address_1 = __webpack_require__(/*! ./subchannel-address */ \"(rsc)/./node_modules/google-gax/node_modules/@grpc/grpc-js/build/src/subchannel-address.js\");\nObject.defineProperty(exports, \"subchannelAddressToString\", ({ enumerable: true, get: function () { return subchannel_address_1.subchannelAddressToString; } }));\nObject.defineProperty(exports, \"endpointToString\", ({ enumerable: true, get: function () { return subchannel_address_1.endpointToString; } }));\nObject.defineProperty(exports, \"endpointHasAddress\", ({ enumerable: true, get: function () { return subchannel_address_1.endpointHasAddress; } }));\nObject.defineProperty(exports, \"EndpointMap\", ({ enumerable: true, get: function () { return subchannel_address_1.EndpointMap; } }));\nvar load_balancer_child_handler_1 = __webpack_require__(/*! ./load-balancer-child-handler */ \"(rsc)/./node_modules/google-gax/node_modules/@grpc/grpc-js/build/src/load-balancer-child-handler.js\");\nObject.defineProperty(exports, \"ChildLoadBalancerHandler\", ({ enumerable: true, get: function () { return load_balancer_child_handler_1.ChildLoadBalancerHandler; } }));\nvar picker_1 = __webpack_require__(/*! ./picker */ \"(rsc)/./node_modules/google-gax/node_modules/@grpc/grpc-js/build/src/picker.js\");\nObject.defineProperty(exports, \"UnavailablePicker\", ({ enumerable: true, get: function () { return picker_1.UnavailablePicker; } }));\nObject.defineProperty(exports, \"QueuePicker\", ({ enumerable: true, get: function () { return picker_1.QueuePicker; } }));\nObject.defineProperty(exports, \"PickResultType\", ({ enumerable: true, get: function () { return picker_1.PickResultType; } }));\nvar filter_1 = __webpack_require__(/*! ./filter */ \"(rsc)/./node_modules/google-gax/node_modules/@grpc/grpc-js/build/src/filter.js\");\nObject.defineProperty(exports, \"BaseFilter\", ({ enumerable: true, get: function () { return filter_1.BaseFilter; } }));\nvar filter_stack_1 = __webpack_require__(/*! ./filter-stack */ \"(rsc)/./node_modules/google-gax/node_modules/@grpc/grpc-js/build/src/filter-stack.js\");\nObject.defineProperty(exports, \"FilterStackFactory\", ({ enumerable: true, get: function () { return filter_stack_1.FilterStackFactory; } }));\nvar admin_1 = __webpack_require__(/*! ./admin */ \"(rsc)/./node_modules/google-gax/node_modules/@grpc/grpc-js/build/src/admin.js\");\nObject.defineProperty(exports, \"registerAdminService\", ({ enumerable: true, get: function () { return admin_1.registerAdminService; } }));\nvar subchannel_interface_1 = __webpack_require__(/*! ./subchannel-interface */ \"(rsc)/./node_modules/google-gax/node_modules/@grpc/grpc-js/build/src/subchannel-interface.js\");\nObject.defineProperty(exports, \"BaseSubchannelWrapper\", ({ enumerable: true, get: function () { return subchannel_interface_1.BaseSubchannelWrapper; } }));\nvar server_credentials_1 = __webpack_require__(/*! ./server-credentials */ \"(rsc)/./node_modules/google-gax/node_modules/@grpc/grpc-js/build/src/server-credentials.js\");\nObject.defineProperty(exports, \"createServerCredentialsWithInterceptors\", ({ enumerable: true, get: function () { return server_credentials_1.createServerCredentialsWithInterceptors; } }));\nObject.defineProperty(exports, \"createCertificateProviderServerCredentials\", ({ enumerable: true, get: function () { return server_credentials_1.createCertificateProviderServerCredentials; } }));\nvar certificate_provider_1 = __webpack_require__(/*! ./certificate-provider */ \"(rsc)/./node_modules/google-gax/node_modules/@grpc/grpc-js/build/src/certificate-provider.js\");\nObject.defineProperty(exports, \"FileWatcherCertificateProvider\", ({ enumerable: true, get: function () { return certificate_provider_1.FileWatcherCertificateProvider; } }));\nvar channel_credentials_1 = __webpack_require__(/*! ./channel-credentials */ \"(rsc)/./node_modules/google-gax/node_modules/@grpc/grpc-js/build/src/channel-credentials.js\");\nObject.defineProperty(exports, \"createCertificateProviderChannelCredentials\", ({ enumerable: true, get: function () { return channel_credentials_1.createCertificateProviderChannelCredentials; } }));\nvar internal_channel_1 = __webpack_require__(/*! ./internal-channel */ \"(rsc)/./node_modules/google-gax/node_modules/@grpc/grpc-js/build/src/internal-channel.js\");\nObject.defineProperty(exports, \"SUBCHANNEL_ARGS_EXCLUDE_KEY_PREFIX\", ({ enumerable: true, get: function () { return internal_channel_1.SUBCHANNEL_ARGS_EXCLUDE_KEY_PREFIX; } }));\n//# sourceMappingURL=experimental.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/google-gax/node_modules/@grpc/grpc-js/build/src/experimental.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/google-gax/node_modules/@grpc/grpc-js/build/src/filter-stack.js":
/*!**************************************************************************************!*\
  !*** ./node_modules/google-gax/node_modules/@grpc/grpc-js/build/src/filter-stack.js ***!
  \**************************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";
eval("\n/*\n * Copyright 2019 gRPC authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n */\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.FilterStackFactory = exports.FilterStack = void 0;\nclass FilterStack {\n    constructor(filters) {\n        this.filters = filters;\n    }\n    sendMetadata(metadata) {\n        let result = metadata;\n        for (let i = 0; i < this.filters.length; i++) {\n            result = this.filters[i].sendMetadata(result);\n        }\n        return result;\n    }\n    receiveMetadata(metadata) {\n        let result = metadata;\n        for (let i = this.filters.length - 1; i >= 0; i--) {\n            result = this.filters[i].receiveMetadata(result);\n        }\n        return result;\n    }\n    sendMessage(message) {\n        let result = message;\n        for (let i = 0; i < this.filters.length; i++) {\n            result = this.filters[i].sendMessage(result);\n        }\n        return result;\n    }\n    receiveMessage(message) {\n        let result = message;\n        for (let i = this.filters.length - 1; i >= 0; i--) {\n            result = this.filters[i].receiveMessage(result);\n        }\n        return result;\n    }\n    receiveTrailers(status) {\n        let result = status;\n        for (let i = this.filters.length - 1; i >= 0; i--) {\n            result = this.filters[i].receiveTrailers(result);\n        }\n        return result;\n    }\n    push(filters) {\n        this.filters.unshift(...filters);\n    }\n    getFilters() {\n        return this.filters;\n    }\n}\nexports.FilterStack = FilterStack;\nclass FilterStackFactory {\n    constructor(factories) {\n        this.factories = factories;\n    }\n    push(filterFactories) {\n        this.factories.unshift(...filterFactories);\n    }\n    clone() {\n        return new FilterStackFactory([...this.factories]);\n    }\n    createFilter() {\n        return new FilterStack(this.factories.map(factory => factory.createFilter()));\n    }\n}\nexports.FilterStackFactory = FilterStackFactory;\n//# sourceMappingURL=filter-stack.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvZ29vZ2xlLWdheC9ub2RlX21vZHVsZXMvQGdycGMvZ3JwYy1qcy9idWlsZC9zcmMvZmlsdGVyLXN0YWNrLmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSw4Q0FBNkMsRUFBRSxhQUFhLEVBQUM7QUFDN0QsMEJBQTBCLEdBQUcsbUJBQW1CO0FBQ2hEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHdCQUF3Qix5QkFBeUI7QUFDakQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsOENBQThDLFFBQVE7QUFDdEQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esd0JBQXdCLHlCQUF5QjtBQUNqRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSw4Q0FBOEMsUUFBUTtBQUN0RDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSw4Q0FBOEMsUUFBUTtBQUN0RDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsbUJBQW1CO0FBQ25CO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSwwQkFBMEI7QUFDMUIiLCJzb3VyY2VzIjpbIi9Vc2Vycy9iYWcteW9zZWIvRGVza3RvcC/hhJHhhanhhIfhhbXhhIvhhaEvaGFja2F0aG9uX3RlYW0vbXktYXBwL25vZGVfbW9kdWxlcy9nb29nbGUtZ2F4L25vZGVfbW9kdWxlcy9AZ3JwYy9ncnBjLWpzL2J1aWxkL3NyYy9maWx0ZXItc3RhY2suanMiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG4vKlxuICogQ29weXJpZ2h0IDIwMTkgZ1JQQyBhdXRob3JzLlxuICpcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbiAqXG4gKiAgICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4gKlxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbiAqXG4gKi9cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuRmlsdGVyU3RhY2tGYWN0b3J5ID0gZXhwb3J0cy5GaWx0ZXJTdGFjayA9IHZvaWQgMDtcbmNsYXNzIEZpbHRlclN0YWNrIHtcbiAgICBjb25zdHJ1Y3RvcihmaWx0ZXJzKSB7XG4gICAgICAgIHRoaXMuZmlsdGVycyA9IGZpbHRlcnM7XG4gICAgfVxuICAgIHNlbmRNZXRhZGF0YShtZXRhZGF0YSkge1xuICAgICAgICBsZXQgcmVzdWx0ID0gbWV0YWRhdGE7XG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgdGhpcy5maWx0ZXJzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICByZXN1bHQgPSB0aGlzLmZpbHRlcnNbaV0uc2VuZE1ldGFkYXRhKHJlc3VsdCk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9XG4gICAgcmVjZWl2ZU1ldGFkYXRhKG1ldGFkYXRhKSB7XG4gICAgICAgIGxldCByZXN1bHQgPSBtZXRhZGF0YTtcbiAgICAgICAgZm9yIChsZXQgaSA9IHRoaXMuZmlsdGVycy5sZW5ndGggLSAxOyBpID49IDA7IGktLSkge1xuICAgICAgICAgICAgcmVzdWx0ID0gdGhpcy5maWx0ZXJzW2ldLnJlY2VpdmVNZXRhZGF0YShyZXN1bHQpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxuICAgIHNlbmRNZXNzYWdlKG1lc3NhZ2UpIHtcbiAgICAgICAgbGV0IHJlc3VsdCA9IG1lc3NhZ2U7XG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgdGhpcy5maWx0ZXJzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICByZXN1bHQgPSB0aGlzLmZpbHRlcnNbaV0uc2VuZE1lc3NhZ2UocmVzdWx0KTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH1cbiAgICByZWNlaXZlTWVzc2FnZShtZXNzYWdlKSB7XG4gICAgICAgIGxldCByZXN1bHQgPSBtZXNzYWdlO1xuICAgICAgICBmb3IgKGxldCBpID0gdGhpcy5maWx0ZXJzLmxlbmd0aCAtIDE7IGkgPj0gMDsgaS0tKSB7XG4gICAgICAgICAgICByZXN1bHQgPSB0aGlzLmZpbHRlcnNbaV0ucmVjZWl2ZU1lc3NhZ2UocmVzdWx0KTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH1cbiAgICByZWNlaXZlVHJhaWxlcnMoc3RhdHVzKSB7XG4gICAgICAgIGxldCByZXN1bHQgPSBzdGF0dXM7XG4gICAgICAgIGZvciAobGV0IGkgPSB0aGlzLmZpbHRlcnMubGVuZ3RoIC0gMTsgaSA+PSAwOyBpLS0pIHtcbiAgICAgICAgICAgIHJlc3VsdCA9IHRoaXMuZmlsdGVyc1tpXS5yZWNlaXZlVHJhaWxlcnMocmVzdWx0KTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH1cbiAgICBwdXNoKGZpbHRlcnMpIHtcbiAgICAgICAgdGhpcy5maWx0ZXJzLnVuc2hpZnQoLi4uZmlsdGVycyk7XG4gICAgfVxuICAgIGdldEZpbHRlcnMoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmZpbHRlcnM7XG4gICAgfVxufVxuZXhwb3J0cy5GaWx0ZXJTdGFjayA9IEZpbHRlclN0YWNrO1xuY2xhc3MgRmlsdGVyU3RhY2tGYWN0b3J5IHtcbiAgICBjb25zdHJ1Y3RvcihmYWN0b3JpZXMpIHtcbiAgICAgICAgdGhpcy5mYWN0b3JpZXMgPSBmYWN0b3JpZXM7XG4gICAgfVxuICAgIHB1c2goZmlsdGVyRmFjdG9yaWVzKSB7XG4gICAgICAgIHRoaXMuZmFjdG9yaWVzLnVuc2hpZnQoLi4uZmlsdGVyRmFjdG9yaWVzKTtcbiAgICB9XG4gICAgY2xvbmUoKSB7XG4gICAgICAgIHJldHVybiBuZXcgRmlsdGVyU3RhY2tGYWN0b3J5KFsuLi50aGlzLmZhY3Rvcmllc10pO1xuICAgIH1cbiAgICBjcmVhdGVGaWx0ZXIoKSB7XG4gICAgICAgIHJldHVybiBuZXcgRmlsdGVyU3RhY2sodGhpcy5mYWN0b3JpZXMubWFwKGZhY3RvcnkgPT4gZmFjdG9yeS5jcmVhdGVGaWx0ZXIoKSkpO1xuICAgIH1cbn1cbmV4cG9ydHMuRmlsdGVyU3RhY2tGYWN0b3J5ID0gRmlsdGVyU3RhY2tGYWN0b3J5O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZmlsdGVyLXN0YWNrLmpzLm1hcCJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/google-gax/node_modules/@grpc/grpc-js/build/src/filter-stack.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/google-gax/node_modules/@grpc/grpc-js/build/src/filter.js":
/*!********************************************************************************!*\
  !*** ./node_modules/google-gax/node_modules/@grpc/grpc-js/build/src/filter.js ***!
  \********************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";
eval("\n/*\n * Copyright 2019 gRPC authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n */\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.BaseFilter = void 0;\nclass BaseFilter {\n    async sendMetadata(metadata) {\n        return metadata;\n    }\n    receiveMetadata(metadata) {\n        return metadata;\n    }\n    async sendMessage(message) {\n        return message;\n    }\n    async receiveMessage(message) {\n        return message;\n    }\n    receiveTrailers(status) {\n        return status;\n    }\n}\nexports.BaseFilter = BaseFilter;\n//# sourceMappingURL=filter.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvZ29vZ2xlLWdheC9ub2RlX21vZHVsZXMvQGdycGMvZ3JwYy1qcy9idWlsZC9zcmMvZmlsdGVyLmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSw4Q0FBNkMsRUFBRSxhQUFhLEVBQUM7QUFDN0Qsa0JBQWtCO0FBQ2xCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxrQkFBa0I7QUFDbEIiLCJzb3VyY2VzIjpbIi9Vc2Vycy9iYWcteW9zZWIvRGVza3RvcC/hhJHhhanhhIfhhbXhhIvhhaEvaGFja2F0aG9uX3RlYW0vbXktYXBwL25vZGVfbW9kdWxlcy9nb29nbGUtZ2F4L25vZGVfbW9kdWxlcy9AZ3JwYy9ncnBjLWpzL2J1aWxkL3NyYy9maWx0ZXIuanMiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG4vKlxuICogQ29weXJpZ2h0IDIwMTkgZ1JQQyBhdXRob3JzLlxuICpcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbiAqXG4gKiAgICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4gKlxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbiAqXG4gKi9cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuQmFzZUZpbHRlciA9IHZvaWQgMDtcbmNsYXNzIEJhc2VGaWx0ZXIge1xuICAgIGFzeW5jIHNlbmRNZXRhZGF0YShtZXRhZGF0YSkge1xuICAgICAgICByZXR1cm4gbWV0YWRhdGE7XG4gICAgfVxuICAgIHJlY2VpdmVNZXRhZGF0YShtZXRhZGF0YSkge1xuICAgICAgICByZXR1cm4gbWV0YWRhdGE7XG4gICAgfVxuICAgIGFzeW5jIHNlbmRNZXNzYWdlKG1lc3NhZ2UpIHtcbiAgICAgICAgcmV0dXJuIG1lc3NhZ2U7XG4gICAgfVxuICAgIGFzeW5jIHJlY2VpdmVNZXNzYWdlKG1lc3NhZ2UpIHtcbiAgICAgICAgcmV0dXJuIG1lc3NhZ2U7XG4gICAgfVxuICAgIHJlY2VpdmVUcmFpbGVycyhzdGF0dXMpIHtcbiAgICAgICAgcmV0dXJuIHN0YXR1cztcbiAgICB9XG59XG5leHBvcnRzLkJhc2VGaWx0ZXIgPSBCYXNlRmlsdGVyO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZmlsdGVyLmpzLm1hcCJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/google-gax/node_modules/@grpc/grpc-js/build/src/filter.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/google-gax/node_modules/@grpc/grpc-js/build/src/http_proxy.js":
/*!************************************************************************************!*\
  !*** ./node_modules/google-gax/node_modules/@grpc/grpc-js/build/src/http_proxy.js ***!
  \************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\n/*\n * Copyright 2019 gRPC authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n */\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.parseCIDR = parseCIDR;\nexports.mapProxyName = mapProxyName;\nexports.getProxiedConnection = getProxiedConnection;\nconst logging_1 = __webpack_require__(/*! ./logging */ \"(rsc)/./node_modules/google-gax/node_modules/@grpc/grpc-js/build/src/logging.js\");\nconst constants_1 = __webpack_require__(/*! ./constants */ \"(rsc)/./node_modules/google-gax/node_modules/@grpc/grpc-js/build/src/constants.js\");\nconst net_1 = __webpack_require__(/*! net */ \"net\");\nconst http = __webpack_require__(/*! http */ \"http\");\nconst logging = __webpack_require__(/*! ./logging */ \"(rsc)/./node_modules/google-gax/node_modules/@grpc/grpc-js/build/src/logging.js\");\nconst subchannel_address_1 = __webpack_require__(/*! ./subchannel-address */ \"(rsc)/./node_modules/google-gax/node_modules/@grpc/grpc-js/build/src/subchannel-address.js\");\nconst uri_parser_1 = __webpack_require__(/*! ./uri-parser */ \"(rsc)/./node_modules/google-gax/node_modules/@grpc/grpc-js/build/src/uri-parser.js\");\nconst url_1 = __webpack_require__(/*! url */ \"url\");\nconst resolver_dns_1 = __webpack_require__(/*! ./resolver-dns */ \"(rsc)/./node_modules/google-gax/node_modules/@grpc/grpc-js/build/src/resolver-dns.js\");\nconst TRACER_NAME = 'proxy';\nfunction trace(text) {\n    logging.trace(constants_1.LogVerbosity.DEBUG, TRACER_NAME, text);\n}\nfunction getProxyInfo() {\n    let proxyEnv = '';\n    let envVar = '';\n    /* Prefer using 'grpc_proxy'. Fallback on 'http_proxy' if it is not set.\n     * Also prefer using 'https_proxy' with fallback on 'http_proxy'. The\n     * fallback behavior can be removed if there's a demand for it.\n     */\n    if (process.env.grpc_proxy) {\n        envVar = 'grpc_proxy';\n        proxyEnv = process.env.grpc_proxy;\n    }\n    else if (process.env.https_proxy) {\n        envVar = 'https_proxy';\n        proxyEnv = process.env.https_proxy;\n    }\n    else if (process.env.http_proxy) {\n        envVar = 'http_proxy';\n        proxyEnv = process.env.http_proxy;\n    }\n    else {\n        return {};\n    }\n    let proxyUrl;\n    try {\n        proxyUrl = new url_1.URL(proxyEnv);\n    }\n    catch (e) {\n        (0, logging_1.log)(constants_1.LogVerbosity.ERROR, `cannot parse value of \"${envVar}\" env var`);\n        return {};\n    }\n    if (proxyUrl.protocol !== 'http:') {\n        (0, logging_1.log)(constants_1.LogVerbosity.ERROR, `\"${proxyUrl.protocol}\" scheme not supported in proxy URI`);\n        return {};\n    }\n    let userCred = null;\n    if (proxyUrl.username) {\n        if (proxyUrl.password) {\n            (0, logging_1.log)(constants_1.LogVerbosity.INFO, 'userinfo found in proxy URI');\n            userCred = decodeURIComponent(`${proxyUrl.username}:${proxyUrl.password}`);\n        }\n        else {\n            userCred = proxyUrl.username;\n        }\n    }\n    const hostname = proxyUrl.hostname;\n    let port = proxyUrl.port;\n    /* The proxy URL uses the scheme \"http:\", which has a default port number of\n     * 80. We need to set that explicitly here if it is omitted because otherwise\n     * it will use gRPC's default port 443. */\n    if (port === '') {\n        port = '80';\n    }\n    const result = {\n        address: `${hostname}:${port}`,\n    };\n    if (userCred) {\n        result.creds = userCred;\n    }\n    trace('Proxy server ' + result.address + ' set by environment variable ' + envVar);\n    return result;\n}\nfunction getNoProxyHostList() {\n    /* Prefer using 'no_grpc_proxy'. Fallback on 'no_proxy' if it is not set. */\n    let noProxyStr = process.env.no_grpc_proxy;\n    let envVar = 'no_grpc_proxy';\n    if (!noProxyStr) {\n        noProxyStr = process.env.no_proxy;\n        envVar = 'no_proxy';\n    }\n    if (noProxyStr) {\n        trace('No proxy server list set by environment variable ' + envVar);\n        return noProxyStr.split(',');\n    }\n    else {\n        return [];\n    }\n}\n/*\n * The groups correspond to CIDR parts as follows:\n * 1. ip\n * 2. prefixLength\n */\nfunction parseCIDR(cidrString) {\n    const splitRange = cidrString.split('/');\n    if (splitRange.length !== 2) {\n        return null;\n    }\n    const prefixLength = parseInt(splitRange[1], 10);\n    if (!(0, net_1.isIPv4)(splitRange[0]) || Number.isNaN(prefixLength) || prefixLength < 0 || prefixLength > 32) {\n        return null;\n    }\n    return {\n        ip: ipToInt(splitRange[0]),\n        prefixLength: prefixLength\n    };\n}\nfunction ipToInt(ip) {\n    return ip.split(\".\").reduce((acc, octet) => (acc << 8) + parseInt(octet, 10), 0);\n}\nfunction isIpInCIDR(cidr, serverHost) {\n    const ip = cidr.ip;\n    const mask = -1 << (32 - cidr.prefixLength);\n    const hostIP = ipToInt(serverHost);\n    return (hostIP & mask) === (ip & mask);\n}\nfunction hostMatchesNoProxyList(serverHost) {\n    for (const host of getNoProxyHostList()) {\n        const parsedCIDR = parseCIDR(host);\n        // host is a CIDR and serverHost is an IP address\n        if ((0, net_1.isIPv4)(serverHost) && parsedCIDR && isIpInCIDR(parsedCIDR, serverHost)) {\n            return true;\n        }\n        else if (serverHost.endsWith(host)) {\n            // host is a single IP or a domain name suffix\n            return true;\n        }\n    }\n    return false;\n}\nfunction mapProxyName(target, options) {\n    var _a;\n    const noProxyResult = {\n        target: target,\n        extraOptions: {},\n    };\n    if (((_a = options['grpc.enable_http_proxy']) !== null && _a !== void 0 ? _a : 1) === 0) {\n        return noProxyResult;\n    }\n    if (target.scheme === 'unix') {\n        return noProxyResult;\n    }\n    const proxyInfo = getProxyInfo();\n    if (!proxyInfo.address) {\n        return noProxyResult;\n    }\n    const hostPort = (0, uri_parser_1.splitHostPort)(target.path);\n    if (!hostPort) {\n        return noProxyResult;\n    }\n    const serverHost = hostPort.host;\n    if (hostMatchesNoProxyList(serverHost)) {\n        trace('Not using proxy for target in no_proxy list: ' + (0, uri_parser_1.uriToString)(target));\n        return noProxyResult;\n    }\n    const extraOptions = {\n        'grpc.http_connect_target': (0, uri_parser_1.uriToString)(target),\n    };\n    if (proxyInfo.creds) {\n        extraOptions['grpc.http_connect_creds'] = proxyInfo.creds;\n    }\n    return {\n        target: {\n            scheme: 'dns',\n            path: proxyInfo.address,\n        },\n        extraOptions: extraOptions,\n    };\n}\nfunction getProxiedConnection(address, channelOptions) {\n    var _a;\n    if (!('grpc.http_connect_target' in channelOptions)) {\n        return Promise.resolve(null);\n    }\n    const realTarget = channelOptions['grpc.http_connect_target'];\n    const parsedTarget = (0, uri_parser_1.parseUri)(realTarget);\n    if (parsedTarget === null) {\n        return Promise.resolve(null);\n    }\n    const splitHostPost = (0, uri_parser_1.splitHostPort)(parsedTarget.path);\n    if (splitHostPost === null) {\n        return Promise.resolve(null);\n    }\n    const hostPort = `${splitHostPost.host}:${(_a = splitHostPost.port) !== null && _a !== void 0 ? _a : resolver_dns_1.DEFAULT_PORT}`;\n    const options = {\n        method: 'CONNECT',\n        path: hostPort,\n    };\n    const headers = {\n        Host: hostPort,\n    };\n    // Connect to the subchannel address as a proxy\n    if ((0, subchannel_address_1.isTcpSubchannelAddress)(address)) {\n        options.host = address.host;\n        options.port = address.port;\n    }\n    else {\n        options.socketPath = address.path;\n    }\n    if ('grpc.http_connect_creds' in channelOptions) {\n        headers['Proxy-Authorization'] =\n            'Basic ' +\n                Buffer.from(channelOptions['grpc.http_connect_creds']).toString('base64');\n    }\n    options.headers = headers;\n    const proxyAddressString = (0, subchannel_address_1.subchannelAddressToString)(address);\n    trace('Using proxy ' + proxyAddressString + ' to connect to ' + options.path);\n    return new Promise((resolve, reject) => {\n        const request = http.request(options);\n        request.once('connect', (res, socket, head) => {\n            request.removeAllListeners();\n            socket.removeAllListeners();\n            if (res.statusCode === 200) {\n                trace('Successfully connected to ' +\n                    options.path +\n                    ' through proxy ' +\n                    proxyAddressString);\n                // The HTTP client may have already read a few bytes of the proxied\n                // connection. If that's the case, put them back into the socket.\n                // See https://github.com/grpc/grpc-node/issues/2744.\n                if (head.length > 0) {\n                    socket.unshift(head);\n                }\n                trace('Successfully established a plaintext connection to ' +\n                    options.path +\n                    ' through proxy ' +\n                    proxyAddressString);\n                resolve(socket);\n            }\n            else {\n                (0, logging_1.log)(constants_1.LogVerbosity.ERROR, 'Failed to connect to ' +\n                    options.path +\n                    ' through proxy ' +\n                    proxyAddressString +\n                    ' with status ' +\n                    res.statusCode);\n                reject();\n            }\n        });\n        request.once('error', err => {\n            request.removeAllListeners();\n            (0, logging_1.log)(constants_1.LogVerbosity.ERROR, 'Failed to connect to proxy ' +\n                proxyAddressString +\n                ' with error ' +\n                err.message);\n            reject();\n        });\n        request.end();\n    });\n}\n//# sourceMappingURL=http_proxy.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvZ29vZ2xlLWdheC9ub2RlX21vZHVsZXMvQGdycGMvZ3JwYy1qcy9idWlsZC9zcmMvaHR0cF9wcm94eS5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsOENBQTZDLEVBQUUsYUFBYSxFQUFDO0FBQzdELGlCQUFpQjtBQUNqQixvQkFBb0I7QUFDcEIsNEJBQTRCO0FBQzVCLGtCQUFrQixtQkFBTyxDQUFDLGtHQUFXO0FBQ3JDLG9CQUFvQixtQkFBTyxDQUFDLHNHQUFhO0FBQ3pDLGNBQWMsbUJBQU8sQ0FBQyxnQkFBSztBQUMzQixhQUFhLG1CQUFPLENBQUMsa0JBQU07QUFDM0IsZ0JBQWdCLG1CQUFPLENBQUMsa0dBQVc7QUFDbkMsNkJBQTZCLG1CQUFPLENBQUMsd0hBQXNCO0FBQzNELHFCQUFxQixtQkFBTyxDQUFDLHdHQUFjO0FBQzNDLGNBQWMsbUJBQU8sQ0FBQyxnQkFBSztBQUMzQix1QkFBdUIsbUJBQU8sQ0FBQyw0R0FBZ0I7QUFDL0M7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxxRkFBcUYsT0FBTztBQUM1RjtBQUNBO0FBQ0E7QUFDQSwrREFBK0Qsa0JBQWtCO0FBQ2pGO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDZDQUE2QyxrQkFBa0IsR0FBRyxrQkFBa0I7QUFDcEY7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLG9CQUFvQixTQUFTLEdBQUcsS0FBSztBQUNyQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSx3QkFBd0I7QUFDeEI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSx3QkFBd0IsbUJBQW1CLEdBQUcsdUZBQXVGO0FBQ3JJO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBLEtBQUs7QUFDTDtBQUNBIiwic291cmNlcyI6WyIvVXNlcnMvYmFnLXlvc2ViL0Rlc2t0b3Av4YSR4YWp4YSH4YW14YSL4YWhL2hhY2thdGhvbl90ZWFtL215LWFwcC9ub2RlX21vZHVsZXMvZ29vZ2xlLWdheC9ub2RlX21vZHVsZXMvQGdycGMvZ3JwYy1qcy9idWlsZC9zcmMvaHR0cF9wcm94eS5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbi8qXG4gKiBDb3B5cmlnaHQgMjAxOSBnUlBDIGF1dGhvcnMuXG4gKlxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuICpcbiAqICAgICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbiAqXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuICpcbiAqL1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5wYXJzZUNJRFIgPSBwYXJzZUNJRFI7XG5leHBvcnRzLm1hcFByb3h5TmFtZSA9IG1hcFByb3h5TmFtZTtcbmV4cG9ydHMuZ2V0UHJveGllZENvbm5lY3Rpb24gPSBnZXRQcm94aWVkQ29ubmVjdGlvbjtcbmNvbnN0IGxvZ2dpbmdfMSA9IHJlcXVpcmUoXCIuL2xvZ2dpbmdcIik7XG5jb25zdCBjb25zdGFudHNfMSA9IHJlcXVpcmUoXCIuL2NvbnN0YW50c1wiKTtcbmNvbnN0IG5ldF8xID0gcmVxdWlyZShcIm5ldFwiKTtcbmNvbnN0IGh0dHAgPSByZXF1aXJlKFwiaHR0cFwiKTtcbmNvbnN0IGxvZ2dpbmcgPSByZXF1aXJlKFwiLi9sb2dnaW5nXCIpO1xuY29uc3Qgc3ViY2hhbm5lbF9hZGRyZXNzXzEgPSByZXF1aXJlKFwiLi9zdWJjaGFubmVsLWFkZHJlc3NcIik7XG5jb25zdCB1cmlfcGFyc2VyXzEgPSByZXF1aXJlKFwiLi91cmktcGFyc2VyXCIpO1xuY29uc3QgdXJsXzEgPSByZXF1aXJlKFwidXJsXCIpO1xuY29uc3QgcmVzb2x2ZXJfZG5zXzEgPSByZXF1aXJlKFwiLi9yZXNvbHZlci1kbnNcIik7XG5jb25zdCBUUkFDRVJfTkFNRSA9ICdwcm94eSc7XG5mdW5jdGlvbiB0cmFjZSh0ZXh0KSB7XG4gICAgbG9nZ2luZy50cmFjZShjb25zdGFudHNfMS5Mb2dWZXJib3NpdHkuREVCVUcsIFRSQUNFUl9OQU1FLCB0ZXh0KTtcbn1cbmZ1bmN0aW9uIGdldFByb3h5SW5mbygpIHtcbiAgICBsZXQgcHJveHlFbnYgPSAnJztcbiAgICBsZXQgZW52VmFyID0gJyc7XG4gICAgLyogUHJlZmVyIHVzaW5nICdncnBjX3Byb3h5Jy4gRmFsbGJhY2sgb24gJ2h0dHBfcHJveHknIGlmIGl0IGlzIG5vdCBzZXQuXG4gICAgICogQWxzbyBwcmVmZXIgdXNpbmcgJ2h0dHBzX3Byb3h5JyB3aXRoIGZhbGxiYWNrIG9uICdodHRwX3Byb3h5Jy4gVGhlXG4gICAgICogZmFsbGJhY2sgYmVoYXZpb3IgY2FuIGJlIHJlbW92ZWQgaWYgdGhlcmUncyBhIGRlbWFuZCBmb3IgaXQuXG4gICAgICovXG4gICAgaWYgKHByb2Nlc3MuZW52LmdycGNfcHJveHkpIHtcbiAgICAgICAgZW52VmFyID0gJ2dycGNfcHJveHknO1xuICAgICAgICBwcm94eUVudiA9IHByb2Nlc3MuZW52LmdycGNfcHJveHk7XG4gICAgfVxuICAgIGVsc2UgaWYgKHByb2Nlc3MuZW52Lmh0dHBzX3Byb3h5KSB7XG4gICAgICAgIGVudlZhciA9ICdodHRwc19wcm94eSc7XG4gICAgICAgIHByb3h5RW52ID0gcHJvY2Vzcy5lbnYuaHR0cHNfcHJveHk7XG4gICAgfVxuICAgIGVsc2UgaWYgKHByb2Nlc3MuZW52Lmh0dHBfcHJveHkpIHtcbiAgICAgICAgZW52VmFyID0gJ2h0dHBfcHJveHknO1xuICAgICAgICBwcm94eUVudiA9IHByb2Nlc3MuZW52Lmh0dHBfcHJveHk7XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgICByZXR1cm4ge307XG4gICAgfVxuICAgIGxldCBwcm94eVVybDtcbiAgICB0cnkge1xuICAgICAgICBwcm94eVVybCA9IG5ldyB1cmxfMS5VUkwocHJveHlFbnYpO1xuICAgIH1cbiAgICBjYXRjaCAoZSkge1xuICAgICAgICAoMCwgbG9nZ2luZ18xLmxvZykoY29uc3RhbnRzXzEuTG9nVmVyYm9zaXR5LkVSUk9SLCBgY2Fubm90IHBhcnNlIHZhbHVlIG9mIFwiJHtlbnZWYXJ9XCIgZW52IHZhcmApO1xuICAgICAgICByZXR1cm4ge307XG4gICAgfVxuICAgIGlmIChwcm94eVVybC5wcm90b2NvbCAhPT0gJ2h0dHA6Jykge1xuICAgICAgICAoMCwgbG9nZ2luZ18xLmxvZykoY29uc3RhbnRzXzEuTG9nVmVyYm9zaXR5LkVSUk9SLCBgXCIke3Byb3h5VXJsLnByb3RvY29sfVwiIHNjaGVtZSBub3Qgc3VwcG9ydGVkIGluIHByb3h5IFVSSWApO1xuICAgICAgICByZXR1cm4ge307XG4gICAgfVxuICAgIGxldCB1c2VyQ3JlZCA9IG51bGw7XG4gICAgaWYgKHByb3h5VXJsLnVzZXJuYW1lKSB7XG4gICAgICAgIGlmIChwcm94eVVybC5wYXNzd29yZCkge1xuICAgICAgICAgICAgKDAsIGxvZ2dpbmdfMS5sb2cpKGNvbnN0YW50c18xLkxvZ1ZlcmJvc2l0eS5JTkZPLCAndXNlcmluZm8gZm91bmQgaW4gcHJveHkgVVJJJyk7XG4gICAgICAgICAgICB1c2VyQ3JlZCA9IGRlY29kZVVSSUNvbXBvbmVudChgJHtwcm94eVVybC51c2VybmFtZX06JHtwcm94eVVybC5wYXNzd29yZH1gKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHVzZXJDcmVkID0gcHJveHlVcmwudXNlcm5hbWU7XG4gICAgICAgIH1cbiAgICB9XG4gICAgY29uc3QgaG9zdG5hbWUgPSBwcm94eVVybC5ob3N0bmFtZTtcbiAgICBsZXQgcG9ydCA9IHByb3h5VXJsLnBvcnQ7XG4gICAgLyogVGhlIHByb3h5IFVSTCB1c2VzIHRoZSBzY2hlbWUgXCJodHRwOlwiLCB3aGljaCBoYXMgYSBkZWZhdWx0IHBvcnQgbnVtYmVyIG9mXG4gICAgICogODAuIFdlIG5lZWQgdG8gc2V0IHRoYXQgZXhwbGljaXRseSBoZXJlIGlmIGl0IGlzIG9taXR0ZWQgYmVjYXVzZSBvdGhlcndpc2VcbiAgICAgKiBpdCB3aWxsIHVzZSBnUlBDJ3MgZGVmYXVsdCBwb3J0IDQ0My4gKi9cbiAgICBpZiAocG9ydCA9PT0gJycpIHtcbiAgICAgICAgcG9ydCA9ICc4MCc7XG4gICAgfVxuICAgIGNvbnN0IHJlc3VsdCA9IHtcbiAgICAgICAgYWRkcmVzczogYCR7aG9zdG5hbWV9OiR7cG9ydH1gLFxuICAgIH07XG4gICAgaWYgKHVzZXJDcmVkKSB7XG4gICAgICAgIHJlc3VsdC5jcmVkcyA9IHVzZXJDcmVkO1xuICAgIH1cbiAgICB0cmFjZSgnUHJveHkgc2VydmVyICcgKyByZXN1bHQuYWRkcmVzcyArICcgc2V0IGJ5IGVudmlyb25tZW50IHZhcmlhYmxlICcgKyBlbnZWYXIpO1xuICAgIHJldHVybiByZXN1bHQ7XG59XG5mdW5jdGlvbiBnZXROb1Byb3h5SG9zdExpc3QoKSB7XG4gICAgLyogUHJlZmVyIHVzaW5nICdub19ncnBjX3Byb3h5Jy4gRmFsbGJhY2sgb24gJ25vX3Byb3h5JyBpZiBpdCBpcyBub3Qgc2V0LiAqL1xuICAgIGxldCBub1Byb3h5U3RyID0gcHJvY2Vzcy5lbnYubm9fZ3JwY19wcm94eTtcbiAgICBsZXQgZW52VmFyID0gJ25vX2dycGNfcHJveHknO1xuICAgIGlmICghbm9Qcm94eVN0cikge1xuICAgICAgICBub1Byb3h5U3RyID0gcHJvY2Vzcy5lbnYubm9fcHJveHk7XG4gICAgICAgIGVudlZhciA9ICdub19wcm94eSc7XG4gICAgfVxuICAgIGlmIChub1Byb3h5U3RyKSB7XG4gICAgICAgIHRyYWNlKCdObyBwcm94eSBzZXJ2ZXIgbGlzdCBzZXQgYnkgZW52aXJvbm1lbnQgdmFyaWFibGUgJyArIGVudlZhcik7XG4gICAgICAgIHJldHVybiBub1Byb3h5U3RyLnNwbGl0KCcsJyk7XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgICByZXR1cm4gW107XG4gICAgfVxufVxuLypcbiAqIFRoZSBncm91cHMgY29ycmVzcG9uZCB0byBDSURSIHBhcnRzIGFzIGZvbGxvd3M6XG4gKiAxLiBpcFxuICogMi4gcHJlZml4TGVuZ3RoXG4gKi9cbmZ1bmN0aW9uIHBhcnNlQ0lEUihjaWRyU3RyaW5nKSB7XG4gICAgY29uc3Qgc3BsaXRSYW5nZSA9IGNpZHJTdHJpbmcuc3BsaXQoJy8nKTtcbiAgICBpZiAoc3BsaXRSYW5nZS5sZW5ndGggIT09IDIpIHtcbiAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuICAgIGNvbnN0IHByZWZpeExlbmd0aCA9IHBhcnNlSW50KHNwbGl0UmFuZ2VbMV0sIDEwKTtcbiAgICBpZiAoISgwLCBuZXRfMS5pc0lQdjQpKHNwbGl0UmFuZ2VbMF0pIHx8IE51bWJlci5pc05hTihwcmVmaXhMZW5ndGgpIHx8IHByZWZpeExlbmd0aCA8IDAgfHwgcHJlZml4TGVuZ3RoID4gMzIpIHtcbiAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuICAgIHJldHVybiB7XG4gICAgICAgIGlwOiBpcFRvSW50KHNwbGl0UmFuZ2VbMF0pLFxuICAgICAgICBwcmVmaXhMZW5ndGg6IHByZWZpeExlbmd0aFxuICAgIH07XG59XG5mdW5jdGlvbiBpcFRvSW50KGlwKSB7XG4gICAgcmV0dXJuIGlwLnNwbGl0KFwiLlwiKS5yZWR1Y2UoKGFjYywgb2N0ZXQpID0+IChhY2MgPDwgOCkgKyBwYXJzZUludChvY3RldCwgMTApLCAwKTtcbn1cbmZ1bmN0aW9uIGlzSXBJbkNJRFIoY2lkciwgc2VydmVySG9zdCkge1xuICAgIGNvbnN0IGlwID0gY2lkci5pcDtcbiAgICBjb25zdCBtYXNrID0gLTEgPDwgKDMyIC0gY2lkci5wcmVmaXhMZW5ndGgpO1xuICAgIGNvbnN0IGhvc3RJUCA9IGlwVG9JbnQoc2VydmVySG9zdCk7XG4gICAgcmV0dXJuIChob3N0SVAgJiBtYXNrKSA9PT0gKGlwICYgbWFzayk7XG59XG5mdW5jdGlvbiBob3N0TWF0Y2hlc05vUHJveHlMaXN0KHNlcnZlckhvc3QpIHtcbiAgICBmb3IgKGNvbnN0IGhvc3Qgb2YgZ2V0Tm9Qcm94eUhvc3RMaXN0KCkpIHtcbiAgICAgICAgY29uc3QgcGFyc2VkQ0lEUiA9IHBhcnNlQ0lEUihob3N0KTtcbiAgICAgICAgLy8gaG9zdCBpcyBhIENJRFIgYW5kIHNlcnZlckhvc3QgaXMgYW4gSVAgYWRkcmVzc1xuICAgICAgICBpZiAoKDAsIG5ldF8xLmlzSVB2NCkoc2VydmVySG9zdCkgJiYgcGFyc2VkQ0lEUiAmJiBpc0lwSW5DSURSKHBhcnNlZENJRFIsIHNlcnZlckhvc3QpKSB7XG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmIChzZXJ2ZXJIb3N0LmVuZHNXaXRoKGhvc3QpKSB7XG4gICAgICAgICAgICAvLyBob3N0IGlzIGEgc2luZ2xlIElQIG9yIGEgZG9tYWluIG5hbWUgc3VmZml4XG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gZmFsc2U7XG59XG5mdW5jdGlvbiBtYXBQcm94eU5hbWUodGFyZ2V0LCBvcHRpb25zKSB7XG4gICAgdmFyIF9hO1xuICAgIGNvbnN0IG5vUHJveHlSZXN1bHQgPSB7XG4gICAgICAgIHRhcmdldDogdGFyZ2V0LFxuICAgICAgICBleHRyYU9wdGlvbnM6IHt9LFxuICAgIH07XG4gICAgaWYgKCgoX2EgPSBvcHRpb25zWydncnBjLmVuYWJsZV9odHRwX3Byb3h5J10pICE9PSBudWxsICYmIF9hICE9PSB2b2lkIDAgPyBfYSA6IDEpID09PSAwKSB7XG4gICAgICAgIHJldHVybiBub1Byb3h5UmVzdWx0O1xuICAgIH1cbiAgICBpZiAodGFyZ2V0LnNjaGVtZSA9PT0gJ3VuaXgnKSB7XG4gICAgICAgIHJldHVybiBub1Byb3h5UmVzdWx0O1xuICAgIH1cbiAgICBjb25zdCBwcm94eUluZm8gPSBnZXRQcm94eUluZm8oKTtcbiAgICBpZiAoIXByb3h5SW5mby5hZGRyZXNzKSB7XG4gICAgICAgIHJldHVybiBub1Byb3h5UmVzdWx0O1xuICAgIH1cbiAgICBjb25zdCBob3N0UG9ydCA9ICgwLCB1cmlfcGFyc2VyXzEuc3BsaXRIb3N0UG9ydCkodGFyZ2V0LnBhdGgpO1xuICAgIGlmICghaG9zdFBvcnQpIHtcbiAgICAgICAgcmV0dXJuIG5vUHJveHlSZXN1bHQ7XG4gICAgfVxuICAgIGNvbnN0IHNlcnZlckhvc3QgPSBob3N0UG9ydC5ob3N0O1xuICAgIGlmIChob3N0TWF0Y2hlc05vUHJveHlMaXN0KHNlcnZlckhvc3QpKSB7XG4gICAgICAgIHRyYWNlKCdOb3QgdXNpbmcgcHJveHkgZm9yIHRhcmdldCBpbiBub19wcm94eSBsaXN0OiAnICsgKDAsIHVyaV9wYXJzZXJfMS51cmlUb1N0cmluZykodGFyZ2V0KSk7XG4gICAgICAgIHJldHVybiBub1Byb3h5UmVzdWx0O1xuICAgIH1cbiAgICBjb25zdCBleHRyYU9wdGlvbnMgPSB7XG4gICAgICAgICdncnBjLmh0dHBfY29ubmVjdF90YXJnZXQnOiAoMCwgdXJpX3BhcnNlcl8xLnVyaVRvU3RyaW5nKSh0YXJnZXQpLFxuICAgIH07XG4gICAgaWYgKHByb3h5SW5mby5jcmVkcykge1xuICAgICAgICBleHRyYU9wdGlvbnNbJ2dycGMuaHR0cF9jb25uZWN0X2NyZWRzJ10gPSBwcm94eUluZm8uY3JlZHM7XG4gICAgfVxuICAgIHJldHVybiB7XG4gICAgICAgIHRhcmdldDoge1xuICAgICAgICAgICAgc2NoZW1lOiAnZG5zJyxcbiAgICAgICAgICAgIHBhdGg6IHByb3h5SW5mby5hZGRyZXNzLFxuICAgICAgICB9LFxuICAgICAgICBleHRyYU9wdGlvbnM6IGV4dHJhT3B0aW9ucyxcbiAgICB9O1xufVxuZnVuY3Rpb24gZ2V0UHJveGllZENvbm5lY3Rpb24oYWRkcmVzcywgY2hhbm5lbE9wdGlvbnMpIHtcbiAgICB2YXIgX2E7XG4gICAgaWYgKCEoJ2dycGMuaHR0cF9jb25uZWN0X3RhcmdldCcgaW4gY2hhbm5lbE9wdGlvbnMpKSB7XG4gICAgICAgIHJldHVybiBQcm9taXNlLnJlc29sdmUobnVsbCk7XG4gICAgfVxuICAgIGNvbnN0IHJlYWxUYXJnZXQgPSBjaGFubmVsT3B0aW9uc1snZ3JwYy5odHRwX2Nvbm5lY3RfdGFyZ2V0J107XG4gICAgY29uc3QgcGFyc2VkVGFyZ2V0ID0gKDAsIHVyaV9wYXJzZXJfMS5wYXJzZVVyaSkocmVhbFRhcmdldCk7XG4gICAgaWYgKHBhcnNlZFRhcmdldCA9PT0gbnVsbCkge1xuICAgICAgICByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKG51bGwpO1xuICAgIH1cbiAgICBjb25zdCBzcGxpdEhvc3RQb3N0ID0gKDAsIHVyaV9wYXJzZXJfMS5zcGxpdEhvc3RQb3J0KShwYXJzZWRUYXJnZXQucGF0aCk7XG4gICAgaWYgKHNwbGl0SG9zdFBvc3QgPT09IG51bGwpIHtcbiAgICAgICAgcmV0dXJuIFByb21pc2UucmVzb2x2ZShudWxsKTtcbiAgICB9XG4gICAgY29uc3QgaG9zdFBvcnQgPSBgJHtzcGxpdEhvc3RQb3N0Lmhvc3R9OiR7KF9hID0gc3BsaXRIb3N0UG9zdC5wb3J0KSAhPT0gbnVsbCAmJiBfYSAhPT0gdm9pZCAwID8gX2EgOiByZXNvbHZlcl9kbnNfMS5ERUZBVUxUX1BPUlR9YDtcbiAgICBjb25zdCBvcHRpb25zID0ge1xuICAgICAgICBtZXRob2Q6ICdDT05ORUNUJyxcbiAgICAgICAgcGF0aDogaG9zdFBvcnQsXG4gICAgfTtcbiAgICBjb25zdCBoZWFkZXJzID0ge1xuICAgICAgICBIb3N0OiBob3N0UG9ydCxcbiAgICB9O1xuICAgIC8vIENvbm5lY3QgdG8gdGhlIHN1YmNoYW5uZWwgYWRkcmVzcyBhcyBhIHByb3h5XG4gICAgaWYgKCgwLCBzdWJjaGFubmVsX2FkZHJlc3NfMS5pc1RjcFN1YmNoYW5uZWxBZGRyZXNzKShhZGRyZXNzKSkge1xuICAgICAgICBvcHRpb25zLmhvc3QgPSBhZGRyZXNzLmhvc3Q7XG4gICAgICAgIG9wdGlvbnMucG9ydCA9IGFkZHJlc3MucG9ydDtcbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICAgIG9wdGlvbnMuc29ja2V0UGF0aCA9IGFkZHJlc3MucGF0aDtcbiAgICB9XG4gICAgaWYgKCdncnBjLmh0dHBfY29ubmVjdF9jcmVkcycgaW4gY2hhbm5lbE9wdGlvbnMpIHtcbiAgICAgICAgaGVhZGVyc1snUHJveHktQXV0aG9yaXphdGlvbiddID1cbiAgICAgICAgICAgICdCYXNpYyAnICtcbiAgICAgICAgICAgICAgICBCdWZmZXIuZnJvbShjaGFubmVsT3B0aW9uc1snZ3JwYy5odHRwX2Nvbm5lY3RfY3JlZHMnXSkudG9TdHJpbmcoJ2Jhc2U2NCcpO1xuICAgIH1cbiAgICBvcHRpb25zLmhlYWRlcnMgPSBoZWFkZXJzO1xuICAgIGNvbnN0IHByb3h5QWRkcmVzc1N0cmluZyA9ICgwLCBzdWJjaGFubmVsX2FkZHJlc3NfMS5zdWJjaGFubmVsQWRkcmVzc1RvU3RyaW5nKShhZGRyZXNzKTtcbiAgICB0cmFjZSgnVXNpbmcgcHJveHkgJyArIHByb3h5QWRkcmVzc1N0cmluZyArICcgdG8gY29ubmVjdCB0byAnICsgb3B0aW9ucy5wYXRoKTtcbiAgICByZXR1cm4gbmV3IFByb21pc2UoKHJlc29sdmUsIHJlamVjdCkgPT4ge1xuICAgICAgICBjb25zdCByZXF1ZXN0ID0gaHR0cC5yZXF1ZXN0KG9wdGlvbnMpO1xuICAgICAgICByZXF1ZXN0Lm9uY2UoJ2Nvbm5lY3QnLCAocmVzLCBzb2NrZXQsIGhlYWQpID0+IHtcbiAgICAgICAgICAgIHJlcXVlc3QucmVtb3ZlQWxsTGlzdGVuZXJzKCk7XG4gICAgICAgICAgICBzb2NrZXQucmVtb3ZlQWxsTGlzdGVuZXJzKCk7XG4gICAgICAgICAgICBpZiAocmVzLnN0YXR1c0NvZGUgPT09IDIwMCkge1xuICAgICAgICAgICAgICAgIHRyYWNlKCdTdWNjZXNzZnVsbHkgY29ubmVjdGVkIHRvICcgK1xuICAgICAgICAgICAgICAgICAgICBvcHRpb25zLnBhdGggK1xuICAgICAgICAgICAgICAgICAgICAnIHRocm91Z2ggcHJveHkgJyArXG4gICAgICAgICAgICAgICAgICAgIHByb3h5QWRkcmVzc1N0cmluZyk7XG4gICAgICAgICAgICAgICAgLy8gVGhlIEhUVFAgY2xpZW50IG1heSBoYXZlIGFscmVhZHkgcmVhZCBhIGZldyBieXRlcyBvZiB0aGUgcHJveGllZFxuICAgICAgICAgICAgICAgIC8vIGNvbm5lY3Rpb24uIElmIHRoYXQncyB0aGUgY2FzZSwgcHV0IHRoZW0gYmFjayBpbnRvIHRoZSBzb2NrZXQuXG4gICAgICAgICAgICAgICAgLy8gU2VlIGh0dHBzOi8vZ2l0aHViLmNvbS9ncnBjL2dycGMtbm9kZS9pc3N1ZXMvMjc0NC5cbiAgICAgICAgICAgICAgICBpZiAoaGVhZC5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgICAgICAgICAgIHNvY2tldC51bnNoaWZ0KGhlYWQpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB0cmFjZSgnU3VjY2Vzc2Z1bGx5IGVzdGFibGlzaGVkIGEgcGxhaW50ZXh0IGNvbm5lY3Rpb24gdG8gJyArXG4gICAgICAgICAgICAgICAgICAgIG9wdGlvbnMucGF0aCArXG4gICAgICAgICAgICAgICAgICAgICcgdGhyb3VnaCBwcm94eSAnICtcbiAgICAgICAgICAgICAgICAgICAgcHJveHlBZGRyZXNzU3RyaW5nKTtcbiAgICAgICAgICAgICAgICByZXNvbHZlKHNvY2tldCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAoMCwgbG9nZ2luZ18xLmxvZykoY29uc3RhbnRzXzEuTG9nVmVyYm9zaXR5LkVSUk9SLCAnRmFpbGVkIHRvIGNvbm5lY3QgdG8gJyArXG4gICAgICAgICAgICAgICAgICAgIG9wdGlvbnMucGF0aCArXG4gICAgICAgICAgICAgICAgICAgICcgdGhyb3VnaCBwcm94eSAnICtcbiAgICAgICAgICAgICAgICAgICAgcHJveHlBZGRyZXNzU3RyaW5nICtcbiAgICAgICAgICAgICAgICAgICAgJyB3aXRoIHN0YXR1cyAnICtcbiAgICAgICAgICAgICAgICAgICAgcmVzLnN0YXR1c0NvZGUpO1xuICAgICAgICAgICAgICAgIHJlamVjdCgpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICAgICAgcmVxdWVzdC5vbmNlKCdlcnJvcicsIGVyciA9PiB7XG4gICAgICAgICAgICByZXF1ZXN0LnJlbW92ZUFsbExpc3RlbmVycygpO1xuICAgICAgICAgICAgKDAsIGxvZ2dpbmdfMS5sb2cpKGNvbnN0YW50c18xLkxvZ1ZlcmJvc2l0eS5FUlJPUiwgJ0ZhaWxlZCB0byBjb25uZWN0IHRvIHByb3h5ICcgK1xuICAgICAgICAgICAgICAgIHByb3h5QWRkcmVzc1N0cmluZyArXG4gICAgICAgICAgICAgICAgJyB3aXRoIGVycm9yICcgK1xuICAgICAgICAgICAgICAgIGVyci5tZXNzYWdlKTtcbiAgICAgICAgICAgIHJlamVjdCgpO1xuICAgICAgICB9KTtcbiAgICAgICAgcmVxdWVzdC5lbmQoKTtcbiAgICB9KTtcbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWh0dHBfcHJveHkuanMubWFwIl0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/google-gax/node_modules/@grpc/grpc-js/build/src/http_proxy.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/google-gax/node_modules/@grpc/grpc-js/build/src/index.js":
/*!*******************************************************************************!*\
  !*** ./node_modules/google-gax/node_modules/@grpc/grpc-js/build/src/index.js ***!
  \*******************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\n/*\n * Copyright 2019 gRPC authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n */\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.experimental = exports.ServerInterceptingCall = exports.ResponderBuilder = exports.ServerListenerBuilder = exports.addAdminServicesToServer = exports.getChannelzHandlers = exports.getChannelzServiceDefinition = exports.InterceptorConfigurationError = exports.InterceptingCall = exports.RequesterBuilder = exports.ListenerBuilder = exports.StatusBuilder = exports.getClientChannel = exports.ServerCredentials = exports.Server = exports.setLogVerbosity = exports.setLogger = exports.load = exports.loadObject = exports.CallCredentials = exports.ChannelCredentials = exports.waitForClientReady = exports.closeClient = exports.Channel = exports.makeGenericClientConstructor = exports.makeClientConstructor = exports.loadPackageDefinition = exports.Client = exports.compressionAlgorithms = exports.propagate = exports.connectivityState = exports.status = exports.logVerbosity = exports.Metadata = exports.credentials = void 0;\nconst call_credentials_1 = __webpack_require__(/*! ./call-credentials */ \"(rsc)/./node_modules/google-gax/node_modules/@grpc/grpc-js/build/src/call-credentials.js\");\nObject.defineProperty(exports, \"CallCredentials\", ({ enumerable: true, get: function () { return call_credentials_1.CallCredentials; } }));\nconst channel_1 = __webpack_require__(/*! ./channel */ \"(rsc)/./node_modules/google-gax/node_modules/@grpc/grpc-js/build/src/channel.js\");\nObject.defineProperty(exports, \"Channel\", ({ enumerable: true, get: function () { return channel_1.ChannelImplementation; } }));\nconst compression_algorithms_1 = __webpack_require__(/*! ./compression-algorithms */ \"(rsc)/./node_modules/google-gax/node_modules/@grpc/grpc-js/build/src/compression-algorithms.js\");\nObject.defineProperty(exports, \"compressionAlgorithms\", ({ enumerable: true, get: function () { return compression_algorithms_1.CompressionAlgorithms; } }));\nconst connectivity_state_1 = __webpack_require__(/*! ./connectivity-state */ \"(rsc)/./node_modules/google-gax/node_modules/@grpc/grpc-js/build/src/connectivity-state.js\");\nObject.defineProperty(exports, \"connectivityState\", ({ enumerable: true, get: function () { return connectivity_state_1.ConnectivityState; } }));\nconst channel_credentials_1 = __webpack_require__(/*! ./channel-credentials */ \"(rsc)/./node_modules/google-gax/node_modules/@grpc/grpc-js/build/src/channel-credentials.js\");\nObject.defineProperty(exports, \"ChannelCredentials\", ({ enumerable: true, get: function () { return channel_credentials_1.ChannelCredentials; } }));\nconst client_1 = __webpack_require__(/*! ./client */ \"(rsc)/./node_modules/google-gax/node_modules/@grpc/grpc-js/build/src/client.js\");\nObject.defineProperty(exports, \"Client\", ({ enumerable: true, get: function () { return client_1.Client; } }));\nconst constants_1 = __webpack_require__(/*! ./constants */ \"(rsc)/./node_modules/google-gax/node_modules/@grpc/grpc-js/build/src/constants.js\");\nObject.defineProperty(exports, \"logVerbosity\", ({ enumerable: true, get: function () { return constants_1.LogVerbosity; } }));\nObject.defineProperty(exports, \"status\", ({ enumerable: true, get: function () { return constants_1.Status; } }));\nObject.defineProperty(exports, \"propagate\", ({ enumerable: true, get: function () { return constants_1.Propagate; } }));\nconst logging = __webpack_require__(/*! ./logging */ \"(rsc)/./node_modules/google-gax/node_modules/@grpc/grpc-js/build/src/logging.js\");\nconst make_client_1 = __webpack_require__(/*! ./make-client */ \"(rsc)/./node_modules/google-gax/node_modules/@grpc/grpc-js/build/src/make-client.js\");\nObject.defineProperty(exports, \"loadPackageDefinition\", ({ enumerable: true, get: function () { return make_client_1.loadPackageDefinition; } }));\nObject.defineProperty(exports, \"makeClientConstructor\", ({ enumerable: true, get: function () { return make_client_1.makeClientConstructor; } }));\nObject.defineProperty(exports, \"makeGenericClientConstructor\", ({ enumerable: true, get: function () { return make_client_1.makeClientConstructor; } }));\nconst metadata_1 = __webpack_require__(/*! ./metadata */ \"(rsc)/./node_modules/google-gax/node_modules/@grpc/grpc-js/build/src/metadata.js\");\nObject.defineProperty(exports, \"Metadata\", ({ enumerable: true, get: function () { return metadata_1.Metadata; } }));\nconst server_1 = __webpack_require__(/*! ./server */ \"(rsc)/./node_modules/google-gax/node_modules/@grpc/grpc-js/build/src/server.js\");\nObject.defineProperty(exports, \"Server\", ({ enumerable: true, get: function () { return server_1.Server; } }));\nconst server_credentials_1 = __webpack_require__(/*! ./server-credentials */ \"(rsc)/./node_modules/google-gax/node_modules/@grpc/grpc-js/build/src/server-credentials.js\");\nObject.defineProperty(exports, \"ServerCredentials\", ({ enumerable: true, get: function () { return server_credentials_1.ServerCredentials; } }));\nconst status_builder_1 = __webpack_require__(/*! ./status-builder */ \"(rsc)/./node_modules/google-gax/node_modules/@grpc/grpc-js/build/src/status-builder.js\");\nObject.defineProperty(exports, \"StatusBuilder\", ({ enumerable: true, get: function () { return status_builder_1.StatusBuilder; } }));\n/**** Client Credentials ****/\n// Using assign only copies enumerable properties, which is what we want\nexports.credentials = {\n    /**\n     * Combine a ChannelCredentials with any number of CallCredentials into a\n     * single ChannelCredentials object.\n     * @param channelCredentials The ChannelCredentials object.\n     * @param callCredentials Any number of CallCredentials objects.\n     * @return The resulting ChannelCredentials object.\n     */\n    combineChannelCredentials: (channelCredentials, ...callCredentials) => {\n        return callCredentials.reduce((acc, other) => acc.compose(other), channelCredentials);\n    },\n    /**\n     * Combine any number of CallCredentials into a single CallCredentials\n     * object.\n     * @param first The first CallCredentials object.\n     * @param additional Any number of additional CallCredentials objects.\n     * @return The resulting CallCredentials object.\n     */\n    combineCallCredentials: (first, ...additional) => {\n        return additional.reduce((acc, other) => acc.compose(other), first);\n    },\n    // from channel-credentials.ts\n    createInsecure: channel_credentials_1.ChannelCredentials.createInsecure,\n    createSsl: channel_credentials_1.ChannelCredentials.createSsl,\n    createFromSecureContext: channel_credentials_1.ChannelCredentials.createFromSecureContext,\n    // from call-credentials.ts\n    createFromMetadataGenerator: call_credentials_1.CallCredentials.createFromMetadataGenerator,\n    createFromGoogleCredential: call_credentials_1.CallCredentials.createFromGoogleCredential,\n    createEmpty: call_credentials_1.CallCredentials.createEmpty,\n};\n/**\n * Close a Client object.\n * @param client The client to close.\n */\nconst closeClient = (client) => client.close();\nexports.closeClient = closeClient;\nconst waitForClientReady = (client, deadline, callback) => client.waitForReady(deadline, callback);\nexports.waitForClientReady = waitForClientReady;\n/* eslint-enable @typescript-eslint/no-explicit-any */\n/**** Unimplemented function stubs ****/\n/* eslint-disable @typescript-eslint/no-explicit-any */\nconst loadObject = (value, options) => {\n    throw new Error('Not available in this library. Use @grpc/proto-loader and loadPackageDefinition instead');\n};\nexports.loadObject = loadObject;\nconst load = (filename, format, options) => {\n    throw new Error('Not available in this library. Use @grpc/proto-loader and loadPackageDefinition instead');\n};\nexports.load = load;\nconst setLogger = (logger) => {\n    logging.setLogger(logger);\n};\nexports.setLogger = setLogger;\nconst setLogVerbosity = (verbosity) => {\n    logging.setLoggerVerbosity(verbosity);\n};\nexports.setLogVerbosity = setLogVerbosity;\nconst getClientChannel = (client) => {\n    return client_1.Client.prototype.getChannel.call(client);\n};\nexports.getClientChannel = getClientChannel;\nvar client_interceptors_1 = __webpack_require__(/*! ./client-interceptors */ \"(rsc)/./node_modules/google-gax/node_modules/@grpc/grpc-js/build/src/client-interceptors.js\");\nObject.defineProperty(exports, \"ListenerBuilder\", ({ enumerable: true, get: function () { return client_interceptors_1.ListenerBuilder; } }));\nObject.defineProperty(exports, \"RequesterBuilder\", ({ enumerable: true, get: function () { return client_interceptors_1.RequesterBuilder; } }));\nObject.defineProperty(exports, \"InterceptingCall\", ({ enumerable: true, get: function () { return client_interceptors_1.InterceptingCall; } }));\nObject.defineProperty(exports, \"InterceptorConfigurationError\", ({ enumerable: true, get: function () { return client_interceptors_1.InterceptorConfigurationError; } }));\nvar channelz_1 = __webpack_require__(/*! ./channelz */ \"(rsc)/./node_modules/google-gax/node_modules/@grpc/grpc-js/build/src/channelz.js\");\nObject.defineProperty(exports, \"getChannelzServiceDefinition\", ({ enumerable: true, get: function () { return channelz_1.getChannelzServiceDefinition; } }));\nObject.defineProperty(exports, \"getChannelzHandlers\", ({ enumerable: true, get: function () { return channelz_1.getChannelzHandlers; } }));\nvar admin_1 = __webpack_require__(/*! ./admin */ \"(rsc)/./node_modules/google-gax/node_modules/@grpc/grpc-js/build/src/admin.js\");\nObject.defineProperty(exports, \"addAdminServicesToServer\", ({ enumerable: true, get: function () { return admin_1.addAdminServicesToServer; } }));\nvar server_interceptors_1 = __webpack_require__(/*! ./server-interceptors */ \"(rsc)/./node_modules/google-gax/node_modules/@grpc/grpc-js/build/src/server-interceptors.js\");\nObject.defineProperty(exports, \"ServerListenerBuilder\", ({ enumerable: true, get: function () { return server_interceptors_1.ServerListenerBuilder; } }));\nObject.defineProperty(exports, \"ResponderBuilder\", ({ enumerable: true, get: function () { return server_interceptors_1.ResponderBuilder; } }));\nObject.defineProperty(exports, \"ServerInterceptingCall\", ({ enumerable: true, get: function () { return server_interceptors_1.ServerInterceptingCall; } }));\nconst experimental = __webpack_require__(/*! ./experimental */ \"(rsc)/./node_modules/google-gax/node_modules/@grpc/grpc-js/build/src/experimental.js\");\nexports.experimental = experimental;\nconst resolver_dns = __webpack_require__(/*! ./resolver-dns */ \"(rsc)/./node_modules/google-gax/node_modules/@grpc/grpc-js/build/src/resolver-dns.js\");\nconst resolver_uds = __webpack_require__(/*! ./resolver-uds */ \"(rsc)/./node_modules/google-gax/node_modules/@grpc/grpc-js/build/src/resolver-uds.js\");\nconst resolver_ip = __webpack_require__(/*! ./resolver-ip */ \"(rsc)/./node_modules/google-gax/node_modules/@grpc/grpc-js/build/src/resolver-ip.js\");\nconst load_balancer_pick_first = __webpack_require__(/*! ./load-balancer-pick-first */ \"(rsc)/./node_modules/google-gax/node_modules/@grpc/grpc-js/build/src/load-balancer-pick-first.js\");\nconst load_balancer_round_robin = __webpack_require__(/*! ./load-balancer-round-robin */ \"(rsc)/./node_modules/google-gax/node_modules/@grpc/grpc-js/build/src/load-balancer-round-robin.js\");\nconst load_balancer_outlier_detection = __webpack_require__(/*! ./load-balancer-outlier-detection */ \"(rsc)/./node_modules/google-gax/node_modules/@grpc/grpc-js/build/src/load-balancer-outlier-detection.js\");\nconst channelz = __webpack_require__(/*! ./channelz */ \"(rsc)/./node_modules/google-gax/node_modules/@grpc/grpc-js/build/src/channelz.js\");\n(() => {\n    resolver_dns.setup();\n    resolver_uds.setup();\n    resolver_ip.setup();\n    load_balancer_pick_first.setup();\n    load_balancer_round_robin.setup();\n    load_balancer_outlier_detection.setup();\n    channelz.setup();\n})();\n//# sourceMappingURL=index.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/google-gax/node_modules/@grpc/grpc-js/build/src/index.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/google-gax/node_modules/@grpc/grpc-js/build/src/internal-channel.js":
/*!******************************************************************************************!*\
  !*** ./node_modules/google-gax/node_modules/@grpc/grpc-js/build/src/internal-channel.js ***!
  \******************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\n/*\n * Copyright 2019 gRPC authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n */\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.InternalChannel = exports.SUBCHANNEL_ARGS_EXCLUDE_KEY_PREFIX = void 0;\nconst channel_credentials_1 = __webpack_require__(/*! ./channel-credentials */ \"(rsc)/./node_modules/google-gax/node_modules/@grpc/grpc-js/build/src/channel-credentials.js\");\nconst resolving_load_balancer_1 = __webpack_require__(/*! ./resolving-load-balancer */ \"(rsc)/./node_modules/google-gax/node_modules/@grpc/grpc-js/build/src/resolving-load-balancer.js\");\nconst subchannel_pool_1 = __webpack_require__(/*! ./subchannel-pool */ \"(rsc)/./node_modules/google-gax/node_modules/@grpc/grpc-js/build/src/subchannel-pool.js\");\nconst picker_1 = __webpack_require__(/*! ./picker */ \"(rsc)/./node_modules/google-gax/node_modules/@grpc/grpc-js/build/src/picker.js\");\nconst metadata_1 = __webpack_require__(/*! ./metadata */ \"(rsc)/./node_modules/google-gax/node_modules/@grpc/grpc-js/build/src/metadata.js\");\nconst constants_1 = __webpack_require__(/*! ./constants */ \"(rsc)/./node_modules/google-gax/node_modules/@grpc/grpc-js/build/src/constants.js\");\nconst filter_stack_1 = __webpack_require__(/*! ./filter-stack */ \"(rsc)/./node_modules/google-gax/node_modules/@grpc/grpc-js/build/src/filter-stack.js\");\nconst compression_filter_1 = __webpack_require__(/*! ./compression-filter */ \"(rsc)/./node_modules/google-gax/node_modules/@grpc/grpc-js/build/src/compression-filter.js\");\nconst resolver_1 = __webpack_require__(/*! ./resolver */ \"(rsc)/./node_modules/google-gax/node_modules/@grpc/grpc-js/build/src/resolver.js\");\nconst logging_1 = __webpack_require__(/*! ./logging */ \"(rsc)/./node_modules/google-gax/node_modules/@grpc/grpc-js/build/src/logging.js\");\nconst http_proxy_1 = __webpack_require__(/*! ./http_proxy */ \"(rsc)/./node_modules/google-gax/node_modules/@grpc/grpc-js/build/src/http_proxy.js\");\nconst uri_parser_1 = __webpack_require__(/*! ./uri-parser */ \"(rsc)/./node_modules/google-gax/node_modules/@grpc/grpc-js/build/src/uri-parser.js\");\nconst connectivity_state_1 = __webpack_require__(/*! ./connectivity-state */ \"(rsc)/./node_modules/google-gax/node_modules/@grpc/grpc-js/build/src/connectivity-state.js\");\nconst channelz_1 = __webpack_require__(/*! ./channelz */ \"(rsc)/./node_modules/google-gax/node_modules/@grpc/grpc-js/build/src/channelz.js\");\nconst load_balancing_call_1 = __webpack_require__(/*! ./load-balancing-call */ \"(rsc)/./node_modules/google-gax/node_modules/@grpc/grpc-js/build/src/load-balancing-call.js\");\nconst deadline_1 = __webpack_require__(/*! ./deadline */ \"(rsc)/./node_modules/google-gax/node_modules/@grpc/grpc-js/build/src/deadline.js\");\nconst resolving_call_1 = __webpack_require__(/*! ./resolving-call */ \"(rsc)/./node_modules/google-gax/node_modules/@grpc/grpc-js/build/src/resolving-call.js\");\nconst call_number_1 = __webpack_require__(/*! ./call-number */ \"(rsc)/./node_modules/google-gax/node_modules/@grpc/grpc-js/build/src/call-number.js\");\nconst control_plane_status_1 = __webpack_require__(/*! ./control-plane-status */ \"(rsc)/./node_modules/google-gax/node_modules/@grpc/grpc-js/build/src/control-plane-status.js\");\nconst retrying_call_1 = __webpack_require__(/*! ./retrying-call */ \"(rsc)/./node_modules/google-gax/node_modules/@grpc/grpc-js/build/src/retrying-call.js\");\nconst subchannel_interface_1 = __webpack_require__(/*! ./subchannel-interface */ \"(rsc)/./node_modules/google-gax/node_modules/@grpc/grpc-js/build/src/subchannel-interface.js\");\n/**\n * See https://nodejs.org/api/timers.html#timers_setinterval_callback_delay_args\n */\nconst MAX_TIMEOUT_TIME = 2147483647;\nconst MIN_IDLE_TIMEOUT_MS = 1000;\n// 30 minutes\nconst DEFAULT_IDLE_TIMEOUT_MS = 30 * 60 * 1000;\nconst RETRY_THROTTLER_MAP = new Map();\nconst DEFAULT_RETRY_BUFFER_SIZE_BYTES = 1 << 24; // 16 MB\nconst DEFAULT_PER_RPC_RETRY_BUFFER_SIZE_BYTES = 1 << 20; // 1 MB\nclass ChannelSubchannelWrapper extends subchannel_interface_1.BaseSubchannelWrapper {\n    constructor(childSubchannel, channel) {\n        super(childSubchannel);\n        this.channel = channel;\n        this.refCount = 0;\n        this.subchannelStateListener = (subchannel, previousState, newState, keepaliveTime) => {\n            channel.throttleKeepalive(keepaliveTime);\n        };\n    }\n    ref() {\n        if (this.refCount === 0) {\n            this.child.addConnectivityStateListener(this.subchannelStateListener);\n            this.channel.addWrappedSubchannel(this);\n        }\n        this.child.ref();\n        this.refCount += 1;\n    }\n    unref() {\n        this.child.unref();\n        this.refCount -= 1;\n        if (this.refCount <= 0) {\n            this.child.removeConnectivityStateListener(this.subchannelStateListener);\n            this.channel.removeWrappedSubchannel(this);\n        }\n    }\n}\nclass ShutdownPicker {\n    pick(pickArgs) {\n        return {\n            pickResultType: picker_1.PickResultType.DROP,\n            status: {\n                code: constants_1.Status.UNAVAILABLE,\n                details: 'Channel closed before call started',\n                metadata: new metadata_1.Metadata()\n            },\n            subchannel: null,\n            onCallStarted: null,\n            onCallEnded: null\n        };\n    }\n}\nexports.SUBCHANNEL_ARGS_EXCLUDE_KEY_PREFIX = 'grpc.internal.no_subchannel';\nclass ChannelzInfoTracker {\n    constructor(target) {\n        this.target = target;\n        this.trace = new channelz_1.ChannelzTrace();\n        this.callTracker = new channelz_1.ChannelzCallTracker();\n        this.childrenTracker = new channelz_1.ChannelzChildrenTracker();\n        this.state = connectivity_state_1.ConnectivityState.IDLE;\n    }\n    getChannelzInfoCallback() {\n        return () => {\n            return {\n                target: this.target,\n                state: this.state,\n                trace: this.trace,\n                callTracker: this.callTracker,\n                children: this.childrenTracker.getChildLists()\n            };\n        };\n    }\n}\nclass InternalChannel {\n    constructor(target, credentials, options) {\n        var _a, _b, _c, _d, _e, _f;\n        this.credentials = credentials;\n        this.options = options;\n        this.connectivityState = connectivity_state_1.ConnectivityState.IDLE;\n        this.currentPicker = new picker_1.UnavailablePicker();\n        /**\n         * Calls queued up to get a call config. Should only be populated before the\n         * first time the resolver returns a result, which includes the ConfigSelector.\n         */\n        this.configSelectionQueue = [];\n        this.pickQueue = [];\n        this.connectivityStateWatchers = [];\n        /**\n         * This timer does not do anything on its own. Its purpose is to hold the\n         * event loop open while there are any pending calls for the channel that\n         * have not yet been assigned to specific subchannels. In other words,\n         * the invariant is that callRefTimer is reffed if and only if pickQueue\n         * is non-empty. In addition, the timer is null while the state is IDLE or\n         * SHUTDOWN and there are no pending calls.\n         */\n        this.callRefTimer = null;\n        this.configSelector = null;\n        /**\n         * This is the error from the name resolver if it failed most recently. It\n         * is only used to end calls that start while there is no config selector\n         * and the name resolver is in backoff, so it should be nulled if\n         * configSelector becomes set or the channel state becomes anything other\n         * than TRANSIENT_FAILURE.\n         */\n        this.currentResolutionError = null;\n        this.wrappedSubchannels = new Set();\n        this.callCount = 0;\n        this.idleTimer = null;\n        // Channelz info\n        this.channelzEnabled = true;\n        /**\n         * Randomly generated ID to be passed to the config selector, for use by\n         * ring_hash in xDS. An integer distributed approximately uniformly between\n         * 0 and MAX_SAFE_INTEGER.\n         */\n        this.randomChannelId = Math.floor(Math.random() * Number.MAX_SAFE_INTEGER);\n        if (typeof target !== 'string') {\n            throw new TypeError('Channel target must be a string');\n        }\n        if (!(credentials instanceof channel_credentials_1.ChannelCredentials)) {\n            throw new TypeError('Channel credentials must be a ChannelCredentials object');\n        }\n        if (options) {\n            if (typeof options !== 'object') {\n                throw new TypeError('Channel options must be an object');\n            }\n        }\n        this.channelzInfoTracker = new ChannelzInfoTracker(target);\n        const originalTargetUri = (0, uri_parser_1.parseUri)(target);\n        if (originalTargetUri === null) {\n            throw new Error(`Could not parse target name \"${target}\"`);\n        }\n        /* This ensures that the target has a scheme that is registered with the\n         * resolver */\n        const defaultSchemeMapResult = (0, resolver_1.mapUriDefaultScheme)(originalTargetUri);\n        if (defaultSchemeMapResult === null) {\n            throw new Error(`Could not find a default scheme for target name \"${target}\"`);\n        }\n        if (this.options['grpc.enable_channelz'] === 0) {\n            this.channelzEnabled = false;\n        }\n        this.channelzRef = (0, channelz_1.registerChannelzChannel)(target, this.channelzInfoTracker.getChannelzInfoCallback(), this.channelzEnabled);\n        if (this.channelzEnabled) {\n            this.channelzInfoTracker.trace.addTrace('CT_INFO', 'Channel created');\n        }\n        if (this.options['grpc.default_authority']) {\n            this.defaultAuthority = this.options['grpc.default_authority'];\n        }\n        else {\n            this.defaultAuthority = (0, resolver_1.getDefaultAuthority)(defaultSchemeMapResult);\n        }\n        const proxyMapResult = (0, http_proxy_1.mapProxyName)(defaultSchemeMapResult, options);\n        this.target = proxyMapResult.target;\n        this.options = Object.assign({}, this.options, proxyMapResult.extraOptions);\n        /* The global boolean parameter to getSubchannelPool has the inverse meaning to what\n         * the grpc.use_local_subchannel_pool channel option means. */\n        this.subchannelPool = (0, subchannel_pool_1.getSubchannelPool)(((_a = this.options['grpc.use_local_subchannel_pool']) !== null && _a !== void 0 ? _a : 0) === 0);\n        this.retryBufferTracker = new retrying_call_1.MessageBufferTracker((_b = this.options['grpc.retry_buffer_size']) !== null && _b !== void 0 ? _b : DEFAULT_RETRY_BUFFER_SIZE_BYTES, (_c = this.options['grpc.per_rpc_retry_buffer_size']) !== null && _c !== void 0 ? _c : DEFAULT_PER_RPC_RETRY_BUFFER_SIZE_BYTES);\n        this.keepaliveTime = (_d = this.options['grpc.keepalive_time_ms']) !== null && _d !== void 0 ? _d : -1;\n        this.idleTimeoutMs = Math.max((_e = this.options['grpc.client_idle_timeout_ms']) !== null && _e !== void 0 ? _e : DEFAULT_IDLE_TIMEOUT_MS, MIN_IDLE_TIMEOUT_MS);\n        const channelControlHelper = {\n            createSubchannel: (subchannelAddress, subchannelArgs) => {\n                const finalSubchannelArgs = {};\n                for (const [key, value] of Object.entries(subchannelArgs)) {\n                    if (!key.startsWith(exports.SUBCHANNEL_ARGS_EXCLUDE_KEY_PREFIX)) {\n                        finalSubchannelArgs[key] = value;\n                    }\n                }\n                const subchannel = this.subchannelPool.getOrCreateSubchannel(this.target, subchannelAddress, finalSubchannelArgs, this.credentials);\n                subchannel.throttleKeepalive(this.keepaliveTime);\n                if (this.channelzEnabled) {\n                    this.channelzInfoTracker.trace.addTrace('CT_INFO', 'Created subchannel or used existing subchannel', subchannel.getChannelzRef());\n                }\n                const wrappedSubchannel = new ChannelSubchannelWrapper(subchannel, this);\n                return wrappedSubchannel;\n            },\n            updateState: (connectivityState, picker) => {\n                this.currentPicker = picker;\n                const queueCopy = this.pickQueue.slice();\n                this.pickQueue = [];\n                if (queueCopy.length > 0) {\n                    this.callRefTimerUnref();\n                }\n                for (const call of queueCopy) {\n                    call.doPick();\n                }\n                this.updateState(connectivityState);\n            },\n            requestReresolution: () => {\n                // This should never be called.\n                throw new Error('Resolving load balancer should never call requestReresolution');\n            },\n            addChannelzChild: (child) => {\n                if (this.channelzEnabled) {\n                    this.channelzInfoTracker.childrenTracker.refChild(child);\n                }\n            },\n            removeChannelzChild: (child) => {\n                if (this.channelzEnabled) {\n                    this.channelzInfoTracker.childrenTracker.unrefChild(child);\n                }\n            },\n        };\n        this.resolvingLoadBalancer = new resolving_load_balancer_1.ResolvingLoadBalancer(this.target, channelControlHelper, this.options, (serviceConfig, configSelector) => {\n            var _a;\n            if (serviceConfig.retryThrottling) {\n                RETRY_THROTTLER_MAP.set(this.getTarget(), new retrying_call_1.RetryThrottler(serviceConfig.retryThrottling.maxTokens, serviceConfig.retryThrottling.tokenRatio, RETRY_THROTTLER_MAP.get(this.getTarget())));\n            }\n            else {\n                RETRY_THROTTLER_MAP.delete(this.getTarget());\n            }\n            if (this.channelzEnabled) {\n                this.channelzInfoTracker.trace.addTrace('CT_INFO', 'Address resolution succeeded');\n            }\n            (_a = this.configSelector) === null || _a === void 0 ? void 0 : _a.unref();\n            this.configSelector = configSelector;\n            this.currentResolutionError = null;\n            /* We process the queue asynchronously to ensure that the corresponding\n             * load balancer update has completed. */\n            process.nextTick(() => {\n                const localQueue = this.configSelectionQueue;\n                this.configSelectionQueue = [];\n                if (localQueue.length > 0) {\n                    this.callRefTimerUnref();\n                }\n                for (const call of localQueue) {\n                    call.getConfig();\n                }\n            });\n        }, status => {\n            if (this.channelzEnabled) {\n                this.channelzInfoTracker.trace.addTrace('CT_WARNING', 'Address resolution failed with code ' +\n                    status.code +\n                    ' and details \"' +\n                    status.details +\n                    '\"');\n            }\n            if (this.configSelectionQueue.length > 0) {\n                this.trace('Name resolution failed with calls queued for config selection');\n            }\n            if (this.configSelector === null) {\n                this.currentResolutionError = Object.assign(Object.assign({}, (0, control_plane_status_1.restrictControlPlaneStatusCode)(status.code, status.details)), { metadata: status.metadata });\n            }\n            const localQueue = this.configSelectionQueue;\n            this.configSelectionQueue = [];\n            if (localQueue.length > 0) {\n                this.callRefTimerUnref();\n            }\n            for (const call of localQueue) {\n                call.reportResolverError(status);\n            }\n        });\n        this.filterStackFactory = new filter_stack_1.FilterStackFactory([\n            new compression_filter_1.CompressionFilterFactory(this, this.options),\n        ]);\n        this.trace('Channel constructed with options ' +\n            JSON.stringify(options, undefined, 2));\n        const error = new Error();\n        if ((0, logging_1.isTracerEnabled)('channel_stacktrace')) {\n            (0, logging_1.trace)(constants_1.LogVerbosity.DEBUG, 'channel_stacktrace', '(' +\n                this.channelzRef.id +\n                ') ' +\n                'Channel constructed \\n' +\n                ((_f = error.stack) === null || _f === void 0 ? void 0 : _f.substring(error.stack.indexOf('\\n') + 1)));\n        }\n        this.lastActivityTimestamp = new Date();\n    }\n    trace(text, verbosityOverride) {\n        (0, logging_1.trace)(verbosityOverride !== null && verbosityOverride !== void 0 ? verbosityOverride : constants_1.LogVerbosity.DEBUG, 'channel', '(' + this.channelzRef.id + ') ' + (0, uri_parser_1.uriToString)(this.target) + ' ' + text);\n    }\n    callRefTimerRef() {\n        var _a, _b, _c, _d;\n        if (!this.callRefTimer) {\n            this.callRefTimer = setInterval(() => { }, MAX_TIMEOUT_TIME);\n        }\n        // If the hasRef function does not exist, always run the code\n        if (!((_b = (_a = this.callRefTimer).hasRef) === null || _b === void 0 ? void 0 : _b.call(_a))) {\n            this.trace('callRefTimer.ref | configSelectionQueue.length=' +\n                this.configSelectionQueue.length +\n                ' pickQueue.length=' +\n                this.pickQueue.length);\n            (_d = (_c = this.callRefTimer).ref) === null || _d === void 0 ? void 0 : _d.call(_c);\n        }\n    }\n    callRefTimerUnref() {\n        var _a, _b, _c;\n        // If the timer or the hasRef function does not exist, always run the code\n        if (!((_a = this.callRefTimer) === null || _a === void 0 ? void 0 : _a.hasRef) || this.callRefTimer.hasRef()) {\n            this.trace('callRefTimer.unref | configSelectionQueue.length=' +\n                this.configSelectionQueue.length +\n                ' pickQueue.length=' +\n                this.pickQueue.length);\n            (_c = (_b = this.callRefTimer) === null || _b === void 0 ? void 0 : _b.unref) === null || _c === void 0 ? void 0 : _c.call(_b);\n        }\n    }\n    removeConnectivityStateWatcher(watcherObject) {\n        const watcherIndex = this.connectivityStateWatchers.findIndex(value => value === watcherObject);\n        if (watcherIndex >= 0) {\n            this.connectivityStateWatchers.splice(watcherIndex, 1);\n        }\n    }\n    updateState(newState) {\n        (0, logging_1.trace)(constants_1.LogVerbosity.DEBUG, 'connectivity_state', '(' +\n            this.channelzRef.id +\n            ') ' +\n            (0, uri_parser_1.uriToString)(this.target) +\n            ' ' +\n            connectivity_state_1.ConnectivityState[this.connectivityState] +\n            ' -> ' +\n            connectivity_state_1.ConnectivityState[newState]);\n        if (this.channelzEnabled) {\n            this.channelzInfoTracker.trace.addTrace('CT_INFO', 'Connectivity state change to ' + connectivity_state_1.ConnectivityState[newState]);\n        }\n        this.connectivityState = newState;\n        this.channelzInfoTracker.state = newState;\n        const watchersCopy = this.connectivityStateWatchers.slice();\n        for (const watcherObject of watchersCopy) {\n            if (newState !== watcherObject.currentState) {\n                if (watcherObject.timer) {\n                    clearTimeout(watcherObject.timer);\n                }\n                this.removeConnectivityStateWatcher(watcherObject);\n                watcherObject.callback();\n            }\n        }\n        if (newState !== connectivity_state_1.ConnectivityState.TRANSIENT_FAILURE) {\n            this.currentResolutionError = null;\n        }\n    }\n    throttleKeepalive(newKeepaliveTime) {\n        if (newKeepaliveTime > this.keepaliveTime) {\n            this.keepaliveTime = newKeepaliveTime;\n            for (const wrappedSubchannel of this.wrappedSubchannels) {\n                wrappedSubchannel.throttleKeepalive(newKeepaliveTime);\n            }\n        }\n    }\n    addWrappedSubchannel(wrappedSubchannel) {\n        this.wrappedSubchannels.add(wrappedSubchannel);\n    }\n    removeWrappedSubchannel(wrappedSubchannel) {\n        this.wrappedSubchannels.delete(wrappedSubchannel);\n    }\n    doPick(metadata, extraPickInfo) {\n        return this.currentPicker.pick({\n            metadata: metadata,\n            extraPickInfo: extraPickInfo,\n        });\n    }\n    queueCallForPick(call) {\n        this.pickQueue.push(call);\n        this.callRefTimerRef();\n    }\n    getConfig(method, metadata) {\n        if (this.connectivityState !== connectivity_state_1.ConnectivityState.SHUTDOWN) {\n            this.resolvingLoadBalancer.exitIdle();\n        }\n        if (this.configSelector) {\n            return {\n                type: 'SUCCESS',\n                config: this.configSelector.invoke(method, metadata, this.randomChannelId),\n            };\n        }\n        else {\n            if (this.currentResolutionError) {\n                return {\n                    type: 'ERROR',\n                    error: this.currentResolutionError,\n                };\n            }\n            else {\n                return {\n                    type: 'NONE',\n                };\n            }\n        }\n    }\n    queueCallForConfig(call) {\n        this.configSelectionQueue.push(call);\n        this.callRefTimerRef();\n    }\n    enterIdle() {\n        this.resolvingLoadBalancer.destroy();\n        this.updateState(connectivity_state_1.ConnectivityState.IDLE);\n        this.currentPicker = new picker_1.QueuePicker(this.resolvingLoadBalancer);\n        if (this.idleTimer) {\n            clearTimeout(this.idleTimer);\n            this.idleTimer = null;\n        }\n        if (this.callRefTimer) {\n            clearInterval(this.callRefTimer);\n            this.callRefTimer = null;\n        }\n    }\n    startIdleTimeout(timeoutMs) {\n        var _a, _b;\n        this.idleTimer = setTimeout(() => {\n            if (this.callCount > 0) {\n                /* If there is currently a call, the channel will not go idle for a\n                 * period of at least idleTimeoutMs, so check again after that time.\n                 */\n                this.startIdleTimeout(this.idleTimeoutMs);\n                return;\n            }\n            const now = new Date();\n            const timeSinceLastActivity = now.valueOf() - this.lastActivityTimestamp.valueOf();\n            if (timeSinceLastActivity >= this.idleTimeoutMs) {\n                this.trace('Idle timer triggered after ' +\n                    this.idleTimeoutMs +\n                    'ms of inactivity');\n                this.enterIdle();\n            }\n            else {\n                /* Whenever the timer fires with the latest activity being too recent,\n                 * set the timer again for the time when the time since the last\n                 * activity is equal to the timeout. This should result in the timer\n                 * firing no more than once every idleTimeoutMs/2 on average. */\n                this.startIdleTimeout(this.idleTimeoutMs - timeSinceLastActivity);\n            }\n        }, timeoutMs);\n        (_b = (_a = this.idleTimer).unref) === null || _b === void 0 ? void 0 : _b.call(_a);\n    }\n    maybeStartIdleTimer() {\n        if (this.connectivityState !== connectivity_state_1.ConnectivityState.SHUTDOWN &&\n            !this.idleTimer) {\n            this.startIdleTimeout(this.idleTimeoutMs);\n        }\n    }\n    onCallStart() {\n        if (this.channelzEnabled) {\n            this.channelzInfoTracker.callTracker.addCallStarted();\n        }\n        this.callCount += 1;\n    }\n    onCallEnd(status) {\n        if (this.channelzEnabled) {\n            if (status.code === constants_1.Status.OK) {\n                this.channelzInfoTracker.callTracker.addCallSucceeded();\n            }\n            else {\n                this.channelzInfoTracker.callTracker.addCallFailed();\n            }\n        }\n        this.callCount -= 1;\n        this.lastActivityTimestamp = new Date();\n        this.maybeStartIdleTimer();\n    }\n    createLoadBalancingCall(callConfig, method, host, credentials, deadline) {\n        const callNumber = (0, call_number_1.getNextCallNumber)();\n        this.trace('createLoadBalancingCall [' + callNumber + '] method=\"' + method + '\"');\n        return new load_balancing_call_1.LoadBalancingCall(this, callConfig, method, host, credentials, deadline, callNumber);\n    }\n    createRetryingCall(callConfig, method, host, credentials, deadline) {\n        const callNumber = (0, call_number_1.getNextCallNumber)();\n        this.trace('createRetryingCall [' + callNumber + '] method=\"' + method + '\"');\n        return new retrying_call_1.RetryingCall(this, callConfig, method, host, credentials, deadline, callNumber, this.retryBufferTracker, RETRY_THROTTLER_MAP.get(this.getTarget()));\n    }\n    createResolvingCall(method, deadline, host, parentCall, propagateFlags) {\n        const callNumber = (0, call_number_1.getNextCallNumber)();\n        this.trace('createResolvingCall [' +\n            callNumber +\n            '] method=\"' +\n            method +\n            '\", deadline=' +\n            (0, deadline_1.deadlineToString)(deadline));\n        const finalOptions = {\n            deadline: deadline,\n            flags: propagateFlags !== null && propagateFlags !== void 0 ? propagateFlags : constants_1.Propagate.DEFAULTS,\n            host: host !== null && host !== void 0 ? host : this.defaultAuthority,\n            parentCall: parentCall,\n        };\n        const call = new resolving_call_1.ResolvingCall(this, method, finalOptions, this.filterStackFactory.clone(), callNumber);\n        this.onCallStart();\n        call.addStatusWatcher(status => {\n            this.onCallEnd(status);\n        });\n        return call;\n    }\n    close() {\n        var _a;\n        this.resolvingLoadBalancer.destroy();\n        this.updateState(connectivity_state_1.ConnectivityState.SHUTDOWN);\n        this.currentPicker = new ShutdownPicker();\n        for (const call of this.configSelectionQueue) {\n            call.cancelWithStatus(constants_1.Status.UNAVAILABLE, 'Channel closed before call started');\n        }\n        this.configSelectionQueue = [];\n        for (const call of this.pickQueue) {\n            call.cancelWithStatus(constants_1.Status.UNAVAILABLE, 'Channel closed before call started');\n        }\n        this.pickQueue = [];\n        if (this.callRefTimer) {\n            clearInterval(this.callRefTimer);\n        }\n        if (this.idleTimer) {\n            clearTimeout(this.idleTimer);\n        }\n        if (this.channelzEnabled) {\n            (0, channelz_1.unregisterChannelzRef)(this.channelzRef);\n        }\n        this.subchannelPool.unrefUnusedSubchannels();\n        (_a = this.configSelector) === null || _a === void 0 ? void 0 : _a.unref();\n        this.configSelector = null;\n    }\n    getTarget() {\n        return (0, uri_parser_1.uriToString)(this.target);\n    }\n    getConnectivityState(tryToConnect) {\n        const connectivityState = this.connectivityState;\n        if (tryToConnect) {\n            this.resolvingLoadBalancer.exitIdle();\n            this.lastActivityTimestamp = new Date();\n            this.maybeStartIdleTimer();\n        }\n        return connectivityState;\n    }\n    watchConnectivityState(currentState, deadline, callback) {\n        if (this.connectivityState === connectivity_state_1.ConnectivityState.SHUTDOWN) {\n            throw new Error('Channel has been shut down');\n        }\n        let timer = null;\n        if (deadline !== Infinity) {\n            const deadlineDate = deadline instanceof Date ? deadline : new Date(deadline);\n            const now = new Date();\n            if (deadline === -Infinity || deadlineDate <= now) {\n                process.nextTick(callback, new Error('Deadline passed without connectivity state change'));\n                return;\n            }\n            timer = setTimeout(() => {\n                this.removeConnectivityStateWatcher(watcherObject);\n                callback(new Error('Deadline passed without connectivity state change'));\n            }, deadlineDate.getTime() - now.getTime());\n        }\n        const watcherObject = {\n            currentState,\n            callback,\n            timer,\n        };\n        this.connectivityStateWatchers.push(watcherObject);\n    }\n    /**\n     * Get the channelz reference object for this channel. The returned value is\n     * garbage if channelz is disabled for this channel.\n     * @returns\n     */\n    getChannelzRef() {\n        return this.channelzRef;\n    }\n    createCall(method, deadline, host, parentCall, propagateFlags) {\n        if (typeof method !== 'string') {\n            throw new TypeError('Channel#createCall: method must be a string');\n        }\n        if (!(typeof deadline === 'number' || deadline instanceof Date)) {\n            throw new TypeError('Channel#createCall: deadline must be a number or Date');\n        }\n        if (this.connectivityState === connectivity_state_1.ConnectivityState.SHUTDOWN) {\n            throw new Error('Channel has been shut down');\n        }\n        return this.createResolvingCall(method, deadline, host, parentCall, propagateFlags);\n    }\n    getOptions() {\n        return this.options;\n    }\n}\nexports.InternalChannel = InternalChannel;\n//# sourceMappingURL=internal-channel.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/google-gax/node_modules/@grpc/grpc-js/build/src/internal-channel.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/google-gax/node_modules/@grpc/grpc-js/build/src/load-balancer-child-handler.js":
/*!*****************************************************************************************************!*\
  !*** ./node_modules/google-gax/node_modules/@grpc/grpc-js/build/src/load-balancer-child-handler.js ***!
  \*****************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\n/*\n * Copyright 2020 gRPC authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n */\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.ChildLoadBalancerHandler = void 0;\nconst load_balancer_1 = __webpack_require__(/*! ./load-balancer */ \"(rsc)/./node_modules/google-gax/node_modules/@grpc/grpc-js/build/src/load-balancer.js\");\nconst connectivity_state_1 = __webpack_require__(/*! ./connectivity-state */ \"(rsc)/./node_modules/google-gax/node_modules/@grpc/grpc-js/build/src/connectivity-state.js\");\nconst TYPE_NAME = 'child_load_balancer_helper';\nclass ChildLoadBalancerHandler {\n    constructor(channelControlHelper) {\n        this.channelControlHelper = channelControlHelper;\n        this.currentChild = null;\n        this.pendingChild = null;\n        this.latestConfig = null;\n        this.ChildPolicyHelper = class {\n            constructor(parent) {\n                this.parent = parent;\n                this.child = null;\n            }\n            createSubchannel(subchannelAddress, subchannelArgs) {\n                return this.parent.channelControlHelper.createSubchannel(subchannelAddress, subchannelArgs);\n            }\n            updateState(connectivityState, picker, errorMessage) {\n                var _a;\n                if (this.calledByPendingChild()) {\n                    if (connectivityState === connectivity_state_1.ConnectivityState.CONNECTING) {\n                        return;\n                    }\n                    (_a = this.parent.currentChild) === null || _a === void 0 ? void 0 : _a.destroy();\n                    this.parent.currentChild = this.parent.pendingChild;\n                    this.parent.pendingChild = null;\n                }\n                else if (!this.calledByCurrentChild()) {\n                    return;\n                }\n                this.parent.channelControlHelper.updateState(connectivityState, picker, errorMessage);\n            }\n            requestReresolution() {\n                var _a;\n                const latestChild = (_a = this.parent.pendingChild) !== null && _a !== void 0 ? _a : this.parent.currentChild;\n                if (this.child === latestChild) {\n                    this.parent.channelControlHelper.requestReresolution();\n                }\n            }\n            setChild(newChild) {\n                this.child = newChild;\n            }\n            addChannelzChild(child) {\n                this.parent.channelControlHelper.addChannelzChild(child);\n            }\n            removeChannelzChild(child) {\n                this.parent.channelControlHelper.removeChannelzChild(child);\n            }\n            calledByPendingChild() {\n                return this.child === this.parent.pendingChild;\n            }\n            calledByCurrentChild() {\n                return this.child === this.parent.currentChild;\n            }\n        };\n    }\n    configUpdateRequiresNewPolicyInstance(oldConfig, newConfig) {\n        return oldConfig.getLoadBalancerName() !== newConfig.getLoadBalancerName();\n    }\n    /**\n     * Prerequisites: lbConfig !== null and lbConfig.name is registered\n     * @param endpointList\n     * @param lbConfig\n     * @param attributes\n     */\n    updateAddressList(endpointList, lbConfig, options) {\n        let childToUpdate;\n        if (this.currentChild === null ||\n            this.latestConfig === null ||\n            this.configUpdateRequiresNewPolicyInstance(this.latestConfig, lbConfig)) {\n            const newHelper = new this.ChildPolicyHelper(this);\n            const newChild = (0, load_balancer_1.createLoadBalancer)(lbConfig, newHelper);\n            newHelper.setChild(newChild);\n            if (this.currentChild === null) {\n                this.currentChild = newChild;\n                childToUpdate = this.currentChild;\n            }\n            else {\n                if (this.pendingChild) {\n                    this.pendingChild.destroy();\n                }\n                this.pendingChild = newChild;\n                childToUpdate = this.pendingChild;\n            }\n        }\n        else {\n            if (this.pendingChild === null) {\n                childToUpdate = this.currentChild;\n            }\n            else {\n                childToUpdate = this.pendingChild;\n            }\n        }\n        this.latestConfig = lbConfig;\n        childToUpdate.updateAddressList(endpointList, lbConfig, options);\n    }\n    exitIdle() {\n        if (this.currentChild) {\n            this.currentChild.exitIdle();\n            if (this.pendingChild) {\n                this.pendingChild.exitIdle();\n            }\n        }\n    }\n    resetBackoff() {\n        if (this.currentChild) {\n            this.currentChild.resetBackoff();\n            if (this.pendingChild) {\n                this.pendingChild.resetBackoff();\n            }\n        }\n    }\n    destroy() {\n        /* Note: state updates are only propagated from the child balancer if that\n         * object is equal to this.currentChild or this.pendingChild. Since this\n         * function sets both of those to null, no further state updates will\n         * occur after this function returns. */\n        if (this.currentChild) {\n            this.currentChild.destroy();\n            this.currentChild = null;\n        }\n        if (this.pendingChild) {\n            this.pendingChild.destroy();\n            this.pendingChild = null;\n        }\n    }\n    getTypeName() {\n        return TYPE_NAME;\n    }\n}\nexports.ChildLoadBalancerHandler = ChildLoadBalancerHandler;\n//# sourceMappingURL=load-balancer-child-handler.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvZ29vZ2xlLWdheC9ub2RlX21vZHVsZXMvQGdycGMvZ3JwYy1qcy9idWlsZC9zcmMvbG9hZC1iYWxhbmNlci1jaGlsZC1oYW5kbGVyLmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSw4Q0FBNkMsRUFBRSxhQUFhLEVBQUM7QUFDN0QsZ0NBQWdDO0FBQ2hDLHdCQUF3QixtQkFBTyxDQUFDLDhHQUFpQjtBQUNqRCw2QkFBNkIsbUJBQU8sQ0FBQyx3SEFBc0I7QUFDM0Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGdDQUFnQztBQUNoQyIsInNvdXJjZXMiOlsiL1VzZXJzL2JhZy15b3NlYi9EZXNrdG9wL+GEkeGFqeGEh+GFteGEi+GFoS9oYWNrYXRob25fdGVhbS9teS1hcHAvbm9kZV9tb2R1bGVzL2dvb2dsZS1nYXgvbm9kZV9tb2R1bGVzL0BncnBjL2dycGMtanMvYnVpbGQvc3JjL2xvYWQtYmFsYW5jZXItY2hpbGQtaGFuZGxlci5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbi8qXG4gKiBDb3B5cmlnaHQgMjAyMCBnUlBDIGF1dGhvcnMuXG4gKlxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuICpcbiAqICAgICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbiAqXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuICpcbiAqL1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5DaGlsZExvYWRCYWxhbmNlckhhbmRsZXIgPSB2b2lkIDA7XG5jb25zdCBsb2FkX2JhbGFuY2VyXzEgPSByZXF1aXJlKFwiLi9sb2FkLWJhbGFuY2VyXCIpO1xuY29uc3QgY29ubmVjdGl2aXR5X3N0YXRlXzEgPSByZXF1aXJlKFwiLi9jb25uZWN0aXZpdHktc3RhdGVcIik7XG5jb25zdCBUWVBFX05BTUUgPSAnY2hpbGRfbG9hZF9iYWxhbmNlcl9oZWxwZXInO1xuY2xhc3MgQ2hpbGRMb2FkQmFsYW5jZXJIYW5kbGVyIHtcbiAgICBjb25zdHJ1Y3RvcihjaGFubmVsQ29udHJvbEhlbHBlcikge1xuICAgICAgICB0aGlzLmNoYW5uZWxDb250cm9sSGVscGVyID0gY2hhbm5lbENvbnRyb2xIZWxwZXI7XG4gICAgICAgIHRoaXMuY3VycmVudENoaWxkID0gbnVsbDtcbiAgICAgICAgdGhpcy5wZW5kaW5nQ2hpbGQgPSBudWxsO1xuICAgICAgICB0aGlzLmxhdGVzdENvbmZpZyA9IG51bGw7XG4gICAgICAgIHRoaXMuQ2hpbGRQb2xpY3lIZWxwZXIgPSBjbGFzcyB7XG4gICAgICAgICAgICBjb25zdHJ1Y3RvcihwYXJlbnQpIHtcbiAgICAgICAgICAgICAgICB0aGlzLnBhcmVudCA9IHBhcmVudDtcbiAgICAgICAgICAgICAgICB0aGlzLmNoaWxkID0gbnVsbDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNyZWF0ZVN1YmNoYW5uZWwoc3ViY2hhbm5lbEFkZHJlc3MsIHN1YmNoYW5uZWxBcmdzKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMucGFyZW50LmNoYW5uZWxDb250cm9sSGVscGVyLmNyZWF0ZVN1YmNoYW5uZWwoc3ViY2hhbm5lbEFkZHJlc3MsIHN1YmNoYW5uZWxBcmdzKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHVwZGF0ZVN0YXRlKGNvbm5lY3Rpdml0eVN0YXRlLCBwaWNrZXIsIGVycm9yTWVzc2FnZSkge1xuICAgICAgICAgICAgICAgIHZhciBfYTtcbiAgICAgICAgICAgICAgICBpZiAodGhpcy5jYWxsZWRCeVBlbmRpbmdDaGlsZCgpKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmIChjb25uZWN0aXZpdHlTdGF0ZSA9PT0gY29ubmVjdGl2aXR5X3N0YXRlXzEuQ29ubmVjdGl2aXR5U3RhdGUuQ09OTkVDVElORykge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIChfYSA9IHRoaXMucGFyZW50LmN1cnJlbnRDaGlsZCkgPT09IG51bGwgfHwgX2EgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9hLmRlc3Ryb3koKTtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5wYXJlbnQuY3VycmVudENoaWxkID0gdGhpcy5wYXJlbnQucGVuZGluZ0NoaWxkO1xuICAgICAgICAgICAgICAgICAgICB0aGlzLnBhcmVudC5wZW5kaW5nQ2hpbGQgPSBudWxsO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBlbHNlIGlmICghdGhpcy5jYWxsZWRCeUN1cnJlbnRDaGlsZCgpKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgdGhpcy5wYXJlbnQuY2hhbm5lbENvbnRyb2xIZWxwZXIudXBkYXRlU3RhdGUoY29ubmVjdGl2aXR5U3RhdGUsIHBpY2tlciwgZXJyb3JNZXNzYWdlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJlcXVlc3RSZXJlc29sdXRpb24oKSB7XG4gICAgICAgICAgICAgICAgdmFyIF9hO1xuICAgICAgICAgICAgICAgIGNvbnN0IGxhdGVzdENoaWxkID0gKF9hID0gdGhpcy5wYXJlbnQucGVuZGluZ0NoaWxkKSAhPT0gbnVsbCAmJiBfYSAhPT0gdm9pZCAwID8gX2EgOiB0aGlzLnBhcmVudC5jdXJyZW50Q2hpbGQ7XG4gICAgICAgICAgICAgICAgaWYgKHRoaXMuY2hpbGQgPT09IGxhdGVzdENoaWxkKSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMucGFyZW50LmNoYW5uZWxDb250cm9sSGVscGVyLnJlcXVlc3RSZXJlc29sdXRpb24oKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBzZXRDaGlsZChuZXdDaGlsZCkge1xuICAgICAgICAgICAgICAgIHRoaXMuY2hpbGQgPSBuZXdDaGlsZDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGFkZENoYW5uZWx6Q2hpbGQoY2hpbGQpIHtcbiAgICAgICAgICAgICAgICB0aGlzLnBhcmVudC5jaGFubmVsQ29udHJvbEhlbHBlci5hZGRDaGFubmVsekNoaWxkKGNoaWxkKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJlbW92ZUNoYW5uZWx6Q2hpbGQoY2hpbGQpIHtcbiAgICAgICAgICAgICAgICB0aGlzLnBhcmVudC5jaGFubmVsQ29udHJvbEhlbHBlci5yZW1vdmVDaGFubmVsekNoaWxkKGNoaWxkKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNhbGxlZEJ5UGVuZGluZ0NoaWxkKCkge1xuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLmNoaWxkID09PSB0aGlzLnBhcmVudC5wZW5kaW5nQ2hpbGQ7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjYWxsZWRCeUN1cnJlbnRDaGlsZCgpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5jaGlsZCA9PT0gdGhpcy5wYXJlbnQuY3VycmVudENoaWxkO1xuICAgICAgICAgICAgfVxuICAgICAgICB9O1xuICAgIH1cbiAgICBjb25maWdVcGRhdGVSZXF1aXJlc05ld1BvbGljeUluc3RhbmNlKG9sZENvbmZpZywgbmV3Q29uZmlnKSB7XG4gICAgICAgIHJldHVybiBvbGRDb25maWcuZ2V0TG9hZEJhbGFuY2VyTmFtZSgpICE9PSBuZXdDb25maWcuZ2V0TG9hZEJhbGFuY2VyTmFtZSgpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBQcmVyZXF1aXNpdGVzOiBsYkNvbmZpZyAhPT0gbnVsbCBhbmQgbGJDb25maWcubmFtZSBpcyByZWdpc3RlcmVkXG4gICAgICogQHBhcmFtIGVuZHBvaW50TGlzdFxuICAgICAqIEBwYXJhbSBsYkNvbmZpZ1xuICAgICAqIEBwYXJhbSBhdHRyaWJ1dGVzXG4gICAgICovXG4gICAgdXBkYXRlQWRkcmVzc0xpc3QoZW5kcG9pbnRMaXN0LCBsYkNvbmZpZywgb3B0aW9ucykge1xuICAgICAgICBsZXQgY2hpbGRUb1VwZGF0ZTtcbiAgICAgICAgaWYgKHRoaXMuY3VycmVudENoaWxkID09PSBudWxsIHx8XG4gICAgICAgICAgICB0aGlzLmxhdGVzdENvbmZpZyA9PT0gbnVsbCB8fFxuICAgICAgICAgICAgdGhpcy5jb25maWdVcGRhdGVSZXF1aXJlc05ld1BvbGljeUluc3RhbmNlKHRoaXMubGF0ZXN0Q29uZmlnLCBsYkNvbmZpZykpIHtcbiAgICAgICAgICAgIGNvbnN0IG5ld0hlbHBlciA9IG5ldyB0aGlzLkNoaWxkUG9saWN5SGVscGVyKHRoaXMpO1xuICAgICAgICAgICAgY29uc3QgbmV3Q2hpbGQgPSAoMCwgbG9hZF9iYWxhbmNlcl8xLmNyZWF0ZUxvYWRCYWxhbmNlcikobGJDb25maWcsIG5ld0hlbHBlcik7XG4gICAgICAgICAgICBuZXdIZWxwZXIuc2V0Q2hpbGQobmV3Q2hpbGQpO1xuICAgICAgICAgICAgaWYgKHRoaXMuY3VycmVudENoaWxkID09PSBudWxsKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5jdXJyZW50Q2hpbGQgPSBuZXdDaGlsZDtcbiAgICAgICAgICAgICAgICBjaGlsZFRvVXBkYXRlID0gdGhpcy5jdXJyZW50Q2hpbGQ7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICBpZiAodGhpcy5wZW5kaW5nQ2hpbGQpIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5wZW5kaW5nQ2hpbGQuZGVzdHJveSgpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB0aGlzLnBlbmRpbmdDaGlsZCA9IG5ld0NoaWxkO1xuICAgICAgICAgICAgICAgIGNoaWxkVG9VcGRhdGUgPSB0aGlzLnBlbmRpbmdDaGlsZDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIGlmICh0aGlzLnBlbmRpbmdDaGlsZCA9PT0gbnVsbCkge1xuICAgICAgICAgICAgICAgIGNoaWxkVG9VcGRhdGUgPSB0aGlzLmN1cnJlbnRDaGlsZDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIGNoaWxkVG9VcGRhdGUgPSB0aGlzLnBlbmRpbmdDaGlsZDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICB0aGlzLmxhdGVzdENvbmZpZyA9IGxiQ29uZmlnO1xuICAgICAgICBjaGlsZFRvVXBkYXRlLnVwZGF0ZUFkZHJlc3NMaXN0KGVuZHBvaW50TGlzdCwgbGJDb25maWcsIG9wdGlvbnMpO1xuICAgIH1cbiAgICBleGl0SWRsZSgpIHtcbiAgICAgICAgaWYgKHRoaXMuY3VycmVudENoaWxkKSB7XG4gICAgICAgICAgICB0aGlzLmN1cnJlbnRDaGlsZC5leGl0SWRsZSgpO1xuICAgICAgICAgICAgaWYgKHRoaXMucGVuZGluZ0NoaWxkKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5wZW5kaW5nQ2hpbGQuZXhpdElkbGUoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cbiAgICByZXNldEJhY2tvZmYoKSB7XG4gICAgICAgIGlmICh0aGlzLmN1cnJlbnRDaGlsZCkge1xuICAgICAgICAgICAgdGhpcy5jdXJyZW50Q2hpbGQucmVzZXRCYWNrb2ZmKCk7XG4gICAgICAgICAgICBpZiAodGhpcy5wZW5kaW5nQ2hpbGQpIHtcbiAgICAgICAgICAgICAgICB0aGlzLnBlbmRpbmdDaGlsZC5yZXNldEJhY2tvZmYoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cbiAgICBkZXN0cm95KCkge1xuICAgICAgICAvKiBOb3RlOiBzdGF0ZSB1cGRhdGVzIGFyZSBvbmx5IHByb3BhZ2F0ZWQgZnJvbSB0aGUgY2hpbGQgYmFsYW5jZXIgaWYgdGhhdFxuICAgICAgICAgKiBvYmplY3QgaXMgZXF1YWwgdG8gdGhpcy5jdXJyZW50Q2hpbGQgb3IgdGhpcy5wZW5kaW5nQ2hpbGQuIFNpbmNlIHRoaXNcbiAgICAgICAgICogZnVuY3Rpb24gc2V0cyBib3RoIG9mIHRob3NlIHRvIG51bGwsIG5vIGZ1cnRoZXIgc3RhdGUgdXBkYXRlcyB3aWxsXG4gICAgICAgICAqIG9jY3VyIGFmdGVyIHRoaXMgZnVuY3Rpb24gcmV0dXJucy4gKi9cbiAgICAgICAgaWYgKHRoaXMuY3VycmVudENoaWxkKSB7XG4gICAgICAgICAgICB0aGlzLmN1cnJlbnRDaGlsZC5kZXN0cm95KCk7XG4gICAgICAgICAgICB0aGlzLmN1cnJlbnRDaGlsZCA9IG51bGw7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHRoaXMucGVuZGluZ0NoaWxkKSB7XG4gICAgICAgICAgICB0aGlzLnBlbmRpbmdDaGlsZC5kZXN0cm95KCk7XG4gICAgICAgICAgICB0aGlzLnBlbmRpbmdDaGlsZCA9IG51bGw7XG4gICAgICAgIH1cbiAgICB9XG4gICAgZ2V0VHlwZU5hbWUoKSB7XG4gICAgICAgIHJldHVybiBUWVBFX05BTUU7XG4gICAgfVxufVxuZXhwb3J0cy5DaGlsZExvYWRCYWxhbmNlckhhbmRsZXIgPSBDaGlsZExvYWRCYWxhbmNlckhhbmRsZXI7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1sb2FkLWJhbGFuY2VyLWNoaWxkLWhhbmRsZXIuanMubWFwIl0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/google-gax/node_modules/@grpc/grpc-js/build/src/load-balancer-child-handler.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/google-gax/node_modules/@grpc/grpc-js/build/src/load-balancer-outlier-detection.js":
/*!*********************************************************************************************************!*\
  !*** ./node_modules/google-gax/node_modules/@grpc/grpc-js/build/src/load-balancer-outlier-detection.js ***!
  \*********************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\n/*\n * Copyright 2022 gRPC authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n */\nvar _a;\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.OutlierDetectionLoadBalancer = exports.OutlierDetectionLoadBalancingConfig = void 0;\nexports.setup = setup;\nconst connectivity_state_1 = __webpack_require__(/*! ./connectivity-state */ \"(rsc)/./node_modules/google-gax/node_modules/@grpc/grpc-js/build/src/connectivity-state.js\");\nconst constants_1 = __webpack_require__(/*! ./constants */ \"(rsc)/./node_modules/google-gax/node_modules/@grpc/grpc-js/build/src/constants.js\");\nconst duration_1 = __webpack_require__(/*! ./duration */ \"(rsc)/./node_modules/google-gax/node_modules/@grpc/grpc-js/build/src/duration.js\");\nconst experimental_1 = __webpack_require__(/*! ./experimental */ \"(rsc)/./node_modules/google-gax/node_modules/@grpc/grpc-js/build/src/experimental.js\");\nconst load_balancer_1 = __webpack_require__(/*! ./load-balancer */ \"(rsc)/./node_modules/google-gax/node_modules/@grpc/grpc-js/build/src/load-balancer.js\");\nconst load_balancer_child_handler_1 = __webpack_require__(/*! ./load-balancer-child-handler */ \"(rsc)/./node_modules/google-gax/node_modules/@grpc/grpc-js/build/src/load-balancer-child-handler.js\");\nconst picker_1 = __webpack_require__(/*! ./picker */ \"(rsc)/./node_modules/google-gax/node_modules/@grpc/grpc-js/build/src/picker.js\");\nconst subchannel_address_1 = __webpack_require__(/*! ./subchannel-address */ \"(rsc)/./node_modules/google-gax/node_modules/@grpc/grpc-js/build/src/subchannel-address.js\");\nconst subchannel_interface_1 = __webpack_require__(/*! ./subchannel-interface */ \"(rsc)/./node_modules/google-gax/node_modules/@grpc/grpc-js/build/src/subchannel-interface.js\");\nconst logging = __webpack_require__(/*! ./logging */ \"(rsc)/./node_modules/google-gax/node_modules/@grpc/grpc-js/build/src/logging.js\");\nconst TRACER_NAME = 'outlier_detection';\nfunction trace(text) {\n    logging.trace(constants_1.LogVerbosity.DEBUG, TRACER_NAME, text);\n}\nconst TYPE_NAME = 'outlier_detection';\nconst OUTLIER_DETECTION_ENABLED = ((_a = process.env.GRPC_EXPERIMENTAL_ENABLE_OUTLIER_DETECTION) !== null && _a !== void 0 ? _a : 'true') === 'true';\nconst defaultSuccessRateEjectionConfig = {\n    stdev_factor: 1900,\n    enforcement_percentage: 100,\n    minimum_hosts: 5,\n    request_volume: 100,\n};\nconst defaultFailurePercentageEjectionConfig = {\n    threshold: 85,\n    enforcement_percentage: 100,\n    minimum_hosts: 5,\n    request_volume: 50,\n};\nfunction validateFieldType(obj, fieldName, expectedType, objectName) {\n    if (fieldName in obj &&\n        obj[fieldName] !== undefined &&\n        typeof obj[fieldName] !== expectedType) {\n        const fullFieldName = objectName ? `${objectName}.${fieldName}` : fieldName;\n        throw new Error(`outlier detection config ${fullFieldName} parse error: expected ${expectedType}, got ${typeof obj[fieldName]}`);\n    }\n}\nfunction validatePositiveDuration(obj, fieldName, objectName) {\n    const fullFieldName = objectName ? `${objectName}.${fieldName}` : fieldName;\n    if (fieldName in obj && obj[fieldName] !== undefined) {\n        if (!(0, duration_1.isDuration)(obj[fieldName])) {\n            throw new Error(`outlier detection config ${fullFieldName} parse error: expected Duration, got ${typeof obj[fieldName]}`);\n        }\n        if (!(obj[fieldName].seconds >= 0 &&\n            obj[fieldName].seconds <= 315576000000 &&\n            obj[fieldName].nanos >= 0 &&\n            obj[fieldName].nanos <= 999999999)) {\n            throw new Error(`outlier detection config ${fullFieldName} parse error: values out of range for non-negative Duaration`);\n        }\n    }\n}\nfunction validatePercentage(obj, fieldName, objectName) {\n    const fullFieldName = objectName ? `${objectName}.${fieldName}` : fieldName;\n    validateFieldType(obj, fieldName, 'number', objectName);\n    if (fieldName in obj &&\n        obj[fieldName] !== undefined &&\n        !(obj[fieldName] >= 0 && obj[fieldName] <= 100)) {\n        throw new Error(`outlier detection config ${fullFieldName} parse error: value out of range for percentage (0-100)`);\n    }\n}\nclass OutlierDetectionLoadBalancingConfig {\n    constructor(intervalMs, baseEjectionTimeMs, maxEjectionTimeMs, maxEjectionPercent, successRateEjection, failurePercentageEjection, childPolicy) {\n        this.childPolicy = childPolicy;\n        if (childPolicy.getLoadBalancerName() === 'pick_first') {\n            throw new Error('outlier_detection LB policy cannot have a pick_first child policy');\n        }\n        this.intervalMs = intervalMs !== null && intervalMs !== void 0 ? intervalMs : 10000;\n        this.baseEjectionTimeMs = baseEjectionTimeMs !== null && baseEjectionTimeMs !== void 0 ? baseEjectionTimeMs : 30000;\n        this.maxEjectionTimeMs = maxEjectionTimeMs !== null && maxEjectionTimeMs !== void 0 ? maxEjectionTimeMs : 300000;\n        this.maxEjectionPercent = maxEjectionPercent !== null && maxEjectionPercent !== void 0 ? maxEjectionPercent : 10;\n        this.successRateEjection = successRateEjection\n            ? Object.assign(Object.assign({}, defaultSuccessRateEjectionConfig), successRateEjection) : null;\n        this.failurePercentageEjection = failurePercentageEjection\n            ? Object.assign(Object.assign({}, defaultFailurePercentageEjectionConfig), failurePercentageEjection) : null;\n    }\n    getLoadBalancerName() {\n        return TYPE_NAME;\n    }\n    toJsonObject() {\n        var _a, _b;\n        return {\n            outlier_detection: {\n                interval: (0, duration_1.msToDuration)(this.intervalMs),\n                base_ejection_time: (0, duration_1.msToDuration)(this.baseEjectionTimeMs),\n                max_ejection_time: (0, duration_1.msToDuration)(this.maxEjectionTimeMs),\n                max_ejection_percent: this.maxEjectionPercent,\n                success_rate_ejection: (_a = this.successRateEjection) !== null && _a !== void 0 ? _a : undefined,\n                failure_percentage_ejection: (_b = this.failurePercentageEjection) !== null && _b !== void 0 ? _b : undefined,\n                child_policy: [this.childPolicy.toJsonObject()],\n            },\n        };\n    }\n    getIntervalMs() {\n        return this.intervalMs;\n    }\n    getBaseEjectionTimeMs() {\n        return this.baseEjectionTimeMs;\n    }\n    getMaxEjectionTimeMs() {\n        return this.maxEjectionTimeMs;\n    }\n    getMaxEjectionPercent() {\n        return this.maxEjectionPercent;\n    }\n    getSuccessRateEjectionConfig() {\n        return this.successRateEjection;\n    }\n    getFailurePercentageEjectionConfig() {\n        return this.failurePercentageEjection;\n    }\n    getChildPolicy() {\n        return this.childPolicy;\n    }\n    static createFromJson(obj) {\n        var _a;\n        validatePositiveDuration(obj, 'interval');\n        validatePositiveDuration(obj, 'base_ejection_time');\n        validatePositiveDuration(obj, 'max_ejection_time');\n        validatePercentage(obj, 'max_ejection_percent');\n        if ('success_rate_ejection' in obj &&\n            obj.success_rate_ejection !== undefined) {\n            if (typeof obj.success_rate_ejection !== 'object') {\n                throw new Error('outlier detection config success_rate_ejection must be an object');\n            }\n            validateFieldType(obj.success_rate_ejection, 'stdev_factor', 'number', 'success_rate_ejection');\n            validatePercentage(obj.success_rate_ejection, 'enforcement_percentage', 'success_rate_ejection');\n            validateFieldType(obj.success_rate_ejection, 'minimum_hosts', 'number', 'success_rate_ejection');\n            validateFieldType(obj.success_rate_ejection, 'request_volume', 'number', 'success_rate_ejection');\n        }\n        if ('failure_percentage_ejection' in obj &&\n            obj.failure_percentage_ejection !== undefined) {\n            if (typeof obj.failure_percentage_ejection !== 'object') {\n                throw new Error('outlier detection config failure_percentage_ejection must be an object');\n            }\n            validatePercentage(obj.failure_percentage_ejection, 'threshold', 'failure_percentage_ejection');\n            validatePercentage(obj.failure_percentage_ejection, 'enforcement_percentage', 'failure_percentage_ejection');\n            validateFieldType(obj.failure_percentage_ejection, 'minimum_hosts', 'number', 'failure_percentage_ejection');\n            validateFieldType(obj.failure_percentage_ejection, 'request_volume', 'number', 'failure_percentage_ejection');\n        }\n        if (!('child_policy' in obj) || !Array.isArray(obj.child_policy)) {\n            throw new Error('outlier detection config child_policy must be an array');\n        }\n        const childPolicy = (0, load_balancer_1.selectLbConfigFromList)(obj.child_policy);\n        if (!childPolicy) {\n            throw new Error('outlier detection config child_policy: no valid recognized policy found');\n        }\n        return new OutlierDetectionLoadBalancingConfig(obj.interval ? (0, duration_1.durationToMs)(obj.interval) : null, obj.base_ejection_time ? (0, duration_1.durationToMs)(obj.base_ejection_time) : null, obj.max_ejection_time ? (0, duration_1.durationToMs)(obj.max_ejection_time) : null, (_a = obj.max_ejection_percent) !== null && _a !== void 0 ? _a : null, obj.success_rate_ejection, obj.failure_percentage_ejection, childPolicy);\n    }\n}\nexports.OutlierDetectionLoadBalancingConfig = OutlierDetectionLoadBalancingConfig;\nclass OutlierDetectionSubchannelWrapper extends subchannel_interface_1.BaseSubchannelWrapper {\n    constructor(childSubchannel, mapEntry) {\n        super(childSubchannel);\n        this.mapEntry = mapEntry;\n        this.refCount = 0;\n    }\n    ref() {\n        this.child.ref();\n        this.refCount += 1;\n    }\n    unref() {\n        this.child.unref();\n        this.refCount -= 1;\n        if (this.refCount <= 0) {\n            if (this.mapEntry) {\n                const index = this.mapEntry.subchannelWrappers.indexOf(this);\n                if (index >= 0) {\n                    this.mapEntry.subchannelWrappers.splice(index, 1);\n                }\n            }\n        }\n    }\n    eject() {\n        this.setHealthy(false);\n    }\n    uneject() {\n        this.setHealthy(true);\n    }\n    getMapEntry() {\n        return this.mapEntry;\n    }\n    getWrappedSubchannel() {\n        return this.child;\n    }\n}\nfunction createEmptyBucket() {\n    return {\n        success: 0,\n        failure: 0,\n    };\n}\nclass CallCounter {\n    constructor() {\n        this.activeBucket = createEmptyBucket();\n        this.inactiveBucket = createEmptyBucket();\n    }\n    addSuccess() {\n        this.activeBucket.success += 1;\n    }\n    addFailure() {\n        this.activeBucket.failure += 1;\n    }\n    switchBuckets() {\n        this.inactiveBucket = this.activeBucket;\n        this.activeBucket = createEmptyBucket();\n    }\n    getLastSuccesses() {\n        return this.inactiveBucket.success;\n    }\n    getLastFailures() {\n        return this.inactiveBucket.failure;\n    }\n}\nclass OutlierDetectionPicker {\n    constructor(wrappedPicker, countCalls) {\n        this.wrappedPicker = wrappedPicker;\n        this.countCalls = countCalls;\n    }\n    pick(pickArgs) {\n        const wrappedPick = this.wrappedPicker.pick(pickArgs);\n        if (wrappedPick.pickResultType === picker_1.PickResultType.COMPLETE) {\n            const subchannelWrapper = wrappedPick.subchannel;\n            const mapEntry = subchannelWrapper.getMapEntry();\n            if (mapEntry) {\n                let onCallEnded = wrappedPick.onCallEnded;\n                if (this.countCalls) {\n                    onCallEnded = statusCode => {\n                        var _a;\n                        if (statusCode === constants_1.Status.OK) {\n                            mapEntry.counter.addSuccess();\n                        }\n                        else {\n                            mapEntry.counter.addFailure();\n                        }\n                        (_a = wrappedPick.onCallEnded) === null || _a === void 0 ? void 0 : _a.call(wrappedPick, statusCode);\n                    };\n                }\n                return Object.assign(Object.assign({}, wrappedPick), { subchannel: subchannelWrapper.getWrappedSubchannel(), onCallEnded: onCallEnded });\n            }\n            else {\n                return Object.assign(Object.assign({}, wrappedPick), { subchannel: subchannelWrapper.getWrappedSubchannel() });\n            }\n        }\n        else {\n            return wrappedPick;\n        }\n    }\n}\nclass OutlierDetectionLoadBalancer {\n    constructor(channelControlHelper) {\n        this.entryMap = new subchannel_address_1.EndpointMap();\n        this.latestConfig = null;\n        this.timerStartTime = null;\n        this.childBalancer = new load_balancer_child_handler_1.ChildLoadBalancerHandler((0, experimental_1.createChildChannelControlHelper)(channelControlHelper, {\n            createSubchannel: (subchannelAddress, subchannelArgs) => {\n                const originalSubchannel = channelControlHelper.createSubchannel(subchannelAddress, subchannelArgs);\n                const mapEntry = this.entryMap.getForSubchannelAddress(subchannelAddress);\n                const subchannelWrapper = new OutlierDetectionSubchannelWrapper(originalSubchannel, mapEntry);\n                if ((mapEntry === null || mapEntry === void 0 ? void 0 : mapEntry.currentEjectionTimestamp) !== null) {\n                    // If the address is ejected, propagate that to the new subchannel wrapper\n                    subchannelWrapper.eject();\n                }\n                mapEntry === null || mapEntry === void 0 ? void 0 : mapEntry.subchannelWrappers.push(subchannelWrapper);\n                return subchannelWrapper;\n            },\n            updateState: (connectivityState, picker, errorMessage) => {\n                if (connectivityState === connectivity_state_1.ConnectivityState.READY) {\n                    channelControlHelper.updateState(connectivityState, new OutlierDetectionPicker(picker, this.isCountingEnabled()), errorMessage);\n                }\n                else {\n                    channelControlHelper.updateState(connectivityState, picker, errorMessage);\n                }\n            },\n        }));\n        this.ejectionTimer = setInterval(() => { }, 0);\n        clearInterval(this.ejectionTimer);\n    }\n    isCountingEnabled() {\n        return (this.latestConfig !== null &&\n            (this.latestConfig.getSuccessRateEjectionConfig() !== null ||\n                this.latestConfig.getFailurePercentageEjectionConfig() !== null));\n    }\n    getCurrentEjectionPercent() {\n        let ejectionCount = 0;\n        for (const mapEntry of this.entryMap.values()) {\n            if (mapEntry.currentEjectionTimestamp !== null) {\n                ejectionCount += 1;\n            }\n        }\n        return (ejectionCount * 100) / this.entryMap.size;\n    }\n    runSuccessRateCheck(ejectionTimestamp) {\n        if (!this.latestConfig) {\n            return;\n        }\n        const successRateConfig = this.latestConfig.getSuccessRateEjectionConfig();\n        if (!successRateConfig) {\n            return;\n        }\n        trace('Running success rate check');\n        // Step 1\n        const targetRequestVolume = successRateConfig.request_volume;\n        let addresesWithTargetVolume = 0;\n        const successRates = [];\n        for (const [endpoint, mapEntry] of this.entryMap.entries()) {\n            const successes = mapEntry.counter.getLastSuccesses();\n            const failures = mapEntry.counter.getLastFailures();\n            trace('Stats for ' +\n                (0, subchannel_address_1.endpointToString)(endpoint) +\n                ': successes=' +\n                successes +\n                ' failures=' +\n                failures +\n                ' targetRequestVolume=' +\n                targetRequestVolume);\n            if (successes + failures >= targetRequestVolume) {\n                addresesWithTargetVolume += 1;\n                successRates.push(successes / (successes + failures));\n            }\n        }\n        trace('Found ' +\n            addresesWithTargetVolume +\n            ' success rate candidates; currentEjectionPercent=' +\n            this.getCurrentEjectionPercent() +\n            ' successRates=[' +\n            successRates +\n            ']');\n        if (addresesWithTargetVolume < successRateConfig.minimum_hosts) {\n            return;\n        }\n        // Step 2\n        const successRateMean = successRates.reduce((a, b) => a + b) / successRates.length;\n        let successRateDeviationSum = 0;\n        for (const rate of successRates) {\n            const deviation = rate - successRateMean;\n            successRateDeviationSum += deviation * deviation;\n        }\n        const successRateVariance = successRateDeviationSum / successRates.length;\n        const successRateStdev = Math.sqrt(successRateVariance);\n        const ejectionThreshold = successRateMean -\n            successRateStdev * (successRateConfig.stdev_factor / 1000);\n        trace('stdev=' + successRateStdev + ' ejectionThreshold=' + ejectionThreshold);\n        // Step 3\n        for (const [address, mapEntry] of this.entryMap.entries()) {\n            // Step 3.i\n            if (this.getCurrentEjectionPercent() >=\n                this.latestConfig.getMaxEjectionPercent()) {\n                break;\n            }\n            // Step 3.ii\n            const successes = mapEntry.counter.getLastSuccesses();\n            const failures = mapEntry.counter.getLastFailures();\n            if (successes + failures < targetRequestVolume) {\n                continue;\n            }\n            // Step 3.iii\n            const successRate = successes / (successes + failures);\n            trace('Checking candidate ' + address + ' successRate=' + successRate);\n            if (successRate < ejectionThreshold) {\n                const randomNumber = Math.random() * 100;\n                trace('Candidate ' +\n                    address +\n                    ' randomNumber=' +\n                    randomNumber +\n                    ' enforcement_percentage=' +\n                    successRateConfig.enforcement_percentage);\n                if (randomNumber < successRateConfig.enforcement_percentage) {\n                    trace('Ejecting candidate ' + address);\n                    this.eject(mapEntry, ejectionTimestamp);\n                }\n            }\n        }\n    }\n    runFailurePercentageCheck(ejectionTimestamp) {\n        if (!this.latestConfig) {\n            return;\n        }\n        const failurePercentageConfig = this.latestConfig.getFailurePercentageEjectionConfig();\n        if (!failurePercentageConfig) {\n            return;\n        }\n        trace('Running failure percentage check. threshold=' +\n            failurePercentageConfig.threshold +\n            ' request volume threshold=' +\n            failurePercentageConfig.request_volume);\n        // Step 1\n        let addressesWithTargetVolume = 0;\n        for (const mapEntry of this.entryMap.values()) {\n            const successes = mapEntry.counter.getLastSuccesses();\n            const failures = mapEntry.counter.getLastFailures();\n            if (successes + failures >= failurePercentageConfig.request_volume) {\n                addressesWithTargetVolume += 1;\n            }\n        }\n        if (addressesWithTargetVolume < failurePercentageConfig.minimum_hosts) {\n            return;\n        }\n        // Step 2\n        for (const [address, mapEntry] of this.entryMap.entries()) {\n            // Step 2.i\n            if (this.getCurrentEjectionPercent() >=\n                this.latestConfig.getMaxEjectionPercent()) {\n                break;\n            }\n            // Step 2.ii\n            const successes = mapEntry.counter.getLastSuccesses();\n            const failures = mapEntry.counter.getLastFailures();\n            trace('Candidate successes=' + successes + ' failures=' + failures);\n            if (successes + failures < failurePercentageConfig.request_volume) {\n                continue;\n            }\n            // Step 2.iii\n            const failurePercentage = (failures * 100) / (failures + successes);\n            if (failurePercentage > failurePercentageConfig.threshold) {\n                const randomNumber = Math.random() * 100;\n                trace('Candidate ' +\n                    address +\n                    ' randomNumber=' +\n                    randomNumber +\n                    ' enforcement_percentage=' +\n                    failurePercentageConfig.enforcement_percentage);\n                if (randomNumber < failurePercentageConfig.enforcement_percentage) {\n                    trace('Ejecting candidate ' + address);\n                    this.eject(mapEntry, ejectionTimestamp);\n                }\n            }\n        }\n    }\n    eject(mapEntry, ejectionTimestamp) {\n        mapEntry.currentEjectionTimestamp = new Date();\n        mapEntry.ejectionTimeMultiplier += 1;\n        for (const subchannelWrapper of mapEntry.subchannelWrappers) {\n            subchannelWrapper.eject();\n        }\n    }\n    uneject(mapEntry) {\n        mapEntry.currentEjectionTimestamp = null;\n        for (const subchannelWrapper of mapEntry.subchannelWrappers) {\n            subchannelWrapper.uneject();\n        }\n    }\n    switchAllBuckets() {\n        for (const mapEntry of this.entryMap.values()) {\n            mapEntry.counter.switchBuckets();\n        }\n    }\n    startTimer(delayMs) {\n        var _a, _b;\n        this.ejectionTimer = setTimeout(() => this.runChecks(), delayMs);\n        (_b = (_a = this.ejectionTimer).unref) === null || _b === void 0 ? void 0 : _b.call(_a);\n    }\n    runChecks() {\n        const ejectionTimestamp = new Date();\n        trace('Ejection timer running');\n        this.switchAllBuckets();\n        if (!this.latestConfig) {\n            return;\n        }\n        this.timerStartTime = ejectionTimestamp;\n        this.startTimer(this.latestConfig.getIntervalMs());\n        this.runSuccessRateCheck(ejectionTimestamp);\n        this.runFailurePercentageCheck(ejectionTimestamp);\n        for (const [address, mapEntry] of this.entryMap.entries()) {\n            if (mapEntry.currentEjectionTimestamp === null) {\n                if (mapEntry.ejectionTimeMultiplier > 0) {\n                    mapEntry.ejectionTimeMultiplier -= 1;\n                }\n            }\n            else {\n                const baseEjectionTimeMs = this.latestConfig.getBaseEjectionTimeMs();\n                const maxEjectionTimeMs = this.latestConfig.getMaxEjectionTimeMs();\n                const returnTime = new Date(mapEntry.currentEjectionTimestamp.getTime());\n                returnTime.setMilliseconds(returnTime.getMilliseconds() +\n                    Math.min(baseEjectionTimeMs * mapEntry.ejectionTimeMultiplier, Math.max(baseEjectionTimeMs, maxEjectionTimeMs)));\n                if (returnTime < new Date()) {\n                    trace('Unejecting ' + address);\n                    this.uneject(mapEntry);\n                }\n            }\n        }\n    }\n    updateAddressList(endpointList, lbConfig, options) {\n        if (!(lbConfig instanceof OutlierDetectionLoadBalancingConfig)) {\n            return;\n        }\n        trace('Received update with config: ' + JSON.stringify(lbConfig.toJsonObject(), undefined, 2));\n        for (const endpoint of endpointList) {\n            if (!this.entryMap.has(endpoint)) {\n                trace('Adding map entry for ' + (0, subchannel_address_1.endpointToString)(endpoint));\n                this.entryMap.set(endpoint, {\n                    counter: new CallCounter(),\n                    currentEjectionTimestamp: null,\n                    ejectionTimeMultiplier: 0,\n                    subchannelWrappers: [],\n                });\n            }\n        }\n        this.entryMap.deleteMissing(endpointList);\n        const childPolicy = lbConfig.getChildPolicy();\n        this.childBalancer.updateAddressList(endpointList, childPolicy, options);\n        if (lbConfig.getSuccessRateEjectionConfig() ||\n            lbConfig.getFailurePercentageEjectionConfig()) {\n            if (this.timerStartTime) {\n                trace('Previous timer existed. Replacing timer');\n                clearTimeout(this.ejectionTimer);\n                const remainingDelay = lbConfig.getIntervalMs() -\n                    (new Date().getTime() - this.timerStartTime.getTime());\n                this.startTimer(remainingDelay);\n            }\n            else {\n                trace('Starting new timer');\n                this.timerStartTime = new Date();\n                this.startTimer(lbConfig.getIntervalMs());\n                this.switchAllBuckets();\n            }\n        }\n        else {\n            trace('Counting disabled. Cancelling timer.');\n            this.timerStartTime = null;\n            clearTimeout(this.ejectionTimer);\n            for (const mapEntry of this.entryMap.values()) {\n                this.uneject(mapEntry);\n                mapEntry.ejectionTimeMultiplier = 0;\n            }\n        }\n        this.latestConfig = lbConfig;\n    }\n    exitIdle() {\n        this.childBalancer.exitIdle();\n    }\n    resetBackoff() {\n        this.childBalancer.resetBackoff();\n    }\n    destroy() {\n        clearTimeout(this.ejectionTimer);\n        this.childBalancer.destroy();\n    }\n    getTypeName() {\n        return TYPE_NAME;\n    }\n}\nexports.OutlierDetectionLoadBalancer = OutlierDetectionLoadBalancer;\nfunction setup() {\n    if (OUTLIER_DETECTION_ENABLED) {\n        (0, experimental_1.registerLoadBalancerType)(TYPE_NAME, OutlierDetectionLoadBalancer, OutlierDetectionLoadBalancingConfig);\n    }\n}\n//# sourceMappingURL=load-balancer-outlier-detection.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/google-gax/node_modules/@grpc/grpc-js/build/src/load-balancer-outlier-detection.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/google-gax/node_modules/@grpc/grpc-js/build/src/load-balancer-pick-first.js":
/*!**************************************************************************************************!*\
  !*** ./node_modules/google-gax/node_modules/@grpc/grpc-js/build/src/load-balancer-pick-first.js ***!
  \**************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\n/*\n * Copyright 2019 gRPC authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n */\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.LeafLoadBalancer = exports.PickFirstLoadBalancer = exports.PickFirstLoadBalancingConfig = void 0;\nexports.shuffled = shuffled;\nexports.setup = setup;\nconst load_balancer_1 = __webpack_require__(/*! ./load-balancer */ \"(rsc)/./node_modules/google-gax/node_modules/@grpc/grpc-js/build/src/load-balancer.js\");\nconst connectivity_state_1 = __webpack_require__(/*! ./connectivity-state */ \"(rsc)/./node_modules/google-gax/node_modules/@grpc/grpc-js/build/src/connectivity-state.js\");\nconst picker_1 = __webpack_require__(/*! ./picker */ \"(rsc)/./node_modules/google-gax/node_modules/@grpc/grpc-js/build/src/picker.js\");\nconst subchannel_address_1 = __webpack_require__(/*! ./subchannel-address */ \"(rsc)/./node_modules/google-gax/node_modules/@grpc/grpc-js/build/src/subchannel-address.js\");\nconst logging = __webpack_require__(/*! ./logging */ \"(rsc)/./node_modules/google-gax/node_modules/@grpc/grpc-js/build/src/logging.js\");\nconst constants_1 = __webpack_require__(/*! ./constants */ \"(rsc)/./node_modules/google-gax/node_modules/@grpc/grpc-js/build/src/constants.js\");\nconst subchannel_address_2 = __webpack_require__(/*! ./subchannel-address */ \"(rsc)/./node_modules/google-gax/node_modules/@grpc/grpc-js/build/src/subchannel-address.js\");\nconst net_1 = __webpack_require__(/*! net */ \"net\");\nconst TRACER_NAME = 'pick_first';\nfunction trace(text) {\n    logging.trace(constants_1.LogVerbosity.DEBUG, TRACER_NAME, text);\n}\nconst TYPE_NAME = 'pick_first';\n/**\n * Delay after starting a connection on a subchannel before starting a\n * connection on the next subchannel in the list, for Happy Eyeballs algorithm.\n */\nconst CONNECTION_DELAY_INTERVAL_MS = 250;\nclass PickFirstLoadBalancingConfig {\n    constructor(shuffleAddressList) {\n        this.shuffleAddressList = shuffleAddressList;\n    }\n    getLoadBalancerName() {\n        return TYPE_NAME;\n    }\n    toJsonObject() {\n        return {\n            [TYPE_NAME]: {\n                shuffleAddressList: this.shuffleAddressList,\n            },\n        };\n    }\n    getShuffleAddressList() {\n        return this.shuffleAddressList;\n    }\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    static createFromJson(obj) {\n        if ('shuffleAddressList' in obj &&\n            !(typeof obj.shuffleAddressList === 'boolean')) {\n            throw new Error('pick_first config field shuffleAddressList must be a boolean if provided');\n        }\n        return new PickFirstLoadBalancingConfig(obj.shuffleAddressList === true);\n    }\n}\nexports.PickFirstLoadBalancingConfig = PickFirstLoadBalancingConfig;\n/**\n * Picker for a `PickFirstLoadBalancer` in the READY state. Always returns the\n * picked subchannel.\n */\nclass PickFirstPicker {\n    constructor(subchannel) {\n        this.subchannel = subchannel;\n    }\n    pick(pickArgs) {\n        return {\n            pickResultType: picker_1.PickResultType.COMPLETE,\n            subchannel: this.subchannel,\n            status: null,\n            onCallStarted: null,\n            onCallEnded: null,\n        };\n    }\n}\n/**\n * Return a new array with the elements of the input array in a random order\n * @param list The input array\n * @returns A shuffled array of the elements of list\n */\nfunction shuffled(list) {\n    const result = list.slice();\n    for (let i = result.length - 1; i > 1; i--) {\n        const j = Math.floor(Math.random() * (i + 1));\n        const temp = result[i];\n        result[i] = result[j];\n        result[j] = temp;\n    }\n    return result;\n}\n/**\n * Interleave addresses in addressList by family in accordance with RFC-8304 section 4\n * @param addressList\n * @returns\n */\nfunction interleaveAddressFamilies(addressList) {\n    if (addressList.length === 0) {\n        return [];\n    }\n    const result = [];\n    const ipv6Addresses = [];\n    const ipv4Addresses = [];\n    const ipv6First = (0, subchannel_address_2.isTcpSubchannelAddress)(addressList[0]) && (0, net_1.isIPv6)(addressList[0].host);\n    for (const address of addressList) {\n        if ((0, subchannel_address_2.isTcpSubchannelAddress)(address) && (0, net_1.isIPv6)(address.host)) {\n            ipv6Addresses.push(address);\n        }\n        else {\n            ipv4Addresses.push(address);\n        }\n    }\n    const firstList = ipv6First ? ipv6Addresses : ipv4Addresses;\n    const secondList = ipv6First ? ipv4Addresses : ipv6Addresses;\n    for (let i = 0; i < Math.max(firstList.length, secondList.length); i++) {\n        if (i < firstList.length) {\n            result.push(firstList[i]);\n        }\n        if (i < secondList.length) {\n            result.push(secondList[i]);\n        }\n    }\n    return result;\n}\nconst REPORT_HEALTH_STATUS_OPTION_NAME = 'grpc-node.internal.pick-first.report_health_status';\nclass PickFirstLoadBalancer {\n    /**\n     * Load balancer that attempts to connect to each backend in the address list\n     * in order, and picks the first one that connects, using it for every\n     * request.\n     * @param channelControlHelper `ChannelControlHelper` instance provided by\n     *     this load balancer's owner.\n     */\n    constructor(channelControlHelper) {\n        this.channelControlHelper = channelControlHelper;\n        /**\n         * The list of subchannels this load balancer is currently attempting to\n         * connect to.\n         */\n        this.children = [];\n        /**\n         * The current connectivity state of the load balancer.\n         */\n        this.currentState = connectivity_state_1.ConnectivityState.IDLE;\n        /**\n         * The index within the `subchannels` array of the subchannel with the most\n         * recently started connection attempt.\n         */\n        this.currentSubchannelIndex = 0;\n        /**\n         * The currently picked subchannel used for making calls. Populated if\n         * and only if the load balancer's current state is READY. In that case,\n         * the subchannel's current state is also READY.\n         */\n        this.currentPick = null;\n        /**\n         * Listener callback attached to each subchannel in the `subchannels` list\n         * while establishing a connection.\n         */\n        this.subchannelStateListener = (subchannel, previousState, newState, keepaliveTime, errorMessage) => {\n            this.onSubchannelStateUpdate(subchannel, previousState, newState, errorMessage);\n        };\n        this.pickedSubchannelHealthListener = () => this.calculateAndReportNewState();\n        /**\n         * The LB policy enters sticky TRANSIENT_FAILURE mode when all\n         * subchannels have failed to connect at least once, and it stays in that\n         * mode until a connection attempt is successful. While in sticky TF mode,\n         * the LB policy continuously attempts to connect to all of its subchannels.\n         */\n        this.stickyTransientFailureMode = false;\n        this.reportHealthStatus = false;\n        /**\n         * The most recent error reported by any subchannel as it transitioned to\n         * TRANSIENT_FAILURE.\n         */\n        this.lastError = null;\n        this.latestAddressList = null;\n        this.latestOptions = {};\n        this.connectionDelayTimeout = setTimeout(() => { }, 0);\n        clearTimeout(this.connectionDelayTimeout);\n    }\n    allChildrenHaveReportedTF() {\n        return this.children.every(child => child.hasReportedTransientFailure);\n    }\n    resetChildrenReportedTF() {\n        this.children.every(child => child.hasReportedTransientFailure = false);\n    }\n    calculateAndReportNewState() {\n        var _a;\n        if (this.currentPick) {\n            if (this.reportHealthStatus && !this.currentPick.isHealthy()) {\n                const errorMessage = `Picked subchannel ${this.currentPick.getAddress()} is unhealthy`;\n                this.updateState(connectivity_state_1.ConnectivityState.TRANSIENT_FAILURE, new picker_1.UnavailablePicker({\n                    details: errorMessage,\n                }), errorMessage);\n            }\n            else {\n                this.updateState(connectivity_state_1.ConnectivityState.READY, new PickFirstPicker(this.currentPick), null);\n            }\n        }\n        else if (((_a = this.latestAddressList) === null || _a === void 0 ? void 0 : _a.length) === 0) {\n            const errorMessage = `No connection established. Last error: ${this.lastError}`;\n            this.updateState(connectivity_state_1.ConnectivityState.TRANSIENT_FAILURE, new picker_1.UnavailablePicker({\n                details: errorMessage,\n            }), errorMessage);\n        }\n        else if (this.children.length === 0) {\n            this.updateState(connectivity_state_1.ConnectivityState.IDLE, new picker_1.QueuePicker(this), null);\n        }\n        else {\n            if (this.stickyTransientFailureMode) {\n                const errorMessage = `No connection established. Last error: ${this.lastError}`;\n                this.updateState(connectivity_state_1.ConnectivityState.TRANSIENT_FAILURE, new picker_1.UnavailablePicker({\n                    details: errorMessage,\n                }), errorMessage);\n            }\n            else {\n                this.updateState(connectivity_state_1.ConnectivityState.CONNECTING, new picker_1.QueuePicker(this), null);\n            }\n        }\n    }\n    requestReresolution() {\n        this.channelControlHelper.requestReresolution();\n    }\n    maybeEnterStickyTransientFailureMode() {\n        if (!this.allChildrenHaveReportedTF()) {\n            return;\n        }\n        this.requestReresolution();\n        this.resetChildrenReportedTF();\n        if (this.stickyTransientFailureMode) {\n            this.calculateAndReportNewState();\n            return;\n        }\n        this.stickyTransientFailureMode = true;\n        for (const { subchannel } of this.children) {\n            subchannel.startConnecting();\n        }\n        this.calculateAndReportNewState();\n    }\n    removeCurrentPick() {\n        if (this.currentPick !== null) {\n            this.currentPick.removeConnectivityStateListener(this.subchannelStateListener);\n            this.channelControlHelper.removeChannelzChild(this.currentPick.getChannelzRef());\n            this.currentPick.removeHealthStateWatcher(this.pickedSubchannelHealthListener);\n            // Unref last, to avoid triggering listeners\n            this.currentPick.unref();\n            this.currentPick = null;\n        }\n    }\n    onSubchannelStateUpdate(subchannel, previousState, newState, errorMessage) {\n        var _a;\n        if ((_a = this.currentPick) === null || _a === void 0 ? void 0 : _a.realSubchannelEquals(subchannel)) {\n            if (newState !== connectivity_state_1.ConnectivityState.READY) {\n                this.removeCurrentPick();\n                this.calculateAndReportNewState();\n            }\n            return;\n        }\n        for (const [index, child] of this.children.entries()) {\n            if (subchannel.realSubchannelEquals(child.subchannel)) {\n                if (newState === connectivity_state_1.ConnectivityState.READY) {\n                    this.pickSubchannel(child.subchannel);\n                }\n                if (newState === connectivity_state_1.ConnectivityState.TRANSIENT_FAILURE) {\n                    child.hasReportedTransientFailure = true;\n                    if (errorMessage) {\n                        this.lastError = errorMessage;\n                    }\n                    this.maybeEnterStickyTransientFailureMode();\n                    if (index === this.currentSubchannelIndex) {\n                        this.startNextSubchannelConnecting(index + 1);\n                    }\n                }\n                child.subchannel.startConnecting();\n                return;\n            }\n        }\n    }\n    startNextSubchannelConnecting(startIndex) {\n        clearTimeout(this.connectionDelayTimeout);\n        for (const [index, child] of this.children.entries()) {\n            if (index >= startIndex) {\n                const subchannelState = child.subchannel.getConnectivityState();\n                if (subchannelState === connectivity_state_1.ConnectivityState.IDLE ||\n                    subchannelState === connectivity_state_1.ConnectivityState.CONNECTING) {\n                    this.startConnecting(index);\n                    return;\n                }\n            }\n        }\n        this.maybeEnterStickyTransientFailureMode();\n    }\n    /**\n     * Have a single subchannel in the `subchannels` list start connecting.\n     * @param subchannelIndex The index into the `subchannels` list.\n     */\n    startConnecting(subchannelIndex) {\n        var _a, _b;\n        clearTimeout(this.connectionDelayTimeout);\n        this.currentSubchannelIndex = subchannelIndex;\n        if (this.children[subchannelIndex].subchannel.getConnectivityState() ===\n            connectivity_state_1.ConnectivityState.IDLE) {\n            trace('Start connecting to subchannel with address ' +\n                this.children[subchannelIndex].subchannel.getAddress());\n            process.nextTick(() => {\n                var _a;\n                (_a = this.children[subchannelIndex]) === null || _a === void 0 ? void 0 : _a.subchannel.startConnecting();\n            });\n        }\n        this.connectionDelayTimeout = setTimeout(() => {\n            this.startNextSubchannelConnecting(subchannelIndex + 1);\n        }, CONNECTION_DELAY_INTERVAL_MS);\n        (_b = (_a = this.connectionDelayTimeout).unref) === null || _b === void 0 ? void 0 : _b.call(_a);\n    }\n    /**\n     * Declare that the specified subchannel should be used to make requests.\n     * This functions the same independent of whether subchannel is a member of\n     * this.children and whether it is equal to this.currentPick.\n     * Prerequisite: subchannel.getConnectivityState() === READY.\n     * @param subchannel\n     */\n    pickSubchannel(subchannel) {\n        trace('Pick subchannel with address ' + subchannel.getAddress());\n        this.stickyTransientFailureMode = false;\n        /* Ref before removeCurrentPick and resetSubchannelList to avoid the\n         * refcount dropping to 0 during this process. */\n        subchannel.ref();\n        this.channelControlHelper.addChannelzChild(subchannel.getChannelzRef());\n        this.removeCurrentPick();\n        this.resetSubchannelList();\n        subchannel.addConnectivityStateListener(this.subchannelStateListener);\n        subchannel.addHealthStateWatcher(this.pickedSubchannelHealthListener);\n        this.currentPick = subchannel;\n        clearTimeout(this.connectionDelayTimeout);\n        this.calculateAndReportNewState();\n    }\n    updateState(newState, picker, errorMessage) {\n        trace(connectivity_state_1.ConnectivityState[this.currentState] +\n            ' -> ' +\n            connectivity_state_1.ConnectivityState[newState]);\n        this.currentState = newState;\n        this.channelControlHelper.updateState(newState, picker, errorMessage);\n    }\n    resetSubchannelList() {\n        for (const child of this.children) {\n            /* Always remoev the connectivity state listener. If the subchannel is\n               getting picked, it will be re-added then. */\n            child.subchannel.removeConnectivityStateListener(this.subchannelStateListener);\n            /* Refs are counted independently for the children list and the\n             * currentPick, so we call unref whether or not the child is the\n             * currentPick. Channelz child references are also refcounted, so\n             * removeChannelzChild can be handled the same way. */\n            child.subchannel.unref();\n            this.channelControlHelper.removeChannelzChild(child.subchannel.getChannelzRef());\n        }\n        this.currentSubchannelIndex = 0;\n        this.children = [];\n    }\n    connectToAddressList(addressList, options) {\n        trace('connectToAddressList([' + addressList.map(address => (0, subchannel_address_1.subchannelAddressToString)(address)) + '])');\n        const newChildrenList = addressList.map(address => ({\n            subchannel: this.channelControlHelper.createSubchannel(address, options),\n            hasReportedTransientFailure: false,\n        }));\n        for (const { subchannel } of newChildrenList) {\n            if (subchannel.getConnectivityState() === connectivity_state_1.ConnectivityState.READY) {\n                this.pickSubchannel(subchannel);\n                return;\n            }\n        }\n        /* Ref each subchannel before resetting the list, to ensure that\n         * subchannels shared between the list don't drop to 0 refs during the\n         * transition. */\n        for (const { subchannel } of newChildrenList) {\n            subchannel.ref();\n            this.channelControlHelper.addChannelzChild(subchannel.getChannelzRef());\n        }\n        this.resetSubchannelList();\n        this.children = newChildrenList;\n        for (const { subchannel } of this.children) {\n            subchannel.addConnectivityStateListener(this.subchannelStateListener);\n        }\n        for (const child of this.children) {\n            if (child.subchannel.getConnectivityState() ===\n                connectivity_state_1.ConnectivityState.TRANSIENT_FAILURE) {\n                child.hasReportedTransientFailure = true;\n            }\n        }\n        this.startNextSubchannelConnecting(0);\n        this.calculateAndReportNewState();\n    }\n    updateAddressList(endpointList, lbConfig, options) {\n        if (!(lbConfig instanceof PickFirstLoadBalancingConfig)) {\n            return;\n        }\n        this.reportHealthStatus = options[REPORT_HEALTH_STATUS_OPTION_NAME];\n        /* Previously, an update would be discarded if it was identical to the\n         * previous update, to minimize churn. Now the DNS resolver is\n         * rate-limited, so that is less of a concern. */\n        if (lbConfig.getShuffleAddressList()) {\n            endpointList = shuffled(endpointList);\n        }\n        const rawAddressList = [].concat(...endpointList.map(endpoint => endpoint.addresses));\n        trace('updateAddressList([' + rawAddressList.map(address => (0, subchannel_address_1.subchannelAddressToString)(address)) + '])');\n        if (rawAddressList.length === 0) {\n            this.lastError = 'No addresses resolved';\n        }\n        const addressList = interleaveAddressFamilies(rawAddressList);\n        this.latestAddressList = addressList;\n        this.latestOptions = options;\n        this.connectToAddressList(addressList, options);\n    }\n    exitIdle() {\n        if (this.currentState === connectivity_state_1.ConnectivityState.IDLE &&\n            this.latestAddressList) {\n            this.connectToAddressList(this.latestAddressList, this.latestOptions);\n        }\n    }\n    resetBackoff() {\n        /* The pick first load balancer does not have a connection backoff, so this\n         * does nothing */\n    }\n    destroy() {\n        this.resetSubchannelList();\n        this.removeCurrentPick();\n    }\n    getTypeName() {\n        return TYPE_NAME;\n    }\n}\nexports.PickFirstLoadBalancer = PickFirstLoadBalancer;\nconst LEAF_CONFIG = new PickFirstLoadBalancingConfig(false);\n/**\n * This class handles the leaf load balancing operations for a single endpoint.\n * It is a thin wrapper around a PickFirstLoadBalancer with a different API\n * that more closely reflects how it will be used as a leaf balancer.\n */\nclass LeafLoadBalancer {\n    constructor(endpoint, channelControlHelper, options) {\n        this.endpoint = endpoint;\n        this.options = options;\n        this.latestState = connectivity_state_1.ConnectivityState.IDLE;\n        const childChannelControlHelper = (0, load_balancer_1.createChildChannelControlHelper)(channelControlHelper, {\n            updateState: (connectivityState, picker, errorMessage) => {\n                this.latestState = connectivityState;\n                this.latestPicker = picker;\n                channelControlHelper.updateState(connectivityState, picker, errorMessage);\n            },\n        });\n        this.pickFirstBalancer = new PickFirstLoadBalancer(childChannelControlHelper);\n        this.latestPicker = new picker_1.QueuePicker(this.pickFirstBalancer);\n    }\n    startConnecting() {\n        this.pickFirstBalancer.updateAddressList([this.endpoint], LEAF_CONFIG, Object.assign(Object.assign({}, this.options), { [REPORT_HEALTH_STATUS_OPTION_NAME]: true }));\n    }\n    /**\n     * Update the endpoint associated with this LeafLoadBalancer to a new\n     * endpoint. Does not trigger connection establishment if a connection\n     * attempt is not already in progress.\n     * @param newEndpoint\n     */\n    updateEndpoint(newEndpoint, newOptions) {\n        this.options = newOptions;\n        this.endpoint = newEndpoint;\n        if (this.latestState !== connectivity_state_1.ConnectivityState.IDLE) {\n            this.startConnecting();\n        }\n    }\n    getConnectivityState() {\n        return this.latestState;\n    }\n    getPicker() {\n        return this.latestPicker;\n    }\n    getEndpoint() {\n        return this.endpoint;\n    }\n    exitIdle() {\n        this.pickFirstBalancer.exitIdle();\n    }\n    destroy() {\n        this.pickFirstBalancer.destroy();\n    }\n}\nexports.LeafLoadBalancer = LeafLoadBalancer;\nfunction setup() {\n    (0, load_balancer_1.registerLoadBalancerType)(TYPE_NAME, PickFirstLoadBalancer, PickFirstLoadBalancingConfig);\n    (0, load_balancer_1.registerDefaultLoadBalancerType)(TYPE_NAME);\n}\n//# sourceMappingURL=load-balancer-pick-first.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/google-gax/node_modules/@grpc/grpc-js/build/src/load-balancer-pick-first.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/google-gax/node_modules/@grpc/grpc-js/build/src/load-balancer-round-robin.js":
/*!***************************************************************************************************!*\
  !*** ./node_modules/google-gax/node_modules/@grpc/grpc-js/build/src/load-balancer-round-robin.js ***!
  \***************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\n/*\n * Copyright 2019 gRPC authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n */\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.RoundRobinLoadBalancer = void 0;\nexports.setup = setup;\nconst load_balancer_1 = __webpack_require__(/*! ./load-balancer */ \"(rsc)/./node_modules/google-gax/node_modules/@grpc/grpc-js/build/src/load-balancer.js\");\nconst connectivity_state_1 = __webpack_require__(/*! ./connectivity-state */ \"(rsc)/./node_modules/google-gax/node_modules/@grpc/grpc-js/build/src/connectivity-state.js\");\nconst picker_1 = __webpack_require__(/*! ./picker */ \"(rsc)/./node_modules/google-gax/node_modules/@grpc/grpc-js/build/src/picker.js\");\nconst logging = __webpack_require__(/*! ./logging */ \"(rsc)/./node_modules/google-gax/node_modules/@grpc/grpc-js/build/src/logging.js\");\nconst constants_1 = __webpack_require__(/*! ./constants */ \"(rsc)/./node_modules/google-gax/node_modules/@grpc/grpc-js/build/src/constants.js\");\nconst subchannel_address_1 = __webpack_require__(/*! ./subchannel-address */ \"(rsc)/./node_modules/google-gax/node_modules/@grpc/grpc-js/build/src/subchannel-address.js\");\nconst load_balancer_pick_first_1 = __webpack_require__(/*! ./load-balancer-pick-first */ \"(rsc)/./node_modules/google-gax/node_modules/@grpc/grpc-js/build/src/load-balancer-pick-first.js\");\nconst TRACER_NAME = 'round_robin';\nfunction trace(text) {\n    logging.trace(constants_1.LogVerbosity.DEBUG, TRACER_NAME, text);\n}\nconst TYPE_NAME = 'round_robin';\nclass RoundRobinLoadBalancingConfig {\n    getLoadBalancerName() {\n        return TYPE_NAME;\n    }\n    constructor() { }\n    toJsonObject() {\n        return {\n            [TYPE_NAME]: {},\n        };\n    }\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    static createFromJson(obj) {\n        return new RoundRobinLoadBalancingConfig();\n    }\n}\nclass RoundRobinPicker {\n    constructor(children, nextIndex = 0) {\n        this.children = children;\n        this.nextIndex = nextIndex;\n    }\n    pick(pickArgs) {\n        const childPicker = this.children[this.nextIndex].picker;\n        this.nextIndex = (this.nextIndex + 1) % this.children.length;\n        return childPicker.pick(pickArgs);\n    }\n    /**\n     * Check what the next subchannel returned would be. Used by the load\n     * balancer implementation to preserve this part of the picker state if\n     * possible when a subchannel connects or disconnects.\n     */\n    peekNextEndpoint() {\n        return this.children[this.nextIndex].endpoint;\n    }\n}\nclass RoundRobinLoadBalancer {\n    constructor(channelControlHelper) {\n        this.channelControlHelper = channelControlHelper;\n        this.children = [];\n        this.currentState = connectivity_state_1.ConnectivityState.IDLE;\n        this.currentReadyPicker = null;\n        this.updatesPaused = false;\n        this.lastError = null;\n        this.childChannelControlHelper = (0, load_balancer_1.createChildChannelControlHelper)(channelControlHelper, {\n            updateState: (connectivityState, picker, errorMessage) => {\n                /* Ensure that name resolution is requested again after active\n                 * connections are dropped. This is more aggressive than necessary to\n                 * accomplish that, so we are counting on resolvers to have\n                 * reasonable rate limits. */\n                if (this.currentState === connectivity_state_1.ConnectivityState.READY && connectivityState !== connectivity_state_1.ConnectivityState.READY) {\n                    this.channelControlHelper.requestReresolution();\n                }\n                if (errorMessage) {\n                    this.lastError = errorMessage;\n                }\n                this.calculateAndUpdateState();\n            },\n        });\n    }\n    countChildrenWithState(state) {\n        return this.children.filter(child => child.getConnectivityState() === state)\n            .length;\n    }\n    calculateAndUpdateState() {\n        if (this.updatesPaused) {\n            return;\n        }\n        if (this.countChildrenWithState(connectivity_state_1.ConnectivityState.READY) > 0) {\n            const readyChildren = this.children.filter(child => child.getConnectivityState() === connectivity_state_1.ConnectivityState.READY);\n            let index = 0;\n            if (this.currentReadyPicker !== null) {\n                const nextPickedEndpoint = this.currentReadyPicker.peekNextEndpoint();\n                index = readyChildren.findIndex(child => (0, subchannel_address_1.endpointEqual)(child.getEndpoint(), nextPickedEndpoint));\n                if (index < 0) {\n                    index = 0;\n                }\n            }\n            this.updateState(connectivity_state_1.ConnectivityState.READY, new RoundRobinPicker(readyChildren.map(child => ({\n                endpoint: child.getEndpoint(),\n                picker: child.getPicker(),\n            })), index), null);\n        }\n        else if (this.countChildrenWithState(connectivity_state_1.ConnectivityState.CONNECTING) > 0) {\n            this.updateState(connectivity_state_1.ConnectivityState.CONNECTING, new picker_1.QueuePicker(this), null);\n        }\n        else if (this.countChildrenWithState(connectivity_state_1.ConnectivityState.TRANSIENT_FAILURE) > 0) {\n            const errorMessage = `round_robin: No connection established. Last error: ${this.lastError}`;\n            this.updateState(connectivity_state_1.ConnectivityState.TRANSIENT_FAILURE, new picker_1.UnavailablePicker({\n                details: errorMessage,\n            }), errorMessage);\n        }\n        else {\n            this.updateState(connectivity_state_1.ConnectivityState.IDLE, new picker_1.QueuePicker(this), null);\n        }\n        /* round_robin should keep all children connected, this is how we do that.\n         * We can't do this more efficiently in the individual child's updateState\n         * callback because that doesn't have a reference to which child the state\n         * change is associated with. */\n        for (const child of this.children) {\n            if (child.getConnectivityState() === connectivity_state_1.ConnectivityState.IDLE) {\n                child.exitIdle();\n            }\n        }\n    }\n    updateState(newState, picker, errorMessage) {\n        trace(connectivity_state_1.ConnectivityState[this.currentState] +\n            ' -> ' +\n            connectivity_state_1.ConnectivityState[newState]);\n        if (newState === connectivity_state_1.ConnectivityState.READY) {\n            this.currentReadyPicker = picker;\n        }\n        else {\n            this.currentReadyPicker = null;\n        }\n        this.currentState = newState;\n        this.channelControlHelper.updateState(newState, picker, errorMessage);\n    }\n    resetSubchannelList() {\n        for (const child of this.children) {\n            child.destroy();\n        }\n    }\n    updateAddressList(endpointList, lbConfig, options) {\n        this.resetSubchannelList();\n        trace('Connect to endpoint list ' + endpointList.map(subchannel_address_1.endpointToString));\n        this.updatesPaused = true;\n        this.children = endpointList.map(endpoint => new load_balancer_pick_first_1.LeafLoadBalancer(endpoint, this.childChannelControlHelper, options));\n        for (const child of this.children) {\n            child.startConnecting();\n        }\n        this.updatesPaused = false;\n        this.calculateAndUpdateState();\n    }\n    exitIdle() {\n        /* The round_robin LB policy is only in the IDLE state if it has no\n         * addresses to try to connect to and it has no picked subchannel.\n         * In that case, there is no meaningful action that can be taken here. */\n    }\n    resetBackoff() {\n        // This LB policy has no backoff to reset\n    }\n    destroy() {\n        this.resetSubchannelList();\n    }\n    getTypeName() {\n        return TYPE_NAME;\n    }\n}\nexports.RoundRobinLoadBalancer = RoundRobinLoadBalancer;\nfunction setup() {\n    (0, load_balancer_1.registerLoadBalancerType)(TYPE_NAME, RoundRobinLoadBalancer, RoundRobinLoadBalancingConfig);\n}\n//# sourceMappingURL=load-balancer-round-robin.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/google-gax/node_modules/@grpc/grpc-js/build/src/load-balancer-round-robin.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/google-gax/node_modules/@grpc/grpc-js/build/src/load-balancer.js":
/*!***************************************************************************************!*\
  !*** ./node_modules/google-gax/node_modules/@grpc/grpc-js/build/src/load-balancer.js ***!
  \***************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\n/*\n * Copyright 2019 gRPC authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n */\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.createChildChannelControlHelper = createChildChannelControlHelper;\nexports.registerLoadBalancerType = registerLoadBalancerType;\nexports.registerDefaultLoadBalancerType = registerDefaultLoadBalancerType;\nexports.createLoadBalancer = createLoadBalancer;\nexports.isLoadBalancerNameRegistered = isLoadBalancerNameRegistered;\nexports.parseLoadBalancingConfig = parseLoadBalancingConfig;\nexports.getDefaultConfig = getDefaultConfig;\nexports.selectLbConfigFromList = selectLbConfigFromList;\nconst logging_1 = __webpack_require__(/*! ./logging */ \"(rsc)/./node_modules/google-gax/node_modules/@grpc/grpc-js/build/src/logging.js\");\nconst constants_1 = __webpack_require__(/*! ./constants */ \"(rsc)/./node_modules/google-gax/node_modules/@grpc/grpc-js/build/src/constants.js\");\n/**\n * Create a child ChannelControlHelper that overrides some methods of the\n * parent while letting others pass through to the parent unmodified. This\n * allows other code to create these children without needing to know about\n * all of the methods to be passed through.\n * @param parent\n * @param overrides\n */\nfunction createChildChannelControlHelper(parent, overrides) {\n    var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k;\n    return {\n        createSubchannel: (_b = (_a = overrides.createSubchannel) === null || _a === void 0 ? void 0 : _a.bind(overrides)) !== null && _b !== void 0 ? _b : parent.createSubchannel.bind(parent),\n        updateState: (_d = (_c = overrides.updateState) === null || _c === void 0 ? void 0 : _c.bind(overrides)) !== null && _d !== void 0 ? _d : parent.updateState.bind(parent),\n        requestReresolution: (_f = (_e = overrides.requestReresolution) === null || _e === void 0 ? void 0 : _e.bind(overrides)) !== null && _f !== void 0 ? _f : parent.requestReresolution.bind(parent),\n        addChannelzChild: (_h = (_g = overrides.addChannelzChild) === null || _g === void 0 ? void 0 : _g.bind(overrides)) !== null && _h !== void 0 ? _h : parent.addChannelzChild.bind(parent),\n        removeChannelzChild: (_k = (_j = overrides.removeChannelzChild) === null || _j === void 0 ? void 0 : _j.bind(overrides)) !== null && _k !== void 0 ? _k : parent.removeChannelzChild.bind(parent),\n    };\n}\nconst registeredLoadBalancerTypes = {};\nlet defaultLoadBalancerType = null;\nfunction registerLoadBalancerType(typeName, loadBalancerType, loadBalancingConfigType) {\n    registeredLoadBalancerTypes[typeName] = {\n        LoadBalancer: loadBalancerType,\n        LoadBalancingConfig: loadBalancingConfigType,\n    };\n}\nfunction registerDefaultLoadBalancerType(typeName) {\n    defaultLoadBalancerType = typeName;\n}\nfunction createLoadBalancer(config, channelControlHelper) {\n    const typeName = config.getLoadBalancerName();\n    if (typeName in registeredLoadBalancerTypes) {\n        return new registeredLoadBalancerTypes[typeName].LoadBalancer(channelControlHelper);\n    }\n    else {\n        return null;\n    }\n}\nfunction isLoadBalancerNameRegistered(typeName) {\n    return typeName in registeredLoadBalancerTypes;\n}\nfunction parseLoadBalancingConfig(rawConfig) {\n    const keys = Object.keys(rawConfig);\n    if (keys.length !== 1) {\n        throw new Error('Provided load balancing config has multiple conflicting entries');\n    }\n    const typeName = keys[0];\n    if (typeName in registeredLoadBalancerTypes) {\n        try {\n            return registeredLoadBalancerTypes[typeName].LoadBalancingConfig.createFromJson(rawConfig[typeName]);\n        }\n        catch (e) {\n            throw new Error(`${typeName}: ${e.message}`);\n        }\n    }\n    else {\n        throw new Error(`Unrecognized load balancing config name ${typeName}`);\n    }\n}\nfunction getDefaultConfig() {\n    if (!defaultLoadBalancerType) {\n        throw new Error('No default load balancer type registered');\n    }\n    return new registeredLoadBalancerTypes[defaultLoadBalancerType].LoadBalancingConfig();\n}\nfunction selectLbConfigFromList(configs, fallbackTodefault = false) {\n    for (const config of configs) {\n        try {\n            return parseLoadBalancingConfig(config);\n        }\n        catch (e) {\n            (0, logging_1.log)(constants_1.LogVerbosity.DEBUG, 'Config parsing failed with error', e.message);\n            continue;\n        }\n    }\n    if (fallbackTodefault) {\n        if (defaultLoadBalancerType) {\n            return new registeredLoadBalancerTypes[defaultLoadBalancerType].LoadBalancingConfig();\n        }\n        else {\n            return null;\n        }\n    }\n    else {\n        return null;\n    }\n}\n//# sourceMappingURL=load-balancer.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/google-gax/node_modules/@grpc/grpc-js/build/src/load-balancer.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/google-gax/node_modules/@grpc/grpc-js/build/src/load-balancing-call.js":
/*!*********************************************************************************************!*\
  !*** ./node_modules/google-gax/node_modules/@grpc/grpc-js/build/src/load-balancing-call.js ***!
  \*********************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\n/*\n * Copyright 2022 gRPC authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n */\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.LoadBalancingCall = void 0;\nconst connectivity_state_1 = __webpack_require__(/*! ./connectivity-state */ \"(rsc)/./node_modules/google-gax/node_modules/@grpc/grpc-js/build/src/connectivity-state.js\");\nconst constants_1 = __webpack_require__(/*! ./constants */ \"(rsc)/./node_modules/google-gax/node_modules/@grpc/grpc-js/build/src/constants.js\");\nconst deadline_1 = __webpack_require__(/*! ./deadline */ \"(rsc)/./node_modules/google-gax/node_modules/@grpc/grpc-js/build/src/deadline.js\");\nconst metadata_1 = __webpack_require__(/*! ./metadata */ \"(rsc)/./node_modules/google-gax/node_modules/@grpc/grpc-js/build/src/metadata.js\");\nconst picker_1 = __webpack_require__(/*! ./picker */ \"(rsc)/./node_modules/google-gax/node_modules/@grpc/grpc-js/build/src/picker.js\");\nconst uri_parser_1 = __webpack_require__(/*! ./uri-parser */ \"(rsc)/./node_modules/google-gax/node_modules/@grpc/grpc-js/build/src/uri-parser.js\");\nconst logging = __webpack_require__(/*! ./logging */ \"(rsc)/./node_modules/google-gax/node_modules/@grpc/grpc-js/build/src/logging.js\");\nconst control_plane_status_1 = __webpack_require__(/*! ./control-plane-status */ \"(rsc)/./node_modules/google-gax/node_modules/@grpc/grpc-js/build/src/control-plane-status.js\");\nconst http2 = __webpack_require__(/*! http2 */ \"http2\");\nconst TRACER_NAME = 'load_balancing_call';\nclass LoadBalancingCall {\n    constructor(channel, callConfig, methodName, host, credentials, deadline, callNumber) {\n        var _a, _b;\n        this.channel = channel;\n        this.callConfig = callConfig;\n        this.methodName = methodName;\n        this.host = host;\n        this.credentials = credentials;\n        this.deadline = deadline;\n        this.callNumber = callNumber;\n        this.child = null;\n        this.readPending = false;\n        this.pendingMessage = null;\n        this.pendingHalfClose = false;\n        this.ended = false;\n        this.metadata = null;\n        this.listener = null;\n        this.onCallEnded = null;\n        this.childStartTime = null;\n        const splitPath = this.methodName.split('/');\n        let serviceName = '';\n        /* The standard path format is \"/{serviceName}/{methodName}\", so if we split\n         * by '/', the first item should be empty and the second should be the\n         * service name */\n        if (splitPath.length >= 2) {\n            serviceName = splitPath[1];\n        }\n        const hostname = (_b = (_a = (0, uri_parser_1.splitHostPort)(this.host)) === null || _a === void 0 ? void 0 : _a.host) !== null && _b !== void 0 ? _b : 'localhost';\n        /* Currently, call credentials are only allowed on HTTPS connections, so we\n         * can assume that the scheme is \"https\" */\n        this.serviceUrl = `https://${hostname}/${serviceName}`;\n        this.startTime = new Date();\n    }\n    getDeadlineInfo() {\n        var _a, _b;\n        const deadlineInfo = [];\n        if (this.childStartTime) {\n            if (this.childStartTime > this.startTime) {\n                if ((_a = this.metadata) === null || _a === void 0 ? void 0 : _a.getOptions().waitForReady) {\n                    deadlineInfo.push('wait_for_ready');\n                }\n                deadlineInfo.push(`LB pick: ${(0, deadline_1.formatDateDifference)(this.startTime, this.childStartTime)}`);\n            }\n            deadlineInfo.push(...this.child.getDeadlineInfo());\n            return deadlineInfo;\n        }\n        else {\n            if ((_b = this.metadata) === null || _b === void 0 ? void 0 : _b.getOptions().waitForReady) {\n                deadlineInfo.push('wait_for_ready');\n            }\n            deadlineInfo.push('Waiting for LB pick');\n        }\n        return deadlineInfo;\n    }\n    trace(text) {\n        logging.trace(constants_1.LogVerbosity.DEBUG, TRACER_NAME, '[' + this.callNumber + '] ' + text);\n    }\n    outputStatus(status, progress) {\n        var _a, _b;\n        if (!this.ended) {\n            this.ended = true;\n            this.trace('ended with status: code=' +\n                status.code +\n                ' details=\"' +\n                status.details +\n                '\" start time=' +\n                this.startTime.toISOString());\n            const finalStatus = Object.assign(Object.assign({}, status), { progress });\n            (_a = this.listener) === null || _a === void 0 ? void 0 : _a.onReceiveStatus(finalStatus);\n            (_b = this.onCallEnded) === null || _b === void 0 ? void 0 : _b.call(this, finalStatus.code);\n        }\n    }\n    doPick() {\n        var _a, _b;\n        if (this.ended) {\n            return;\n        }\n        if (!this.metadata) {\n            throw new Error('doPick called before start');\n        }\n        this.trace('Pick called');\n        const finalMetadata = this.metadata.clone();\n        const pickResult = this.channel.doPick(finalMetadata, this.callConfig.pickInformation);\n        const subchannelString = pickResult.subchannel\n            ? '(' +\n                pickResult.subchannel.getChannelzRef().id +\n                ') ' +\n                pickResult.subchannel.getAddress()\n            : '' + pickResult.subchannel;\n        this.trace('Pick result: ' +\n            picker_1.PickResultType[pickResult.pickResultType] +\n            ' subchannel: ' +\n            subchannelString +\n            ' status: ' +\n            ((_a = pickResult.status) === null || _a === void 0 ? void 0 : _a.code) +\n            ' ' +\n            ((_b = pickResult.status) === null || _b === void 0 ? void 0 : _b.details));\n        switch (pickResult.pickResultType) {\n            case picker_1.PickResultType.COMPLETE:\n                const combinedCallCredentials = this.credentials.compose(pickResult.subchannel.getCallCredentials());\n                combinedCallCredentials\n                    .generateMetadata({ method_name: this.methodName, service_url: this.serviceUrl })\n                    .then(credsMetadata => {\n                    var _a;\n                    /* If this call was cancelled (e.g. by the deadline) before\n                     * metadata generation finished, we shouldn't do anything with\n                     * it. */\n                    if (this.ended) {\n                        this.trace('Credentials metadata generation finished after call ended');\n                        return;\n                    }\n                    finalMetadata.merge(credsMetadata);\n                    if (finalMetadata.get('authorization').length > 1) {\n                        this.outputStatus({\n                            code: constants_1.Status.INTERNAL,\n                            details: '\"authorization\" metadata cannot have multiple values',\n                            metadata: new metadata_1.Metadata(),\n                        }, 'PROCESSED');\n                    }\n                    if (pickResult.subchannel.getConnectivityState() !==\n                        connectivity_state_1.ConnectivityState.READY) {\n                        this.trace('Picked subchannel ' +\n                            subchannelString +\n                            ' has state ' +\n                            connectivity_state_1.ConnectivityState[pickResult.subchannel.getConnectivityState()] +\n                            ' after getting credentials metadata. Retrying pick');\n                        this.doPick();\n                        return;\n                    }\n                    if (this.deadline !== Infinity) {\n                        finalMetadata.set('grpc-timeout', (0, deadline_1.getDeadlineTimeoutString)(this.deadline));\n                    }\n                    try {\n                        this.child = pickResult\n                            .subchannel.getRealSubchannel()\n                            .createCall(finalMetadata, this.host, this.methodName, {\n                            onReceiveMetadata: metadata => {\n                                this.trace('Received metadata');\n                                this.listener.onReceiveMetadata(metadata);\n                            },\n                            onReceiveMessage: message => {\n                                this.trace('Received message');\n                                this.listener.onReceiveMessage(message);\n                            },\n                            onReceiveStatus: status => {\n                                this.trace('Received status');\n                                if (status.rstCode ===\n                                    http2.constants.NGHTTP2_REFUSED_STREAM) {\n                                    this.outputStatus(status, 'REFUSED');\n                                }\n                                else {\n                                    this.outputStatus(status, 'PROCESSED');\n                                }\n                            },\n                        });\n                        this.childStartTime = new Date();\n                    }\n                    catch (error) {\n                        this.trace('Failed to start call on picked subchannel ' +\n                            subchannelString +\n                            ' with error ' +\n                            error.message);\n                        this.outputStatus({\n                            code: constants_1.Status.INTERNAL,\n                            details: 'Failed to start HTTP/2 stream with error ' +\n                                error.message,\n                            metadata: new metadata_1.Metadata(),\n                        }, 'NOT_STARTED');\n                        return;\n                    }\n                    (_a = pickResult.onCallStarted) === null || _a === void 0 ? void 0 : _a.call(pickResult);\n                    this.onCallEnded = pickResult.onCallEnded;\n                    this.trace('Created child call [' + this.child.getCallNumber() + ']');\n                    if (this.readPending) {\n                        this.child.startRead();\n                    }\n                    if (this.pendingMessage) {\n                        this.child.sendMessageWithContext(this.pendingMessage.context, this.pendingMessage.message);\n                    }\n                    if (this.pendingHalfClose) {\n                        this.child.halfClose();\n                    }\n                }, (error) => {\n                    // We assume the error code isn't 0 (Status.OK)\n                    const { code, details } = (0, control_plane_status_1.restrictControlPlaneStatusCode)(typeof error.code === 'number' ? error.code : constants_1.Status.UNKNOWN, `Getting metadata from plugin failed with error: ${error.message}`);\n                    this.outputStatus({\n                        code: code,\n                        details: details,\n                        metadata: new metadata_1.Metadata(),\n                    }, 'PROCESSED');\n                });\n                break;\n            case picker_1.PickResultType.DROP:\n                const { code, details } = (0, control_plane_status_1.restrictControlPlaneStatusCode)(pickResult.status.code, pickResult.status.details);\n                setImmediate(() => {\n                    this.outputStatus({ code, details, metadata: pickResult.status.metadata }, 'DROP');\n                });\n                break;\n            case picker_1.PickResultType.TRANSIENT_FAILURE:\n                if (this.metadata.getOptions().waitForReady) {\n                    this.channel.queueCallForPick(this);\n                }\n                else {\n                    const { code, details } = (0, control_plane_status_1.restrictControlPlaneStatusCode)(pickResult.status.code, pickResult.status.details);\n                    setImmediate(() => {\n                        this.outputStatus({ code, details, metadata: pickResult.status.metadata }, 'PROCESSED');\n                    });\n                }\n                break;\n            case picker_1.PickResultType.QUEUE:\n                this.channel.queueCallForPick(this);\n        }\n    }\n    cancelWithStatus(status, details) {\n        var _a;\n        this.trace('cancelWithStatus code: ' + status + ' details: \"' + details + '\"');\n        (_a = this.child) === null || _a === void 0 ? void 0 : _a.cancelWithStatus(status, details);\n        this.outputStatus({ code: status, details: details, metadata: new metadata_1.Metadata() }, 'PROCESSED');\n    }\n    getPeer() {\n        var _a, _b;\n        return (_b = (_a = this.child) === null || _a === void 0 ? void 0 : _a.getPeer()) !== null && _b !== void 0 ? _b : this.channel.getTarget();\n    }\n    start(metadata, listener) {\n        this.trace('start called');\n        this.listener = listener;\n        this.metadata = metadata;\n        this.doPick();\n    }\n    sendMessageWithContext(context, message) {\n        this.trace('write() called with message of length ' + message.length);\n        if (this.child) {\n            this.child.sendMessageWithContext(context, message);\n        }\n        else {\n            this.pendingMessage = { context, message };\n        }\n    }\n    startRead() {\n        this.trace('startRead called');\n        if (this.child) {\n            this.child.startRead();\n        }\n        else {\n            this.readPending = true;\n        }\n    }\n    halfClose() {\n        this.trace('halfClose called');\n        if (this.child) {\n            this.child.halfClose();\n        }\n        else {\n            this.pendingHalfClose = true;\n        }\n    }\n    setCredentials(credentials) {\n        throw new Error('Method not implemented.');\n    }\n    getCallNumber() {\n        return this.callNumber;\n    }\n}\nexports.LoadBalancingCall = LoadBalancingCall;\n//# sourceMappingURL=load-balancing-call.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/google-gax/node_modules/@grpc/grpc-js/build/src/load-balancing-call.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/google-gax/node_modules/@grpc/grpc-js/build/src/logging.js":
/*!*********************************************************************************!*\
  !*** ./node_modules/google-gax/node_modules/@grpc/grpc-js/build/src/logging.js ***!
  \*********************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\n/*\n * Copyright 2019 gRPC authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n */\nvar _a, _b, _c, _d;\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.log = exports.setLoggerVerbosity = exports.setLogger = exports.getLogger = void 0;\nexports.trace = trace;\nexports.isTracerEnabled = isTracerEnabled;\nconst constants_1 = __webpack_require__(/*! ./constants */ \"(rsc)/./node_modules/google-gax/node_modules/@grpc/grpc-js/build/src/constants.js\");\nconst process_1 = __webpack_require__(/*! process */ \"process\");\nconst clientVersion = (__webpack_require__(/*! ../../package.json */ \"(rsc)/./node_modules/google-gax/node_modules/@grpc/grpc-js/package.json\").version);\nconst DEFAULT_LOGGER = {\n    error: (message, ...optionalParams) => {\n        console.error('E ' + message, ...optionalParams);\n    },\n    info: (message, ...optionalParams) => {\n        console.error('I ' + message, ...optionalParams);\n    },\n    debug: (message, ...optionalParams) => {\n        console.error('D ' + message, ...optionalParams);\n    },\n};\nlet _logger = DEFAULT_LOGGER;\nlet _logVerbosity = constants_1.LogVerbosity.ERROR;\nconst verbosityString = (_b = (_a = process.env.GRPC_NODE_VERBOSITY) !== null && _a !== void 0 ? _a : process.env.GRPC_VERBOSITY) !== null && _b !== void 0 ? _b : '';\nswitch (verbosityString.toUpperCase()) {\n    case 'DEBUG':\n        _logVerbosity = constants_1.LogVerbosity.DEBUG;\n        break;\n    case 'INFO':\n        _logVerbosity = constants_1.LogVerbosity.INFO;\n        break;\n    case 'ERROR':\n        _logVerbosity = constants_1.LogVerbosity.ERROR;\n        break;\n    case 'NONE':\n        _logVerbosity = constants_1.LogVerbosity.NONE;\n        break;\n    default:\n    // Ignore any other values\n}\nconst getLogger = () => {\n    return _logger;\n};\nexports.getLogger = getLogger;\nconst setLogger = (logger) => {\n    _logger = logger;\n};\nexports.setLogger = setLogger;\nconst setLoggerVerbosity = (verbosity) => {\n    _logVerbosity = verbosity;\n};\nexports.setLoggerVerbosity = setLoggerVerbosity;\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nconst log = (severity, ...args) => {\n    let logFunction;\n    if (severity >= _logVerbosity) {\n        switch (severity) {\n            case constants_1.LogVerbosity.DEBUG:\n                logFunction = _logger.debug;\n                break;\n            case constants_1.LogVerbosity.INFO:\n                logFunction = _logger.info;\n                break;\n            case constants_1.LogVerbosity.ERROR:\n                logFunction = _logger.error;\n                break;\n        }\n        /* Fall back to _logger.error when other methods are not available for\n         * compatiblity with older behavior that always logged to _logger.error */\n        if (!logFunction) {\n            logFunction = _logger.error;\n        }\n        if (logFunction) {\n            logFunction.bind(_logger)(...args);\n        }\n    }\n};\nexports.log = log;\nconst tracersString = (_d = (_c = process.env.GRPC_NODE_TRACE) !== null && _c !== void 0 ? _c : process.env.GRPC_TRACE) !== null && _d !== void 0 ? _d : '';\nconst enabledTracers = new Set();\nconst disabledTracers = new Set();\nfor (const tracerName of tracersString.split(',')) {\n    if (tracerName.startsWith('-')) {\n        disabledTracers.add(tracerName.substring(1));\n    }\n    else {\n        enabledTracers.add(tracerName);\n    }\n}\nconst allEnabled = enabledTracers.has('all');\nfunction trace(severity, tracer, text) {\n    if (isTracerEnabled(tracer)) {\n        (0, exports.log)(severity, new Date().toISOString() +\n            ' | v' +\n            clientVersion +\n            ' ' +\n            process_1.pid +\n            ' | ' +\n            tracer +\n            ' | ' +\n            text);\n    }\n}\nfunction isTracerEnabled(tracer) {\n    return (!disabledTracers.has(tracer) && (allEnabled || enabledTracers.has(tracer)));\n}\n//# sourceMappingURL=logging.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvZ29vZ2xlLWdheC9ub2RlX21vZHVsZXMvQGdycGMvZ3JwYy1qcy9idWlsZC9zcmMvbG9nZ2luZy5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSw4Q0FBNkMsRUFBRSxhQUFhLEVBQUM7QUFDN0QsV0FBVyxHQUFHLDBCQUEwQixHQUFHLGlCQUFpQixHQUFHLGlCQUFpQjtBQUNoRixhQUFhO0FBQ2IsdUJBQXVCO0FBQ3ZCLG9CQUFvQixtQkFBTyxDQUFDLHNHQUFhO0FBQ3pDLGtCQUFrQixtQkFBTyxDQUFDLHdCQUFTO0FBQ25DLHNCQUFzQixrSUFBcUM7QUFDM0Q7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsaUJBQWlCO0FBQ2pCO0FBQ0E7QUFDQTtBQUNBLGlCQUFpQjtBQUNqQjtBQUNBO0FBQ0E7QUFDQSwwQkFBMEI7QUFDMUI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxXQUFXO0FBQ1g7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsInNvdXJjZXMiOlsiL1VzZXJzL2JhZy15b3NlYi9EZXNrdG9wL+GEkeGFqeGEh+GFteGEi+GFoS9oYWNrYXRob25fdGVhbS9teS1hcHAvbm9kZV9tb2R1bGVzL2dvb2dsZS1nYXgvbm9kZV9tb2R1bGVzL0BncnBjL2dycGMtanMvYnVpbGQvc3JjL2xvZ2dpbmcuanMiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG4vKlxuICogQ29weXJpZ2h0IDIwMTkgZ1JQQyBhdXRob3JzLlxuICpcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbiAqXG4gKiAgICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4gKlxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbiAqXG4gKi9cbnZhciBfYSwgX2IsIF9jLCBfZDtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMubG9nID0gZXhwb3J0cy5zZXRMb2dnZXJWZXJib3NpdHkgPSBleHBvcnRzLnNldExvZ2dlciA9IGV4cG9ydHMuZ2V0TG9nZ2VyID0gdm9pZCAwO1xuZXhwb3J0cy50cmFjZSA9IHRyYWNlO1xuZXhwb3J0cy5pc1RyYWNlckVuYWJsZWQgPSBpc1RyYWNlckVuYWJsZWQ7XG5jb25zdCBjb25zdGFudHNfMSA9IHJlcXVpcmUoXCIuL2NvbnN0YW50c1wiKTtcbmNvbnN0IHByb2Nlc3NfMSA9IHJlcXVpcmUoXCJwcm9jZXNzXCIpO1xuY29uc3QgY2xpZW50VmVyc2lvbiA9IHJlcXVpcmUoJy4uLy4uL3BhY2thZ2UuanNvbicpLnZlcnNpb247XG5jb25zdCBERUZBVUxUX0xPR0dFUiA9IHtcbiAgICBlcnJvcjogKG1lc3NhZ2UsIC4uLm9wdGlvbmFsUGFyYW1zKSA9PiB7XG4gICAgICAgIGNvbnNvbGUuZXJyb3IoJ0UgJyArIG1lc3NhZ2UsIC4uLm9wdGlvbmFsUGFyYW1zKTtcbiAgICB9LFxuICAgIGluZm86IChtZXNzYWdlLCAuLi5vcHRpb25hbFBhcmFtcykgPT4ge1xuICAgICAgICBjb25zb2xlLmVycm9yKCdJICcgKyBtZXNzYWdlLCAuLi5vcHRpb25hbFBhcmFtcyk7XG4gICAgfSxcbiAgICBkZWJ1ZzogKG1lc3NhZ2UsIC4uLm9wdGlvbmFsUGFyYW1zKSA9PiB7XG4gICAgICAgIGNvbnNvbGUuZXJyb3IoJ0QgJyArIG1lc3NhZ2UsIC4uLm9wdGlvbmFsUGFyYW1zKTtcbiAgICB9LFxufTtcbmxldCBfbG9nZ2VyID0gREVGQVVMVF9MT0dHRVI7XG5sZXQgX2xvZ1ZlcmJvc2l0eSA9IGNvbnN0YW50c18xLkxvZ1ZlcmJvc2l0eS5FUlJPUjtcbmNvbnN0IHZlcmJvc2l0eVN0cmluZyA9IChfYiA9IChfYSA9IHByb2Nlc3MuZW52LkdSUENfTk9ERV9WRVJCT1NJVFkpICE9PSBudWxsICYmIF9hICE9PSB2b2lkIDAgPyBfYSA6IHByb2Nlc3MuZW52LkdSUENfVkVSQk9TSVRZKSAhPT0gbnVsbCAmJiBfYiAhPT0gdm9pZCAwID8gX2IgOiAnJztcbnN3aXRjaCAodmVyYm9zaXR5U3RyaW5nLnRvVXBwZXJDYXNlKCkpIHtcbiAgICBjYXNlICdERUJVRyc6XG4gICAgICAgIF9sb2dWZXJib3NpdHkgPSBjb25zdGFudHNfMS5Mb2dWZXJib3NpdHkuREVCVUc7XG4gICAgICAgIGJyZWFrO1xuICAgIGNhc2UgJ0lORk8nOlxuICAgICAgICBfbG9nVmVyYm9zaXR5ID0gY29uc3RhbnRzXzEuTG9nVmVyYm9zaXR5LklORk87XG4gICAgICAgIGJyZWFrO1xuICAgIGNhc2UgJ0VSUk9SJzpcbiAgICAgICAgX2xvZ1ZlcmJvc2l0eSA9IGNvbnN0YW50c18xLkxvZ1ZlcmJvc2l0eS5FUlJPUjtcbiAgICAgICAgYnJlYWs7XG4gICAgY2FzZSAnTk9ORSc6XG4gICAgICAgIF9sb2dWZXJib3NpdHkgPSBjb25zdGFudHNfMS5Mb2dWZXJib3NpdHkuTk9ORTtcbiAgICAgICAgYnJlYWs7XG4gICAgZGVmYXVsdDpcbiAgICAvLyBJZ25vcmUgYW55IG90aGVyIHZhbHVlc1xufVxuY29uc3QgZ2V0TG9nZ2VyID0gKCkgPT4ge1xuICAgIHJldHVybiBfbG9nZ2VyO1xufTtcbmV4cG9ydHMuZ2V0TG9nZ2VyID0gZ2V0TG9nZ2VyO1xuY29uc3Qgc2V0TG9nZ2VyID0gKGxvZ2dlcikgPT4ge1xuICAgIF9sb2dnZXIgPSBsb2dnZXI7XG59O1xuZXhwb3J0cy5zZXRMb2dnZXIgPSBzZXRMb2dnZXI7XG5jb25zdCBzZXRMb2dnZXJWZXJib3NpdHkgPSAodmVyYm9zaXR5KSA9PiB7XG4gICAgX2xvZ1ZlcmJvc2l0eSA9IHZlcmJvc2l0eTtcbn07XG5leHBvcnRzLnNldExvZ2dlclZlcmJvc2l0eSA9IHNldExvZ2dlclZlcmJvc2l0eTtcbi8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tZXhwbGljaXQtYW55XG5jb25zdCBsb2cgPSAoc2V2ZXJpdHksIC4uLmFyZ3MpID0+IHtcbiAgICBsZXQgbG9nRnVuY3Rpb247XG4gICAgaWYgKHNldmVyaXR5ID49IF9sb2dWZXJib3NpdHkpIHtcbiAgICAgICAgc3dpdGNoIChzZXZlcml0eSkge1xuICAgICAgICAgICAgY2FzZSBjb25zdGFudHNfMS5Mb2dWZXJib3NpdHkuREVCVUc6XG4gICAgICAgICAgICAgICAgbG9nRnVuY3Rpb24gPSBfbG9nZ2VyLmRlYnVnO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgY2FzZSBjb25zdGFudHNfMS5Mb2dWZXJib3NpdHkuSU5GTzpcbiAgICAgICAgICAgICAgICBsb2dGdW5jdGlvbiA9IF9sb2dnZXIuaW5mbztcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2UgY29uc3RhbnRzXzEuTG9nVmVyYm9zaXR5LkVSUk9SOlxuICAgICAgICAgICAgICAgIGxvZ0Z1bmN0aW9uID0gX2xvZ2dlci5lcnJvcjtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgICAgICAvKiBGYWxsIGJhY2sgdG8gX2xvZ2dlci5lcnJvciB3aGVuIG90aGVyIG1ldGhvZHMgYXJlIG5vdCBhdmFpbGFibGUgZm9yXG4gICAgICAgICAqIGNvbXBhdGlibGl0eSB3aXRoIG9sZGVyIGJlaGF2aW9yIHRoYXQgYWx3YXlzIGxvZ2dlZCB0byBfbG9nZ2VyLmVycm9yICovXG4gICAgICAgIGlmICghbG9nRnVuY3Rpb24pIHtcbiAgICAgICAgICAgIGxvZ0Z1bmN0aW9uID0gX2xvZ2dlci5lcnJvcjtcbiAgICAgICAgfVxuICAgICAgICBpZiAobG9nRnVuY3Rpb24pIHtcbiAgICAgICAgICAgIGxvZ0Z1bmN0aW9uLmJpbmQoX2xvZ2dlcikoLi4uYXJncyk7XG4gICAgICAgIH1cbiAgICB9XG59O1xuZXhwb3J0cy5sb2cgPSBsb2c7XG5jb25zdCB0cmFjZXJzU3RyaW5nID0gKF9kID0gKF9jID0gcHJvY2Vzcy5lbnYuR1JQQ19OT0RFX1RSQUNFKSAhPT0gbnVsbCAmJiBfYyAhPT0gdm9pZCAwID8gX2MgOiBwcm9jZXNzLmVudi5HUlBDX1RSQUNFKSAhPT0gbnVsbCAmJiBfZCAhPT0gdm9pZCAwID8gX2QgOiAnJztcbmNvbnN0IGVuYWJsZWRUcmFjZXJzID0gbmV3IFNldCgpO1xuY29uc3QgZGlzYWJsZWRUcmFjZXJzID0gbmV3IFNldCgpO1xuZm9yIChjb25zdCB0cmFjZXJOYW1lIG9mIHRyYWNlcnNTdHJpbmcuc3BsaXQoJywnKSkge1xuICAgIGlmICh0cmFjZXJOYW1lLnN0YXJ0c1dpdGgoJy0nKSkge1xuICAgICAgICBkaXNhYmxlZFRyYWNlcnMuYWRkKHRyYWNlck5hbWUuc3Vic3RyaW5nKDEpKTtcbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICAgIGVuYWJsZWRUcmFjZXJzLmFkZCh0cmFjZXJOYW1lKTtcbiAgICB9XG59XG5jb25zdCBhbGxFbmFibGVkID0gZW5hYmxlZFRyYWNlcnMuaGFzKCdhbGwnKTtcbmZ1bmN0aW9uIHRyYWNlKHNldmVyaXR5LCB0cmFjZXIsIHRleHQpIHtcbiAgICBpZiAoaXNUcmFjZXJFbmFibGVkKHRyYWNlcikpIHtcbiAgICAgICAgKDAsIGV4cG9ydHMubG9nKShzZXZlcml0eSwgbmV3IERhdGUoKS50b0lTT1N0cmluZygpICtcbiAgICAgICAgICAgICcgfCB2JyArXG4gICAgICAgICAgICBjbGllbnRWZXJzaW9uICtcbiAgICAgICAgICAgICcgJyArXG4gICAgICAgICAgICBwcm9jZXNzXzEucGlkICtcbiAgICAgICAgICAgICcgfCAnICtcbiAgICAgICAgICAgIHRyYWNlciArXG4gICAgICAgICAgICAnIHwgJyArXG4gICAgICAgICAgICB0ZXh0KTtcbiAgICB9XG59XG5mdW5jdGlvbiBpc1RyYWNlckVuYWJsZWQodHJhY2VyKSB7XG4gICAgcmV0dXJuICghZGlzYWJsZWRUcmFjZXJzLmhhcyh0cmFjZXIpICYmIChhbGxFbmFibGVkIHx8IGVuYWJsZWRUcmFjZXJzLmhhcyh0cmFjZXIpKSk7XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1sb2dnaW5nLmpzLm1hcCJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/google-gax/node_modules/@grpc/grpc-js/build/src/logging.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/google-gax/node_modules/@grpc/grpc-js/build/src/make-client.js":
/*!*************************************************************************************!*\
  !*** ./node_modules/google-gax/node_modules/@grpc/grpc-js/build/src/make-client.js ***!
  \*************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\n/*\n * Copyright 2019 gRPC authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n */\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.makeClientConstructor = makeClientConstructor;\nexports.loadPackageDefinition = loadPackageDefinition;\nconst client_1 = __webpack_require__(/*! ./client */ \"(rsc)/./node_modules/google-gax/node_modules/@grpc/grpc-js/build/src/client.js\");\n/**\n * Map with short names for each of the requester maker functions. Used in\n * makeClientConstructor\n * @private\n */\nconst requesterFuncs = {\n    unary: client_1.Client.prototype.makeUnaryRequest,\n    server_stream: client_1.Client.prototype.makeServerStreamRequest,\n    client_stream: client_1.Client.prototype.makeClientStreamRequest,\n    bidi: client_1.Client.prototype.makeBidiStreamRequest,\n};\n/**\n * Returns true, if given key is included in the blacklisted\n * keys.\n * @param key key for check, string.\n */\nfunction isPrototypePolluted(key) {\n    return ['__proto__', 'prototype', 'constructor'].includes(key);\n}\n/**\n * Creates a constructor for a client with the given methods, as specified in\n * the methods argument. The resulting class will have an instance method for\n * each method in the service, which is a partial application of one of the\n * [Client]{@link grpc.Client} request methods, depending on `requestSerialize`\n * and `responseSerialize`, with the `method`, `serialize`, and `deserialize`\n * arguments predefined.\n * @param methods An object mapping method names to\n *     method attributes\n * @param serviceName The fully qualified name of the service\n * @param classOptions An options object.\n * @return New client constructor, which is a subclass of\n *     {@link grpc.Client}, and has the same arguments as that constructor.\n */\nfunction makeClientConstructor(methods, serviceName, classOptions) {\n    if (!classOptions) {\n        classOptions = {};\n    }\n    class ServiceClientImpl extends client_1.Client {\n    }\n    Object.keys(methods).forEach(name => {\n        if (isPrototypePolluted(name)) {\n            return;\n        }\n        const attrs = methods[name];\n        let methodType;\n        // TODO(murgatroid99): Verify that we don't need this anymore\n        if (typeof name === 'string' && name.charAt(0) === '$') {\n            throw new Error('Method names cannot start with $');\n        }\n        if (attrs.requestStream) {\n            if (attrs.responseStream) {\n                methodType = 'bidi';\n            }\n            else {\n                methodType = 'client_stream';\n            }\n        }\n        else {\n            if (attrs.responseStream) {\n                methodType = 'server_stream';\n            }\n            else {\n                methodType = 'unary';\n            }\n        }\n        const serialize = attrs.requestSerialize;\n        const deserialize = attrs.responseDeserialize;\n        const methodFunc = partial(requesterFuncs[methodType], attrs.path, serialize, deserialize);\n        ServiceClientImpl.prototype[name] = methodFunc;\n        // Associate all provided attributes with the method\n        Object.assign(ServiceClientImpl.prototype[name], attrs);\n        if (attrs.originalName && !isPrototypePolluted(attrs.originalName)) {\n            ServiceClientImpl.prototype[attrs.originalName] =\n                ServiceClientImpl.prototype[name];\n        }\n    });\n    ServiceClientImpl.service = methods;\n    ServiceClientImpl.serviceName = serviceName;\n    return ServiceClientImpl;\n}\nfunction partial(fn, path, serialize, deserialize) {\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    return function (...args) {\n        return fn.call(this, path, serialize, deserialize, ...args);\n    };\n}\nfunction isProtobufTypeDefinition(obj) {\n    return 'format' in obj;\n}\n/**\n * Load a gRPC package definition as a gRPC object hierarchy.\n * @param packageDef The package definition object.\n * @return The resulting gRPC object.\n */\nfunction loadPackageDefinition(packageDef) {\n    const result = {};\n    for (const serviceFqn in packageDef) {\n        if (Object.prototype.hasOwnProperty.call(packageDef, serviceFqn)) {\n            const service = packageDef[serviceFqn];\n            const nameComponents = serviceFqn.split('.');\n            if (nameComponents.some((comp) => isPrototypePolluted(comp))) {\n                continue;\n            }\n            const serviceName = nameComponents[nameComponents.length - 1];\n            let current = result;\n            for (const packageName of nameComponents.slice(0, -1)) {\n                if (!current[packageName]) {\n                    current[packageName] = {};\n                }\n                current = current[packageName];\n            }\n            if (isProtobufTypeDefinition(service)) {\n                current[serviceName] = service;\n            }\n            else {\n                current[serviceName] = makeClientConstructor(service, serviceName, {});\n            }\n        }\n    }\n    return result;\n}\n//# sourceMappingURL=make-client.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/google-gax/node_modules/@grpc/grpc-js/build/src/make-client.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/google-gax/node_modules/@grpc/grpc-js/build/src/metadata.js":
/*!**********************************************************************************!*\
  !*** ./node_modules/google-gax/node_modules/@grpc/grpc-js/build/src/metadata.js ***!
  \**********************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\n/*\n * Copyright 2019 gRPC authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n */\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.Metadata = void 0;\nconst logging_1 = __webpack_require__(/*! ./logging */ \"(rsc)/./node_modules/google-gax/node_modules/@grpc/grpc-js/build/src/logging.js\");\nconst constants_1 = __webpack_require__(/*! ./constants */ \"(rsc)/./node_modules/google-gax/node_modules/@grpc/grpc-js/build/src/constants.js\");\nconst error_1 = __webpack_require__(/*! ./error */ \"(rsc)/./node_modules/google-gax/node_modules/@grpc/grpc-js/build/src/error.js\");\nconst LEGAL_KEY_REGEX = /^[0-9a-z_.-]+$/;\nconst LEGAL_NON_BINARY_VALUE_REGEX = /^[ -~]*$/;\nfunction isLegalKey(key) {\n    return LEGAL_KEY_REGEX.test(key);\n}\nfunction isLegalNonBinaryValue(value) {\n    return LEGAL_NON_BINARY_VALUE_REGEX.test(value);\n}\nfunction isBinaryKey(key) {\n    return key.endsWith('-bin');\n}\nfunction isCustomMetadata(key) {\n    return !key.startsWith('grpc-');\n}\nfunction normalizeKey(key) {\n    return key.toLowerCase();\n}\nfunction validate(key, value) {\n    if (!isLegalKey(key)) {\n        throw new Error('Metadata key \"' + key + '\" contains illegal characters');\n    }\n    if (value !== null && value !== undefined) {\n        if (isBinaryKey(key)) {\n            if (!Buffer.isBuffer(value)) {\n                throw new Error(\"keys that end with '-bin' must have Buffer values\");\n            }\n        }\n        else {\n            if (Buffer.isBuffer(value)) {\n                throw new Error(\"keys that don't end with '-bin' must have String values\");\n            }\n            if (!isLegalNonBinaryValue(value)) {\n                throw new Error('Metadata string value \"' + value + '\" contains illegal characters');\n            }\n        }\n    }\n}\n/**\n * A class for storing metadata. Keys are normalized to lowercase ASCII.\n */\nclass Metadata {\n    constructor(options = {}) {\n        this.internalRepr = new Map();\n        this.options = options;\n    }\n    /**\n     * Sets the given value for the given key by replacing any other values\n     * associated with that key. Normalizes the key.\n     * @param key The key to whose value should be set.\n     * @param value The value to set. Must be a buffer if and only\n     *   if the normalized key ends with '-bin'.\n     */\n    set(key, value) {\n        key = normalizeKey(key);\n        validate(key, value);\n        this.internalRepr.set(key, [value]);\n    }\n    /**\n     * Adds the given value for the given key by appending to a list of previous\n     * values associated with that key. Normalizes the key.\n     * @param key The key for which a new value should be appended.\n     * @param value The value to add. Must be a buffer if and only\n     *   if the normalized key ends with '-bin'.\n     */\n    add(key, value) {\n        key = normalizeKey(key);\n        validate(key, value);\n        const existingValue = this.internalRepr.get(key);\n        if (existingValue === undefined) {\n            this.internalRepr.set(key, [value]);\n        }\n        else {\n            existingValue.push(value);\n        }\n    }\n    /**\n     * Removes the given key and any associated values. Normalizes the key.\n     * @param key The key whose values should be removed.\n     */\n    remove(key) {\n        key = normalizeKey(key);\n        // validate(key);\n        this.internalRepr.delete(key);\n    }\n    /**\n     * Gets a list of all values associated with the key. Normalizes the key.\n     * @param key The key whose value should be retrieved.\n     * @return A list of values associated with the given key.\n     */\n    get(key) {\n        key = normalizeKey(key);\n        // validate(key);\n        return this.internalRepr.get(key) || [];\n    }\n    /**\n     * Gets a plain object mapping each key to the first value associated with it.\n     * This reflects the most common way that people will want to see metadata.\n     * @return A key/value mapping of the metadata.\n     */\n    getMap() {\n        const result = {};\n        for (const [key, values] of this.internalRepr) {\n            if (values.length > 0) {\n                const v = values[0];\n                result[key] = Buffer.isBuffer(v) ? Buffer.from(v) : v;\n            }\n        }\n        return result;\n    }\n    /**\n     * Clones the metadata object.\n     * @return The newly cloned object.\n     */\n    clone() {\n        const newMetadata = new Metadata(this.options);\n        const newInternalRepr = newMetadata.internalRepr;\n        for (const [key, value] of this.internalRepr) {\n            const clonedValue = value.map(v => {\n                if (Buffer.isBuffer(v)) {\n                    return Buffer.from(v);\n                }\n                else {\n                    return v;\n                }\n            });\n            newInternalRepr.set(key, clonedValue);\n        }\n        return newMetadata;\n    }\n    /**\n     * Merges all key-value pairs from a given Metadata object into this one.\n     * If both this object and the given object have values in the same key,\n     * values from the other Metadata object will be appended to this object's\n     * values.\n     * @param other A Metadata object.\n     */\n    merge(other) {\n        for (const [key, values] of other.internalRepr) {\n            const mergedValue = (this.internalRepr.get(key) || []).concat(values);\n            this.internalRepr.set(key, mergedValue);\n        }\n    }\n    setOptions(options) {\n        this.options = options;\n    }\n    getOptions() {\n        return this.options;\n    }\n    /**\n     * Creates an OutgoingHttpHeaders object that can be used with the http2 API.\n     */\n    toHttp2Headers() {\n        // NOTE: Node <8.9 formats http2 headers incorrectly.\n        const result = {};\n        for (const [key, values] of this.internalRepr) {\n            // We assume that the user's interaction with this object is limited to\n            // through its public API (i.e. keys and values are already validated).\n            result[key] = values.map(bufToString);\n        }\n        return result;\n    }\n    /**\n     * This modifies the behavior of JSON.stringify to show an object\n     * representation of the metadata map.\n     */\n    toJSON() {\n        const result = {};\n        for (const [key, values] of this.internalRepr) {\n            result[key] = values;\n        }\n        return result;\n    }\n    /**\n     * Returns a new Metadata object based fields in a given IncomingHttpHeaders\n     * object.\n     * @param headers An IncomingHttpHeaders object.\n     */\n    static fromHttp2Headers(headers) {\n        const result = new Metadata();\n        for (const key of Object.keys(headers)) {\n            // Reserved headers (beginning with `:`) are not valid keys.\n            if (key.charAt(0) === ':') {\n                continue;\n            }\n            const values = headers[key];\n            try {\n                if (isBinaryKey(key)) {\n                    if (Array.isArray(values)) {\n                        values.forEach(value => {\n                            result.add(key, Buffer.from(value, 'base64'));\n                        });\n                    }\n                    else if (values !== undefined) {\n                        if (isCustomMetadata(key)) {\n                            values.split(',').forEach(v => {\n                                result.add(key, Buffer.from(v.trim(), 'base64'));\n                            });\n                        }\n                        else {\n                            result.add(key, Buffer.from(values, 'base64'));\n                        }\n                    }\n                }\n                else {\n                    if (Array.isArray(values)) {\n                        values.forEach(value => {\n                            result.add(key, value);\n                        });\n                    }\n                    else if (values !== undefined) {\n                        result.add(key, values);\n                    }\n                }\n            }\n            catch (error) {\n                const message = `Failed to add metadata entry ${key}: ${values}. ${(0, error_1.getErrorMessage)(error)}. For more information see https://github.com/grpc/grpc-node/issues/1173`;\n                (0, logging_1.log)(constants_1.LogVerbosity.ERROR, message);\n            }\n        }\n        return result;\n    }\n}\nexports.Metadata = Metadata;\nconst bufToString = (val) => {\n    return Buffer.isBuffer(val) ? val.toString('base64') : val;\n};\n//# sourceMappingURL=metadata.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/google-gax/node_modules/@grpc/grpc-js/build/src/metadata.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/google-gax/node_modules/@grpc/grpc-js/build/src/picker.js":
/*!********************************************************************************!*\
  !*** ./node_modules/google-gax/node_modules/@grpc/grpc-js/build/src/picker.js ***!
  \********************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\n/*\n * Copyright 2019 gRPC authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n */\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.QueuePicker = exports.UnavailablePicker = exports.PickResultType = void 0;\nconst metadata_1 = __webpack_require__(/*! ./metadata */ \"(rsc)/./node_modules/google-gax/node_modules/@grpc/grpc-js/build/src/metadata.js\");\nconst constants_1 = __webpack_require__(/*! ./constants */ \"(rsc)/./node_modules/google-gax/node_modules/@grpc/grpc-js/build/src/constants.js\");\nvar PickResultType;\n(function (PickResultType) {\n    PickResultType[PickResultType[\"COMPLETE\"] = 0] = \"COMPLETE\";\n    PickResultType[PickResultType[\"QUEUE\"] = 1] = \"QUEUE\";\n    PickResultType[PickResultType[\"TRANSIENT_FAILURE\"] = 2] = \"TRANSIENT_FAILURE\";\n    PickResultType[PickResultType[\"DROP\"] = 3] = \"DROP\";\n})(PickResultType || (exports.PickResultType = PickResultType = {}));\n/**\n * A standard picker representing a load balancer in the TRANSIENT_FAILURE\n * state. Always responds to every pick request with an UNAVAILABLE status.\n */\nclass UnavailablePicker {\n    constructor(status) {\n        this.status = Object.assign({ code: constants_1.Status.UNAVAILABLE, details: 'No connection established', metadata: new metadata_1.Metadata() }, status);\n    }\n    pick(pickArgs) {\n        return {\n            pickResultType: PickResultType.TRANSIENT_FAILURE,\n            subchannel: null,\n            status: this.status,\n            onCallStarted: null,\n            onCallEnded: null,\n        };\n    }\n}\nexports.UnavailablePicker = UnavailablePicker;\n/**\n * A standard picker representing a load balancer in the IDLE or CONNECTING\n * state. Always responds to every pick request with a QUEUE pick result\n * indicating that the pick should be tried again with the next `Picker`. Also\n * reports back to the load balancer that a connection should be established\n * once any pick is attempted.\n * If the childPicker is provided, delegate to it instead of returning the\n * hardcoded QUEUE pick result, but still calls exitIdle.\n */\nclass QueuePicker {\n    // Constructed with a load balancer. Calls exitIdle on it the first time pick is called\n    constructor(loadBalancer, childPicker) {\n        this.loadBalancer = loadBalancer;\n        this.childPicker = childPicker;\n        this.calledExitIdle = false;\n    }\n    pick(pickArgs) {\n        if (!this.calledExitIdle) {\n            process.nextTick(() => {\n                this.loadBalancer.exitIdle();\n            });\n            this.calledExitIdle = true;\n        }\n        if (this.childPicker) {\n            return this.childPicker.pick(pickArgs);\n        }\n        else {\n            return {\n                pickResultType: PickResultType.QUEUE,\n                subchannel: null,\n                status: null,\n                onCallStarted: null,\n                onCallEnded: null,\n            };\n        }\n    }\n}\nexports.QueuePicker = QueuePicker;\n//# sourceMappingURL=picker.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvZ29vZ2xlLWdheC9ub2RlX21vZHVsZXMvQGdycGMvZ3JwYy1qcy9idWlsZC9zcmMvcGlja2VyLmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSw4Q0FBNkMsRUFBRSxhQUFhLEVBQUM7QUFDN0QsbUJBQW1CLEdBQUcseUJBQXlCLEdBQUcsc0JBQXNCO0FBQ3hFLG1CQUFtQixtQkFBTyxDQUFDLG9HQUFZO0FBQ3ZDLG9CQUFvQixtQkFBTyxDQUFDLHNHQUFhO0FBQ3pDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLENBQUMscUJBQXFCLHNCQUFzQixzQkFBc0I7QUFDbEU7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esc0NBQXNDLGlIQUFpSDtBQUN2SjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EseUJBQXlCO0FBQ3pCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxhQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxtQkFBbUI7QUFDbkIiLCJzb3VyY2VzIjpbIi9Vc2Vycy9iYWcteW9zZWIvRGVza3RvcC/hhJHhhanhhIfhhbXhhIvhhaEvaGFja2F0aG9uX3RlYW0vbXktYXBwL25vZGVfbW9kdWxlcy9nb29nbGUtZ2F4L25vZGVfbW9kdWxlcy9AZ3JwYy9ncnBjLWpzL2J1aWxkL3NyYy9waWNrZXIuanMiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG4vKlxuICogQ29weXJpZ2h0IDIwMTkgZ1JQQyBhdXRob3JzLlxuICpcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbiAqXG4gKiAgICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4gKlxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbiAqXG4gKi9cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuUXVldWVQaWNrZXIgPSBleHBvcnRzLlVuYXZhaWxhYmxlUGlja2VyID0gZXhwb3J0cy5QaWNrUmVzdWx0VHlwZSA9IHZvaWQgMDtcbmNvbnN0IG1ldGFkYXRhXzEgPSByZXF1aXJlKFwiLi9tZXRhZGF0YVwiKTtcbmNvbnN0IGNvbnN0YW50c18xID0gcmVxdWlyZShcIi4vY29uc3RhbnRzXCIpO1xudmFyIFBpY2tSZXN1bHRUeXBlO1xuKGZ1bmN0aW9uIChQaWNrUmVzdWx0VHlwZSkge1xuICAgIFBpY2tSZXN1bHRUeXBlW1BpY2tSZXN1bHRUeXBlW1wiQ09NUExFVEVcIl0gPSAwXSA9IFwiQ09NUExFVEVcIjtcbiAgICBQaWNrUmVzdWx0VHlwZVtQaWNrUmVzdWx0VHlwZVtcIlFVRVVFXCJdID0gMV0gPSBcIlFVRVVFXCI7XG4gICAgUGlja1Jlc3VsdFR5cGVbUGlja1Jlc3VsdFR5cGVbXCJUUkFOU0lFTlRfRkFJTFVSRVwiXSA9IDJdID0gXCJUUkFOU0lFTlRfRkFJTFVSRVwiO1xuICAgIFBpY2tSZXN1bHRUeXBlW1BpY2tSZXN1bHRUeXBlW1wiRFJPUFwiXSA9IDNdID0gXCJEUk9QXCI7XG59KShQaWNrUmVzdWx0VHlwZSB8fCAoZXhwb3J0cy5QaWNrUmVzdWx0VHlwZSA9IFBpY2tSZXN1bHRUeXBlID0ge30pKTtcbi8qKlxuICogQSBzdGFuZGFyZCBwaWNrZXIgcmVwcmVzZW50aW5nIGEgbG9hZCBiYWxhbmNlciBpbiB0aGUgVFJBTlNJRU5UX0ZBSUxVUkVcbiAqIHN0YXRlLiBBbHdheXMgcmVzcG9uZHMgdG8gZXZlcnkgcGljayByZXF1ZXN0IHdpdGggYW4gVU5BVkFJTEFCTEUgc3RhdHVzLlxuICovXG5jbGFzcyBVbmF2YWlsYWJsZVBpY2tlciB7XG4gICAgY29uc3RydWN0b3Ioc3RhdHVzKSB7XG4gICAgICAgIHRoaXMuc3RhdHVzID0gT2JqZWN0LmFzc2lnbih7IGNvZGU6IGNvbnN0YW50c18xLlN0YXR1cy5VTkFWQUlMQUJMRSwgZGV0YWlsczogJ05vIGNvbm5lY3Rpb24gZXN0YWJsaXNoZWQnLCBtZXRhZGF0YTogbmV3IG1ldGFkYXRhXzEuTWV0YWRhdGEoKSB9LCBzdGF0dXMpO1xuICAgIH1cbiAgICBwaWNrKHBpY2tBcmdzKSB7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICBwaWNrUmVzdWx0VHlwZTogUGlja1Jlc3VsdFR5cGUuVFJBTlNJRU5UX0ZBSUxVUkUsXG4gICAgICAgICAgICBzdWJjaGFubmVsOiBudWxsLFxuICAgICAgICAgICAgc3RhdHVzOiB0aGlzLnN0YXR1cyxcbiAgICAgICAgICAgIG9uQ2FsbFN0YXJ0ZWQ6IG51bGwsXG4gICAgICAgICAgICBvbkNhbGxFbmRlZDogbnVsbCxcbiAgICAgICAgfTtcbiAgICB9XG59XG5leHBvcnRzLlVuYXZhaWxhYmxlUGlja2VyID0gVW5hdmFpbGFibGVQaWNrZXI7XG4vKipcbiAqIEEgc3RhbmRhcmQgcGlja2VyIHJlcHJlc2VudGluZyBhIGxvYWQgYmFsYW5jZXIgaW4gdGhlIElETEUgb3IgQ09OTkVDVElOR1xuICogc3RhdGUuIEFsd2F5cyByZXNwb25kcyB0byBldmVyeSBwaWNrIHJlcXVlc3Qgd2l0aCBhIFFVRVVFIHBpY2sgcmVzdWx0XG4gKiBpbmRpY2F0aW5nIHRoYXQgdGhlIHBpY2sgc2hvdWxkIGJlIHRyaWVkIGFnYWluIHdpdGggdGhlIG5leHQgYFBpY2tlcmAuIEFsc29cbiAqIHJlcG9ydHMgYmFjayB0byB0aGUgbG9hZCBiYWxhbmNlciB0aGF0IGEgY29ubmVjdGlvbiBzaG91bGQgYmUgZXN0YWJsaXNoZWRcbiAqIG9uY2UgYW55IHBpY2sgaXMgYXR0ZW1wdGVkLlxuICogSWYgdGhlIGNoaWxkUGlja2VyIGlzIHByb3ZpZGVkLCBkZWxlZ2F0ZSB0byBpdCBpbnN0ZWFkIG9mIHJldHVybmluZyB0aGVcbiAqIGhhcmRjb2RlZCBRVUVVRSBwaWNrIHJlc3VsdCwgYnV0IHN0aWxsIGNhbGxzIGV4aXRJZGxlLlxuICovXG5jbGFzcyBRdWV1ZVBpY2tlciB7XG4gICAgLy8gQ29uc3RydWN0ZWQgd2l0aCBhIGxvYWQgYmFsYW5jZXIuIENhbGxzIGV4aXRJZGxlIG9uIGl0IHRoZSBmaXJzdCB0aW1lIHBpY2sgaXMgY2FsbGVkXG4gICAgY29uc3RydWN0b3IobG9hZEJhbGFuY2VyLCBjaGlsZFBpY2tlcikge1xuICAgICAgICB0aGlzLmxvYWRCYWxhbmNlciA9IGxvYWRCYWxhbmNlcjtcbiAgICAgICAgdGhpcy5jaGlsZFBpY2tlciA9IGNoaWxkUGlja2VyO1xuICAgICAgICB0aGlzLmNhbGxlZEV4aXRJZGxlID0gZmFsc2U7XG4gICAgfVxuICAgIHBpY2socGlja0FyZ3MpIHtcbiAgICAgICAgaWYgKCF0aGlzLmNhbGxlZEV4aXRJZGxlKSB7XG4gICAgICAgICAgICBwcm9jZXNzLm5leHRUaWNrKCgpID0+IHtcbiAgICAgICAgICAgICAgICB0aGlzLmxvYWRCYWxhbmNlci5leGl0SWRsZSgpO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB0aGlzLmNhbGxlZEV4aXRJZGxlID0gdHJ1ZTtcbiAgICAgICAgfVxuICAgICAgICBpZiAodGhpcy5jaGlsZFBpY2tlcikge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuY2hpbGRQaWNrZXIucGljayhwaWNrQXJncyk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgIHBpY2tSZXN1bHRUeXBlOiBQaWNrUmVzdWx0VHlwZS5RVUVVRSxcbiAgICAgICAgICAgICAgICBzdWJjaGFubmVsOiBudWxsLFxuICAgICAgICAgICAgICAgIHN0YXR1czogbnVsbCxcbiAgICAgICAgICAgICAgICBvbkNhbGxTdGFydGVkOiBudWxsLFxuICAgICAgICAgICAgICAgIG9uQ2FsbEVuZGVkOiBudWxsLFxuICAgICAgICAgICAgfTtcbiAgICAgICAgfVxuICAgIH1cbn1cbmV4cG9ydHMuUXVldWVQaWNrZXIgPSBRdWV1ZVBpY2tlcjtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXBpY2tlci5qcy5tYXAiXSwibmFtZXMiOltdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/google-gax/node_modules/@grpc/grpc-js/build/src/picker.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/google-gax/node_modules/@grpc/grpc-js/build/src/resolver-dns.js":
/*!**************************************************************************************!*\
  !*** ./node_modules/google-gax/node_modules/@grpc/grpc-js/build/src/resolver-dns.js ***!
  \**************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\n/*\n * Copyright 2019 gRPC authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.DEFAULT_PORT = void 0;\nexports.setup = setup;\nconst resolver_1 = __webpack_require__(/*! ./resolver */ \"(rsc)/./node_modules/google-gax/node_modules/@grpc/grpc-js/build/src/resolver.js\");\nconst dns_1 = __webpack_require__(/*! dns */ \"dns\");\nconst service_config_1 = __webpack_require__(/*! ./service-config */ \"(rsc)/./node_modules/google-gax/node_modules/@grpc/grpc-js/build/src/service-config.js\");\nconst constants_1 = __webpack_require__(/*! ./constants */ \"(rsc)/./node_modules/google-gax/node_modules/@grpc/grpc-js/build/src/constants.js\");\nconst metadata_1 = __webpack_require__(/*! ./metadata */ \"(rsc)/./node_modules/google-gax/node_modules/@grpc/grpc-js/build/src/metadata.js\");\nconst logging = __webpack_require__(/*! ./logging */ \"(rsc)/./node_modules/google-gax/node_modules/@grpc/grpc-js/build/src/logging.js\");\nconst constants_2 = __webpack_require__(/*! ./constants */ \"(rsc)/./node_modules/google-gax/node_modules/@grpc/grpc-js/build/src/constants.js\");\nconst uri_parser_1 = __webpack_require__(/*! ./uri-parser */ \"(rsc)/./node_modules/google-gax/node_modules/@grpc/grpc-js/build/src/uri-parser.js\");\nconst net_1 = __webpack_require__(/*! net */ \"net\");\nconst backoff_timeout_1 = __webpack_require__(/*! ./backoff-timeout */ \"(rsc)/./node_modules/google-gax/node_modules/@grpc/grpc-js/build/src/backoff-timeout.js\");\nconst environment_1 = __webpack_require__(/*! ./environment */ \"(rsc)/./node_modules/google-gax/node_modules/@grpc/grpc-js/build/src/environment.js\");\nconst TRACER_NAME = 'dns_resolver';\nfunction trace(text) {\n    logging.trace(constants_2.LogVerbosity.DEBUG, TRACER_NAME, text);\n}\n/**\n * The default TCP port to connect to if not explicitly specified in the target.\n */\nexports.DEFAULT_PORT = 443;\nconst DEFAULT_MIN_TIME_BETWEEN_RESOLUTIONS_MS = 30000;\n/**\n * Resolver implementation that handles DNS names and IP addresses.\n */\nclass DnsResolver {\n    constructor(target, listener, channelOptions) {\n        var _a, _b, _c;\n        this.target = target;\n        this.listener = listener;\n        this.pendingLookupPromise = null;\n        this.pendingTxtPromise = null;\n        this.latestLookupResult = null;\n        this.latestServiceConfig = null;\n        this.latestServiceConfigError = null;\n        this.continueResolving = false;\n        this.isNextResolutionTimerRunning = false;\n        this.isServiceConfigEnabled = true;\n        this.returnedIpResult = false;\n        this.alternativeResolver = new dns_1.promises.Resolver();\n        trace('Resolver constructed for target ' + (0, uri_parser_1.uriToString)(target));\n        if (target.authority) {\n            this.alternativeResolver.setServers([target.authority]);\n        }\n        const hostPort = (0, uri_parser_1.splitHostPort)(target.path);\n        if (hostPort === null) {\n            this.ipResult = null;\n            this.dnsHostname = null;\n            this.port = null;\n        }\n        else {\n            if ((0, net_1.isIPv4)(hostPort.host) || (0, net_1.isIPv6)(hostPort.host)) {\n                this.ipResult = [\n                    {\n                        addresses: [\n                            {\n                                host: hostPort.host,\n                                port: (_a = hostPort.port) !== null && _a !== void 0 ? _a : exports.DEFAULT_PORT,\n                            },\n                        ],\n                    },\n                ];\n                this.dnsHostname = null;\n                this.port = null;\n            }\n            else {\n                this.ipResult = null;\n                this.dnsHostname = hostPort.host;\n                this.port = (_b = hostPort.port) !== null && _b !== void 0 ? _b : exports.DEFAULT_PORT;\n            }\n        }\n        this.percentage = Math.random() * 100;\n        if (channelOptions['grpc.service_config_disable_resolution'] === 1) {\n            this.isServiceConfigEnabled = false;\n        }\n        this.defaultResolutionError = {\n            code: constants_1.Status.UNAVAILABLE,\n            details: `Name resolution failed for target ${(0, uri_parser_1.uriToString)(this.target)}`,\n            metadata: new metadata_1.Metadata(),\n        };\n        const backoffOptions = {\n            initialDelay: channelOptions['grpc.initial_reconnect_backoff_ms'],\n            maxDelay: channelOptions['grpc.max_reconnect_backoff_ms'],\n        };\n        this.backoff = new backoff_timeout_1.BackoffTimeout(() => {\n            if (this.continueResolving) {\n                this.startResolutionWithBackoff();\n            }\n        }, backoffOptions);\n        this.backoff.unref();\n        this.minTimeBetweenResolutionsMs =\n            (_c = channelOptions['grpc.dns_min_time_between_resolutions_ms']) !== null && _c !== void 0 ? _c : DEFAULT_MIN_TIME_BETWEEN_RESOLUTIONS_MS;\n        this.nextResolutionTimer = setTimeout(() => { }, 0);\n        clearTimeout(this.nextResolutionTimer);\n    }\n    /**\n     * If the target is an IP address, just provide that address as a result.\n     * Otherwise, initiate A, AAAA, and TXT lookups\n     */\n    startResolution() {\n        if (this.ipResult !== null) {\n            if (!this.returnedIpResult) {\n                trace('Returning IP address for target ' + (0, uri_parser_1.uriToString)(this.target));\n                setImmediate(() => {\n                    this.listener.onSuccessfulResolution(this.ipResult, null, null, null, {});\n                });\n                this.returnedIpResult = true;\n            }\n            this.backoff.stop();\n            this.backoff.reset();\n            this.stopNextResolutionTimer();\n            return;\n        }\n        if (this.dnsHostname === null) {\n            trace('Failed to parse DNS address ' + (0, uri_parser_1.uriToString)(this.target));\n            setImmediate(() => {\n                this.listener.onError({\n                    code: constants_1.Status.UNAVAILABLE,\n                    details: `Failed to parse DNS address ${(0, uri_parser_1.uriToString)(this.target)}`,\n                    metadata: new metadata_1.Metadata(),\n                });\n            });\n            this.stopNextResolutionTimer();\n        }\n        else {\n            if (this.pendingLookupPromise !== null) {\n                return;\n            }\n            trace('Looking up DNS hostname ' + this.dnsHostname);\n            /* We clear out latestLookupResult here to ensure that it contains the\n             * latest result since the last time we started resolving. That way, the\n             * TXT resolution handler can use it, but only if it finishes second. We\n             * don't clear out any previous service config results because it's\n             * better to use a service config that's slightly out of date than to\n             * revert to an effectively blank one. */\n            this.latestLookupResult = null;\n            const hostname = this.dnsHostname;\n            this.pendingLookupPromise = this.lookup(hostname);\n            this.pendingLookupPromise.then(addressList => {\n                if (this.pendingLookupPromise === null) {\n                    return;\n                }\n                this.pendingLookupPromise = null;\n                this.backoff.reset();\n                this.backoff.stop();\n                this.latestLookupResult = addressList.map(address => ({\n                    addresses: [address],\n                }));\n                const allAddressesString = '[' +\n                    addressList.map(addr => addr.host + ':' + addr.port).join(',') +\n                    ']';\n                trace('Resolved addresses for target ' +\n                    (0, uri_parser_1.uriToString)(this.target) +\n                    ': ' +\n                    allAddressesString);\n                if (this.latestLookupResult.length === 0) {\n                    this.listener.onError(this.defaultResolutionError);\n                    return;\n                }\n                /* If the TXT lookup has not yet finished, both of the last two\n                 * arguments will be null, which is the equivalent of getting an\n                 * empty TXT response. When the TXT lookup does finish, its handler\n                 * can update the service config by using the same address list */\n                this.listener.onSuccessfulResolution(this.latestLookupResult, this.latestServiceConfig, this.latestServiceConfigError, null, {});\n            }, err => {\n                if (this.pendingLookupPromise === null) {\n                    return;\n                }\n                trace('Resolution error for target ' +\n                    (0, uri_parser_1.uriToString)(this.target) +\n                    ': ' +\n                    err.message);\n                this.pendingLookupPromise = null;\n                this.stopNextResolutionTimer();\n                this.listener.onError(this.defaultResolutionError);\n            });\n            /* If there already is a still-pending TXT resolution, we can just use\n             * that result when it comes in */\n            if (this.isServiceConfigEnabled && this.pendingTxtPromise === null) {\n                /* We handle the TXT query promise differently than the others because\n                 * the name resolution attempt as a whole is a success even if the TXT\n                 * lookup fails */\n                this.pendingTxtPromise = this.resolveTxt(hostname);\n                this.pendingTxtPromise.then(txtRecord => {\n                    if (this.pendingTxtPromise === null) {\n                        return;\n                    }\n                    this.pendingTxtPromise = null;\n                    try {\n                        this.latestServiceConfig = (0, service_config_1.extractAndSelectServiceConfig)(txtRecord, this.percentage);\n                    }\n                    catch (err) {\n                        this.latestServiceConfigError = {\n                            code: constants_1.Status.UNAVAILABLE,\n                            details: `Parsing service config failed with error ${err.message}`,\n                            metadata: new metadata_1.Metadata(),\n                        };\n                    }\n                    if (this.latestLookupResult !== null) {\n                        /* We rely here on the assumption that calling this function with\n                         * identical parameters will be essentialy idempotent, and calling\n                         * it with the same address list and a different service config\n                         * should result in a fast and seamless switchover. */\n                        this.listener.onSuccessfulResolution(this.latestLookupResult, this.latestServiceConfig, this.latestServiceConfigError, null, {});\n                    }\n                }, err => {\n                    /* If TXT lookup fails we should do nothing, which means that we\n                     * continue to use the result of the most recent successful lookup,\n                     * or the default null config object if there has never been a\n                     * successful lookup. We do not set the latestServiceConfigError\n                     * here because that is specifically used for response validation\n                     * errors. We still need to handle this error so that it does not\n                     * bubble up as an unhandled promise rejection. */\n                });\n            }\n        }\n    }\n    async lookup(hostname) {\n        if (environment_1.GRPC_NODE_USE_ALTERNATIVE_RESOLVER) {\n            trace('Using alternative DNS resolver.');\n            const records = await Promise.allSettled([\n                this.alternativeResolver.resolve4(hostname),\n                this.alternativeResolver.resolve6(hostname),\n            ]);\n            if (records.every(result => result.status === 'rejected')) {\n                throw new Error(records[0].reason);\n            }\n            return records\n                .reduce((acc, result) => {\n                return result.status === 'fulfilled'\n                    ? [...acc, ...result.value]\n                    : acc;\n            }, [])\n                .map(addr => ({\n                host: addr,\n                port: +this.port,\n            }));\n        }\n        /* We lookup both address families here and then split them up later\n         * because when looking up a single family, dns.lookup outputs an error\n         * if the name exists but there are no records for that family, and that\n         * error is indistinguishable from other kinds of errors */\n        const addressList = await dns_1.promises.lookup(hostname, { all: true });\n        return addressList.map(addr => ({ host: addr.address, port: +this.port }));\n    }\n    async resolveTxt(hostname) {\n        if (environment_1.GRPC_NODE_USE_ALTERNATIVE_RESOLVER) {\n            trace('Using alternative DNS resolver.');\n            return this.alternativeResolver.resolveTxt(hostname);\n        }\n        return dns_1.promises.resolveTxt(hostname);\n    }\n    startNextResolutionTimer() {\n        var _a, _b;\n        clearTimeout(this.nextResolutionTimer);\n        this.nextResolutionTimer = setTimeout(() => {\n            this.stopNextResolutionTimer();\n            if (this.continueResolving) {\n                this.startResolutionWithBackoff();\n            }\n        }, this.minTimeBetweenResolutionsMs);\n        (_b = (_a = this.nextResolutionTimer).unref) === null || _b === void 0 ? void 0 : _b.call(_a);\n        this.isNextResolutionTimerRunning = true;\n    }\n    stopNextResolutionTimer() {\n        clearTimeout(this.nextResolutionTimer);\n        this.isNextResolutionTimerRunning = false;\n    }\n    startResolutionWithBackoff() {\n        if (this.pendingLookupPromise === null) {\n            this.continueResolving = false;\n            this.backoff.runOnce();\n            this.startNextResolutionTimer();\n            this.startResolution();\n        }\n    }\n    updateResolution() {\n        /* If there is a pending lookup, just let it finish. Otherwise, if the\n         * nextResolutionTimer or backoff timer is running, set the\n         * continueResolving flag to resolve when whichever of those timers\n         * fires. Otherwise, start resolving immediately. */\n        if (this.pendingLookupPromise === null) {\n            if (this.isNextResolutionTimerRunning || this.backoff.isRunning()) {\n                if (this.isNextResolutionTimerRunning) {\n                    trace('resolution update delayed by \"min time between resolutions\" rate limit');\n                }\n                else {\n                    trace('resolution update delayed by backoff timer until ' +\n                        this.backoff.getEndTime().toISOString());\n                }\n                this.continueResolving = true;\n            }\n            else {\n                this.startResolutionWithBackoff();\n            }\n        }\n    }\n    /**\n     * Reset the resolver to the same state it had when it was created. In-flight\n     * DNS requests cannot be cancelled, but they are discarded and their results\n     * will be ignored.\n     */\n    destroy() {\n        this.continueResolving = false;\n        this.backoff.reset();\n        this.backoff.stop();\n        this.stopNextResolutionTimer();\n        this.pendingLookupPromise = null;\n        this.pendingTxtPromise = null;\n        this.latestLookupResult = null;\n        this.latestServiceConfig = null;\n        this.latestServiceConfigError = null;\n        this.returnedIpResult = false;\n    }\n    /**\n     * Get the default authority for the given target. For IP targets, that is\n     * the IP address. For DNS targets, it is the hostname.\n     * @param target\n     */\n    static getDefaultAuthority(target) {\n        return target.path;\n    }\n}\n/**\n * Set up the DNS resolver class by registering it as the handler for the\n * \"dns:\" prefix and as the default resolver.\n */\nfunction setup() {\n    (0, resolver_1.registerResolver)('dns', DnsResolver);\n    (0, resolver_1.registerDefaultScheme)('dns');\n}\n//# sourceMappingURL=resolver-dns.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/google-gax/node_modules/@grpc/grpc-js/build/src/resolver-dns.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/google-gax/node_modules/@grpc/grpc-js/build/src/resolver-ip.js":
/*!*************************************************************************************!*\
  !*** ./node_modules/google-gax/node_modules/@grpc/grpc-js/build/src/resolver-ip.js ***!
  \*************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\n/*\n * Copyright 2021 gRPC authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.setup = setup;\nconst net_1 = __webpack_require__(/*! net */ \"net\");\nconst constants_1 = __webpack_require__(/*! ./constants */ \"(rsc)/./node_modules/google-gax/node_modules/@grpc/grpc-js/build/src/constants.js\");\nconst metadata_1 = __webpack_require__(/*! ./metadata */ \"(rsc)/./node_modules/google-gax/node_modules/@grpc/grpc-js/build/src/metadata.js\");\nconst resolver_1 = __webpack_require__(/*! ./resolver */ \"(rsc)/./node_modules/google-gax/node_modules/@grpc/grpc-js/build/src/resolver.js\");\nconst uri_parser_1 = __webpack_require__(/*! ./uri-parser */ \"(rsc)/./node_modules/google-gax/node_modules/@grpc/grpc-js/build/src/uri-parser.js\");\nconst logging = __webpack_require__(/*! ./logging */ \"(rsc)/./node_modules/google-gax/node_modules/@grpc/grpc-js/build/src/logging.js\");\nconst TRACER_NAME = 'ip_resolver';\nfunction trace(text) {\n    logging.trace(constants_1.LogVerbosity.DEBUG, TRACER_NAME, text);\n}\nconst IPV4_SCHEME = 'ipv4';\nconst IPV6_SCHEME = 'ipv6';\n/**\n * The default TCP port to connect to if not explicitly specified in the target.\n */\nconst DEFAULT_PORT = 443;\nclass IpResolver {\n    constructor(target, listener, channelOptions) {\n        var _a;\n        this.listener = listener;\n        this.endpoints = [];\n        this.error = null;\n        this.hasReturnedResult = false;\n        trace('Resolver constructed for target ' + (0, uri_parser_1.uriToString)(target));\n        const addresses = [];\n        if (!(target.scheme === IPV4_SCHEME || target.scheme === IPV6_SCHEME)) {\n            this.error = {\n                code: constants_1.Status.UNAVAILABLE,\n                details: `Unrecognized scheme ${target.scheme} in IP resolver`,\n                metadata: new metadata_1.Metadata(),\n            };\n            return;\n        }\n        const pathList = target.path.split(',');\n        for (const path of pathList) {\n            const hostPort = (0, uri_parser_1.splitHostPort)(path);\n            if (hostPort === null) {\n                this.error = {\n                    code: constants_1.Status.UNAVAILABLE,\n                    details: `Failed to parse ${target.scheme} address ${path}`,\n                    metadata: new metadata_1.Metadata(),\n                };\n                return;\n            }\n            if ((target.scheme === IPV4_SCHEME && !(0, net_1.isIPv4)(hostPort.host)) ||\n                (target.scheme === IPV6_SCHEME && !(0, net_1.isIPv6)(hostPort.host))) {\n                this.error = {\n                    code: constants_1.Status.UNAVAILABLE,\n                    details: `Failed to parse ${target.scheme} address ${path}`,\n                    metadata: new metadata_1.Metadata(),\n                };\n                return;\n            }\n            addresses.push({\n                host: hostPort.host,\n                port: (_a = hostPort.port) !== null && _a !== void 0 ? _a : DEFAULT_PORT,\n            });\n        }\n        this.endpoints = addresses.map(address => ({ addresses: [address] }));\n        trace('Parsed ' + target.scheme + ' address list ' + addresses);\n    }\n    updateResolution() {\n        if (!this.hasReturnedResult) {\n            this.hasReturnedResult = true;\n            process.nextTick(() => {\n                if (this.error) {\n                    this.listener.onError(this.error);\n                }\n                else {\n                    this.listener.onSuccessfulResolution(this.endpoints, null, null, null, {});\n                }\n            });\n        }\n    }\n    destroy() {\n        this.hasReturnedResult = false;\n    }\n    static getDefaultAuthority(target) {\n        return target.path.split(',')[0];\n    }\n}\nfunction setup() {\n    (0, resolver_1.registerResolver)(IPV4_SCHEME, IpResolver);\n    (0, resolver_1.registerResolver)(IPV6_SCHEME, IpResolver);\n}\n//# sourceMappingURL=resolver-ip.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvZ29vZ2xlLWdheC9ub2RlX21vZHVsZXMvQGdycGMvZ3JwYy1qcy9idWlsZC9zcmMvcmVzb2x2ZXItaXAuanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSw4Q0FBNkMsRUFBRSxhQUFhLEVBQUM7QUFDN0QsYUFBYTtBQUNiLGNBQWMsbUJBQU8sQ0FBQyxnQkFBSztBQUMzQixvQkFBb0IsbUJBQU8sQ0FBQyxzR0FBYTtBQUN6QyxtQkFBbUIsbUJBQU8sQ0FBQyxvR0FBWTtBQUN2QyxtQkFBbUIsbUJBQU8sQ0FBQyxvR0FBWTtBQUN2QyxxQkFBcUIsbUJBQU8sQ0FBQyx3R0FBYztBQUMzQyxnQkFBZ0IsbUJBQU8sQ0FBQyxrR0FBVztBQUNuQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGdEQUFnRCxlQUFlO0FBQy9EO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZ0RBQWdELGVBQWUsVUFBVSxLQUFLO0FBQzlFO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxnREFBZ0QsZUFBZSxVQUFVLEtBQUs7QUFDOUU7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxhQUFhO0FBQ2I7QUFDQSxxREFBcUQsc0JBQXNCO0FBQzNFO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsNkZBQTZGO0FBQzdGO0FBQ0EsYUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJzb3VyY2VzIjpbIi9Vc2Vycy9iYWcteW9zZWIvRGVza3RvcC/hhJHhhanhhIfhhbXhhIvhhaEvaGFja2F0aG9uX3RlYW0vbXktYXBwL25vZGVfbW9kdWxlcy9nb29nbGUtZ2F4L25vZGVfbW9kdWxlcy9AZ3JwYy9ncnBjLWpzL2J1aWxkL3NyYy9yZXNvbHZlci1pcC5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbi8qXG4gKiBDb3B5cmlnaHQgMjAyMSBnUlBDIGF1dGhvcnMuXG4gKlxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuICpcbiAqICAgICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbiAqXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuICovXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLnNldHVwID0gc2V0dXA7XG5jb25zdCBuZXRfMSA9IHJlcXVpcmUoXCJuZXRcIik7XG5jb25zdCBjb25zdGFudHNfMSA9IHJlcXVpcmUoXCIuL2NvbnN0YW50c1wiKTtcbmNvbnN0IG1ldGFkYXRhXzEgPSByZXF1aXJlKFwiLi9tZXRhZGF0YVwiKTtcbmNvbnN0IHJlc29sdmVyXzEgPSByZXF1aXJlKFwiLi9yZXNvbHZlclwiKTtcbmNvbnN0IHVyaV9wYXJzZXJfMSA9IHJlcXVpcmUoXCIuL3VyaS1wYXJzZXJcIik7XG5jb25zdCBsb2dnaW5nID0gcmVxdWlyZShcIi4vbG9nZ2luZ1wiKTtcbmNvbnN0IFRSQUNFUl9OQU1FID0gJ2lwX3Jlc29sdmVyJztcbmZ1bmN0aW9uIHRyYWNlKHRleHQpIHtcbiAgICBsb2dnaW5nLnRyYWNlKGNvbnN0YW50c18xLkxvZ1ZlcmJvc2l0eS5ERUJVRywgVFJBQ0VSX05BTUUsIHRleHQpO1xufVxuY29uc3QgSVBWNF9TQ0hFTUUgPSAnaXB2NCc7XG5jb25zdCBJUFY2X1NDSEVNRSA9ICdpcHY2Jztcbi8qKlxuICogVGhlIGRlZmF1bHQgVENQIHBvcnQgdG8gY29ubmVjdCB0byBpZiBub3QgZXhwbGljaXRseSBzcGVjaWZpZWQgaW4gdGhlIHRhcmdldC5cbiAqL1xuY29uc3QgREVGQVVMVF9QT1JUID0gNDQzO1xuY2xhc3MgSXBSZXNvbHZlciB7XG4gICAgY29uc3RydWN0b3IodGFyZ2V0LCBsaXN0ZW5lciwgY2hhbm5lbE9wdGlvbnMpIHtcbiAgICAgICAgdmFyIF9hO1xuICAgICAgICB0aGlzLmxpc3RlbmVyID0gbGlzdGVuZXI7XG4gICAgICAgIHRoaXMuZW5kcG9pbnRzID0gW107XG4gICAgICAgIHRoaXMuZXJyb3IgPSBudWxsO1xuICAgICAgICB0aGlzLmhhc1JldHVybmVkUmVzdWx0ID0gZmFsc2U7XG4gICAgICAgIHRyYWNlKCdSZXNvbHZlciBjb25zdHJ1Y3RlZCBmb3IgdGFyZ2V0ICcgKyAoMCwgdXJpX3BhcnNlcl8xLnVyaVRvU3RyaW5nKSh0YXJnZXQpKTtcbiAgICAgICAgY29uc3QgYWRkcmVzc2VzID0gW107XG4gICAgICAgIGlmICghKHRhcmdldC5zY2hlbWUgPT09IElQVjRfU0NIRU1FIHx8IHRhcmdldC5zY2hlbWUgPT09IElQVjZfU0NIRU1FKSkge1xuICAgICAgICAgICAgdGhpcy5lcnJvciA9IHtcbiAgICAgICAgICAgICAgICBjb2RlOiBjb25zdGFudHNfMS5TdGF0dXMuVU5BVkFJTEFCTEUsXG4gICAgICAgICAgICAgICAgZGV0YWlsczogYFVucmVjb2duaXplZCBzY2hlbWUgJHt0YXJnZXQuc2NoZW1lfSBpbiBJUCByZXNvbHZlcmAsXG4gICAgICAgICAgICAgICAgbWV0YWRhdGE6IG5ldyBtZXRhZGF0YV8xLk1ldGFkYXRhKCksXG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IHBhdGhMaXN0ID0gdGFyZ2V0LnBhdGguc3BsaXQoJywnKTtcbiAgICAgICAgZm9yIChjb25zdCBwYXRoIG9mIHBhdGhMaXN0KSB7XG4gICAgICAgICAgICBjb25zdCBob3N0UG9ydCA9ICgwLCB1cmlfcGFyc2VyXzEuc3BsaXRIb3N0UG9ydCkocGF0aCk7XG4gICAgICAgICAgICBpZiAoaG9zdFBvcnQgPT09IG51bGwpIHtcbiAgICAgICAgICAgICAgICB0aGlzLmVycm9yID0ge1xuICAgICAgICAgICAgICAgICAgICBjb2RlOiBjb25zdGFudHNfMS5TdGF0dXMuVU5BVkFJTEFCTEUsXG4gICAgICAgICAgICAgICAgICAgIGRldGFpbHM6IGBGYWlsZWQgdG8gcGFyc2UgJHt0YXJnZXQuc2NoZW1lfSBhZGRyZXNzICR7cGF0aH1gLFxuICAgICAgICAgICAgICAgICAgICBtZXRhZGF0YTogbmV3IG1ldGFkYXRhXzEuTWV0YWRhdGEoKSxcbiAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmICgodGFyZ2V0LnNjaGVtZSA9PT0gSVBWNF9TQ0hFTUUgJiYgISgwLCBuZXRfMS5pc0lQdjQpKGhvc3RQb3J0Lmhvc3QpKSB8fFxuICAgICAgICAgICAgICAgICh0YXJnZXQuc2NoZW1lID09PSBJUFY2X1NDSEVNRSAmJiAhKDAsIG5ldF8xLmlzSVB2NikoaG9zdFBvcnQuaG9zdCkpKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5lcnJvciA9IHtcbiAgICAgICAgICAgICAgICAgICAgY29kZTogY29uc3RhbnRzXzEuU3RhdHVzLlVOQVZBSUxBQkxFLFxuICAgICAgICAgICAgICAgICAgICBkZXRhaWxzOiBgRmFpbGVkIHRvIHBhcnNlICR7dGFyZ2V0LnNjaGVtZX0gYWRkcmVzcyAke3BhdGh9YCxcbiAgICAgICAgICAgICAgICAgICAgbWV0YWRhdGE6IG5ldyBtZXRhZGF0YV8xLk1ldGFkYXRhKCksXG4gICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBhZGRyZXNzZXMucHVzaCh7XG4gICAgICAgICAgICAgICAgaG9zdDogaG9zdFBvcnQuaG9zdCxcbiAgICAgICAgICAgICAgICBwb3J0OiAoX2EgPSBob3N0UG9ydC5wb3J0KSAhPT0gbnVsbCAmJiBfYSAhPT0gdm9pZCAwID8gX2EgOiBERUZBVUxUX1BPUlQsXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLmVuZHBvaW50cyA9IGFkZHJlc3Nlcy5tYXAoYWRkcmVzcyA9PiAoeyBhZGRyZXNzZXM6IFthZGRyZXNzXSB9KSk7XG4gICAgICAgIHRyYWNlKCdQYXJzZWQgJyArIHRhcmdldC5zY2hlbWUgKyAnIGFkZHJlc3MgbGlzdCAnICsgYWRkcmVzc2VzKTtcbiAgICB9XG4gICAgdXBkYXRlUmVzb2x1dGlvbigpIHtcbiAgICAgICAgaWYgKCF0aGlzLmhhc1JldHVybmVkUmVzdWx0KSB7XG4gICAgICAgICAgICB0aGlzLmhhc1JldHVybmVkUmVzdWx0ID0gdHJ1ZTtcbiAgICAgICAgICAgIHByb2Nlc3MubmV4dFRpY2soKCkgPT4ge1xuICAgICAgICAgICAgICAgIGlmICh0aGlzLmVycm9yKSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMubGlzdGVuZXIub25FcnJvcih0aGlzLmVycm9yKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMubGlzdGVuZXIub25TdWNjZXNzZnVsUmVzb2x1dGlvbih0aGlzLmVuZHBvaW50cywgbnVsbCwgbnVsbCwgbnVsbCwge30pO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgfVxuICAgIGRlc3Ryb3koKSB7XG4gICAgICAgIHRoaXMuaGFzUmV0dXJuZWRSZXN1bHQgPSBmYWxzZTtcbiAgICB9XG4gICAgc3RhdGljIGdldERlZmF1bHRBdXRob3JpdHkodGFyZ2V0KSB7XG4gICAgICAgIHJldHVybiB0YXJnZXQucGF0aC5zcGxpdCgnLCcpWzBdO1xuICAgIH1cbn1cbmZ1bmN0aW9uIHNldHVwKCkge1xuICAgICgwLCByZXNvbHZlcl8xLnJlZ2lzdGVyUmVzb2x2ZXIpKElQVjRfU0NIRU1FLCBJcFJlc29sdmVyKTtcbiAgICAoMCwgcmVzb2x2ZXJfMS5yZWdpc3RlclJlc29sdmVyKShJUFY2X1NDSEVNRSwgSXBSZXNvbHZlcik7XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1yZXNvbHZlci1pcC5qcy5tYXAiXSwibmFtZXMiOltdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/google-gax/node_modules/@grpc/grpc-js/build/src/resolver-ip.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/google-gax/node_modules/@grpc/grpc-js/build/src/resolver-uds.js":
/*!**************************************************************************************!*\
  !*** ./node_modules/google-gax/node_modules/@grpc/grpc-js/build/src/resolver-uds.js ***!
  \**************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\n/*\n * Copyright 2019 gRPC authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.setup = setup;\nconst resolver_1 = __webpack_require__(/*! ./resolver */ \"(rsc)/./node_modules/google-gax/node_modules/@grpc/grpc-js/build/src/resolver.js\");\nclass UdsResolver {\n    constructor(target, listener, channelOptions) {\n        this.listener = listener;\n        this.hasReturnedResult = false;\n        this.endpoints = [];\n        let path;\n        if (target.authority === '') {\n            path = '/' + target.path;\n        }\n        else {\n            path = target.path;\n        }\n        this.endpoints = [{ addresses: [{ path }] }];\n    }\n    updateResolution() {\n        if (!this.hasReturnedResult) {\n            this.hasReturnedResult = true;\n            process.nextTick(this.listener.onSuccessfulResolution, this.endpoints, null, null, null, {});\n        }\n    }\n    destroy() {\n        this.hasReturnedResult = false;\n    }\n    static getDefaultAuthority(target) {\n        return 'localhost';\n    }\n}\nfunction setup() {\n    (0, resolver_1.registerResolver)('unix', UdsResolver);\n}\n//# sourceMappingURL=resolver-uds.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvZ29vZ2xlLWdheC9ub2RlX21vZHVsZXMvQGdycGMvZ3JwYy1qcy9idWlsZC9zcmMvcmVzb2x2ZXItdWRzLmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsOENBQTZDLEVBQUUsYUFBYSxFQUFDO0FBQzdELGFBQWE7QUFDYixtQkFBbUIsbUJBQU8sQ0FBQyxvR0FBWTtBQUN2QztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSw0QkFBNEIsY0FBYyxNQUFNLEdBQUc7QUFDbkQ7QUFDQTtBQUNBO0FBQ0E7QUFDQSx1R0FBdUc7QUFDdkc7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJzb3VyY2VzIjpbIi9Vc2Vycy9iYWcteW9zZWIvRGVza3RvcC/hhJHhhanhhIfhhbXhhIvhhaEvaGFja2F0aG9uX3RlYW0vbXktYXBwL25vZGVfbW9kdWxlcy9nb29nbGUtZ2F4L25vZGVfbW9kdWxlcy9AZ3JwYy9ncnBjLWpzL2J1aWxkL3NyYy9yZXNvbHZlci11ZHMuanMiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG4vKlxuICogQ29weXJpZ2h0IDIwMTkgZ1JQQyBhdXRob3JzLlxuICpcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbiAqXG4gKiAgICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4gKlxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbiAqL1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5zZXR1cCA9IHNldHVwO1xuY29uc3QgcmVzb2x2ZXJfMSA9IHJlcXVpcmUoXCIuL3Jlc29sdmVyXCIpO1xuY2xhc3MgVWRzUmVzb2x2ZXIge1xuICAgIGNvbnN0cnVjdG9yKHRhcmdldCwgbGlzdGVuZXIsIGNoYW5uZWxPcHRpb25zKSB7XG4gICAgICAgIHRoaXMubGlzdGVuZXIgPSBsaXN0ZW5lcjtcbiAgICAgICAgdGhpcy5oYXNSZXR1cm5lZFJlc3VsdCA9IGZhbHNlO1xuICAgICAgICB0aGlzLmVuZHBvaW50cyA9IFtdO1xuICAgICAgICBsZXQgcGF0aDtcbiAgICAgICAgaWYgKHRhcmdldC5hdXRob3JpdHkgPT09ICcnKSB7XG4gICAgICAgICAgICBwYXRoID0gJy8nICsgdGFyZ2V0LnBhdGg7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICBwYXRoID0gdGFyZ2V0LnBhdGg7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5lbmRwb2ludHMgPSBbeyBhZGRyZXNzZXM6IFt7IHBhdGggfV0gfV07XG4gICAgfVxuICAgIHVwZGF0ZVJlc29sdXRpb24oKSB7XG4gICAgICAgIGlmICghdGhpcy5oYXNSZXR1cm5lZFJlc3VsdCkge1xuICAgICAgICAgICAgdGhpcy5oYXNSZXR1cm5lZFJlc3VsdCA9IHRydWU7XG4gICAgICAgICAgICBwcm9jZXNzLm5leHRUaWNrKHRoaXMubGlzdGVuZXIub25TdWNjZXNzZnVsUmVzb2x1dGlvbiwgdGhpcy5lbmRwb2ludHMsIG51bGwsIG51bGwsIG51bGwsIHt9KTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBkZXN0cm95KCkge1xuICAgICAgICB0aGlzLmhhc1JldHVybmVkUmVzdWx0ID0gZmFsc2U7XG4gICAgfVxuICAgIHN0YXRpYyBnZXREZWZhdWx0QXV0aG9yaXR5KHRhcmdldCkge1xuICAgICAgICByZXR1cm4gJ2xvY2FsaG9zdCc7XG4gICAgfVxufVxuZnVuY3Rpb24gc2V0dXAoKSB7XG4gICAgKDAsIHJlc29sdmVyXzEucmVnaXN0ZXJSZXNvbHZlcikoJ3VuaXgnLCBVZHNSZXNvbHZlcik7XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1yZXNvbHZlci11ZHMuanMubWFwIl0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/google-gax/node_modules/@grpc/grpc-js/build/src/resolver-uds.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/google-gax/node_modules/@grpc/grpc-js/build/src/resolver.js":
/*!**********************************************************************************!*\
  !*** ./node_modules/google-gax/node_modules/@grpc/grpc-js/build/src/resolver.js ***!
  \**********************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\n/*\n * Copyright 2019 gRPC authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n */\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.registerResolver = registerResolver;\nexports.registerDefaultScheme = registerDefaultScheme;\nexports.createResolver = createResolver;\nexports.getDefaultAuthority = getDefaultAuthority;\nexports.mapUriDefaultScheme = mapUriDefaultScheme;\nconst uri_parser_1 = __webpack_require__(/*! ./uri-parser */ \"(rsc)/./node_modules/google-gax/node_modules/@grpc/grpc-js/build/src/uri-parser.js\");\nconst registeredResolvers = {};\nlet defaultScheme = null;\n/**\n * Register a resolver class to handle target names prefixed with the `prefix`\n * string. This prefix should correspond to a URI scheme name listed in the\n * [gRPC Name Resolution document](https://github.com/grpc/grpc/blob/master/doc/naming.md)\n * @param prefix\n * @param resolverClass\n */\nfunction registerResolver(scheme, resolverClass) {\n    registeredResolvers[scheme] = resolverClass;\n}\n/**\n * Register a default resolver to handle target names that do not start with\n * any registered prefix.\n * @param resolverClass\n */\nfunction registerDefaultScheme(scheme) {\n    defaultScheme = scheme;\n}\n/**\n * Create a name resolver for the specified target, if possible. Throws an\n * error if no such name resolver can be created.\n * @param target\n * @param listener\n */\nfunction createResolver(target, listener, options) {\n    if (target.scheme !== undefined && target.scheme in registeredResolvers) {\n        return new registeredResolvers[target.scheme](target, listener, options);\n    }\n    else {\n        throw new Error(`No resolver could be created for target ${(0, uri_parser_1.uriToString)(target)}`);\n    }\n}\n/**\n * Get the default authority for the specified target, if possible. Throws an\n * error if no registered name resolver can parse that target string.\n * @param target\n */\nfunction getDefaultAuthority(target) {\n    if (target.scheme !== undefined && target.scheme in registeredResolvers) {\n        return registeredResolvers[target.scheme].getDefaultAuthority(target);\n    }\n    else {\n        throw new Error(`Invalid target ${(0, uri_parser_1.uriToString)(target)}`);\n    }\n}\nfunction mapUriDefaultScheme(target) {\n    if (target.scheme === undefined || !(target.scheme in registeredResolvers)) {\n        if (defaultScheme !== null) {\n            return {\n                scheme: defaultScheme,\n                authority: undefined,\n                path: (0, uri_parser_1.uriToString)(target),\n            };\n        }\n        else {\n            return null;\n        }\n    }\n    return target;\n}\n//# sourceMappingURL=resolver.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvZ29vZ2xlLWdheC9ub2RlX21vZHVsZXMvQGdycGMvZ3JwYy1qcy9idWlsZC9zcmMvcmVzb2x2ZXIuanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDhDQUE2QyxFQUFFLGFBQWEsRUFBQztBQUM3RCx3QkFBd0I7QUFDeEIsNkJBQTZCO0FBQzdCLHNCQUFzQjtBQUN0QiwyQkFBMkI7QUFDM0IsMkJBQTJCO0FBQzNCLHFCQUFxQixtQkFBTyxDQUFDLHdHQUFjO0FBQzNDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsbUVBQW1FLHNDQUFzQztBQUN6RztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSwwQ0FBMEMsc0NBQXNDO0FBQ2hGO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsInNvdXJjZXMiOlsiL1VzZXJzL2JhZy15b3NlYi9EZXNrdG9wL+GEkeGFqeGEh+GFteGEi+GFoS9oYWNrYXRob25fdGVhbS9teS1hcHAvbm9kZV9tb2R1bGVzL2dvb2dsZS1nYXgvbm9kZV9tb2R1bGVzL0BncnBjL2dycGMtanMvYnVpbGQvc3JjL3Jlc29sdmVyLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuLypcbiAqIENvcHlyaWdodCAyMDE5IGdSUEMgYXV0aG9ycy5cbiAqXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4gKlxuICogICAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuICpcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4gKlxuICovXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLnJlZ2lzdGVyUmVzb2x2ZXIgPSByZWdpc3RlclJlc29sdmVyO1xuZXhwb3J0cy5yZWdpc3RlckRlZmF1bHRTY2hlbWUgPSByZWdpc3RlckRlZmF1bHRTY2hlbWU7XG5leHBvcnRzLmNyZWF0ZVJlc29sdmVyID0gY3JlYXRlUmVzb2x2ZXI7XG5leHBvcnRzLmdldERlZmF1bHRBdXRob3JpdHkgPSBnZXREZWZhdWx0QXV0aG9yaXR5O1xuZXhwb3J0cy5tYXBVcmlEZWZhdWx0U2NoZW1lID0gbWFwVXJpRGVmYXVsdFNjaGVtZTtcbmNvbnN0IHVyaV9wYXJzZXJfMSA9IHJlcXVpcmUoXCIuL3VyaS1wYXJzZXJcIik7XG5jb25zdCByZWdpc3RlcmVkUmVzb2x2ZXJzID0ge307XG5sZXQgZGVmYXVsdFNjaGVtZSA9IG51bGw7XG4vKipcbiAqIFJlZ2lzdGVyIGEgcmVzb2x2ZXIgY2xhc3MgdG8gaGFuZGxlIHRhcmdldCBuYW1lcyBwcmVmaXhlZCB3aXRoIHRoZSBgcHJlZml4YFxuICogc3RyaW5nLiBUaGlzIHByZWZpeCBzaG91bGQgY29ycmVzcG9uZCB0byBhIFVSSSBzY2hlbWUgbmFtZSBsaXN0ZWQgaW4gdGhlXG4gKiBbZ1JQQyBOYW1lIFJlc29sdXRpb24gZG9jdW1lbnRdKGh0dHBzOi8vZ2l0aHViLmNvbS9ncnBjL2dycGMvYmxvYi9tYXN0ZXIvZG9jL25hbWluZy5tZClcbiAqIEBwYXJhbSBwcmVmaXhcbiAqIEBwYXJhbSByZXNvbHZlckNsYXNzXG4gKi9cbmZ1bmN0aW9uIHJlZ2lzdGVyUmVzb2x2ZXIoc2NoZW1lLCByZXNvbHZlckNsYXNzKSB7XG4gICAgcmVnaXN0ZXJlZFJlc29sdmVyc1tzY2hlbWVdID0gcmVzb2x2ZXJDbGFzcztcbn1cbi8qKlxuICogUmVnaXN0ZXIgYSBkZWZhdWx0IHJlc29sdmVyIHRvIGhhbmRsZSB0YXJnZXQgbmFtZXMgdGhhdCBkbyBub3Qgc3RhcnQgd2l0aFxuICogYW55IHJlZ2lzdGVyZWQgcHJlZml4LlxuICogQHBhcmFtIHJlc29sdmVyQ2xhc3NcbiAqL1xuZnVuY3Rpb24gcmVnaXN0ZXJEZWZhdWx0U2NoZW1lKHNjaGVtZSkge1xuICAgIGRlZmF1bHRTY2hlbWUgPSBzY2hlbWU7XG59XG4vKipcbiAqIENyZWF0ZSBhIG5hbWUgcmVzb2x2ZXIgZm9yIHRoZSBzcGVjaWZpZWQgdGFyZ2V0LCBpZiBwb3NzaWJsZS4gVGhyb3dzIGFuXG4gKiBlcnJvciBpZiBubyBzdWNoIG5hbWUgcmVzb2x2ZXIgY2FuIGJlIGNyZWF0ZWQuXG4gKiBAcGFyYW0gdGFyZ2V0XG4gKiBAcGFyYW0gbGlzdGVuZXJcbiAqL1xuZnVuY3Rpb24gY3JlYXRlUmVzb2x2ZXIodGFyZ2V0LCBsaXN0ZW5lciwgb3B0aW9ucykge1xuICAgIGlmICh0YXJnZXQuc2NoZW1lICE9PSB1bmRlZmluZWQgJiYgdGFyZ2V0LnNjaGVtZSBpbiByZWdpc3RlcmVkUmVzb2x2ZXJzKSB7XG4gICAgICAgIHJldHVybiBuZXcgcmVnaXN0ZXJlZFJlc29sdmVyc1t0YXJnZXQuc2NoZW1lXSh0YXJnZXQsIGxpc3RlbmVyLCBvcHRpb25zKTtcbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihgTm8gcmVzb2x2ZXIgY291bGQgYmUgY3JlYXRlZCBmb3IgdGFyZ2V0ICR7KDAsIHVyaV9wYXJzZXJfMS51cmlUb1N0cmluZykodGFyZ2V0KX1gKTtcbiAgICB9XG59XG4vKipcbiAqIEdldCB0aGUgZGVmYXVsdCBhdXRob3JpdHkgZm9yIHRoZSBzcGVjaWZpZWQgdGFyZ2V0LCBpZiBwb3NzaWJsZS4gVGhyb3dzIGFuXG4gKiBlcnJvciBpZiBubyByZWdpc3RlcmVkIG5hbWUgcmVzb2x2ZXIgY2FuIHBhcnNlIHRoYXQgdGFyZ2V0IHN0cmluZy5cbiAqIEBwYXJhbSB0YXJnZXRcbiAqL1xuZnVuY3Rpb24gZ2V0RGVmYXVsdEF1dGhvcml0eSh0YXJnZXQpIHtcbiAgICBpZiAodGFyZ2V0LnNjaGVtZSAhPT0gdW5kZWZpbmVkICYmIHRhcmdldC5zY2hlbWUgaW4gcmVnaXN0ZXJlZFJlc29sdmVycykge1xuICAgICAgICByZXR1cm4gcmVnaXN0ZXJlZFJlc29sdmVyc1t0YXJnZXQuc2NoZW1lXS5nZXREZWZhdWx0QXV0aG9yaXR5KHRhcmdldCk7XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYEludmFsaWQgdGFyZ2V0ICR7KDAsIHVyaV9wYXJzZXJfMS51cmlUb1N0cmluZykodGFyZ2V0KX1gKTtcbiAgICB9XG59XG5mdW5jdGlvbiBtYXBVcmlEZWZhdWx0U2NoZW1lKHRhcmdldCkge1xuICAgIGlmICh0YXJnZXQuc2NoZW1lID09PSB1bmRlZmluZWQgfHwgISh0YXJnZXQuc2NoZW1lIGluIHJlZ2lzdGVyZWRSZXNvbHZlcnMpKSB7XG4gICAgICAgIGlmIChkZWZhdWx0U2NoZW1lICE9PSBudWxsKSB7XG4gICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgIHNjaGVtZTogZGVmYXVsdFNjaGVtZSxcbiAgICAgICAgICAgICAgICBhdXRob3JpdHk6IHVuZGVmaW5lZCxcbiAgICAgICAgICAgICAgICBwYXRoOiAoMCwgdXJpX3BhcnNlcl8xLnVyaVRvU3RyaW5nKSh0YXJnZXQpLFxuICAgICAgICAgICAgfTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICB9XG4gICAgfVxuICAgIHJldHVybiB0YXJnZXQ7XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1yZXNvbHZlci5qcy5tYXAiXSwibmFtZXMiOltdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/google-gax/node_modules/@grpc/grpc-js/build/src/resolver.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/google-gax/node_modules/@grpc/grpc-js/build/src/resolving-call.js":
/*!****************************************************************************************!*\
  !*** ./node_modules/google-gax/node_modules/@grpc/grpc-js/build/src/resolving-call.js ***!
  \****************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\n/*\n * Copyright 2022 gRPC authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n */\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.ResolvingCall = void 0;\nconst call_credentials_1 = __webpack_require__(/*! ./call-credentials */ \"(rsc)/./node_modules/google-gax/node_modules/@grpc/grpc-js/build/src/call-credentials.js\");\nconst constants_1 = __webpack_require__(/*! ./constants */ \"(rsc)/./node_modules/google-gax/node_modules/@grpc/grpc-js/build/src/constants.js\");\nconst deadline_1 = __webpack_require__(/*! ./deadline */ \"(rsc)/./node_modules/google-gax/node_modules/@grpc/grpc-js/build/src/deadline.js\");\nconst metadata_1 = __webpack_require__(/*! ./metadata */ \"(rsc)/./node_modules/google-gax/node_modules/@grpc/grpc-js/build/src/metadata.js\");\nconst logging = __webpack_require__(/*! ./logging */ \"(rsc)/./node_modules/google-gax/node_modules/@grpc/grpc-js/build/src/logging.js\");\nconst control_plane_status_1 = __webpack_require__(/*! ./control-plane-status */ \"(rsc)/./node_modules/google-gax/node_modules/@grpc/grpc-js/build/src/control-plane-status.js\");\nconst TRACER_NAME = 'resolving_call';\nclass ResolvingCall {\n    constructor(channel, method, options, filterStackFactory, callNumber) {\n        this.channel = channel;\n        this.method = method;\n        this.filterStackFactory = filterStackFactory;\n        this.callNumber = callNumber;\n        this.child = null;\n        this.readPending = false;\n        this.pendingMessage = null;\n        this.pendingHalfClose = false;\n        this.ended = false;\n        this.readFilterPending = false;\n        this.writeFilterPending = false;\n        this.pendingChildStatus = null;\n        this.metadata = null;\n        this.listener = null;\n        this.statusWatchers = [];\n        this.deadlineTimer = setTimeout(() => { }, 0);\n        this.filterStack = null;\n        this.deadlineStartTime = null;\n        this.configReceivedTime = null;\n        this.childStartTime = null;\n        /**\n         * Credentials configured for this specific call. Does not include\n         * call credentials associated with the channel credentials used to create\n         * the channel.\n         */\n        this.credentials = call_credentials_1.CallCredentials.createEmpty();\n        this.deadline = options.deadline;\n        this.host = options.host;\n        if (options.parentCall) {\n            if (options.flags & constants_1.Propagate.CANCELLATION) {\n                options.parentCall.on('cancelled', () => {\n                    this.cancelWithStatus(constants_1.Status.CANCELLED, 'Cancelled by parent call');\n                });\n            }\n            if (options.flags & constants_1.Propagate.DEADLINE) {\n                this.trace('Propagating deadline from parent: ' +\n                    options.parentCall.getDeadline());\n                this.deadline = (0, deadline_1.minDeadline)(this.deadline, options.parentCall.getDeadline());\n            }\n        }\n        this.trace('Created');\n        this.runDeadlineTimer();\n    }\n    trace(text) {\n        logging.trace(constants_1.LogVerbosity.DEBUG, TRACER_NAME, '[' + this.callNumber + '] ' + text);\n    }\n    runDeadlineTimer() {\n        clearTimeout(this.deadlineTimer);\n        this.deadlineStartTime = new Date();\n        this.trace('Deadline: ' + (0, deadline_1.deadlineToString)(this.deadline));\n        const timeout = (0, deadline_1.getRelativeTimeout)(this.deadline);\n        if (timeout !== Infinity) {\n            this.trace('Deadline will be reached in ' + timeout + 'ms');\n            const handleDeadline = () => {\n                if (!this.deadlineStartTime) {\n                    this.cancelWithStatus(constants_1.Status.DEADLINE_EXCEEDED, 'Deadline exceeded');\n                    return;\n                }\n                const deadlineInfo = [];\n                const deadlineEndTime = new Date();\n                deadlineInfo.push(`Deadline exceeded after ${(0, deadline_1.formatDateDifference)(this.deadlineStartTime, deadlineEndTime)}`);\n                if (this.configReceivedTime) {\n                    if (this.configReceivedTime > this.deadlineStartTime) {\n                        deadlineInfo.push(`name resolution: ${(0, deadline_1.formatDateDifference)(this.deadlineStartTime, this.configReceivedTime)}`);\n                    }\n                    if (this.childStartTime) {\n                        if (this.childStartTime > this.configReceivedTime) {\n                            deadlineInfo.push(`metadata filters: ${(0, deadline_1.formatDateDifference)(this.configReceivedTime, this.childStartTime)}`);\n                        }\n                    }\n                    else {\n                        deadlineInfo.push('waiting for metadata filters');\n                    }\n                }\n                else {\n                    deadlineInfo.push('waiting for name resolution');\n                }\n                if (this.child) {\n                    deadlineInfo.push(...this.child.getDeadlineInfo());\n                }\n                this.cancelWithStatus(constants_1.Status.DEADLINE_EXCEEDED, deadlineInfo.join(','));\n            };\n            if (timeout <= 0) {\n                process.nextTick(handleDeadline);\n            }\n            else {\n                this.deadlineTimer = setTimeout(handleDeadline, timeout);\n            }\n        }\n    }\n    outputStatus(status) {\n        if (!this.ended) {\n            this.ended = true;\n            if (!this.filterStack) {\n                this.filterStack = this.filterStackFactory.createFilter();\n            }\n            clearTimeout(this.deadlineTimer);\n            const filteredStatus = this.filterStack.receiveTrailers(status);\n            this.trace('ended with status: code=' +\n                filteredStatus.code +\n                ' details=\"' +\n                filteredStatus.details +\n                '\"');\n            this.statusWatchers.forEach(watcher => watcher(filteredStatus));\n            process.nextTick(() => {\n                var _a;\n                (_a = this.listener) === null || _a === void 0 ? void 0 : _a.onReceiveStatus(filteredStatus);\n            });\n        }\n    }\n    sendMessageOnChild(context, message) {\n        if (!this.child) {\n            throw new Error('sendMessageonChild called with child not populated');\n        }\n        const child = this.child;\n        this.writeFilterPending = true;\n        this.filterStack.sendMessage(Promise.resolve({ message: message, flags: context.flags })).then(filteredMessage => {\n            this.writeFilterPending = false;\n            child.sendMessageWithContext(context, filteredMessage.message);\n            if (this.pendingHalfClose) {\n                child.halfClose();\n            }\n        }, (status) => {\n            this.cancelWithStatus(status.code, status.details);\n        });\n    }\n    getConfig() {\n        if (this.ended) {\n            return;\n        }\n        if (!this.metadata || !this.listener) {\n            throw new Error('getConfig called before start');\n        }\n        const configResult = this.channel.getConfig(this.method, this.metadata);\n        if (configResult.type === 'NONE') {\n            this.channel.queueCallForConfig(this);\n            return;\n        }\n        else if (configResult.type === 'ERROR') {\n            if (this.metadata.getOptions().waitForReady) {\n                this.channel.queueCallForConfig(this);\n            }\n            else {\n                this.outputStatus(configResult.error);\n            }\n            return;\n        }\n        // configResult.type === 'SUCCESS'\n        this.configReceivedTime = new Date();\n        const config = configResult.config;\n        if (config.status !== constants_1.Status.OK) {\n            const { code, details } = (0, control_plane_status_1.restrictControlPlaneStatusCode)(config.status, 'Failed to route call to method ' + this.method);\n            this.outputStatus({\n                code: code,\n                details: details,\n                metadata: new metadata_1.Metadata(),\n            });\n            return;\n        }\n        if (config.methodConfig.timeout) {\n            const configDeadline = new Date();\n            configDeadline.setSeconds(configDeadline.getSeconds() + config.methodConfig.timeout.seconds);\n            configDeadline.setMilliseconds(configDeadline.getMilliseconds() +\n                config.methodConfig.timeout.nanos / 1000000);\n            this.deadline = (0, deadline_1.minDeadline)(this.deadline, configDeadline);\n            this.runDeadlineTimer();\n        }\n        this.filterStackFactory.push(config.dynamicFilterFactories);\n        this.filterStack = this.filterStackFactory.createFilter();\n        this.filterStack.sendMetadata(Promise.resolve(this.metadata)).then(filteredMetadata => {\n            this.child = this.channel.createRetryingCall(config, this.method, this.host, this.credentials, this.deadline);\n            this.trace('Created child [' + this.child.getCallNumber() + ']');\n            this.childStartTime = new Date();\n            this.child.start(filteredMetadata, {\n                onReceiveMetadata: metadata => {\n                    this.trace('Received metadata');\n                    this.listener.onReceiveMetadata(this.filterStack.receiveMetadata(metadata));\n                },\n                onReceiveMessage: message => {\n                    this.trace('Received message');\n                    this.readFilterPending = true;\n                    this.filterStack.receiveMessage(message).then(filteredMesssage => {\n                        this.trace('Finished filtering received message');\n                        this.readFilterPending = false;\n                        this.listener.onReceiveMessage(filteredMesssage);\n                        if (this.pendingChildStatus) {\n                            this.outputStatus(this.pendingChildStatus);\n                        }\n                    }, (status) => {\n                        this.cancelWithStatus(status.code, status.details);\n                    });\n                },\n                onReceiveStatus: status => {\n                    this.trace('Received status');\n                    if (this.readFilterPending) {\n                        this.pendingChildStatus = status;\n                    }\n                    else {\n                        this.outputStatus(status);\n                    }\n                },\n            });\n            if (this.readPending) {\n                this.child.startRead();\n            }\n            if (this.pendingMessage) {\n                this.sendMessageOnChild(this.pendingMessage.context, this.pendingMessage.message);\n            }\n            else if (this.pendingHalfClose) {\n                this.child.halfClose();\n            }\n        }, (status) => {\n            this.outputStatus(status);\n        });\n    }\n    reportResolverError(status) {\n        var _a;\n        if ((_a = this.metadata) === null || _a === void 0 ? void 0 : _a.getOptions().waitForReady) {\n            this.channel.queueCallForConfig(this);\n        }\n        else {\n            this.outputStatus(status);\n        }\n    }\n    cancelWithStatus(status, details) {\n        var _a;\n        this.trace('cancelWithStatus code: ' + status + ' details: \"' + details + '\"');\n        (_a = this.child) === null || _a === void 0 ? void 0 : _a.cancelWithStatus(status, details);\n        this.outputStatus({\n            code: status,\n            details: details,\n            metadata: new metadata_1.Metadata(),\n        });\n    }\n    getPeer() {\n        var _a, _b;\n        return (_b = (_a = this.child) === null || _a === void 0 ? void 0 : _a.getPeer()) !== null && _b !== void 0 ? _b : this.channel.getTarget();\n    }\n    start(metadata, listener) {\n        this.trace('start called');\n        this.metadata = metadata.clone();\n        this.listener = listener;\n        this.getConfig();\n    }\n    sendMessageWithContext(context, message) {\n        this.trace('write() called with message of length ' + message.length);\n        if (this.child) {\n            this.sendMessageOnChild(context, message);\n        }\n        else {\n            this.pendingMessage = { context, message };\n        }\n    }\n    startRead() {\n        this.trace('startRead called');\n        if (this.child) {\n            this.child.startRead();\n        }\n        else {\n            this.readPending = true;\n        }\n    }\n    halfClose() {\n        this.trace('halfClose called');\n        if (this.child && !this.writeFilterPending) {\n            this.child.halfClose();\n        }\n        else {\n            this.pendingHalfClose = true;\n        }\n    }\n    setCredentials(credentials) {\n        this.credentials = credentials;\n    }\n    addStatusWatcher(watcher) {\n        this.statusWatchers.push(watcher);\n    }\n    getCallNumber() {\n        return this.callNumber;\n    }\n}\nexports.ResolvingCall = ResolvingCall;\n//# sourceMappingURL=resolving-call.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/google-gax/node_modules/@grpc/grpc-js/build/src/resolving-call.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/google-gax/node_modules/@grpc/grpc-js/build/src/resolving-load-balancer.js":
/*!*************************************************************************************************!*\
  !*** ./node_modules/google-gax/node_modules/@grpc/grpc-js/build/src/resolving-load-balancer.js ***!
  \*************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\n/*\n * Copyright 2019 gRPC authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n */\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.ResolvingLoadBalancer = void 0;\nconst load_balancer_1 = __webpack_require__(/*! ./load-balancer */ \"(rsc)/./node_modules/google-gax/node_modules/@grpc/grpc-js/build/src/load-balancer.js\");\nconst service_config_1 = __webpack_require__(/*! ./service-config */ \"(rsc)/./node_modules/google-gax/node_modules/@grpc/grpc-js/build/src/service-config.js\");\nconst connectivity_state_1 = __webpack_require__(/*! ./connectivity-state */ \"(rsc)/./node_modules/google-gax/node_modules/@grpc/grpc-js/build/src/connectivity-state.js\");\nconst resolver_1 = __webpack_require__(/*! ./resolver */ \"(rsc)/./node_modules/google-gax/node_modules/@grpc/grpc-js/build/src/resolver.js\");\nconst picker_1 = __webpack_require__(/*! ./picker */ \"(rsc)/./node_modules/google-gax/node_modules/@grpc/grpc-js/build/src/picker.js\");\nconst backoff_timeout_1 = __webpack_require__(/*! ./backoff-timeout */ \"(rsc)/./node_modules/google-gax/node_modules/@grpc/grpc-js/build/src/backoff-timeout.js\");\nconst constants_1 = __webpack_require__(/*! ./constants */ \"(rsc)/./node_modules/google-gax/node_modules/@grpc/grpc-js/build/src/constants.js\");\nconst metadata_1 = __webpack_require__(/*! ./metadata */ \"(rsc)/./node_modules/google-gax/node_modules/@grpc/grpc-js/build/src/metadata.js\");\nconst logging = __webpack_require__(/*! ./logging */ \"(rsc)/./node_modules/google-gax/node_modules/@grpc/grpc-js/build/src/logging.js\");\nconst constants_2 = __webpack_require__(/*! ./constants */ \"(rsc)/./node_modules/google-gax/node_modules/@grpc/grpc-js/build/src/constants.js\");\nconst uri_parser_1 = __webpack_require__(/*! ./uri-parser */ \"(rsc)/./node_modules/google-gax/node_modules/@grpc/grpc-js/build/src/uri-parser.js\");\nconst load_balancer_child_handler_1 = __webpack_require__(/*! ./load-balancer-child-handler */ \"(rsc)/./node_modules/google-gax/node_modules/@grpc/grpc-js/build/src/load-balancer-child-handler.js\");\nconst TRACER_NAME = 'resolving_load_balancer';\nfunction trace(text) {\n    logging.trace(constants_2.LogVerbosity.DEBUG, TRACER_NAME, text);\n}\n/**\n * Name match levels in order from most to least specific. This is the order in\n * which searches will be performed.\n */\nconst NAME_MATCH_LEVEL_ORDER = [\n    'SERVICE_AND_METHOD',\n    'SERVICE',\n    'EMPTY',\n];\nfunction hasMatchingName(service, method, methodConfig, matchLevel) {\n    for (const name of methodConfig.name) {\n        switch (matchLevel) {\n            case 'EMPTY':\n                if (!name.service && !name.method) {\n                    return true;\n                }\n                break;\n            case 'SERVICE':\n                if (name.service === service && !name.method) {\n                    return true;\n                }\n                break;\n            case 'SERVICE_AND_METHOD':\n                if (name.service === service && name.method === method) {\n                    return true;\n                }\n        }\n    }\n    return false;\n}\nfunction findMatchingConfig(service, method, methodConfigs, matchLevel) {\n    for (const config of methodConfigs) {\n        if (hasMatchingName(service, method, config, matchLevel)) {\n            return config;\n        }\n    }\n    return null;\n}\nfunction getDefaultConfigSelector(serviceConfig) {\n    return {\n        invoke(methodName, metadata) {\n            var _a, _b;\n            const splitName = methodName.split('/').filter(x => x.length > 0);\n            const service = (_a = splitName[0]) !== null && _a !== void 0 ? _a : '';\n            const method = (_b = splitName[1]) !== null && _b !== void 0 ? _b : '';\n            if (serviceConfig && serviceConfig.methodConfig) {\n                /* Check for the following in order, and return the first method\n                * config that matches:\n                * 1. A name that exactly matches the service and method\n                * 2. A name with no method set that matches the service\n                * 3. An empty name\n                */\n                for (const matchLevel of NAME_MATCH_LEVEL_ORDER) {\n                    const matchingConfig = findMatchingConfig(service, method, serviceConfig.methodConfig, matchLevel);\n                    if (matchingConfig) {\n                        return {\n                            methodConfig: matchingConfig,\n                            pickInformation: {},\n                            status: constants_1.Status.OK,\n                            dynamicFilterFactories: [],\n                        };\n                    }\n                }\n            }\n            return {\n                methodConfig: { name: [] },\n                pickInformation: {},\n                status: constants_1.Status.OK,\n                dynamicFilterFactories: [],\n            };\n        },\n        unref() { }\n    };\n}\nclass ResolvingLoadBalancer {\n    /**\n     * Wrapper class that behaves like a `LoadBalancer` and also handles name\n     * resolution internally.\n     * @param target The address of the backend to connect to.\n     * @param channelControlHelper `ChannelControlHelper` instance provided by\n     *     this load balancer's owner.\n     * @param defaultServiceConfig The default service configuration to be used\n     *     if none is provided by the name resolver. A `null` value indicates\n     *     that the default behavior should be the default unconfigured behavior.\n     *     In practice, that means using the \"pick first\" load balancer\n     *     implmentation\n     */\n    constructor(target, channelControlHelper, channelOptions, onSuccessfulResolution, onFailedResolution) {\n        this.target = target;\n        this.channelControlHelper = channelControlHelper;\n        this.channelOptions = channelOptions;\n        this.onSuccessfulResolution = onSuccessfulResolution;\n        this.onFailedResolution = onFailedResolution;\n        this.latestChildState = connectivity_state_1.ConnectivityState.IDLE;\n        this.latestChildPicker = new picker_1.QueuePicker(this);\n        this.latestChildErrorMessage = null;\n        /**\n         * This resolving load balancer's current connectivity state.\n         */\n        this.currentState = connectivity_state_1.ConnectivityState.IDLE;\n        /**\n         * The service config object from the last successful resolution, if\n         * available. A value of null indicates that we have not yet received a valid\n         * service config from the resolver.\n         */\n        this.previousServiceConfig = null;\n        /**\n         * Indicates whether we should attempt to resolve again after the backoff\n         * timer runs out.\n         */\n        this.continueResolving = false;\n        if (channelOptions['grpc.service_config']) {\n            this.defaultServiceConfig = (0, service_config_1.validateServiceConfig)(JSON.parse(channelOptions['grpc.service_config']));\n        }\n        else {\n            this.defaultServiceConfig = {\n                loadBalancingConfig: [],\n                methodConfig: [],\n            };\n        }\n        this.updateState(connectivity_state_1.ConnectivityState.IDLE, new picker_1.QueuePicker(this), null);\n        this.childLoadBalancer = new load_balancer_child_handler_1.ChildLoadBalancerHandler({\n            createSubchannel: channelControlHelper.createSubchannel.bind(channelControlHelper),\n            requestReresolution: () => {\n                /* If the backoffTimeout is running, we're still backing off from\n                 * making resolve requests, so we shouldn't make another one here.\n                 * In that case, the backoff timer callback will call\n                 * updateResolution */\n                if (this.backoffTimeout.isRunning()) {\n                    trace('requestReresolution delayed by backoff timer until ' +\n                        this.backoffTimeout.getEndTime().toISOString());\n                    this.continueResolving = true;\n                }\n                else {\n                    this.updateResolution();\n                }\n            },\n            updateState: (newState, picker, errorMessage) => {\n                this.latestChildState = newState;\n                this.latestChildPicker = picker;\n                this.latestChildErrorMessage = errorMessage;\n                this.updateState(newState, picker, errorMessage);\n            },\n            addChannelzChild: channelControlHelper.addChannelzChild.bind(channelControlHelper),\n            removeChannelzChild: channelControlHelper.removeChannelzChild.bind(channelControlHelper),\n        });\n        this.innerResolver = (0, resolver_1.createResolver)(target, {\n            onSuccessfulResolution: (endpointList, serviceConfig, serviceConfigError, configSelector, attributes) => {\n                var _a;\n                this.backoffTimeout.stop();\n                this.backoffTimeout.reset();\n                let workingServiceConfig = null;\n                /* This first group of conditionals implements the algorithm described\n                 * in https://github.com/grpc/proposal/blob/master/A21-service-config-error-handling.md\n                 * in the section called \"Behavior on receiving a new gRPC Config\".\n                 */\n                if (serviceConfig === null) {\n                    // Step 4 and 5\n                    if (serviceConfigError === null) {\n                        // Step 5\n                        this.previousServiceConfig = null;\n                        workingServiceConfig = this.defaultServiceConfig;\n                    }\n                    else {\n                        // Step 4\n                        if (this.previousServiceConfig === null) {\n                            // Step 4.ii\n                            this.handleResolutionFailure(serviceConfigError);\n                        }\n                        else {\n                            // Step 4.i\n                            workingServiceConfig = this.previousServiceConfig;\n                        }\n                    }\n                }\n                else {\n                    // Step 3\n                    workingServiceConfig = serviceConfig;\n                    this.previousServiceConfig = serviceConfig;\n                }\n                const workingConfigList = (_a = workingServiceConfig === null || workingServiceConfig === void 0 ? void 0 : workingServiceConfig.loadBalancingConfig) !== null && _a !== void 0 ? _a : [];\n                const loadBalancingConfig = (0, load_balancer_1.selectLbConfigFromList)(workingConfigList, true);\n                if (loadBalancingConfig === null) {\n                    // There were load balancing configs but none are supported. This counts as a resolution failure\n                    this.handleResolutionFailure({\n                        code: constants_1.Status.UNAVAILABLE,\n                        details: 'All load balancer options in service config are not compatible',\n                        metadata: new metadata_1.Metadata(),\n                    });\n                    configSelector === null || configSelector === void 0 ? void 0 : configSelector.unref();\n                    return;\n                }\n                this.childLoadBalancer.updateAddressList(endpointList, loadBalancingConfig, Object.assign(Object.assign({}, this.channelOptions), attributes));\n                const finalServiceConfig = workingServiceConfig !== null && workingServiceConfig !== void 0 ? workingServiceConfig : this.defaultServiceConfig;\n                this.onSuccessfulResolution(finalServiceConfig, configSelector !== null && configSelector !== void 0 ? configSelector : getDefaultConfigSelector(finalServiceConfig));\n            },\n            onError: (error) => {\n                this.handleResolutionFailure(error);\n            },\n        }, channelOptions);\n        const backoffOptions = {\n            initialDelay: channelOptions['grpc.initial_reconnect_backoff_ms'],\n            maxDelay: channelOptions['grpc.max_reconnect_backoff_ms'],\n        };\n        this.backoffTimeout = new backoff_timeout_1.BackoffTimeout(() => {\n            if (this.continueResolving) {\n                this.updateResolution();\n                this.continueResolving = false;\n            }\n            else {\n                this.updateState(this.latestChildState, this.latestChildPicker, this.latestChildErrorMessage);\n            }\n        }, backoffOptions);\n        this.backoffTimeout.unref();\n    }\n    updateResolution() {\n        this.innerResolver.updateResolution();\n        if (this.currentState === connectivity_state_1.ConnectivityState.IDLE) {\n            /* this.latestChildPicker is initialized as new QueuePicker(this), which\n             * is an appropriate value here if the child LB policy is unset.\n             * Otherwise, we want to delegate to the child here, in case that\n             * triggers something. */\n            this.updateState(connectivity_state_1.ConnectivityState.CONNECTING, this.latestChildPicker, this.latestChildErrorMessage);\n        }\n        this.backoffTimeout.runOnce();\n    }\n    updateState(connectivityState, picker, errorMessage) {\n        trace((0, uri_parser_1.uriToString)(this.target) +\n            ' ' +\n            connectivity_state_1.ConnectivityState[this.currentState] +\n            ' -> ' +\n            connectivity_state_1.ConnectivityState[connectivityState]);\n        // Ensure that this.exitIdle() is called by the picker\n        if (connectivityState === connectivity_state_1.ConnectivityState.IDLE) {\n            picker = new picker_1.QueuePicker(this, picker);\n        }\n        this.currentState = connectivityState;\n        this.channelControlHelper.updateState(connectivityState, picker, errorMessage);\n    }\n    handleResolutionFailure(error) {\n        if (this.latestChildState === connectivity_state_1.ConnectivityState.IDLE) {\n            this.updateState(connectivity_state_1.ConnectivityState.TRANSIENT_FAILURE, new picker_1.UnavailablePicker(error), error.details);\n            this.onFailedResolution(error);\n        }\n    }\n    exitIdle() {\n        if (this.currentState === connectivity_state_1.ConnectivityState.IDLE ||\n            this.currentState === connectivity_state_1.ConnectivityState.TRANSIENT_FAILURE) {\n            if (this.backoffTimeout.isRunning()) {\n                this.continueResolving = true;\n            }\n            else {\n                this.updateResolution();\n            }\n        }\n        this.childLoadBalancer.exitIdle();\n    }\n    updateAddressList(endpointList, lbConfig) {\n        throw new Error('updateAddressList not supported on ResolvingLoadBalancer');\n    }\n    resetBackoff() {\n        this.backoffTimeout.reset();\n        this.childLoadBalancer.resetBackoff();\n    }\n    destroy() {\n        this.childLoadBalancer.destroy();\n        this.innerResolver.destroy();\n        this.backoffTimeout.reset();\n        this.backoffTimeout.stop();\n        this.latestChildState = connectivity_state_1.ConnectivityState.IDLE;\n        this.latestChildPicker = new picker_1.QueuePicker(this);\n        this.currentState = connectivity_state_1.ConnectivityState.IDLE;\n        this.previousServiceConfig = null;\n        this.continueResolving = false;\n    }\n    getTypeName() {\n        return 'resolving_load_balancer';\n    }\n}\nexports.ResolvingLoadBalancer = ResolvingLoadBalancer;\n//# sourceMappingURL=resolving-load-balancer.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/google-gax/node_modules/@grpc/grpc-js/build/src/resolving-load-balancer.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/google-gax/node_modules/@grpc/grpc-js/build/src/retrying-call.js":
/*!***************************************************************************************!*\
  !*** ./node_modules/google-gax/node_modules/@grpc/grpc-js/build/src/retrying-call.js ***!
  \***************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\n/*\n * Copyright 2022 gRPC authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n */\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.RetryingCall = exports.MessageBufferTracker = exports.RetryThrottler = void 0;\nconst constants_1 = __webpack_require__(/*! ./constants */ \"(rsc)/./node_modules/google-gax/node_modules/@grpc/grpc-js/build/src/constants.js\");\nconst deadline_1 = __webpack_require__(/*! ./deadline */ \"(rsc)/./node_modules/google-gax/node_modules/@grpc/grpc-js/build/src/deadline.js\");\nconst metadata_1 = __webpack_require__(/*! ./metadata */ \"(rsc)/./node_modules/google-gax/node_modules/@grpc/grpc-js/build/src/metadata.js\");\nconst logging = __webpack_require__(/*! ./logging */ \"(rsc)/./node_modules/google-gax/node_modules/@grpc/grpc-js/build/src/logging.js\");\nconst TRACER_NAME = 'retrying_call';\nclass RetryThrottler {\n    constructor(maxTokens, tokenRatio, previousRetryThrottler) {\n        this.maxTokens = maxTokens;\n        this.tokenRatio = tokenRatio;\n        if (previousRetryThrottler) {\n            /* When carrying over tokens from a previous config, rescale them to the\n             * new max value */\n            this.tokens =\n                previousRetryThrottler.tokens *\n                    (maxTokens / previousRetryThrottler.maxTokens);\n        }\n        else {\n            this.tokens = maxTokens;\n        }\n    }\n    addCallSucceeded() {\n        this.tokens = Math.min(this.tokens + this.tokenRatio, this.maxTokens);\n    }\n    addCallFailed() {\n        this.tokens = Math.max(this.tokens - 1, 0);\n    }\n    canRetryCall() {\n        return this.tokens > (this.maxTokens / 2);\n    }\n}\nexports.RetryThrottler = RetryThrottler;\nclass MessageBufferTracker {\n    constructor(totalLimit, limitPerCall) {\n        this.totalLimit = totalLimit;\n        this.limitPerCall = limitPerCall;\n        this.totalAllocated = 0;\n        this.allocatedPerCall = new Map();\n    }\n    allocate(size, callId) {\n        var _a;\n        const currentPerCall = (_a = this.allocatedPerCall.get(callId)) !== null && _a !== void 0 ? _a : 0;\n        if (this.limitPerCall - currentPerCall < size ||\n            this.totalLimit - this.totalAllocated < size) {\n            return false;\n        }\n        this.allocatedPerCall.set(callId, currentPerCall + size);\n        this.totalAllocated += size;\n        return true;\n    }\n    free(size, callId) {\n        var _a;\n        if (this.totalAllocated < size) {\n            throw new Error(`Invalid buffer allocation state: call ${callId} freed ${size} > total allocated ${this.totalAllocated}`);\n        }\n        this.totalAllocated -= size;\n        const currentPerCall = (_a = this.allocatedPerCall.get(callId)) !== null && _a !== void 0 ? _a : 0;\n        if (currentPerCall < size) {\n            throw new Error(`Invalid buffer allocation state: call ${callId} freed ${size} > allocated for call ${currentPerCall}`);\n        }\n        this.allocatedPerCall.set(callId, currentPerCall - size);\n    }\n    freeAll(callId) {\n        var _a;\n        const currentPerCall = (_a = this.allocatedPerCall.get(callId)) !== null && _a !== void 0 ? _a : 0;\n        if (this.totalAllocated < currentPerCall) {\n            throw new Error(`Invalid buffer allocation state: call ${callId} allocated ${currentPerCall} > total allocated ${this.totalAllocated}`);\n        }\n        this.totalAllocated -= currentPerCall;\n        this.allocatedPerCall.delete(callId);\n    }\n}\nexports.MessageBufferTracker = MessageBufferTracker;\nconst PREVIONS_RPC_ATTEMPTS_METADATA_KEY = 'grpc-previous-rpc-attempts';\nconst DEFAULT_MAX_ATTEMPTS_LIMIT = 5;\nclass RetryingCall {\n    constructor(channel, callConfig, methodName, host, credentials, deadline, callNumber, bufferTracker, retryThrottler) {\n        var _a;\n        this.channel = channel;\n        this.callConfig = callConfig;\n        this.methodName = methodName;\n        this.host = host;\n        this.credentials = credentials;\n        this.deadline = deadline;\n        this.callNumber = callNumber;\n        this.bufferTracker = bufferTracker;\n        this.retryThrottler = retryThrottler;\n        this.listener = null;\n        this.initialMetadata = null;\n        this.underlyingCalls = [];\n        this.writeBuffer = [];\n        /**\n         * The offset of message indices in the writeBuffer. For example, if\n         * writeBufferOffset is 10, message 10 is in writeBuffer[0] and message 15\n         * is in writeBuffer[5].\n         */\n        this.writeBufferOffset = 0;\n        /**\n         * Tracks whether a read has been started, so that we know whether to start\n         * reads on new child calls. This only matters for the first read, because\n         * once a message comes in the child call becomes committed and there will\n         * be no new child calls.\n         */\n        this.readStarted = false;\n        this.transparentRetryUsed = false;\n        /**\n         * Number of attempts so far\n         */\n        this.attempts = 0;\n        this.hedgingTimer = null;\n        this.committedCallIndex = null;\n        this.initialRetryBackoffSec = 0;\n        this.nextRetryBackoffSec = 0;\n        const maxAttemptsLimit = (_a = channel.getOptions()['grpc-node.retry_max_attempts_limit']) !== null && _a !== void 0 ? _a : DEFAULT_MAX_ATTEMPTS_LIMIT;\n        if (channel.getOptions()['grpc.enable_retries'] === 0) {\n            this.state = 'NO_RETRY';\n            this.maxAttempts = 1;\n        }\n        else if (callConfig.methodConfig.retryPolicy) {\n            this.state = 'RETRY';\n            const retryPolicy = callConfig.methodConfig.retryPolicy;\n            this.nextRetryBackoffSec = this.initialRetryBackoffSec = Number(retryPolicy.initialBackoff.substring(0, retryPolicy.initialBackoff.length - 1));\n            this.maxAttempts = Math.min(retryPolicy.maxAttempts, maxAttemptsLimit);\n        }\n        else if (callConfig.methodConfig.hedgingPolicy) {\n            this.state = 'HEDGING';\n            this.maxAttempts = Math.min(callConfig.methodConfig.hedgingPolicy.maxAttempts, maxAttemptsLimit);\n        }\n        else {\n            this.state = 'TRANSPARENT_ONLY';\n            this.maxAttempts = 1;\n        }\n        this.startTime = new Date();\n    }\n    getDeadlineInfo() {\n        if (this.underlyingCalls.length === 0) {\n            return [];\n        }\n        const deadlineInfo = [];\n        const latestCall = this.underlyingCalls[this.underlyingCalls.length - 1];\n        if (this.underlyingCalls.length > 1) {\n            deadlineInfo.push(`previous attempts: ${this.underlyingCalls.length - 1}`);\n        }\n        if (latestCall.startTime > this.startTime) {\n            deadlineInfo.push(`time to current attempt start: ${(0, deadline_1.formatDateDifference)(this.startTime, latestCall.startTime)}`);\n        }\n        deadlineInfo.push(...latestCall.call.getDeadlineInfo());\n        return deadlineInfo;\n    }\n    getCallNumber() {\n        return this.callNumber;\n    }\n    trace(text) {\n        logging.trace(constants_1.LogVerbosity.DEBUG, TRACER_NAME, '[' + this.callNumber + '] ' + text);\n    }\n    reportStatus(statusObject) {\n        this.trace('ended with status: code=' +\n            statusObject.code +\n            ' details=\"' +\n            statusObject.details +\n            '\" start time=' +\n            this.startTime.toISOString());\n        this.bufferTracker.freeAll(this.callNumber);\n        this.writeBufferOffset = this.writeBufferOffset + this.writeBuffer.length;\n        this.writeBuffer = [];\n        process.nextTick(() => {\n            var _a;\n            // Explicitly construct status object to remove progress field\n            (_a = this.listener) === null || _a === void 0 ? void 0 : _a.onReceiveStatus({\n                code: statusObject.code,\n                details: statusObject.details,\n                metadata: statusObject.metadata,\n            });\n        });\n    }\n    cancelWithStatus(status, details) {\n        this.trace('cancelWithStatus code: ' + status + ' details: \"' + details + '\"');\n        this.reportStatus({ code: status, details, metadata: new metadata_1.Metadata() });\n        for (const { call } of this.underlyingCalls) {\n            call.cancelWithStatus(status, details);\n        }\n    }\n    getPeer() {\n        if (this.committedCallIndex !== null) {\n            return this.underlyingCalls[this.committedCallIndex].call.getPeer();\n        }\n        else {\n            return 'unknown';\n        }\n    }\n    getBufferEntry(messageIndex) {\n        var _a;\n        return ((_a = this.writeBuffer[messageIndex - this.writeBufferOffset]) !== null && _a !== void 0 ? _a : {\n            entryType: 'FREED',\n            allocated: false,\n        });\n    }\n    getNextBufferIndex() {\n        return this.writeBufferOffset + this.writeBuffer.length;\n    }\n    clearSentMessages() {\n        if (this.state !== 'COMMITTED') {\n            return;\n        }\n        let earliestNeededMessageIndex;\n        if (this.underlyingCalls[this.committedCallIndex].state === 'COMPLETED') {\n            /* If the committed call is completed, clear all messages, even if some\n             * have not been sent. */\n            earliestNeededMessageIndex = this.getNextBufferIndex();\n        }\n        else {\n            earliestNeededMessageIndex =\n                this.underlyingCalls[this.committedCallIndex].nextMessageToSend;\n        }\n        for (let messageIndex = this.writeBufferOffset; messageIndex < earliestNeededMessageIndex; messageIndex++) {\n            const bufferEntry = this.getBufferEntry(messageIndex);\n            if (bufferEntry.allocated) {\n                this.bufferTracker.free(bufferEntry.message.message.length, this.callNumber);\n            }\n        }\n        this.writeBuffer = this.writeBuffer.slice(earliestNeededMessageIndex - this.writeBufferOffset);\n        this.writeBufferOffset = earliestNeededMessageIndex;\n    }\n    commitCall(index) {\n        var _a, _b;\n        if (this.state === 'COMMITTED') {\n            return;\n        }\n        this.trace('Committing call [' +\n            this.underlyingCalls[index].call.getCallNumber() +\n            '] at index ' +\n            index);\n        this.state = 'COMMITTED';\n        (_b = (_a = this.callConfig).onCommitted) === null || _b === void 0 ? void 0 : _b.call(_a);\n        this.committedCallIndex = index;\n        for (let i = 0; i < this.underlyingCalls.length; i++) {\n            if (i === index) {\n                continue;\n            }\n            if (this.underlyingCalls[i].state === 'COMPLETED') {\n                continue;\n            }\n            this.underlyingCalls[i].state = 'COMPLETED';\n            this.underlyingCalls[i].call.cancelWithStatus(constants_1.Status.CANCELLED, 'Discarded in favor of other hedged attempt');\n        }\n        this.clearSentMessages();\n    }\n    commitCallWithMostMessages() {\n        if (this.state === 'COMMITTED') {\n            return;\n        }\n        let mostMessages = -1;\n        let callWithMostMessages = -1;\n        for (const [index, childCall] of this.underlyingCalls.entries()) {\n            if (childCall.state === 'ACTIVE' &&\n                childCall.nextMessageToSend > mostMessages) {\n                mostMessages = childCall.nextMessageToSend;\n                callWithMostMessages = index;\n            }\n        }\n        if (callWithMostMessages === -1) {\n            /* There are no active calls, disable retries to force the next call that\n             * is started to be committed. */\n            this.state = 'TRANSPARENT_ONLY';\n        }\n        else {\n            this.commitCall(callWithMostMessages);\n        }\n    }\n    isStatusCodeInList(list, code) {\n        return list.some(value => {\n            var _a;\n            return value === code ||\n                value.toString().toLowerCase() === ((_a = constants_1.Status[code]) === null || _a === void 0 ? void 0 : _a.toLowerCase());\n        });\n    }\n    getNextRetryBackoffMs() {\n        var _a;\n        const retryPolicy = (_a = this.callConfig) === null || _a === void 0 ? void 0 : _a.methodConfig.retryPolicy;\n        if (!retryPolicy) {\n            return 0;\n        }\n        const nextBackoffMs = Math.random() * this.nextRetryBackoffSec * 1000;\n        const maxBackoffSec = Number(retryPolicy.maxBackoff.substring(0, retryPolicy.maxBackoff.length - 1));\n        this.nextRetryBackoffSec = Math.min(this.nextRetryBackoffSec * retryPolicy.backoffMultiplier, maxBackoffSec);\n        return nextBackoffMs;\n    }\n    maybeRetryCall(pushback, callback) {\n        if (this.state !== 'RETRY') {\n            callback(false);\n            return;\n        }\n        if (this.attempts >= this.maxAttempts) {\n            callback(false);\n            return;\n        }\n        let retryDelayMs;\n        if (pushback === null) {\n            retryDelayMs = this.getNextRetryBackoffMs();\n        }\n        else if (pushback < 0) {\n            this.state = 'TRANSPARENT_ONLY';\n            callback(false);\n            return;\n        }\n        else {\n            retryDelayMs = pushback;\n            this.nextRetryBackoffSec = this.initialRetryBackoffSec;\n        }\n        setTimeout(() => {\n            var _a, _b;\n            if (this.state !== 'RETRY') {\n                callback(false);\n                return;\n            }\n            if ((_b = (_a = this.retryThrottler) === null || _a === void 0 ? void 0 : _a.canRetryCall()) !== null && _b !== void 0 ? _b : true) {\n                callback(true);\n                this.attempts += 1;\n                this.startNewAttempt();\n            }\n            else {\n                this.trace('Retry attempt denied by throttling policy');\n                callback(false);\n            }\n        }, retryDelayMs);\n    }\n    countActiveCalls() {\n        let count = 0;\n        for (const call of this.underlyingCalls) {\n            if ((call === null || call === void 0 ? void 0 : call.state) === 'ACTIVE') {\n                count += 1;\n            }\n        }\n        return count;\n    }\n    handleProcessedStatus(status, callIndex, pushback) {\n        var _a, _b, _c;\n        switch (this.state) {\n            case 'COMMITTED':\n            case 'NO_RETRY':\n            case 'TRANSPARENT_ONLY':\n                this.commitCall(callIndex);\n                this.reportStatus(status);\n                break;\n            case 'HEDGING':\n                if (this.isStatusCodeInList((_a = this.callConfig.methodConfig.hedgingPolicy.nonFatalStatusCodes) !== null && _a !== void 0 ? _a : [], status.code)) {\n                    (_b = this.retryThrottler) === null || _b === void 0 ? void 0 : _b.addCallFailed();\n                    let delayMs;\n                    if (pushback === null) {\n                        delayMs = 0;\n                    }\n                    else if (pushback < 0) {\n                        this.state = 'TRANSPARENT_ONLY';\n                        this.commitCall(callIndex);\n                        this.reportStatus(status);\n                        return;\n                    }\n                    else {\n                        delayMs = pushback;\n                    }\n                    setTimeout(() => {\n                        this.maybeStartHedgingAttempt();\n                        // If after trying to start a call there are no active calls, this was the last one\n                        if (this.countActiveCalls() === 0) {\n                            this.commitCall(callIndex);\n                            this.reportStatus(status);\n                        }\n                    }, delayMs);\n                }\n                else {\n                    this.commitCall(callIndex);\n                    this.reportStatus(status);\n                }\n                break;\n            case 'RETRY':\n                if (this.isStatusCodeInList(this.callConfig.methodConfig.retryPolicy.retryableStatusCodes, status.code)) {\n                    (_c = this.retryThrottler) === null || _c === void 0 ? void 0 : _c.addCallFailed();\n                    this.maybeRetryCall(pushback, retried => {\n                        if (!retried) {\n                            this.commitCall(callIndex);\n                            this.reportStatus(status);\n                        }\n                    });\n                }\n                else {\n                    this.commitCall(callIndex);\n                    this.reportStatus(status);\n                }\n                break;\n        }\n    }\n    getPushback(metadata) {\n        const mdValue = metadata.get('grpc-retry-pushback-ms');\n        if (mdValue.length === 0) {\n            return null;\n        }\n        try {\n            return parseInt(mdValue[0]);\n        }\n        catch (e) {\n            return -1;\n        }\n    }\n    handleChildStatus(status, callIndex) {\n        var _a;\n        if (this.underlyingCalls[callIndex].state === 'COMPLETED') {\n            return;\n        }\n        this.trace('state=' +\n            this.state +\n            ' handling status with progress ' +\n            status.progress +\n            ' from child [' +\n            this.underlyingCalls[callIndex].call.getCallNumber() +\n            '] in state ' +\n            this.underlyingCalls[callIndex].state);\n        this.underlyingCalls[callIndex].state = 'COMPLETED';\n        if (status.code === constants_1.Status.OK) {\n            (_a = this.retryThrottler) === null || _a === void 0 ? void 0 : _a.addCallSucceeded();\n            this.commitCall(callIndex);\n            this.reportStatus(status);\n            return;\n        }\n        if (this.state === 'NO_RETRY') {\n            this.commitCall(callIndex);\n            this.reportStatus(status);\n            return;\n        }\n        if (this.state === 'COMMITTED') {\n            this.reportStatus(status);\n            return;\n        }\n        const pushback = this.getPushback(status.metadata);\n        switch (status.progress) {\n            case 'NOT_STARTED':\n                // RPC never leaves the client, always safe to retry\n                this.startNewAttempt();\n                break;\n            case 'REFUSED':\n                // RPC reaches the server library, but not the server application logic\n                if (this.transparentRetryUsed) {\n                    this.handleProcessedStatus(status, callIndex, pushback);\n                }\n                else {\n                    this.transparentRetryUsed = true;\n                    this.startNewAttempt();\n                }\n                break;\n            case 'DROP':\n                this.commitCall(callIndex);\n                this.reportStatus(status);\n                break;\n            case 'PROCESSED':\n                this.handleProcessedStatus(status, callIndex, pushback);\n                break;\n        }\n    }\n    maybeStartHedgingAttempt() {\n        if (this.state !== 'HEDGING') {\n            return;\n        }\n        if (!this.callConfig.methodConfig.hedgingPolicy) {\n            return;\n        }\n        if (this.attempts >= this.maxAttempts) {\n            return;\n        }\n        this.attempts += 1;\n        this.startNewAttempt();\n        this.maybeStartHedgingTimer();\n    }\n    maybeStartHedgingTimer() {\n        var _a, _b, _c;\n        if (this.hedgingTimer) {\n            clearTimeout(this.hedgingTimer);\n        }\n        if (this.state !== 'HEDGING') {\n            return;\n        }\n        if (!this.callConfig.methodConfig.hedgingPolicy) {\n            return;\n        }\n        const hedgingPolicy = this.callConfig.methodConfig.hedgingPolicy;\n        if (this.attempts >= this.maxAttempts) {\n            return;\n        }\n        const hedgingDelayString = (_a = hedgingPolicy.hedgingDelay) !== null && _a !== void 0 ? _a : '0s';\n        const hedgingDelaySec = Number(hedgingDelayString.substring(0, hedgingDelayString.length - 1));\n        this.hedgingTimer = setTimeout(() => {\n            this.maybeStartHedgingAttempt();\n        }, hedgingDelaySec * 1000);\n        (_c = (_b = this.hedgingTimer).unref) === null || _c === void 0 ? void 0 : _c.call(_b);\n    }\n    startNewAttempt() {\n        const child = this.channel.createLoadBalancingCall(this.callConfig, this.methodName, this.host, this.credentials, this.deadline);\n        this.trace('Created child call [' +\n            child.getCallNumber() +\n            '] for attempt ' +\n            this.attempts);\n        const index = this.underlyingCalls.length;\n        this.underlyingCalls.push({\n            state: 'ACTIVE',\n            call: child,\n            nextMessageToSend: 0,\n            startTime: new Date()\n        });\n        const previousAttempts = this.attempts - 1;\n        const initialMetadata = this.initialMetadata.clone();\n        if (previousAttempts > 0) {\n            initialMetadata.set(PREVIONS_RPC_ATTEMPTS_METADATA_KEY, `${previousAttempts}`);\n        }\n        let receivedMetadata = false;\n        child.start(initialMetadata, {\n            onReceiveMetadata: metadata => {\n                this.trace('Received metadata from child [' + child.getCallNumber() + ']');\n                this.commitCall(index);\n                receivedMetadata = true;\n                if (previousAttempts > 0) {\n                    metadata.set(PREVIONS_RPC_ATTEMPTS_METADATA_KEY, `${previousAttempts}`);\n                }\n                if (this.underlyingCalls[index].state === 'ACTIVE') {\n                    this.listener.onReceiveMetadata(metadata);\n                }\n            },\n            onReceiveMessage: message => {\n                this.trace('Received message from child [' + child.getCallNumber() + ']');\n                this.commitCall(index);\n                if (this.underlyingCalls[index].state === 'ACTIVE') {\n                    this.listener.onReceiveMessage(message);\n                }\n            },\n            onReceiveStatus: status => {\n                this.trace('Received status from child [' + child.getCallNumber() + ']');\n                if (!receivedMetadata && previousAttempts > 0) {\n                    status.metadata.set(PREVIONS_RPC_ATTEMPTS_METADATA_KEY, `${previousAttempts}`);\n                }\n                this.handleChildStatus(status, index);\n            },\n        });\n        this.sendNextChildMessage(index);\n        if (this.readStarted) {\n            child.startRead();\n        }\n    }\n    start(metadata, listener) {\n        this.trace('start called');\n        this.listener = listener;\n        this.initialMetadata = metadata;\n        this.attempts += 1;\n        this.startNewAttempt();\n        this.maybeStartHedgingTimer();\n    }\n    handleChildWriteCompleted(childIndex) {\n        var _a, _b;\n        const childCall = this.underlyingCalls[childIndex];\n        const messageIndex = childCall.nextMessageToSend;\n        (_b = (_a = this.getBufferEntry(messageIndex)).callback) === null || _b === void 0 ? void 0 : _b.call(_a);\n        this.clearSentMessages();\n        childCall.nextMessageToSend += 1;\n        this.sendNextChildMessage(childIndex);\n    }\n    sendNextChildMessage(childIndex) {\n        const childCall = this.underlyingCalls[childIndex];\n        if (childCall.state === 'COMPLETED') {\n            return;\n        }\n        if (this.getBufferEntry(childCall.nextMessageToSend)) {\n            const bufferEntry = this.getBufferEntry(childCall.nextMessageToSend);\n            switch (bufferEntry.entryType) {\n                case 'MESSAGE':\n                    childCall.call.sendMessageWithContext({\n                        callback: error => {\n                            // Ignore error\n                            this.handleChildWriteCompleted(childIndex);\n                        },\n                    }, bufferEntry.message.message);\n                    break;\n                case 'HALF_CLOSE':\n                    childCall.nextMessageToSend += 1;\n                    childCall.call.halfClose();\n                    break;\n                case 'FREED':\n                    // Should not be possible\n                    break;\n            }\n        }\n    }\n    sendMessageWithContext(context, message) {\n        var _a;\n        this.trace('write() called with message of length ' + message.length);\n        const writeObj = {\n            message,\n            flags: context.flags,\n        };\n        const messageIndex = this.getNextBufferIndex();\n        const bufferEntry = {\n            entryType: 'MESSAGE',\n            message: writeObj,\n            allocated: this.bufferTracker.allocate(message.length, this.callNumber),\n        };\n        this.writeBuffer.push(bufferEntry);\n        if (bufferEntry.allocated) {\n            (_a = context.callback) === null || _a === void 0 ? void 0 : _a.call(context);\n            for (const [callIndex, call] of this.underlyingCalls.entries()) {\n                if (call.state === 'ACTIVE' &&\n                    call.nextMessageToSend === messageIndex) {\n                    call.call.sendMessageWithContext({\n                        callback: error => {\n                            // Ignore error\n                            this.handleChildWriteCompleted(callIndex);\n                        },\n                    }, message);\n                }\n            }\n        }\n        else {\n            this.commitCallWithMostMessages();\n            // commitCallWithMostMessages can fail if we are between ping attempts\n            if (this.committedCallIndex === null) {\n                return;\n            }\n            const call = this.underlyingCalls[this.committedCallIndex];\n            bufferEntry.callback = context.callback;\n            if (call.state === 'ACTIVE' && call.nextMessageToSend === messageIndex) {\n                call.call.sendMessageWithContext({\n                    callback: error => {\n                        // Ignore error\n                        this.handleChildWriteCompleted(this.committedCallIndex);\n                    },\n                }, message);\n            }\n        }\n    }\n    startRead() {\n        this.trace('startRead called');\n        this.readStarted = true;\n        for (const underlyingCall of this.underlyingCalls) {\n            if ((underlyingCall === null || underlyingCall === void 0 ? void 0 : underlyingCall.state) === 'ACTIVE') {\n                underlyingCall.call.startRead();\n            }\n        }\n    }\n    halfClose() {\n        this.trace('halfClose called');\n        const halfCloseIndex = this.getNextBufferIndex();\n        this.writeBuffer.push({\n            entryType: 'HALF_CLOSE',\n            allocated: false,\n        });\n        for (const call of this.underlyingCalls) {\n            if ((call === null || call === void 0 ? void 0 : call.state) === 'ACTIVE' &&\n                call.nextMessageToSend === halfCloseIndex) {\n                call.nextMessageToSend += 1;\n                call.call.halfClose();\n            }\n        }\n    }\n    setCredentials(newCredentials) {\n        throw new Error('Method not implemented.');\n    }\n    getMethod() {\n        return this.methodName;\n    }\n    getHost() {\n        return this.host;\n    }\n}\nexports.RetryingCall = RetryingCall;\n//# sourceMappingURL=retrying-call.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/google-gax/node_modules/@grpc/grpc-js/build/src/retrying-call.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/google-gax/node_modules/@grpc/grpc-js/build/src/server-call.js":
/*!*************************************************************************************!*\
  !*** ./node_modules/google-gax/node_modules/@grpc/grpc-js/build/src/server-call.js ***!
  \*************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\n/*\n * Copyright 2019 gRPC authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n */\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.ServerDuplexStreamImpl = exports.ServerWritableStreamImpl = exports.ServerReadableStreamImpl = exports.ServerUnaryCallImpl = void 0;\nexports.serverErrorToStatus = serverErrorToStatus;\nconst events_1 = __webpack_require__(/*! events */ \"events\");\nconst stream_1 = __webpack_require__(/*! stream */ \"stream\");\nconst constants_1 = __webpack_require__(/*! ./constants */ \"(rsc)/./node_modules/google-gax/node_modules/@grpc/grpc-js/build/src/constants.js\");\nconst metadata_1 = __webpack_require__(/*! ./metadata */ \"(rsc)/./node_modules/google-gax/node_modules/@grpc/grpc-js/build/src/metadata.js\");\nfunction serverErrorToStatus(error, overrideTrailers) {\n    var _a;\n    const status = {\n        code: constants_1.Status.UNKNOWN,\n        details: 'message' in error ? error.message : 'Unknown Error',\n        metadata: (_a = overrideTrailers !== null && overrideTrailers !== void 0 ? overrideTrailers : error.metadata) !== null && _a !== void 0 ? _a : null,\n    };\n    if ('code' in error &&\n        typeof error.code === 'number' &&\n        Number.isInteger(error.code)) {\n        status.code = error.code;\n        if ('details' in error && typeof error.details === 'string') {\n            status.details = error.details;\n        }\n    }\n    return status;\n}\nclass ServerUnaryCallImpl extends events_1.EventEmitter {\n    constructor(path, call, metadata, request) {\n        super();\n        this.path = path;\n        this.call = call;\n        this.metadata = metadata;\n        this.request = request;\n        this.cancelled = false;\n    }\n    getPeer() {\n        return this.call.getPeer();\n    }\n    sendMetadata(responseMetadata) {\n        this.call.sendMetadata(responseMetadata);\n    }\n    getDeadline() {\n        return this.call.getDeadline();\n    }\n    getPath() {\n        return this.path;\n    }\n    getHost() {\n        return this.call.getHost();\n    }\n}\nexports.ServerUnaryCallImpl = ServerUnaryCallImpl;\nclass ServerReadableStreamImpl extends stream_1.Readable {\n    constructor(path, call, metadata) {\n        super({ objectMode: true });\n        this.path = path;\n        this.call = call;\n        this.metadata = metadata;\n        this.cancelled = false;\n    }\n    _read(size) {\n        this.call.startRead();\n    }\n    getPeer() {\n        return this.call.getPeer();\n    }\n    sendMetadata(responseMetadata) {\n        this.call.sendMetadata(responseMetadata);\n    }\n    getDeadline() {\n        return this.call.getDeadline();\n    }\n    getPath() {\n        return this.path;\n    }\n    getHost() {\n        return this.call.getHost();\n    }\n}\nexports.ServerReadableStreamImpl = ServerReadableStreamImpl;\nclass ServerWritableStreamImpl extends stream_1.Writable {\n    constructor(path, call, metadata, request) {\n        super({ objectMode: true });\n        this.path = path;\n        this.call = call;\n        this.metadata = metadata;\n        this.request = request;\n        this.pendingStatus = {\n            code: constants_1.Status.OK,\n            details: 'OK',\n        };\n        this.cancelled = false;\n        this.trailingMetadata = new metadata_1.Metadata();\n        this.on('error', err => {\n            this.pendingStatus = serverErrorToStatus(err);\n            this.end();\n        });\n    }\n    getPeer() {\n        return this.call.getPeer();\n    }\n    sendMetadata(responseMetadata) {\n        this.call.sendMetadata(responseMetadata);\n    }\n    getDeadline() {\n        return this.call.getDeadline();\n    }\n    getPath() {\n        return this.path;\n    }\n    getHost() {\n        return this.call.getHost();\n    }\n    _write(chunk, encoding, \n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    callback) {\n        this.call.sendMessage(chunk, callback);\n    }\n    _final(callback) {\n        var _a;\n        callback(null);\n        this.call.sendStatus(Object.assign(Object.assign({}, this.pendingStatus), { metadata: (_a = this.pendingStatus.metadata) !== null && _a !== void 0 ? _a : this.trailingMetadata }));\n    }\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    end(metadata) {\n        if (metadata) {\n            this.trailingMetadata = metadata;\n        }\n        return super.end();\n    }\n}\nexports.ServerWritableStreamImpl = ServerWritableStreamImpl;\nclass ServerDuplexStreamImpl extends stream_1.Duplex {\n    constructor(path, call, metadata) {\n        super({ objectMode: true });\n        this.path = path;\n        this.call = call;\n        this.metadata = metadata;\n        this.pendingStatus = {\n            code: constants_1.Status.OK,\n            details: 'OK',\n        };\n        this.cancelled = false;\n        this.trailingMetadata = new metadata_1.Metadata();\n        this.on('error', err => {\n            this.pendingStatus = serverErrorToStatus(err);\n            this.end();\n        });\n    }\n    getPeer() {\n        return this.call.getPeer();\n    }\n    sendMetadata(responseMetadata) {\n        this.call.sendMetadata(responseMetadata);\n    }\n    getDeadline() {\n        return this.call.getDeadline();\n    }\n    getPath() {\n        return this.path;\n    }\n    getHost() {\n        return this.call.getHost();\n    }\n    _read(size) {\n        this.call.startRead();\n    }\n    _write(chunk, encoding, \n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    callback) {\n        this.call.sendMessage(chunk, callback);\n    }\n    _final(callback) {\n        var _a;\n        callback(null);\n        this.call.sendStatus(Object.assign(Object.assign({}, this.pendingStatus), { metadata: (_a = this.pendingStatus.metadata) !== null && _a !== void 0 ? _a : this.trailingMetadata }));\n    }\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    end(metadata) {\n        if (metadata) {\n            this.trailingMetadata = metadata;\n        }\n        return super.end();\n    }\n}\nexports.ServerDuplexStreamImpl = ServerDuplexStreamImpl;\n//# sourceMappingURL=server-call.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/google-gax/node_modules/@grpc/grpc-js/build/src/server-call.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/google-gax/node_modules/@grpc/grpc-js/build/src/server-credentials.js":
/*!********************************************************************************************!*\
  !*** ./node_modules/google-gax/node_modules/@grpc/grpc-js/build/src/server-credentials.js ***!
  \********************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\n/*\n * Copyright 2019 gRPC authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n */\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.ServerCredentials = void 0;\nexports.createCertificateProviderServerCredentials = createCertificateProviderServerCredentials;\nexports.createServerCredentialsWithInterceptors = createServerCredentialsWithInterceptors;\nconst tls_helpers_1 = __webpack_require__(/*! ./tls-helpers */ \"(rsc)/./node_modules/google-gax/node_modules/@grpc/grpc-js/build/src/tls-helpers.js\");\nclass ServerCredentials {\n    constructor(serverConstructorOptions, contextOptions) {\n        this.serverConstructorOptions = serverConstructorOptions;\n        this.watchers = new Set();\n        this.latestContextOptions = null;\n        this.latestContextOptions = contextOptions !== null && contextOptions !== void 0 ? contextOptions : null;\n    }\n    _addWatcher(watcher) {\n        this.watchers.add(watcher);\n    }\n    _removeWatcher(watcher) {\n        this.watchers.delete(watcher);\n    }\n    getWatcherCount() {\n        return this.watchers.size;\n    }\n    updateSecureContextOptions(options) {\n        this.latestContextOptions = options;\n        for (const watcher of this.watchers) {\n            watcher(this.latestContextOptions);\n        }\n    }\n    _isSecure() {\n        return this.serverConstructorOptions !== null;\n    }\n    _getSecureContextOptions() {\n        return this.latestContextOptions;\n    }\n    _getConstructorOptions() {\n        return this.serverConstructorOptions;\n    }\n    _getInterceptors() {\n        return [];\n    }\n    static createInsecure() {\n        return new InsecureServerCredentials();\n    }\n    static createSsl(rootCerts, keyCertPairs, checkClientCertificate = false) {\n        var _a;\n        if (rootCerts !== null && !Buffer.isBuffer(rootCerts)) {\n            throw new TypeError('rootCerts must be null or a Buffer');\n        }\n        if (!Array.isArray(keyCertPairs)) {\n            throw new TypeError('keyCertPairs must be an array');\n        }\n        if (typeof checkClientCertificate !== 'boolean') {\n            throw new TypeError('checkClientCertificate must be a boolean');\n        }\n        const cert = [];\n        const key = [];\n        for (let i = 0; i < keyCertPairs.length; i++) {\n            const pair = keyCertPairs[i];\n            if (pair === null || typeof pair !== 'object') {\n                throw new TypeError(`keyCertPair[${i}] must be an object`);\n            }\n            if (!Buffer.isBuffer(pair.private_key)) {\n                throw new TypeError(`keyCertPair[${i}].private_key must be a Buffer`);\n            }\n            if (!Buffer.isBuffer(pair.cert_chain)) {\n                throw new TypeError(`keyCertPair[${i}].cert_chain must be a Buffer`);\n            }\n            cert.push(pair.cert_chain);\n            key.push(pair.private_key);\n        }\n        return new SecureServerCredentials({\n            requestCert: checkClientCertificate,\n            ciphers: tls_helpers_1.CIPHER_SUITES,\n        }, {\n            ca: (_a = rootCerts !== null && rootCerts !== void 0 ? rootCerts : (0, tls_helpers_1.getDefaultRootsData)()) !== null && _a !== void 0 ? _a : undefined,\n            cert,\n            key,\n        });\n    }\n}\nexports.ServerCredentials = ServerCredentials;\nclass InsecureServerCredentials extends ServerCredentials {\n    constructor() {\n        super(null);\n    }\n    _getSettings() {\n        return null;\n    }\n    _equals(other) {\n        return other instanceof InsecureServerCredentials;\n    }\n}\nclass SecureServerCredentials extends ServerCredentials {\n    constructor(constructorOptions, contextOptions) {\n        super(constructorOptions, contextOptions);\n        this.options = Object.assign(Object.assign({}, constructorOptions), contextOptions);\n    }\n    /**\n     * Checks equality by checking the options that are actually set by\n     * createSsl.\n     * @param other\n     * @returns\n     */\n    _equals(other) {\n        if (this === other) {\n            return true;\n        }\n        if (!(other instanceof SecureServerCredentials)) {\n            return false;\n        }\n        // options.ca equality check\n        if (Buffer.isBuffer(this.options.ca) && Buffer.isBuffer(other.options.ca)) {\n            if (!this.options.ca.equals(other.options.ca)) {\n                return false;\n            }\n        }\n        else {\n            if (this.options.ca !== other.options.ca) {\n                return false;\n            }\n        }\n        // options.cert equality check\n        if (Array.isArray(this.options.cert) && Array.isArray(other.options.cert)) {\n            if (this.options.cert.length !== other.options.cert.length) {\n                return false;\n            }\n            for (let i = 0; i < this.options.cert.length; i++) {\n                const thisCert = this.options.cert[i];\n                const otherCert = other.options.cert[i];\n                if (Buffer.isBuffer(thisCert) && Buffer.isBuffer(otherCert)) {\n                    if (!thisCert.equals(otherCert)) {\n                        return false;\n                    }\n                }\n                else {\n                    if (thisCert !== otherCert) {\n                        return false;\n                    }\n                }\n            }\n        }\n        else {\n            if (this.options.cert !== other.options.cert) {\n                return false;\n            }\n        }\n        // options.key equality check\n        if (Array.isArray(this.options.key) && Array.isArray(other.options.key)) {\n            if (this.options.key.length !== other.options.key.length) {\n                return false;\n            }\n            for (let i = 0; i < this.options.key.length; i++) {\n                const thisKey = this.options.key[i];\n                const otherKey = other.options.key[i];\n                if (Buffer.isBuffer(thisKey) && Buffer.isBuffer(otherKey)) {\n                    if (!thisKey.equals(otherKey)) {\n                        return false;\n                    }\n                }\n                else {\n                    if (thisKey !== otherKey) {\n                        return false;\n                    }\n                }\n            }\n        }\n        else {\n            if (this.options.key !== other.options.key) {\n                return false;\n            }\n        }\n        // options.requestCert equality check\n        if (this.options.requestCert !== other.options.requestCert) {\n            return false;\n        }\n        /* ciphers is derived from a value that is constant for the process, so no\n         * equality check is needed. */\n        return true;\n    }\n}\nclass CertificateProviderServerCredentials extends ServerCredentials {\n    constructor(identityCertificateProvider, caCertificateProvider, requireClientCertificate) {\n        super({\n            requestCert: caCertificateProvider !== null,\n            rejectUnauthorized: requireClientCertificate,\n            ciphers: tls_helpers_1.CIPHER_SUITES\n        });\n        this.identityCertificateProvider = identityCertificateProvider;\n        this.caCertificateProvider = caCertificateProvider;\n        this.requireClientCertificate = requireClientCertificate;\n        this.latestCaUpdate = null;\n        this.latestIdentityUpdate = null;\n        this.caCertificateUpdateListener = this.handleCaCertificateUpdate.bind(this);\n        this.identityCertificateUpdateListener = this.handleIdentityCertitificateUpdate.bind(this);\n    }\n    _addWatcher(watcher) {\n        var _a;\n        if (this.getWatcherCount() === 0) {\n            (_a = this.caCertificateProvider) === null || _a === void 0 ? void 0 : _a.addCaCertificateListener(this.caCertificateUpdateListener);\n            this.identityCertificateProvider.addIdentityCertificateListener(this.identityCertificateUpdateListener);\n        }\n        super._addWatcher(watcher);\n    }\n    _removeWatcher(watcher) {\n        var _a;\n        super._removeWatcher(watcher);\n        if (this.getWatcherCount() === 0) {\n            (_a = this.caCertificateProvider) === null || _a === void 0 ? void 0 : _a.removeCaCertificateListener(this.caCertificateUpdateListener);\n            this.identityCertificateProvider.removeIdentityCertificateListener(this.identityCertificateUpdateListener);\n        }\n    }\n    _equals(other) {\n        if (this === other) {\n            return true;\n        }\n        if (!(other instanceof CertificateProviderServerCredentials)) {\n            return false;\n        }\n        return (this.caCertificateProvider === other.caCertificateProvider &&\n            this.identityCertificateProvider === other.identityCertificateProvider &&\n            this.requireClientCertificate === other.requireClientCertificate);\n    }\n    calculateSecureContextOptions() {\n        var _a;\n        if (this.latestIdentityUpdate === null) {\n            return null;\n        }\n        if (this.caCertificateProvider !== null && this.latestCaUpdate === null) {\n            return null;\n        }\n        return {\n            ca: (_a = this.latestCaUpdate) === null || _a === void 0 ? void 0 : _a.caCertificate,\n            cert: [this.latestIdentityUpdate.certificate],\n            key: [this.latestIdentityUpdate.privateKey],\n        };\n    }\n    finalizeUpdate() {\n        const secureContextOptions = this.calculateSecureContextOptions();\n        this.updateSecureContextOptions(secureContextOptions);\n    }\n    handleCaCertificateUpdate(update) {\n        this.latestCaUpdate = update;\n        this.finalizeUpdate();\n    }\n    handleIdentityCertitificateUpdate(update) {\n        this.latestIdentityUpdate = update;\n        this.finalizeUpdate();\n    }\n}\nfunction createCertificateProviderServerCredentials(caCertificateProvider, identityCertificateProvider, requireClientCertificate) {\n    return new CertificateProviderServerCredentials(caCertificateProvider, identityCertificateProvider, requireClientCertificate);\n}\nclass InterceptorServerCredentials extends ServerCredentials {\n    constructor(childCredentials, interceptors) {\n        super({});\n        this.childCredentials = childCredentials;\n        this.interceptors = interceptors;\n    }\n    _isSecure() {\n        return this.childCredentials._isSecure();\n    }\n    _equals(other) {\n        if (!(other instanceof InterceptorServerCredentials)) {\n            return false;\n        }\n        if (!(this.childCredentials._equals(other.childCredentials))) {\n            return false;\n        }\n        if (this.interceptors.length !== other.interceptors.length) {\n            return false;\n        }\n        for (let i = 0; i < this.interceptors.length; i++) {\n            if (this.interceptors[i] !== other.interceptors[i]) {\n                return false;\n            }\n        }\n        return true;\n    }\n    _getInterceptors() {\n        return this.interceptors;\n    }\n    _addWatcher(watcher) {\n        this.childCredentials._addWatcher(watcher);\n    }\n    _removeWatcher(watcher) {\n        this.childCredentials._removeWatcher(watcher);\n    }\n    _getConstructorOptions() {\n        return this.childCredentials._getConstructorOptions();\n    }\n    _getSecureContextOptions() {\n        return this.childCredentials._getSecureContextOptions();\n    }\n}\nfunction createServerCredentialsWithInterceptors(credentials, interceptors) {\n    return new InterceptorServerCredentials(credentials, interceptors);\n}\n//# sourceMappingURL=server-credentials.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/google-gax/node_modules/@grpc/grpc-js/build/src/server-credentials.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/google-gax/node_modules/@grpc/grpc-js/build/src/server-interceptors.js":
/*!*********************************************************************************************!*\
  !*** ./node_modules/google-gax/node_modules/@grpc/grpc-js/build/src/server-interceptors.js ***!
  \*********************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\n/*\n * Copyright 2024 gRPC authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n */\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.BaseServerInterceptingCall = exports.ServerInterceptingCall = exports.ResponderBuilder = exports.ServerListenerBuilder = void 0;\nexports.isInterceptingServerListener = isInterceptingServerListener;\nexports.getServerInterceptingCall = getServerInterceptingCall;\nconst metadata_1 = __webpack_require__(/*! ./metadata */ \"(rsc)/./node_modules/google-gax/node_modules/@grpc/grpc-js/build/src/metadata.js\");\nconst constants_1 = __webpack_require__(/*! ./constants */ \"(rsc)/./node_modules/google-gax/node_modules/@grpc/grpc-js/build/src/constants.js\");\nconst http2 = __webpack_require__(/*! http2 */ \"http2\");\nconst error_1 = __webpack_require__(/*! ./error */ \"(rsc)/./node_modules/google-gax/node_modules/@grpc/grpc-js/build/src/error.js\");\nconst zlib = __webpack_require__(/*! zlib */ \"zlib\");\nconst stream_decoder_1 = __webpack_require__(/*! ./stream-decoder */ \"(rsc)/./node_modules/google-gax/node_modules/@grpc/grpc-js/build/src/stream-decoder.js\");\nconst logging = __webpack_require__(/*! ./logging */ \"(rsc)/./node_modules/google-gax/node_modules/@grpc/grpc-js/build/src/logging.js\");\nconst TRACER_NAME = 'server_call';\nfunction trace(text) {\n    logging.trace(constants_1.LogVerbosity.DEBUG, TRACER_NAME, text);\n}\nclass ServerListenerBuilder {\n    constructor() {\n        this.metadata = undefined;\n        this.message = undefined;\n        this.halfClose = undefined;\n        this.cancel = undefined;\n    }\n    withOnReceiveMetadata(onReceiveMetadata) {\n        this.metadata = onReceiveMetadata;\n        return this;\n    }\n    withOnReceiveMessage(onReceiveMessage) {\n        this.message = onReceiveMessage;\n        return this;\n    }\n    withOnReceiveHalfClose(onReceiveHalfClose) {\n        this.halfClose = onReceiveHalfClose;\n        return this;\n    }\n    withOnCancel(onCancel) {\n        this.cancel = onCancel;\n        return this;\n    }\n    build() {\n        return {\n            onReceiveMetadata: this.metadata,\n            onReceiveMessage: this.message,\n            onReceiveHalfClose: this.halfClose,\n            onCancel: this.cancel,\n        };\n    }\n}\nexports.ServerListenerBuilder = ServerListenerBuilder;\nfunction isInterceptingServerListener(listener) {\n    return (listener.onReceiveMetadata !== undefined &&\n        listener.onReceiveMetadata.length === 1);\n}\nclass InterceptingServerListenerImpl {\n    constructor(listener, nextListener) {\n        this.listener = listener;\n        this.nextListener = nextListener;\n        /**\n         * Once the call is cancelled, ignore all other events.\n         */\n        this.cancelled = false;\n        this.processingMetadata = false;\n        this.hasPendingMessage = false;\n        this.pendingMessage = null;\n        this.processingMessage = false;\n        this.hasPendingHalfClose = false;\n    }\n    processPendingMessage() {\n        if (this.hasPendingMessage) {\n            this.nextListener.onReceiveMessage(this.pendingMessage);\n            this.pendingMessage = null;\n            this.hasPendingMessage = false;\n        }\n    }\n    processPendingHalfClose() {\n        if (this.hasPendingHalfClose) {\n            this.nextListener.onReceiveHalfClose();\n            this.hasPendingHalfClose = false;\n        }\n    }\n    onReceiveMetadata(metadata) {\n        if (this.cancelled) {\n            return;\n        }\n        this.processingMetadata = true;\n        this.listener.onReceiveMetadata(metadata, interceptedMetadata => {\n            this.processingMetadata = false;\n            if (this.cancelled) {\n                return;\n            }\n            this.nextListener.onReceiveMetadata(interceptedMetadata);\n            this.processPendingMessage();\n            this.processPendingHalfClose();\n        });\n    }\n    onReceiveMessage(message) {\n        if (this.cancelled) {\n            return;\n        }\n        this.processingMessage = true;\n        this.listener.onReceiveMessage(message, msg => {\n            this.processingMessage = false;\n            if (this.cancelled) {\n                return;\n            }\n            if (this.processingMetadata) {\n                this.pendingMessage = msg;\n                this.hasPendingMessage = true;\n            }\n            else {\n                this.nextListener.onReceiveMessage(msg);\n                this.processPendingHalfClose();\n            }\n        });\n    }\n    onReceiveHalfClose() {\n        if (this.cancelled) {\n            return;\n        }\n        this.listener.onReceiveHalfClose(() => {\n            if (this.cancelled) {\n                return;\n            }\n            if (this.processingMetadata || this.processingMessage) {\n                this.hasPendingHalfClose = true;\n            }\n            else {\n                this.nextListener.onReceiveHalfClose();\n            }\n        });\n    }\n    onCancel() {\n        this.cancelled = true;\n        this.listener.onCancel();\n        this.nextListener.onCancel();\n    }\n}\nclass ResponderBuilder {\n    constructor() {\n        this.start = undefined;\n        this.metadata = undefined;\n        this.message = undefined;\n        this.status = undefined;\n    }\n    withStart(start) {\n        this.start = start;\n        return this;\n    }\n    withSendMetadata(sendMetadata) {\n        this.metadata = sendMetadata;\n        return this;\n    }\n    withSendMessage(sendMessage) {\n        this.message = sendMessage;\n        return this;\n    }\n    withSendStatus(sendStatus) {\n        this.status = sendStatus;\n        return this;\n    }\n    build() {\n        return {\n            start: this.start,\n            sendMetadata: this.metadata,\n            sendMessage: this.message,\n            sendStatus: this.status,\n        };\n    }\n}\nexports.ResponderBuilder = ResponderBuilder;\nconst defaultServerListener = {\n    onReceiveMetadata: (metadata, next) => {\n        next(metadata);\n    },\n    onReceiveMessage: (message, next) => {\n        next(message);\n    },\n    onReceiveHalfClose: next => {\n        next();\n    },\n    onCancel: () => { },\n};\nconst defaultResponder = {\n    start: next => {\n        next();\n    },\n    sendMetadata: (metadata, next) => {\n        next(metadata);\n    },\n    sendMessage: (message, next) => {\n        next(message);\n    },\n    sendStatus: (status, next) => {\n        next(status);\n    },\n};\nclass ServerInterceptingCall {\n    constructor(nextCall, responder) {\n        var _a, _b, _c, _d;\n        this.nextCall = nextCall;\n        this.processingMetadata = false;\n        this.sentMetadata = false;\n        this.processingMessage = false;\n        this.pendingMessage = null;\n        this.pendingMessageCallback = null;\n        this.pendingStatus = null;\n        this.responder = {\n            start: (_a = responder === null || responder === void 0 ? void 0 : responder.start) !== null && _a !== void 0 ? _a : defaultResponder.start,\n            sendMetadata: (_b = responder === null || responder === void 0 ? void 0 : responder.sendMetadata) !== null && _b !== void 0 ? _b : defaultResponder.sendMetadata,\n            sendMessage: (_c = responder === null || responder === void 0 ? void 0 : responder.sendMessage) !== null && _c !== void 0 ? _c : defaultResponder.sendMessage,\n            sendStatus: (_d = responder === null || responder === void 0 ? void 0 : responder.sendStatus) !== null && _d !== void 0 ? _d : defaultResponder.sendStatus,\n        };\n    }\n    processPendingMessage() {\n        if (this.pendingMessageCallback) {\n            this.nextCall.sendMessage(this.pendingMessage, this.pendingMessageCallback);\n            this.pendingMessage = null;\n            this.pendingMessageCallback = null;\n        }\n    }\n    processPendingStatus() {\n        if (this.pendingStatus) {\n            this.nextCall.sendStatus(this.pendingStatus);\n            this.pendingStatus = null;\n        }\n    }\n    start(listener) {\n        this.responder.start(interceptedListener => {\n            var _a, _b, _c, _d;\n            const fullInterceptedListener = {\n                onReceiveMetadata: (_a = interceptedListener === null || interceptedListener === void 0 ? void 0 : interceptedListener.onReceiveMetadata) !== null && _a !== void 0 ? _a : defaultServerListener.onReceiveMetadata,\n                onReceiveMessage: (_b = interceptedListener === null || interceptedListener === void 0 ? void 0 : interceptedListener.onReceiveMessage) !== null && _b !== void 0 ? _b : defaultServerListener.onReceiveMessage,\n                onReceiveHalfClose: (_c = interceptedListener === null || interceptedListener === void 0 ? void 0 : interceptedListener.onReceiveHalfClose) !== null && _c !== void 0 ? _c : defaultServerListener.onReceiveHalfClose,\n                onCancel: (_d = interceptedListener === null || interceptedListener === void 0 ? void 0 : interceptedListener.onCancel) !== null && _d !== void 0 ? _d : defaultServerListener.onCancel,\n            };\n            const finalInterceptingListener = new InterceptingServerListenerImpl(fullInterceptedListener, listener);\n            this.nextCall.start(finalInterceptingListener);\n        });\n    }\n    sendMetadata(metadata) {\n        this.processingMetadata = true;\n        this.sentMetadata = true;\n        this.responder.sendMetadata(metadata, interceptedMetadata => {\n            this.processingMetadata = false;\n            this.nextCall.sendMetadata(interceptedMetadata);\n            this.processPendingMessage();\n            this.processPendingStatus();\n        });\n    }\n    sendMessage(message, callback) {\n        this.processingMessage = true;\n        if (!this.sentMetadata) {\n            this.sendMetadata(new metadata_1.Metadata());\n        }\n        this.responder.sendMessage(message, interceptedMessage => {\n            this.processingMessage = false;\n            if (this.processingMetadata) {\n                this.pendingMessage = interceptedMessage;\n                this.pendingMessageCallback = callback;\n            }\n            else {\n                this.nextCall.sendMessage(interceptedMessage, callback);\n            }\n        });\n    }\n    sendStatus(status) {\n        this.responder.sendStatus(status, interceptedStatus => {\n            if (this.processingMetadata || this.processingMessage) {\n                this.pendingStatus = interceptedStatus;\n            }\n            else {\n                this.nextCall.sendStatus(interceptedStatus);\n            }\n        });\n    }\n    startRead() {\n        this.nextCall.startRead();\n    }\n    getPeer() {\n        return this.nextCall.getPeer();\n    }\n    getDeadline() {\n        return this.nextCall.getDeadline();\n    }\n    getHost() {\n        return this.nextCall.getHost();\n    }\n}\nexports.ServerInterceptingCall = ServerInterceptingCall;\nconst GRPC_ACCEPT_ENCODING_HEADER = 'grpc-accept-encoding';\nconst GRPC_ENCODING_HEADER = 'grpc-encoding';\nconst GRPC_MESSAGE_HEADER = 'grpc-message';\nconst GRPC_STATUS_HEADER = 'grpc-status';\nconst GRPC_TIMEOUT_HEADER = 'grpc-timeout';\nconst DEADLINE_REGEX = /(\\d{1,8})\\s*([HMSmun])/;\nconst deadlineUnitsToMs = {\n    H: 3600000,\n    M: 60000,\n    S: 1000,\n    m: 1,\n    u: 0.001,\n    n: 0.000001,\n};\nconst defaultCompressionHeaders = {\n    // TODO(cjihrig): Remove these encoding headers from the default response\n    // once compression is integrated.\n    [GRPC_ACCEPT_ENCODING_HEADER]: 'identity,deflate,gzip',\n    [GRPC_ENCODING_HEADER]: 'identity',\n};\nconst defaultResponseHeaders = {\n    [http2.constants.HTTP2_HEADER_STATUS]: http2.constants.HTTP_STATUS_OK,\n    [http2.constants.HTTP2_HEADER_CONTENT_TYPE]: 'application/grpc+proto',\n};\nconst defaultResponseOptions = {\n    waitForTrailers: true,\n};\nclass BaseServerInterceptingCall {\n    constructor(stream, headers, callEventTracker, handler, options) {\n        var _a;\n        this.stream = stream;\n        this.callEventTracker = callEventTracker;\n        this.handler = handler;\n        this.listener = null;\n        this.deadlineTimer = null;\n        this.deadline = Infinity;\n        this.maxSendMessageSize = constants_1.DEFAULT_MAX_SEND_MESSAGE_LENGTH;\n        this.maxReceiveMessageSize = constants_1.DEFAULT_MAX_RECEIVE_MESSAGE_LENGTH;\n        this.cancelled = false;\n        this.metadataSent = false;\n        this.wantTrailers = false;\n        this.cancelNotified = false;\n        this.incomingEncoding = 'identity';\n        this.readQueue = [];\n        this.isReadPending = false;\n        this.receivedHalfClose = false;\n        this.streamEnded = false;\n        this.stream.once('error', (err) => {\n            /* We need an error handler to avoid uncaught error event exceptions, but\n             * there is nothing we can reasonably do here. Any error event should\n             * have a corresponding close event, which handles emitting the cancelled\n             * event. And the stream is now in a bad state, so we can't reasonably\n             * expect to be able to send an error over it. */\n        });\n        this.stream.once('close', () => {\n            var _a;\n            trace('Request to method ' +\n                ((_a = this.handler) === null || _a === void 0 ? void 0 : _a.path) +\n                ' stream closed with rstCode ' +\n                this.stream.rstCode);\n            if (this.callEventTracker && !this.streamEnded) {\n                this.streamEnded = true;\n                this.callEventTracker.onStreamEnd(false);\n                this.callEventTracker.onCallEnd({\n                    code: constants_1.Status.CANCELLED,\n                    details: 'Stream closed before sending status',\n                    metadata: null,\n                });\n            }\n            this.notifyOnCancel();\n        });\n        this.stream.on('data', (data) => {\n            this.handleDataFrame(data);\n        });\n        this.stream.pause();\n        this.stream.on('end', () => {\n            this.handleEndEvent();\n        });\n        if ('grpc.max_send_message_length' in options) {\n            this.maxSendMessageSize = options['grpc.max_send_message_length'];\n        }\n        if ('grpc.max_receive_message_length' in options) {\n            this.maxReceiveMessageSize = options['grpc.max_receive_message_length'];\n        }\n        this.host = (_a = headers[':authority']) !== null && _a !== void 0 ? _a : headers.host;\n        this.decoder = new stream_decoder_1.StreamDecoder(this.maxReceiveMessageSize);\n        const metadata = metadata_1.Metadata.fromHttp2Headers(headers);\n        if (logging.isTracerEnabled(TRACER_NAME)) {\n            trace('Request to ' +\n                this.handler.path +\n                ' received headers ' +\n                JSON.stringify(metadata.toJSON()));\n        }\n        const timeoutHeader = metadata.get(GRPC_TIMEOUT_HEADER);\n        if (timeoutHeader.length > 0) {\n            this.handleTimeoutHeader(timeoutHeader[0]);\n        }\n        const encodingHeader = metadata.get(GRPC_ENCODING_HEADER);\n        if (encodingHeader.length > 0) {\n            this.incomingEncoding = encodingHeader[0];\n        }\n        // Remove several headers that should not be propagated to the application\n        metadata.remove(GRPC_TIMEOUT_HEADER);\n        metadata.remove(GRPC_ENCODING_HEADER);\n        metadata.remove(GRPC_ACCEPT_ENCODING_HEADER);\n        metadata.remove(http2.constants.HTTP2_HEADER_ACCEPT_ENCODING);\n        metadata.remove(http2.constants.HTTP2_HEADER_TE);\n        metadata.remove(http2.constants.HTTP2_HEADER_CONTENT_TYPE);\n        this.metadata = metadata;\n    }\n    handleTimeoutHeader(timeoutHeader) {\n        const match = timeoutHeader.toString().match(DEADLINE_REGEX);\n        if (match === null) {\n            const status = {\n                code: constants_1.Status.INTERNAL,\n                details: `Invalid ${GRPC_TIMEOUT_HEADER} value \"${timeoutHeader}\"`,\n                metadata: null,\n            };\n            // Wait for the constructor to complete before sending the error.\n            process.nextTick(() => {\n                this.sendStatus(status);\n            });\n            return;\n        }\n        const timeout = (+match[1] * deadlineUnitsToMs[match[2]]) | 0;\n        const now = new Date();\n        this.deadline = now.setMilliseconds(now.getMilliseconds() + timeout);\n        this.deadlineTimer = setTimeout(() => {\n            const status = {\n                code: constants_1.Status.DEADLINE_EXCEEDED,\n                details: 'Deadline exceeded',\n                metadata: null,\n            };\n            this.sendStatus(status);\n        }, timeout);\n    }\n    checkCancelled() {\n        /* In some cases the stream can become destroyed before the close event\n         * fires. That creates a race condition that this check works around */\n        if (!this.cancelled && (this.stream.destroyed || this.stream.closed)) {\n            this.notifyOnCancel();\n            this.cancelled = true;\n        }\n        return this.cancelled;\n    }\n    notifyOnCancel() {\n        if (this.cancelNotified) {\n            return;\n        }\n        this.cancelNotified = true;\n        this.cancelled = true;\n        process.nextTick(() => {\n            var _a;\n            (_a = this.listener) === null || _a === void 0 ? void 0 : _a.onCancel();\n        });\n        if (this.deadlineTimer) {\n            clearTimeout(this.deadlineTimer);\n        }\n        // Flush incoming data frames\n        this.stream.resume();\n    }\n    /**\n     * A server handler can start sending messages without explicitly sending\n     * metadata. In that case, we need to send headers before sending any\n     * messages. This function does that if necessary.\n     */\n    maybeSendMetadata() {\n        if (!this.metadataSent) {\n            this.sendMetadata(new metadata_1.Metadata());\n        }\n    }\n    /**\n     * Serialize a message to a length-delimited byte string.\n     * @param value\n     * @returns\n     */\n    serializeMessage(value) {\n        const messageBuffer = this.handler.serialize(value);\n        const byteLength = messageBuffer.byteLength;\n        const output = Buffer.allocUnsafe(byteLength + 5);\n        /* Note: response compression is currently not supported, so this\n         * compressed bit is always 0. */\n        output.writeUInt8(0, 0);\n        output.writeUInt32BE(byteLength, 1);\n        messageBuffer.copy(output, 5);\n        return output;\n    }\n    decompressMessage(message, encoding) {\n        const messageContents = message.subarray(5);\n        if (encoding === 'identity') {\n            return messageContents;\n        }\n        else if (encoding === 'deflate' || encoding === 'gzip') {\n            let decompresser;\n            if (encoding === 'deflate') {\n                decompresser = zlib.createInflate();\n            }\n            else {\n                decompresser = zlib.createGunzip();\n            }\n            return new Promise((resolve, reject) => {\n                let totalLength = 0;\n                const messageParts = [];\n                decompresser.on('data', (chunk) => {\n                    messageParts.push(chunk);\n                    totalLength += chunk.byteLength;\n                    if (this.maxReceiveMessageSize !== -1 && totalLength > this.maxReceiveMessageSize) {\n                        decompresser.destroy();\n                        reject({\n                            code: constants_1.Status.RESOURCE_EXHAUSTED,\n                            details: `Received message that decompresses to a size larger than ${this.maxReceiveMessageSize}`\n                        });\n                    }\n                });\n                decompresser.on('end', () => {\n                    resolve(Buffer.concat(messageParts));\n                });\n                decompresser.write(messageContents);\n                decompresser.end();\n            });\n        }\n        else {\n            return Promise.reject({\n                code: constants_1.Status.UNIMPLEMENTED,\n                details: `Received message compressed with unsupported encoding \"${encoding}\"`,\n            });\n        }\n    }\n    async decompressAndMaybePush(queueEntry) {\n        if (queueEntry.type !== 'COMPRESSED') {\n            throw new Error(`Invalid queue entry type: ${queueEntry.type}`);\n        }\n        const compressed = queueEntry.compressedMessage.readUInt8(0) === 1;\n        const compressedMessageEncoding = compressed\n            ? this.incomingEncoding\n            : 'identity';\n        let decompressedMessage;\n        try {\n            decompressedMessage = await this.decompressMessage(queueEntry.compressedMessage, compressedMessageEncoding);\n        }\n        catch (err) {\n            this.sendStatus(err);\n            return;\n        }\n        try {\n            queueEntry.parsedMessage = this.handler.deserialize(decompressedMessage);\n        }\n        catch (err) {\n            this.sendStatus({\n                code: constants_1.Status.INTERNAL,\n                details: `Error deserializing request: ${err.message}`,\n            });\n            return;\n        }\n        queueEntry.type = 'READABLE';\n        this.maybePushNextMessage();\n    }\n    maybePushNextMessage() {\n        if (this.listener &&\n            this.isReadPending &&\n            this.readQueue.length > 0 &&\n            this.readQueue[0].type !== 'COMPRESSED') {\n            this.isReadPending = false;\n            const nextQueueEntry = this.readQueue.shift();\n            if (nextQueueEntry.type === 'READABLE') {\n                this.listener.onReceiveMessage(nextQueueEntry.parsedMessage);\n            }\n            else {\n                // nextQueueEntry.type === 'HALF_CLOSE'\n                this.listener.onReceiveHalfClose();\n            }\n        }\n    }\n    handleDataFrame(data) {\n        var _a;\n        if (this.checkCancelled()) {\n            return;\n        }\n        trace('Request to ' +\n            this.handler.path +\n            ' received data frame of size ' +\n            data.length);\n        let rawMessages;\n        try {\n            rawMessages = this.decoder.write(data);\n        }\n        catch (e) {\n            this.sendStatus({ code: constants_1.Status.RESOURCE_EXHAUSTED, details: e.message });\n            return;\n        }\n        for (const messageBytes of rawMessages) {\n            this.stream.pause();\n            const queueEntry = {\n                type: 'COMPRESSED',\n                compressedMessage: messageBytes,\n                parsedMessage: null,\n            };\n            this.readQueue.push(queueEntry);\n            this.decompressAndMaybePush(queueEntry);\n            (_a = this.callEventTracker) === null || _a === void 0 ? void 0 : _a.addMessageReceived();\n        }\n    }\n    handleEndEvent() {\n        this.readQueue.push({\n            type: 'HALF_CLOSE',\n            compressedMessage: null,\n            parsedMessage: null,\n        });\n        this.receivedHalfClose = true;\n        this.maybePushNextMessage();\n    }\n    start(listener) {\n        trace('Request to ' + this.handler.path + ' start called');\n        if (this.checkCancelled()) {\n            return;\n        }\n        this.listener = listener;\n        listener.onReceiveMetadata(this.metadata);\n    }\n    sendMetadata(metadata) {\n        if (this.checkCancelled()) {\n            return;\n        }\n        if (this.metadataSent) {\n            return;\n        }\n        this.metadataSent = true;\n        const custom = metadata ? metadata.toHttp2Headers() : null;\n        const headers = Object.assign(Object.assign(Object.assign({}, defaultResponseHeaders), defaultCompressionHeaders), custom);\n        this.stream.respond(headers, defaultResponseOptions);\n    }\n    sendMessage(message, callback) {\n        if (this.checkCancelled()) {\n            return;\n        }\n        let response;\n        try {\n            response = this.serializeMessage(message);\n        }\n        catch (e) {\n            this.sendStatus({\n                code: constants_1.Status.INTERNAL,\n                details: `Error serializing response: ${(0, error_1.getErrorMessage)(e)}`,\n                metadata: null,\n            });\n            return;\n        }\n        if (this.maxSendMessageSize !== -1 &&\n            response.length - 5 > this.maxSendMessageSize) {\n            this.sendStatus({\n                code: constants_1.Status.RESOURCE_EXHAUSTED,\n                details: `Sent message larger than max (${response.length} vs. ${this.maxSendMessageSize})`,\n                metadata: null,\n            });\n            return;\n        }\n        this.maybeSendMetadata();\n        trace('Request to ' +\n            this.handler.path +\n            ' sent data frame of size ' +\n            response.length);\n        this.stream.write(response, error => {\n            var _a;\n            if (error) {\n                this.sendStatus({\n                    code: constants_1.Status.INTERNAL,\n                    details: `Error writing message: ${(0, error_1.getErrorMessage)(error)}`,\n                    metadata: null,\n                });\n                return;\n            }\n            (_a = this.callEventTracker) === null || _a === void 0 ? void 0 : _a.addMessageSent();\n            callback();\n        });\n    }\n    sendStatus(status) {\n        var _a, _b;\n        if (this.checkCancelled()) {\n            return;\n        }\n        trace('Request to method ' +\n            ((_a = this.handler) === null || _a === void 0 ? void 0 : _a.path) +\n            ' ended with status code: ' +\n            constants_1.Status[status.code] +\n            ' details: ' +\n            status.details);\n        if (this.metadataSent) {\n            if (!this.wantTrailers) {\n                this.wantTrailers = true;\n                this.stream.once('wantTrailers', () => {\n                    var _a;\n                    if (this.callEventTracker && !this.streamEnded) {\n                        this.streamEnded = true;\n                        this.callEventTracker.onStreamEnd(true);\n                        this.callEventTracker.onCallEnd(status);\n                    }\n                    const trailersToSend = Object.assign({ [GRPC_STATUS_HEADER]: status.code, [GRPC_MESSAGE_HEADER]: encodeURI(status.details) }, (_a = status.metadata) === null || _a === void 0 ? void 0 : _a.toHttp2Headers());\n                    this.stream.sendTrailers(trailersToSend);\n                    this.notifyOnCancel();\n                });\n                this.stream.end();\n            }\n            else {\n                this.notifyOnCancel();\n            }\n        }\n        else {\n            if (this.callEventTracker && !this.streamEnded) {\n                this.streamEnded = true;\n                this.callEventTracker.onStreamEnd(true);\n                this.callEventTracker.onCallEnd(status);\n            }\n            // Trailers-only response\n            const trailersToSend = Object.assign(Object.assign({ [GRPC_STATUS_HEADER]: status.code, [GRPC_MESSAGE_HEADER]: encodeURI(status.details) }, defaultResponseHeaders), (_b = status.metadata) === null || _b === void 0 ? void 0 : _b.toHttp2Headers());\n            this.stream.respond(trailersToSend, { endStream: true });\n            this.notifyOnCancel();\n        }\n    }\n    startRead() {\n        trace('Request to ' + this.handler.path + ' startRead called');\n        if (this.checkCancelled()) {\n            return;\n        }\n        this.isReadPending = true;\n        if (this.readQueue.length === 0) {\n            if (!this.receivedHalfClose) {\n                this.stream.resume();\n            }\n        }\n        else {\n            this.maybePushNextMessage();\n        }\n    }\n    getPeer() {\n        var _a;\n        const socket = (_a = this.stream.session) === null || _a === void 0 ? void 0 : _a.socket;\n        if (socket === null || socket === void 0 ? void 0 : socket.remoteAddress) {\n            if (socket.remotePort) {\n                return `${socket.remoteAddress}:${socket.remotePort}`;\n            }\n            else {\n                return socket.remoteAddress;\n            }\n        }\n        else {\n            return 'unknown';\n        }\n    }\n    getDeadline() {\n        return this.deadline;\n    }\n    getHost() {\n        return this.host;\n    }\n}\nexports.BaseServerInterceptingCall = BaseServerInterceptingCall;\nfunction getServerInterceptingCall(interceptors, stream, headers, callEventTracker, handler, options) {\n    const methodDefinition = {\n        path: handler.path,\n        requestStream: handler.type === 'clientStream' || handler.type === 'bidi',\n        responseStream: handler.type === 'serverStream' || handler.type === 'bidi',\n        requestDeserialize: handler.deserialize,\n        responseSerialize: handler.serialize,\n    };\n    const baseCall = new BaseServerInterceptingCall(stream, headers, callEventTracker, handler, options);\n    return interceptors.reduce((call, interceptor) => {\n        return interceptor(methodDefinition, call);\n    }, baseCall);\n}\n//# sourceMappingURL=server-interceptors.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/google-gax/node_modules/@grpc/grpc-js/build/src/server-interceptors.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/google-gax/node_modules/@grpc/grpc-js/build/src/server.js":
/*!********************************************************************************!*\
  !*** ./node_modules/google-gax/node_modules/@grpc/grpc-js/build/src/server.js ***!
  \********************************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";
eval("\n/*\n * Copyright 2019 gRPC authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n */\nvar __runInitializers = (this && this.__runInitializers) || function (thisArg, initializers, value) {\n    var useValue = arguments.length > 2;\n    for (var i = 0; i < initializers.length; i++) {\n        value = useValue ? initializers[i].call(thisArg, value) : initializers[i].call(thisArg);\n    }\n    return useValue ? value : void 0;\n};\nvar __esDecorate = (this && this.__esDecorate) || function (ctor, descriptorIn, decorators, contextIn, initializers, extraInitializers) {\n    function accept(f) { if (f !== void 0 && typeof f !== \"function\") throw new TypeError(\"Function expected\"); return f; }\n    var kind = contextIn.kind, key = kind === \"getter\" ? \"get\" : kind === \"setter\" ? \"set\" : \"value\";\n    var target = !descriptorIn && ctor ? contextIn[\"static\"] ? ctor : ctor.prototype : null;\n    var descriptor = descriptorIn || (target ? Object.getOwnPropertyDescriptor(target, contextIn.name) : {});\n    var _, done = false;\n    for (var i = decorators.length - 1; i >= 0; i--) {\n        var context = {};\n        for (var p in contextIn) context[p] = p === \"access\" ? {} : contextIn[p];\n        for (var p in contextIn.access) context.access[p] = contextIn.access[p];\n        context.addInitializer = function (f) { if (done) throw new TypeError(\"Cannot add initializers after decoration has completed\"); extraInitializers.push(accept(f || null)); };\n        var result = (0, decorators[i])(kind === \"accessor\" ? { get: descriptor.get, set: descriptor.set } : descriptor[key], context);\n        if (kind === \"accessor\") {\n            if (result === void 0) continue;\n            if (result === null || typeof result !== \"object\") throw new TypeError(\"Object expected\");\n            if (_ = accept(result.get)) descriptor.get = _;\n            if (_ = accept(result.set)) descriptor.set = _;\n            if (_ = accept(result.init)) initializers.unshift(_);\n        }\n        else if (_ = accept(result)) {\n            if (kind === \"field\") initializers.unshift(_);\n            else descriptor[key] = _;\n        }\n    }\n    if (target) Object.defineProperty(target, contextIn.name, descriptor);\n    done = true;\n};\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.Server = void 0;\nconst http2 = __webpack_require__(/*! http2 */ \"http2\");\nconst util = __webpack_require__(/*! util */ \"util\");\nconst constants_1 = __webpack_require__(/*! ./constants */ \"(rsc)/./node_modules/google-gax/node_modules/@grpc/grpc-js/build/src/constants.js\");\nconst server_call_1 = __webpack_require__(/*! ./server-call */ \"(rsc)/./node_modules/google-gax/node_modules/@grpc/grpc-js/build/src/server-call.js\");\nconst server_credentials_1 = __webpack_require__(/*! ./server-credentials */ \"(rsc)/./node_modules/google-gax/node_modules/@grpc/grpc-js/build/src/server-credentials.js\");\nconst resolver_1 = __webpack_require__(/*! ./resolver */ \"(rsc)/./node_modules/google-gax/node_modules/@grpc/grpc-js/build/src/resolver.js\");\nconst logging = __webpack_require__(/*! ./logging */ \"(rsc)/./node_modules/google-gax/node_modules/@grpc/grpc-js/build/src/logging.js\");\nconst subchannel_address_1 = __webpack_require__(/*! ./subchannel-address */ \"(rsc)/./node_modules/google-gax/node_modules/@grpc/grpc-js/build/src/subchannel-address.js\");\nconst uri_parser_1 = __webpack_require__(/*! ./uri-parser */ \"(rsc)/./node_modules/google-gax/node_modules/@grpc/grpc-js/build/src/uri-parser.js\");\nconst channelz_1 = __webpack_require__(/*! ./channelz */ \"(rsc)/./node_modules/google-gax/node_modules/@grpc/grpc-js/build/src/channelz.js\");\nconst server_interceptors_1 = __webpack_require__(/*! ./server-interceptors */ \"(rsc)/./node_modules/google-gax/node_modules/@grpc/grpc-js/build/src/server-interceptors.js\");\nconst UNLIMITED_CONNECTION_AGE_MS = ~(1 << 31);\nconst KEEPALIVE_MAX_TIME_MS = ~(1 << 31);\nconst KEEPALIVE_TIMEOUT_MS = 20000;\nconst MAX_CONNECTION_IDLE_MS = ~(1 << 31);\nconst { HTTP2_HEADER_PATH } = http2.constants;\nconst TRACER_NAME = 'server';\nconst kMaxAge = Buffer.from('max_age');\nfunction serverCallTrace(text) {\n    logging.trace(constants_1.LogVerbosity.DEBUG, 'server_call', text);\n}\nfunction noop() { }\n/**\n * Decorator to wrap a class method with util.deprecate\n * @param message The message to output if the deprecated method is called\n * @returns\n */\nfunction deprecate(message) {\n    return function (target, context) {\n        return util.deprecate(target, message);\n    };\n}\nfunction getUnimplementedStatusResponse(methodName) {\n    return {\n        code: constants_1.Status.UNIMPLEMENTED,\n        details: `The server does not implement the method ${methodName}`,\n    };\n}\nfunction getDefaultHandler(handlerType, methodName) {\n    const unimplementedStatusResponse = getUnimplementedStatusResponse(methodName);\n    switch (handlerType) {\n        case 'unary':\n            return (call, callback) => {\n                callback(unimplementedStatusResponse, null);\n            };\n        case 'clientStream':\n            return (call, callback) => {\n                callback(unimplementedStatusResponse, null);\n            };\n        case 'serverStream':\n            return (call) => {\n                call.emit('error', unimplementedStatusResponse);\n            };\n        case 'bidi':\n            return (call) => {\n                call.emit('error', unimplementedStatusResponse);\n            };\n        default:\n            throw new Error(`Invalid handlerType ${handlerType}`);\n    }\n}\nlet Server = (() => {\n    var _a;\n    let _instanceExtraInitializers = [];\n    let _start_decorators;\n    return _a = class Server {\n            constructor(options) {\n                var _b, _c, _d, _e, _f, _g;\n                this.boundPorts = (__runInitializers(this, _instanceExtraInitializers), new Map());\n                this.http2Servers = new Map();\n                this.sessionIdleTimeouts = new Map();\n                this.handlers = new Map();\n                this.sessions = new Map();\n                /**\n                 * This field only exists to ensure that the start method throws an error if\n                 * it is called twice, as it did previously.\n                 */\n                this.started = false;\n                this.shutdown = false;\n                this.serverAddressString = 'null';\n                // Channelz Info\n                this.channelzEnabled = true;\n                this.options = options !== null && options !== void 0 ? options : {};\n                if (this.options['grpc.enable_channelz'] === 0) {\n                    this.channelzEnabled = false;\n                    this.channelzTrace = new channelz_1.ChannelzTraceStub();\n                    this.callTracker = new channelz_1.ChannelzCallTrackerStub();\n                    this.listenerChildrenTracker = new channelz_1.ChannelzChildrenTrackerStub();\n                    this.sessionChildrenTracker = new channelz_1.ChannelzChildrenTrackerStub();\n                }\n                else {\n                    this.channelzTrace = new channelz_1.ChannelzTrace();\n                    this.callTracker = new channelz_1.ChannelzCallTracker();\n                    this.listenerChildrenTracker = new channelz_1.ChannelzChildrenTracker();\n                    this.sessionChildrenTracker = new channelz_1.ChannelzChildrenTracker();\n                }\n                this.channelzRef = (0, channelz_1.registerChannelzServer)('server', () => this.getChannelzInfo(), this.channelzEnabled);\n                this.channelzTrace.addTrace('CT_INFO', 'Server created');\n                this.maxConnectionAgeMs =\n                    (_b = this.options['grpc.max_connection_age_ms']) !== null && _b !== void 0 ? _b : UNLIMITED_CONNECTION_AGE_MS;\n                this.maxConnectionAgeGraceMs =\n                    (_c = this.options['grpc.max_connection_age_grace_ms']) !== null && _c !== void 0 ? _c : UNLIMITED_CONNECTION_AGE_MS;\n                this.keepaliveTimeMs =\n                    (_d = this.options['grpc.keepalive_time_ms']) !== null && _d !== void 0 ? _d : KEEPALIVE_MAX_TIME_MS;\n                this.keepaliveTimeoutMs =\n                    (_e = this.options['grpc.keepalive_timeout_ms']) !== null && _e !== void 0 ? _e : KEEPALIVE_TIMEOUT_MS;\n                this.sessionIdleTimeout =\n                    (_f = this.options['grpc.max_connection_idle_ms']) !== null && _f !== void 0 ? _f : MAX_CONNECTION_IDLE_MS;\n                this.commonServerOptions = {\n                    maxSendHeaderBlockLength: Number.MAX_SAFE_INTEGER,\n                };\n                if ('grpc-node.max_session_memory' in this.options) {\n                    this.commonServerOptions.maxSessionMemory =\n                        this.options['grpc-node.max_session_memory'];\n                }\n                else {\n                    /* By default, set a very large max session memory limit, to effectively\n                     * disable enforcement of the limit. Some testing indicates that Node's\n                     * behavior degrades badly when this limit is reached, so we solve that\n                     * by disabling the check entirely. */\n                    this.commonServerOptions.maxSessionMemory = Number.MAX_SAFE_INTEGER;\n                }\n                if ('grpc.max_concurrent_streams' in this.options) {\n                    this.commonServerOptions.settings = {\n                        maxConcurrentStreams: this.options['grpc.max_concurrent_streams'],\n                    };\n                }\n                this.interceptors = (_g = this.options.interceptors) !== null && _g !== void 0 ? _g : [];\n                this.trace('Server constructed');\n            }\n            getChannelzInfo() {\n                return {\n                    trace: this.channelzTrace,\n                    callTracker: this.callTracker,\n                    listenerChildren: this.listenerChildrenTracker.getChildLists(),\n                    sessionChildren: this.sessionChildrenTracker.getChildLists(),\n                };\n            }\n            getChannelzSessionInfo(session) {\n                var _b, _c, _d;\n                const sessionInfo = this.sessions.get(session);\n                const sessionSocket = session.socket;\n                const remoteAddress = sessionSocket.remoteAddress\n                    ? (0, subchannel_address_1.stringToSubchannelAddress)(sessionSocket.remoteAddress, sessionSocket.remotePort)\n                    : null;\n                const localAddress = sessionSocket.localAddress\n                    ? (0, subchannel_address_1.stringToSubchannelAddress)(sessionSocket.localAddress, sessionSocket.localPort)\n                    : null;\n                let tlsInfo;\n                if (session.encrypted) {\n                    const tlsSocket = sessionSocket;\n                    const cipherInfo = tlsSocket.getCipher();\n                    const certificate = tlsSocket.getCertificate();\n                    const peerCertificate = tlsSocket.getPeerCertificate();\n                    tlsInfo = {\n                        cipherSuiteStandardName: (_b = cipherInfo.standardName) !== null && _b !== void 0 ? _b : null,\n                        cipherSuiteOtherName: cipherInfo.standardName ? null : cipherInfo.name,\n                        localCertificate: certificate && 'raw' in certificate ? certificate.raw : null,\n                        remoteCertificate: peerCertificate && 'raw' in peerCertificate\n                            ? peerCertificate.raw\n                            : null,\n                    };\n                }\n                else {\n                    tlsInfo = null;\n                }\n                const socketInfo = {\n                    remoteAddress: remoteAddress,\n                    localAddress: localAddress,\n                    security: tlsInfo,\n                    remoteName: null,\n                    streamsStarted: sessionInfo.streamTracker.callsStarted,\n                    streamsSucceeded: sessionInfo.streamTracker.callsSucceeded,\n                    streamsFailed: sessionInfo.streamTracker.callsFailed,\n                    messagesSent: sessionInfo.messagesSent,\n                    messagesReceived: sessionInfo.messagesReceived,\n                    keepAlivesSent: sessionInfo.keepAlivesSent,\n                    lastLocalStreamCreatedTimestamp: null,\n                    lastRemoteStreamCreatedTimestamp: sessionInfo.streamTracker.lastCallStartedTimestamp,\n                    lastMessageSentTimestamp: sessionInfo.lastMessageSentTimestamp,\n                    lastMessageReceivedTimestamp: sessionInfo.lastMessageReceivedTimestamp,\n                    localFlowControlWindow: (_c = session.state.localWindowSize) !== null && _c !== void 0 ? _c : null,\n                    remoteFlowControlWindow: (_d = session.state.remoteWindowSize) !== null && _d !== void 0 ? _d : null,\n                };\n                return socketInfo;\n            }\n            trace(text) {\n                logging.trace(constants_1.LogVerbosity.DEBUG, TRACER_NAME, '(' + this.channelzRef.id + ') ' + text);\n            }\n            keepaliveTrace(text) {\n                logging.trace(constants_1.LogVerbosity.DEBUG, 'keepalive', '(' + this.channelzRef.id + ') ' + text);\n            }\n            addProtoService() {\n                throw new Error('Not implemented. Use addService() instead');\n            }\n            addService(service, implementation) {\n                if (service === null ||\n                    typeof service !== 'object' ||\n                    implementation === null ||\n                    typeof implementation !== 'object') {\n                    throw new Error('addService() requires two objects as arguments');\n                }\n                const serviceKeys = Object.keys(service);\n                if (serviceKeys.length === 0) {\n                    throw new Error('Cannot add an empty service to a server');\n                }\n                serviceKeys.forEach(name => {\n                    const attrs = service[name];\n                    let methodType;\n                    if (attrs.requestStream) {\n                        if (attrs.responseStream) {\n                            methodType = 'bidi';\n                        }\n                        else {\n                            methodType = 'clientStream';\n                        }\n                    }\n                    else {\n                        if (attrs.responseStream) {\n                            methodType = 'serverStream';\n                        }\n                        else {\n                            methodType = 'unary';\n                        }\n                    }\n                    let implFn = implementation[name];\n                    let impl;\n                    if (implFn === undefined && typeof attrs.originalName === 'string') {\n                        implFn = implementation[attrs.originalName];\n                    }\n                    if (implFn !== undefined) {\n                        impl = implFn.bind(implementation);\n                    }\n                    else {\n                        impl = getDefaultHandler(methodType, name);\n                    }\n                    const success = this.register(attrs.path, impl, attrs.responseSerialize, attrs.requestDeserialize, methodType);\n                    if (success === false) {\n                        throw new Error(`Method handler for ${attrs.path} already provided.`);\n                    }\n                });\n            }\n            removeService(service) {\n                if (service === null || typeof service !== 'object') {\n                    throw new Error('removeService() requires object as argument');\n                }\n                const serviceKeys = Object.keys(service);\n                serviceKeys.forEach(name => {\n                    const attrs = service[name];\n                    this.unregister(attrs.path);\n                });\n            }\n            bind(port, creds) {\n                throw new Error('Not implemented. Use bindAsync() instead');\n            }\n            /**\n             * This API is experimental, so API stability is not guaranteed across minor versions.\n             * @param boundAddress\n             * @returns\n             */\n            experimentalRegisterListenerToChannelz(boundAddress) {\n                return (0, channelz_1.registerChannelzSocket)((0, subchannel_address_1.subchannelAddressToString)(boundAddress), () => {\n                    return {\n                        localAddress: boundAddress,\n                        remoteAddress: null,\n                        security: null,\n                        remoteName: null,\n                        streamsStarted: 0,\n                        streamsSucceeded: 0,\n                        streamsFailed: 0,\n                        messagesSent: 0,\n                        messagesReceived: 0,\n                        keepAlivesSent: 0,\n                        lastLocalStreamCreatedTimestamp: null,\n                        lastRemoteStreamCreatedTimestamp: null,\n                        lastMessageSentTimestamp: null,\n                        lastMessageReceivedTimestamp: null,\n                        localFlowControlWindow: null,\n                        remoteFlowControlWindow: null,\n                    };\n                }, this.channelzEnabled);\n            }\n            experimentalUnregisterListenerFromChannelz(channelzRef) {\n                (0, channelz_1.unregisterChannelzRef)(channelzRef);\n            }\n            createHttp2Server(credentials) {\n                let http2Server;\n                if (credentials._isSecure()) {\n                    const constructorOptions = credentials._getConstructorOptions();\n                    const contextOptions = credentials._getSecureContextOptions();\n                    const secureServerOptions = Object.assign(Object.assign(Object.assign(Object.assign({}, this.commonServerOptions), constructorOptions), contextOptions), { enableTrace: this.options['grpc-node.tls_enable_trace'] === 1 });\n                    let areCredentialsValid = contextOptions !== null;\n                    this.trace('Initial credentials valid: ' + areCredentialsValid);\n                    http2Server = http2.createSecureServer(secureServerOptions);\n                    http2Server.prependListener('connection', (socket) => {\n                        if (!areCredentialsValid) {\n                            this.trace('Dropped connection from ' + JSON.stringify(socket.address()) + ' due to unloaded credentials');\n                            socket.destroy();\n                        }\n                    });\n                    http2Server.on('secureConnection', (socket) => {\n                        /* These errors need to be handled by the user of Http2SecureServer,\n                         * according to https://github.com/nodejs/node/issues/35824 */\n                        socket.on('error', (e) => {\n                            this.trace('An incoming TLS connection closed with error: ' + e.message);\n                        });\n                    });\n                    const credsWatcher = options => {\n                        if (options) {\n                            const secureServer = http2Server;\n                            try {\n                                secureServer.setSecureContext(options);\n                            }\n                            catch (e) {\n                                logging.log(constants_1.LogVerbosity.ERROR, 'Failed to set secure context with error ' + e.message);\n                                options = null;\n                            }\n                        }\n                        areCredentialsValid = options !== null;\n                        this.trace('Post-update credentials valid: ' + areCredentialsValid);\n                    };\n                    credentials._addWatcher(credsWatcher);\n                    http2Server.on('close', () => {\n                        credentials._removeWatcher(credsWatcher);\n                    });\n                }\n                else {\n                    http2Server = http2.createServer(this.commonServerOptions);\n                }\n                http2Server.setTimeout(0, noop);\n                this._setupHandlers(http2Server, credentials._getInterceptors());\n                return http2Server;\n            }\n            bindOneAddress(address, boundPortObject) {\n                this.trace('Attempting to bind ' + (0, subchannel_address_1.subchannelAddressToString)(address));\n                const http2Server = this.createHttp2Server(boundPortObject.credentials);\n                return new Promise((resolve, reject) => {\n                    const onError = (err) => {\n                        this.trace('Failed to bind ' +\n                            (0, subchannel_address_1.subchannelAddressToString)(address) +\n                            ' with error ' +\n                            err.message);\n                        resolve({\n                            port: 'port' in address ? address.port : 1,\n                            error: err.message,\n                        });\n                    };\n                    http2Server.once('error', onError);\n                    http2Server.listen(address, () => {\n                        const boundAddress = http2Server.address();\n                        let boundSubchannelAddress;\n                        if (typeof boundAddress === 'string') {\n                            boundSubchannelAddress = {\n                                path: boundAddress,\n                            };\n                        }\n                        else {\n                            boundSubchannelAddress = {\n                                host: boundAddress.address,\n                                port: boundAddress.port,\n                            };\n                        }\n                        const channelzRef = this.experimentalRegisterListenerToChannelz(boundSubchannelAddress);\n                        this.listenerChildrenTracker.refChild(channelzRef);\n                        this.http2Servers.set(http2Server, {\n                            channelzRef: channelzRef,\n                            sessions: new Set(),\n                            ownsChannelzRef: true\n                        });\n                        boundPortObject.listeningServers.add(http2Server);\n                        this.trace('Successfully bound ' +\n                            (0, subchannel_address_1.subchannelAddressToString)(boundSubchannelAddress));\n                        resolve({\n                            port: 'port' in boundSubchannelAddress ? boundSubchannelAddress.port : 1,\n                        });\n                        http2Server.removeListener('error', onError);\n                    });\n                });\n            }\n            async bindManyPorts(addressList, boundPortObject) {\n                if (addressList.length === 0) {\n                    return {\n                        count: 0,\n                        port: 0,\n                        errors: [],\n                    };\n                }\n                if ((0, subchannel_address_1.isTcpSubchannelAddress)(addressList[0]) && addressList[0].port === 0) {\n                    /* If binding to port 0, first try to bind the first address, then bind\n                     * the rest of the address list to the specific port that it binds. */\n                    const firstAddressResult = await this.bindOneAddress(addressList[0], boundPortObject);\n                    if (firstAddressResult.error) {\n                        /* If the first address fails to bind, try the same operation starting\n                         * from the second item in the list. */\n                        const restAddressResult = await this.bindManyPorts(addressList.slice(1), boundPortObject);\n                        return Object.assign(Object.assign({}, restAddressResult), { errors: [firstAddressResult.error, ...restAddressResult.errors] });\n                    }\n                    else {\n                        const restAddresses = addressList\n                            .slice(1)\n                            .map(address => (0, subchannel_address_1.isTcpSubchannelAddress)(address)\n                            ? { host: address.host, port: firstAddressResult.port }\n                            : address);\n                        const restAddressResult = await Promise.all(restAddresses.map(address => this.bindOneAddress(address, boundPortObject)));\n                        const allResults = [firstAddressResult, ...restAddressResult];\n                        return {\n                            count: allResults.filter(result => result.error === undefined).length,\n                            port: firstAddressResult.port,\n                            errors: allResults\n                                .filter(result => result.error)\n                                .map(result => result.error),\n                        };\n                    }\n                }\n                else {\n                    const allResults = await Promise.all(addressList.map(address => this.bindOneAddress(address, boundPortObject)));\n                    return {\n                        count: allResults.filter(result => result.error === undefined).length,\n                        port: allResults[0].port,\n                        errors: allResults\n                            .filter(result => result.error)\n                            .map(result => result.error),\n                    };\n                }\n            }\n            async bindAddressList(addressList, boundPortObject) {\n                const bindResult = await this.bindManyPorts(addressList, boundPortObject);\n                if (bindResult.count > 0) {\n                    if (bindResult.count < addressList.length) {\n                        logging.log(constants_1.LogVerbosity.INFO, `WARNING Only ${bindResult.count} addresses added out of total ${addressList.length} resolved`);\n                    }\n                    return bindResult.port;\n                }\n                else {\n                    const errorString = `No address added out of total ${addressList.length} resolved`;\n                    logging.log(constants_1.LogVerbosity.ERROR, errorString);\n                    throw new Error(`${errorString} errors: [${bindResult.errors.join(',')}]`);\n                }\n            }\n            resolvePort(port) {\n                return new Promise((resolve, reject) => {\n                    const resolverListener = {\n                        onSuccessfulResolution: (endpointList, serviceConfig, serviceConfigError) => {\n                            // We only want one resolution result. Discard all future results\n                            resolverListener.onSuccessfulResolution = () => { };\n                            const addressList = [].concat(...endpointList.map(endpoint => endpoint.addresses));\n                            if (addressList.length === 0) {\n                                reject(new Error(`No addresses resolved for port ${port}`));\n                                return;\n                            }\n                            resolve(addressList);\n                        },\n                        onError: error => {\n                            reject(new Error(error.details));\n                        },\n                    };\n                    const resolver = (0, resolver_1.createResolver)(port, resolverListener, this.options);\n                    resolver.updateResolution();\n                });\n            }\n            async bindPort(port, boundPortObject) {\n                const addressList = await this.resolvePort(port);\n                if (boundPortObject.cancelled) {\n                    this.completeUnbind(boundPortObject);\n                    throw new Error('bindAsync operation cancelled by unbind call');\n                }\n                const portNumber = await this.bindAddressList(addressList, boundPortObject);\n                if (boundPortObject.cancelled) {\n                    this.completeUnbind(boundPortObject);\n                    throw new Error('bindAsync operation cancelled by unbind call');\n                }\n                return portNumber;\n            }\n            normalizePort(port) {\n                const initialPortUri = (0, uri_parser_1.parseUri)(port);\n                if (initialPortUri === null) {\n                    throw new Error(`Could not parse port \"${port}\"`);\n                }\n                const portUri = (0, resolver_1.mapUriDefaultScheme)(initialPortUri);\n                if (portUri === null) {\n                    throw new Error(`Could not get a default scheme for port \"${port}\"`);\n                }\n                return portUri;\n            }\n            bindAsync(port, creds, callback) {\n                if (this.shutdown) {\n                    throw new Error('bindAsync called after shutdown');\n                }\n                if (typeof port !== 'string') {\n                    throw new TypeError('port must be a string');\n                }\n                if (creds === null || !(creds instanceof server_credentials_1.ServerCredentials)) {\n                    throw new TypeError('creds must be a ServerCredentials object');\n                }\n                if (typeof callback !== 'function') {\n                    throw new TypeError('callback must be a function');\n                }\n                this.trace('bindAsync port=' + port);\n                const portUri = this.normalizePort(port);\n                const deferredCallback = (error, port) => {\n                    process.nextTick(() => callback(error, port));\n                };\n                /* First, if this port is already bound or that bind operation is in\n                 * progress, use that result. */\n                let boundPortObject = this.boundPorts.get((0, uri_parser_1.uriToString)(portUri));\n                if (boundPortObject) {\n                    if (!creds._equals(boundPortObject.credentials)) {\n                        deferredCallback(new Error(`${port} already bound with incompatible credentials`), 0);\n                        return;\n                    }\n                    /* If that operation has previously been cancelled by an unbind call,\n                     * uncancel it. */\n                    boundPortObject.cancelled = false;\n                    if (boundPortObject.completionPromise) {\n                        boundPortObject.completionPromise.then(portNum => callback(null, portNum), error => callback(error, 0));\n                    }\n                    else {\n                        deferredCallback(null, boundPortObject.portNumber);\n                    }\n                    return;\n                }\n                boundPortObject = {\n                    mapKey: (0, uri_parser_1.uriToString)(portUri),\n                    originalUri: portUri,\n                    completionPromise: null,\n                    cancelled: false,\n                    portNumber: 0,\n                    credentials: creds,\n                    listeningServers: new Set(),\n                };\n                const splitPort = (0, uri_parser_1.splitHostPort)(portUri.path);\n                const completionPromise = this.bindPort(portUri, boundPortObject);\n                boundPortObject.completionPromise = completionPromise;\n                /* If the port number is 0, defer populating the map entry until after the\n                 * bind operation completes and we have a specific port number. Otherwise,\n                 * populate it immediately. */\n                if ((splitPort === null || splitPort === void 0 ? void 0 : splitPort.port) === 0) {\n                    completionPromise.then(portNum => {\n                        const finalUri = {\n                            scheme: portUri.scheme,\n                            authority: portUri.authority,\n                            path: (0, uri_parser_1.combineHostPort)({ host: splitPort.host, port: portNum }),\n                        };\n                        boundPortObject.mapKey = (0, uri_parser_1.uriToString)(finalUri);\n                        boundPortObject.completionPromise = null;\n                        boundPortObject.portNumber = portNum;\n                        this.boundPorts.set(boundPortObject.mapKey, boundPortObject);\n                        callback(null, portNum);\n                    }, error => {\n                        callback(error, 0);\n                    });\n                }\n                else {\n                    this.boundPorts.set(boundPortObject.mapKey, boundPortObject);\n                    completionPromise.then(portNum => {\n                        boundPortObject.completionPromise = null;\n                        boundPortObject.portNumber = portNum;\n                        callback(null, portNum);\n                    }, error => {\n                        callback(error, 0);\n                    });\n                }\n            }\n            registerInjectorToChannelz() {\n                return (0, channelz_1.registerChannelzSocket)('injector', () => {\n                    return {\n                        localAddress: null,\n                        remoteAddress: null,\n                        security: null,\n                        remoteName: null,\n                        streamsStarted: 0,\n                        streamsSucceeded: 0,\n                        streamsFailed: 0,\n                        messagesSent: 0,\n                        messagesReceived: 0,\n                        keepAlivesSent: 0,\n                        lastLocalStreamCreatedTimestamp: null,\n                        lastRemoteStreamCreatedTimestamp: null,\n                        lastMessageSentTimestamp: null,\n                        lastMessageReceivedTimestamp: null,\n                        localFlowControlWindow: null,\n                        remoteFlowControlWindow: null,\n                    };\n                }, this.channelzEnabled);\n            }\n            /**\n             * This API is experimental, so API stability is not guaranteed across minor versions.\n             * @param credentials\n             * @param channelzRef\n             * @returns\n             */\n            experimentalCreateConnectionInjectorWithChannelzRef(credentials, channelzRef, ownsChannelzRef = false) {\n                if (credentials === null || !(credentials instanceof server_credentials_1.ServerCredentials)) {\n                    throw new TypeError('creds must be a ServerCredentials object');\n                }\n                if (this.channelzEnabled) {\n                    this.listenerChildrenTracker.refChild(channelzRef);\n                }\n                const server = this.createHttp2Server(credentials);\n                const sessionsSet = new Set();\n                this.http2Servers.set(server, {\n                    channelzRef: channelzRef,\n                    sessions: sessionsSet,\n                    ownsChannelzRef\n                });\n                return {\n                    injectConnection: (connection) => {\n                        server.emit('connection', connection);\n                    },\n                    drain: (graceTimeMs) => {\n                        var _b, _c;\n                        for (const session of sessionsSet) {\n                            this.closeSession(session);\n                        }\n                        (_c = (_b = setTimeout(() => {\n                            for (const session of sessionsSet) {\n                                session.destroy(http2.constants.NGHTTP2_CANCEL);\n                            }\n                        }, graceTimeMs)).unref) === null || _c === void 0 ? void 0 : _c.call(_b);\n                    },\n                    destroy: () => {\n                        this.closeServer(server);\n                        for (const session of sessionsSet) {\n                            this.closeSession(session);\n                        }\n                    }\n                };\n            }\n            createConnectionInjector(credentials) {\n                if (credentials === null || !(credentials instanceof server_credentials_1.ServerCredentials)) {\n                    throw new TypeError('creds must be a ServerCredentials object');\n                }\n                const channelzRef = this.registerInjectorToChannelz();\n                return this.experimentalCreateConnectionInjectorWithChannelzRef(credentials, channelzRef, true);\n            }\n            closeServer(server, callback) {\n                this.trace('Closing server with address ' + JSON.stringify(server.address()));\n                const serverInfo = this.http2Servers.get(server);\n                server.close(() => {\n                    if (serverInfo && serverInfo.ownsChannelzRef) {\n                        this.listenerChildrenTracker.unrefChild(serverInfo.channelzRef);\n                        (0, channelz_1.unregisterChannelzRef)(serverInfo.channelzRef);\n                    }\n                    this.http2Servers.delete(server);\n                    callback === null || callback === void 0 ? void 0 : callback();\n                });\n            }\n            closeSession(session, callback) {\n                var _b;\n                this.trace('Closing session initiated by ' + ((_b = session.socket) === null || _b === void 0 ? void 0 : _b.remoteAddress));\n                const sessionInfo = this.sessions.get(session);\n                const closeCallback = () => {\n                    if (sessionInfo) {\n                        this.sessionChildrenTracker.unrefChild(sessionInfo.ref);\n                        (0, channelz_1.unregisterChannelzRef)(sessionInfo.ref);\n                    }\n                    callback === null || callback === void 0 ? void 0 : callback();\n                };\n                if (session.closed) {\n                    queueMicrotask(closeCallback);\n                }\n                else {\n                    session.close(closeCallback);\n                }\n            }\n            completeUnbind(boundPortObject) {\n                for (const server of boundPortObject.listeningServers) {\n                    const serverInfo = this.http2Servers.get(server);\n                    this.closeServer(server, () => {\n                        boundPortObject.listeningServers.delete(server);\n                    });\n                    if (serverInfo) {\n                        for (const session of serverInfo.sessions) {\n                            this.closeSession(session);\n                        }\n                    }\n                }\n                this.boundPorts.delete(boundPortObject.mapKey);\n            }\n            /**\n             * Unbind a previously bound port, or cancel an in-progress bindAsync\n             * operation. If port 0 was bound, only the actual bound port can be\n             * unbound. For example, if bindAsync was called with \"localhost:0\" and the\n             * bound port result was 54321, it can be unbound as \"localhost:54321\".\n             * @param port\n             */\n            unbind(port) {\n                this.trace('unbind port=' + port);\n                const portUri = this.normalizePort(port);\n                const splitPort = (0, uri_parser_1.splitHostPort)(portUri.path);\n                if ((splitPort === null || splitPort === void 0 ? void 0 : splitPort.port) === 0) {\n                    throw new Error('Cannot unbind port 0');\n                }\n                const boundPortObject = this.boundPorts.get((0, uri_parser_1.uriToString)(portUri));\n                if (boundPortObject) {\n                    this.trace('unbinding ' +\n                        boundPortObject.mapKey +\n                        ' originally bound as ' +\n                        (0, uri_parser_1.uriToString)(boundPortObject.originalUri));\n                    /* If the bind operation is pending, the cancelled flag will trigger\n                     * the unbind operation later. */\n                    if (boundPortObject.completionPromise) {\n                        boundPortObject.cancelled = true;\n                    }\n                    else {\n                        this.completeUnbind(boundPortObject);\n                    }\n                }\n            }\n            /**\n             * Gracefully close all connections associated with a previously bound port.\n             * After the grace time, forcefully close all remaining open connections.\n             *\n             * If port 0 was bound, only the actual bound port can be\n             * drained. For example, if bindAsync was called with \"localhost:0\" and the\n             * bound port result was 54321, it can be drained as \"localhost:54321\".\n             * @param port\n             * @param graceTimeMs\n             * @returns\n             */\n            drain(port, graceTimeMs) {\n                var _b, _c;\n                this.trace('drain port=' + port + ' graceTimeMs=' + graceTimeMs);\n                const portUri = this.normalizePort(port);\n                const splitPort = (0, uri_parser_1.splitHostPort)(portUri.path);\n                if ((splitPort === null || splitPort === void 0 ? void 0 : splitPort.port) === 0) {\n                    throw new Error('Cannot drain port 0');\n                }\n                const boundPortObject = this.boundPorts.get((0, uri_parser_1.uriToString)(portUri));\n                if (!boundPortObject) {\n                    return;\n                }\n                const allSessions = new Set();\n                for (const http2Server of boundPortObject.listeningServers) {\n                    const serverEntry = this.http2Servers.get(http2Server);\n                    if (serverEntry) {\n                        for (const session of serverEntry.sessions) {\n                            allSessions.add(session);\n                            this.closeSession(session, () => {\n                                allSessions.delete(session);\n                            });\n                        }\n                    }\n                }\n                /* After the grace time ends, send another goaway to all remaining sessions\n                 * with the CANCEL code. */\n                (_c = (_b = setTimeout(() => {\n                    for (const session of allSessions) {\n                        session.destroy(http2.constants.NGHTTP2_CANCEL);\n                    }\n                }, graceTimeMs)).unref) === null || _c === void 0 ? void 0 : _c.call(_b);\n            }\n            forceShutdown() {\n                for (const boundPortObject of this.boundPorts.values()) {\n                    boundPortObject.cancelled = true;\n                }\n                this.boundPorts.clear();\n                // Close the server if it is still running.\n                for (const server of this.http2Servers.keys()) {\n                    this.closeServer(server);\n                }\n                // Always destroy any available sessions. It's possible that one or more\n                // tryShutdown() calls are in progress. Don't wait on them to finish.\n                this.sessions.forEach((channelzInfo, session) => {\n                    this.closeSession(session);\n                    // Cast NGHTTP2_CANCEL to any because TypeScript doesn't seem to\n                    // recognize destroy(code) as a valid signature.\n                    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n                    session.destroy(http2.constants.NGHTTP2_CANCEL);\n                });\n                this.sessions.clear();\n                (0, channelz_1.unregisterChannelzRef)(this.channelzRef);\n                this.shutdown = true;\n            }\n            register(name, handler, serialize, deserialize, type) {\n                if (this.handlers.has(name)) {\n                    return false;\n                }\n                this.handlers.set(name, {\n                    func: handler,\n                    serialize,\n                    deserialize,\n                    type,\n                    path: name,\n                });\n                return true;\n            }\n            unregister(name) {\n                return this.handlers.delete(name);\n            }\n            /**\n             * @deprecated No longer needed as of version 1.10.x\n             */\n            start() {\n                if (this.http2Servers.size === 0 ||\n                    [...this.http2Servers.keys()].every(server => !server.listening)) {\n                    throw new Error('server must be bound in order to start');\n                }\n                if (this.started === true) {\n                    throw new Error('server is already started');\n                }\n                this.started = true;\n            }\n            tryShutdown(callback) {\n                var _b;\n                const wrappedCallback = (error) => {\n                    (0, channelz_1.unregisterChannelzRef)(this.channelzRef);\n                    callback(error);\n                };\n                let pendingChecks = 0;\n                function maybeCallback() {\n                    pendingChecks--;\n                    if (pendingChecks === 0) {\n                        wrappedCallback();\n                    }\n                }\n                this.shutdown = true;\n                for (const [serverKey, server] of this.http2Servers.entries()) {\n                    pendingChecks++;\n                    const serverString = server.channelzRef.name;\n                    this.trace('Waiting for server ' + serverString + ' to close');\n                    this.closeServer(serverKey, () => {\n                        this.trace('Server ' + serverString + ' finished closing');\n                        maybeCallback();\n                    });\n                    for (const session of server.sessions.keys()) {\n                        pendingChecks++;\n                        const sessionString = (_b = session.socket) === null || _b === void 0 ? void 0 : _b.remoteAddress;\n                        this.trace('Waiting for session ' + sessionString + ' to close');\n                        this.closeSession(session, () => {\n                            this.trace('Session ' + sessionString + ' finished closing');\n                            maybeCallback();\n                        });\n                    }\n                }\n                if (pendingChecks === 0) {\n                    wrappedCallback();\n                }\n            }\n            addHttp2Port() {\n                throw new Error('Not yet implemented');\n            }\n            /**\n             * Get the channelz reference object for this server. The returned value is\n             * garbage if channelz is disabled for this server.\n             * @returns\n             */\n            getChannelzRef() {\n                return this.channelzRef;\n            }\n            _verifyContentType(stream, headers) {\n                const contentType = headers[http2.constants.HTTP2_HEADER_CONTENT_TYPE];\n                if (typeof contentType !== 'string' ||\n                    !contentType.startsWith('application/grpc')) {\n                    stream.respond({\n                        [http2.constants.HTTP2_HEADER_STATUS]: http2.constants.HTTP_STATUS_UNSUPPORTED_MEDIA_TYPE,\n                    }, { endStream: true });\n                    return false;\n                }\n                return true;\n            }\n            _retrieveHandler(path) {\n                serverCallTrace('Received call to method ' +\n                    path +\n                    ' at address ' +\n                    this.serverAddressString);\n                const handler = this.handlers.get(path);\n                if (handler === undefined) {\n                    serverCallTrace('No handler registered for method ' +\n                        path +\n                        '. Sending UNIMPLEMENTED status.');\n                    return null;\n                }\n                return handler;\n            }\n            _respondWithError(err, stream, channelzSessionInfo = null) {\n                var _b, _c;\n                const trailersToSend = Object.assign({ 'grpc-status': (_b = err.code) !== null && _b !== void 0 ? _b : constants_1.Status.INTERNAL, 'grpc-message': err.details, [http2.constants.HTTP2_HEADER_STATUS]: http2.constants.HTTP_STATUS_OK, [http2.constants.HTTP2_HEADER_CONTENT_TYPE]: 'application/grpc+proto' }, (_c = err.metadata) === null || _c === void 0 ? void 0 : _c.toHttp2Headers());\n                stream.respond(trailersToSend, { endStream: true });\n                this.callTracker.addCallFailed();\n                channelzSessionInfo === null || channelzSessionInfo === void 0 ? void 0 : channelzSessionInfo.streamTracker.addCallFailed();\n            }\n            _channelzHandler(extraInterceptors, stream, headers) {\n                // for handling idle timeout\n                this.onStreamOpened(stream);\n                const channelzSessionInfo = this.sessions.get(stream.session);\n                this.callTracker.addCallStarted();\n                channelzSessionInfo === null || channelzSessionInfo === void 0 ? void 0 : channelzSessionInfo.streamTracker.addCallStarted();\n                if (!this._verifyContentType(stream, headers)) {\n                    this.callTracker.addCallFailed();\n                    channelzSessionInfo === null || channelzSessionInfo === void 0 ? void 0 : channelzSessionInfo.streamTracker.addCallFailed();\n                    return;\n                }\n                const path = headers[HTTP2_HEADER_PATH];\n                const handler = this._retrieveHandler(path);\n                if (!handler) {\n                    this._respondWithError(getUnimplementedStatusResponse(path), stream, channelzSessionInfo);\n                    return;\n                }\n                const callEventTracker = {\n                    addMessageSent: () => {\n                        if (channelzSessionInfo) {\n                            channelzSessionInfo.messagesSent += 1;\n                            channelzSessionInfo.lastMessageSentTimestamp = new Date();\n                        }\n                    },\n                    addMessageReceived: () => {\n                        if (channelzSessionInfo) {\n                            channelzSessionInfo.messagesReceived += 1;\n                            channelzSessionInfo.lastMessageReceivedTimestamp = new Date();\n                        }\n                    },\n                    onCallEnd: status => {\n                        if (status.code === constants_1.Status.OK) {\n                            this.callTracker.addCallSucceeded();\n                        }\n                        else {\n                            this.callTracker.addCallFailed();\n                        }\n                    },\n                    onStreamEnd: success => {\n                        if (channelzSessionInfo) {\n                            if (success) {\n                                channelzSessionInfo.streamTracker.addCallSucceeded();\n                            }\n                            else {\n                                channelzSessionInfo.streamTracker.addCallFailed();\n                            }\n                        }\n                    },\n                };\n                const call = (0, server_interceptors_1.getServerInterceptingCall)([...extraInterceptors, ...this.interceptors], stream, headers, callEventTracker, handler, this.options);\n                if (!this._runHandlerForCall(call, handler)) {\n                    this.callTracker.addCallFailed();\n                    channelzSessionInfo === null || channelzSessionInfo === void 0 ? void 0 : channelzSessionInfo.streamTracker.addCallFailed();\n                    call.sendStatus({\n                        code: constants_1.Status.INTERNAL,\n                        details: `Unknown handler type: ${handler.type}`,\n                    });\n                }\n            }\n            _streamHandler(extraInterceptors, stream, headers) {\n                // for handling idle timeout\n                this.onStreamOpened(stream);\n                if (this._verifyContentType(stream, headers) !== true) {\n                    return;\n                }\n                const path = headers[HTTP2_HEADER_PATH];\n                const handler = this._retrieveHandler(path);\n                if (!handler) {\n                    this._respondWithError(getUnimplementedStatusResponse(path), stream, null);\n                    return;\n                }\n                const call = (0, server_interceptors_1.getServerInterceptingCall)([...extraInterceptors, ...this.interceptors], stream, headers, null, handler, this.options);\n                if (!this._runHandlerForCall(call, handler)) {\n                    call.sendStatus({\n                        code: constants_1.Status.INTERNAL,\n                        details: `Unknown handler type: ${handler.type}`,\n                    });\n                }\n            }\n            _runHandlerForCall(call, handler) {\n                const { type } = handler;\n                if (type === 'unary') {\n                    handleUnary(call, handler);\n                }\n                else if (type === 'clientStream') {\n                    handleClientStreaming(call, handler);\n                }\n                else if (type === 'serverStream') {\n                    handleServerStreaming(call, handler);\n                }\n                else if (type === 'bidi') {\n                    handleBidiStreaming(call, handler);\n                }\n                else {\n                    return false;\n                }\n                return true;\n            }\n            _setupHandlers(http2Server, extraInterceptors) {\n                if (http2Server === null) {\n                    return;\n                }\n                const serverAddress = http2Server.address();\n                let serverAddressString = 'null';\n                if (serverAddress) {\n                    if (typeof serverAddress === 'string') {\n                        serverAddressString = serverAddress;\n                    }\n                    else {\n                        serverAddressString = serverAddress.address + ':' + serverAddress.port;\n                    }\n                }\n                this.serverAddressString = serverAddressString;\n                const handler = this.channelzEnabled\n                    ? this._channelzHandler\n                    : this._streamHandler;\n                const sessionHandler = this.channelzEnabled\n                    ? this._channelzSessionHandler(http2Server)\n                    : this._sessionHandler(http2Server);\n                http2Server.on('stream', handler.bind(this, extraInterceptors));\n                http2Server.on('session', sessionHandler);\n            }\n            _sessionHandler(http2Server) {\n                return (session) => {\n                    var _b, _c;\n                    (_b = this.http2Servers.get(http2Server)) === null || _b === void 0 ? void 0 : _b.sessions.add(session);\n                    let connectionAgeTimer = null;\n                    let connectionAgeGraceTimer = null;\n                    let keepaliveTimer = null;\n                    let sessionClosedByServer = false;\n                    const idleTimeoutObj = this.enableIdleTimeout(session);\n                    if (this.maxConnectionAgeMs !== UNLIMITED_CONNECTION_AGE_MS) {\n                        // Apply a random jitter within a +/-10% range\n                        const jitterMagnitude = this.maxConnectionAgeMs / 10;\n                        const jitter = Math.random() * jitterMagnitude * 2 - jitterMagnitude;\n                        connectionAgeTimer = setTimeout(() => {\n                            var _b, _c;\n                            sessionClosedByServer = true;\n                            this.trace('Connection dropped by max connection age: ' +\n                                ((_b = session.socket) === null || _b === void 0 ? void 0 : _b.remoteAddress));\n                            try {\n                                session.goaway(http2.constants.NGHTTP2_NO_ERROR, ~(1 << 31), kMaxAge);\n                            }\n                            catch (e) {\n                                // The goaway can't be sent because the session is already closed\n                                session.destroy();\n                                return;\n                            }\n                            session.close();\n                            /* Allow a grace period after sending the GOAWAY before forcibly\n                             * closing the connection. */\n                            if (this.maxConnectionAgeGraceMs !== UNLIMITED_CONNECTION_AGE_MS) {\n                                connectionAgeGraceTimer = setTimeout(() => {\n                                    session.destroy();\n                                }, this.maxConnectionAgeGraceMs);\n                                (_c = connectionAgeGraceTimer.unref) === null || _c === void 0 ? void 0 : _c.call(connectionAgeGraceTimer);\n                            }\n                        }, this.maxConnectionAgeMs + jitter);\n                        (_c = connectionAgeTimer.unref) === null || _c === void 0 ? void 0 : _c.call(connectionAgeTimer);\n                    }\n                    const clearKeepaliveTimeout = () => {\n                        if (keepaliveTimer) {\n                            clearTimeout(keepaliveTimer);\n                            keepaliveTimer = null;\n                        }\n                    };\n                    const canSendPing = () => {\n                        return (!session.destroyed &&\n                            this.keepaliveTimeMs < KEEPALIVE_MAX_TIME_MS &&\n                            this.keepaliveTimeMs > 0);\n                    };\n                    /* eslint-disable-next-line prefer-const */\n                    let sendPing; // hoisted for use in maybeStartKeepalivePingTimer\n                    const maybeStartKeepalivePingTimer = () => {\n                        var _b;\n                        if (!canSendPing()) {\n                            return;\n                        }\n                        this.keepaliveTrace('Starting keepalive timer for ' + this.keepaliveTimeMs + 'ms');\n                        keepaliveTimer = setTimeout(() => {\n                            clearKeepaliveTimeout();\n                            sendPing();\n                        }, this.keepaliveTimeMs);\n                        (_b = keepaliveTimer.unref) === null || _b === void 0 ? void 0 : _b.call(keepaliveTimer);\n                    };\n                    sendPing = () => {\n                        var _b;\n                        if (!canSendPing()) {\n                            return;\n                        }\n                        this.keepaliveTrace('Sending ping with timeout ' + this.keepaliveTimeoutMs + 'ms');\n                        let pingSendError = '';\n                        try {\n                            const pingSentSuccessfully = session.ping((err, duration, payload) => {\n                                clearKeepaliveTimeout();\n                                if (err) {\n                                    this.keepaliveTrace('Ping failed with error: ' + err.message);\n                                    sessionClosedByServer = true;\n                                    session.close();\n                                }\n                                else {\n                                    this.keepaliveTrace('Received ping response');\n                                    maybeStartKeepalivePingTimer();\n                                }\n                            });\n                            if (!pingSentSuccessfully) {\n                                pingSendError = 'Ping returned false';\n                            }\n                        }\n                        catch (e) {\n                            // grpc/grpc-node#2139\n                            pingSendError =\n                                (e instanceof Error ? e.message : '') || 'Unknown error';\n                        }\n                        if (pingSendError) {\n                            this.keepaliveTrace('Ping send failed: ' + pingSendError);\n                            this.trace('Connection dropped due to ping send error: ' + pingSendError);\n                            sessionClosedByServer = true;\n                            session.close();\n                            return;\n                        }\n                        keepaliveTimer = setTimeout(() => {\n                            clearKeepaliveTimeout();\n                            this.keepaliveTrace('Ping timeout passed without response');\n                            this.trace('Connection dropped by keepalive timeout');\n                            sessionClosedByServer = true;\n                            session.close();\n                        }, this.keepaliveTimeoutMs);\n                        (_b = keepaliveTimer.unref) === null || _b === void 0 ? void 0 : _b.call(keepaliveTimer);\n                    };\n                    maybeStartKeepalivePingTimer();\n                    session.on('close', () => {\n                        var _b, _c;\n                        if (!sessionClosedByServer) {\n                            this.trace(`Connection dropped by client ${(_b = session.socket) === null || _b === void 0 ? void 0 : _b.remoteAddress}`);\n                        }\n                        if (connectionAgeTimer) {\n                            clearTimeout(connectionAgeTimer);\n                        }\n                        if (connectionAgeGraceTimer) {\n                            clearTimeout(connectionAgeGraceTimer);\n                        }\n                        clearKeepaliveTimeout();\n                        if (idleTimeoutObj !== null) {\n                            clearTimeout(idleTimeoutObj.timeout);\n                            this.sessionIdleTimeouts.delete(session);\n                        }\n                        (_c = this.http2Servers.get(http2Server)) === null || _c === void 0 ? void 0 : _c.sessions.delete(session);\n                    });\n                };\n            }\n            _channelzSessionHandler(http2Server) {\n                return (session) => {\n                    var _b, _c, _d, _e;\n                    const channelzRef = (0, channelz_1.registerChannelzSocket)((_c = (_b = session.socket) === null || _b === void 0 ? void 0 : _b.remoteAddress) !== null && _c !== void 0 ? _c : 'unknown', this.getChannelzSessionInfo.bind(this, session), this.channelzEnabled);\n                    const channelzSessionInfo = {\n                        ref: channelzRef,\n                        streamTracker: new channelz_1.ChannelzCallTracker(),\n                        messagesSent: 0,\n                        messagesReceived: 0,\n                        keepAlivesSent: 0,\n                        lastMessageSentTimestamp: null,\n                        lastMessageReceivedTimestamp: null,\n                    };\n                    (_d = this.http2Servers.get(http2Server)) === null || _d === void 0 ? void 0 : _d.sessions.add(session);\n                    this.sessions.set(session, channelzSessionInfo);\n                    const clientAddress = `${session.socket.remoteAddress}:${session.socket.remotePort}`;\n                    this.channelzTrace.addTrace('CT_INFO', 'Connection established by client ' + clientAddress);\n                    this.trace('Connection established by client ' + clientAddress);\n                    this.sessionChildrenTracker.refChild(channelzRef);\n                    let connectionAgeTimer = null;\n                    let connectionAgeGraceTimer = null;\n                    let keepaliveTimeout = null;\n                    let sessionClosedByServer = false;\n                    const idleTimeoutObj = this.enableIdleTimeout(session);\n                    if (this.maxConnectionAgeMs !== UNLIMITED_CONNECTION_AGE_MS) {\n                        // Apply a random jitter within a +/-10% range\n                        const jitterMagnitude = this.maxConnectionAgeMs / 10;\n                        const jitter = Math.random() * jitterMagnitude * 2 - jitterMagnitude;\n                        connectionAgeTimer = setTimeout(() => {\n                            var _b;\n                            sessionClosedByServer = true;\n                            this.channelzTrace.addTrace('CT_INFO', 'Connection dropped by max connection age from ' + clientAddress);\n                            try {\n                                session.goaway(http2.constants.NGHTTP2_NO_ERROR, ~(1 << 31), kMaxAge);\n                            }\n                            catch (e) {\n                                // The goaway can't be sent because the session is already closed\n                                session.destroy();\n                                return;\n                            }\n                            session.close();\n                            /* Allow a grace period after sending the GOAWAY before forcibly\n                             * closing the connection. */\n                            if (this.maxConnectionAgeGraceMs !== UNLIMITED_CONNECTION_AGE_MS) {\n                                connectionAgeGraceTimer = setTimeout(() => {\n                                    session.destroy();\n                                }, this.maxConnectionAgeGraceMs);\n                                (_b = connectionAgeGraceTimer.unref) === null || _b === void 0 ? void 0 : _b.call(connectionAgeGraceTimer);\n                            }\n                        }, this.maxConnectionAgeMs + jitter);\n                        (_e = connectionAgeTimer.unref) === null || _e === void 0 ? void 0 : _e.call(connectionAgeTimer);\n                    }\n                    const clearKeepaliveTimeout = () => {\n                        if (keepaliveTimeout) {\n                            clearTimeout(keepaliveTimeout);\n                            keepaliveTimeout = null;\n                        }\n                    };\n                    const canSendPing = () => {\n                        return (!session.destroyed &&\n                            this.keepaliveTimeMs < KEEPALIVE_MAX_TIME_MS &&\n                            this.keepaliveTimeMs > 0);\n                    };\n                    /* eslint-disable-next-line prefer-const */\n                    let sendPing; // hoisted for use in maybeStartKeepalivePingTimer\n                    const maybeStartKeepalivePingTimer = () => {\n                        var _b;\n                        if (!canSendPing()) {\n                            return;\n                        }\n                        this.keepaliveTrace('Starting keepalive timer for ' + this.keepaliveTimeMs + 'ms');\n                        keepaliveTimeout = setTimeout(() => {\n                            clearKeepaliveTimeout();\n                            sendPing();\n                        }, this.keepaliveTimeMs);\n                        (_b = keepaliveTimeout.unref) === null || _b === void 0 ? void 0 : _b.call(keepaliveTimeout);\n                    };\n                    sendPing = () => {\n                        var _b;\n                        if (!canSendPing()) {\n                            return;\n                        }\n                        this.keepaliveTrace('Sending ping with timeout ' + this.keepaliveTimeoutMs + 'ms');\n                        let pingSendError = '';\n                        try {\n                            const pingSentSuccessfully = session.ping((err, duration, payload) => {\n                                clearKeepaliveTimeout();\n                                if (err) {\n                                    this.keepaliveTrace('Ping failed with error: ' + err.message);\n                                    this.channelzTrace.addTrace('CT_INFO', 'Connection dropped due to error of a ping frame ' +\n                                        err.message +\n                                        ' return in ' +\n                                        duration);\n                                    sessionClosedByServer = true;\n                                    session.close();\n                                }\n                                else {\n                                    this.keepaliveTrace('Received ping response');\n                                    maybeStartKeepalivePingTimer();\n                                }\n                            });\n                            if (!pingSentSuccessfully) {\n                                pingSendError = 'Ping returned false';\n                            }\n                        }\n                        catch (e) {\n                            // grpc/grpc-node#2139\n                            pingSendError =\n                                (e instanceof Error ? e.message : '') || 'Unknown error';\n                        }\n                        if (pingSendError) {\n                            this.keepaliveTrace('Ping send failed: ' + pingSendError);\n                            this.channelzTrace.addTrace('CT_INFO', 'Connection dropped due to ping send error: ' + pingSendError);\n                            sessionClosedByServer = true;\n                            session.close();\n                            return;\n                        }\n                        channelzSessionInfo.keepAlivesSent += 1;\n                        keepaliveTimeout = setTimeout(() => {\n                            clearKeepaliveTimeout();\n                            this.keepaliveTrace('Ping timeout passed without response');\n                            this.channelzTrace.addTrace('CT_INFO', 'Connection dropped by keepalive timeout from ' + clientAddress);\n                            sessionClosedByServer = true;\n                            session.close();\n                        }, this.keepaliveTimeoutMs);\n                        (_b = keepaliveTimeout.unref) === null || _b === void 0 ? void 0 : _b.call(keepaliveTimeout);\n                    };\n                    maybeStartKeepalivePingTimer();\n                    session.on('close', () => {\n                        var _b;\n                        if (!sessionClosedByServer) {\n                            this.channelzTrace.addTrace('CT_INFO', 'Connection dropped by client ' + clientAddress);\n                        }\n                        this.sessionChildrenTracker.unrefChild(channelzRef);\n                        (0, channelz_1.unregisterChannelzRef)(channelzRef);\n                        if (connectionAgeTimer) {\n                            clearTimeout(connectionAgeTimer);\n                        }\n                        if (connectionAgeGraceTimer) {\n                            clearTimeout(connectionAgeGraceTimer);\n                        }\n                        clearKeepaliveTimeout();\n                        if (idleTimeoutObj !== null) {\n                            clearTimeout(idleTimeoutObj.timeout);\n                            this.sessionIdleTimeouts.delete(session);\n                        }\n                        (_b = this.http2Servers.get(http2Server)) === null || _b === void 0 ? void 0 : _b.sessions.delete(session);\n                        this.sessions.delete(session);\n                    });\n                };\n            }\n            enableIdleTimeout(session) {\n                var _b, _c;\n                if (this.sessionIdleTimeout >= MAX_CONNECTION_IDLE_MS) {\n                    return null;\n                }\n                const idleTimeoutObj = {\n                    activeStreams: 0,\n                    lastIdle: Date.now(),\n                    onClose: this.onStreamClose.bind(this, session),\n                    timeout: setTimeout(this.onIdleTimeout, this.sessionIdleTimeout, this, session),\n                };\n                (_c = (_b = idleTimeoutObj.timeout).unref) === null || _c === void 0 ? void 0 : _c.call(_b);\n                this.sessionIdleTimeouts.set(session, idleTimeoutObj);\n                const { socket } = session;\n                this.trace('Enable idle timeout for ' +\n                    socket.remoteAddress +\n                    ':' +\n                    socket.remotePort);\n                return idleTimeoutObj;\n            }\n            onIdleTimeout(ctx, session) {\n                const { socket } = session;\n                const sessionInfo = ctx.sessionIdleTimeouts.get(session);\n                // if it is called while we have activeStreams - timer will not be rescheduled\n                // until last active stream is closed, then it will call .refresh() on the timer\n                // important part is to not clearTimeout(timer) or it becomes unusable\n                // for future refreshes\n                if (sessionInfo !== undefined &&\n                    sessionInfo.activeStreams === 0) {\n                    if (Date.now() - sessionInfo.lastIdle >= ctx.sessionIdleTimeout) {\n                        ctx.trace('Session idle timeout triggered for ' +\n                            (socket === null || socket === void 0 ? void 0 : socket.remoteAddress) +\n                            ':' +\n                            (socket === null || socket === void 0 ? void 0 : socket.remotePort) +\n                            ' last idle at ' +\n                            sessionInfo.lastIdle);\n                        ctx.closeSession(session);\n                    }\n                    else {\n                        sessionInfo.timeout.refresh();\n                    }\n                }\n            }\n            onStreamOpened(stream) {\n                const session = stream.session;\n                const idleTimeoutObj = this.sessionIdleTimeouts.get(session);\n                if (idleTimeoutObj) {\n                    idleTimeoutObj.activeStreams += 1;\n                    stream.once('close', idleTimeoutObj.onClose);\n                }\n            }\n            onStreamClose(session) {\n                var _b, _c;\n                const idleTimeoutObj = this.sessionIdleTimeouts.get(session);\n                if (idleTimeoutObj) {\n                    idleTimeoutObj.activeStreams -= 1;\n                    if (idleTimeoutObj.activeStreams === 0) {\n                        idleTimeoutObj.lastIdle = Date.now();\n                        idleTimeoutObj.timeout.refresh();\n                        this.trace('Session onStreamClose' +\n                            ((_b = session.socket) === null || _b === void 0 ? void 0 : _b.remoteAddress) +\n                            ':' +\n                            ((_c = session.socket) === null || _c === void 0 ? void 0 : _c.remotePort) +\n                            ' at ' +\n                            idleTimeoutObj.lastIdle);\n                    }\n                }\n            }\n        },\n        (() => {\n            const _metadata = typeof Symbol === \"function\" && Symbol.metadata ? Object.create(null) : void 0;\n            _start_decorators = [deprecate('Calling start() is no longer necessary. It can be safely omitted.')];\n            __esDecorate(_a, null, _start_decorators, { kind: \"method\", name: \"start\", static: false, private: false, access: { has: obj => \"start\" in obj, get: obj => obj.start }, metadata: _metadata }, null, _instanceExtraInitializers);\n            if (_metadata) Object.defineProperty(_a, Symbol.metadata, { enumerable: true, configurable: true, writable: true, value: _metadata });\n        })(),\n        _a;\n})();\nexports.Server = Server;\nasync function handleUnary(call, handler) {\n    let stream;\n    function respond(err, value, trailer, flags) {\n        if (err) {\n            call.sendStatus((0, server_call_1.serverErrorToStatus)(err, trailer));\n            return;\n        }\n        call.sendMessage(value, () => {\n            call.sendStatus({\n                code: constants_1.Status.OK,\n                details: 'OK',\n                metadata: trailer !== null && trailer !== void 0 ? trailer : null,\n            });\n        });\n    }\n    let requestMetadata;\n    let requestMessage = null;\n    call.start({\n        onReceiveMetadata(metadata) {\n            requestMetadata = metadata;\n            call.startRead();\n        },\n        onReceiveMessage(message) {\n            if (requestMessage) {\n                call.sendStatus({\n                    code: constants_1.Status.UNIMPLEMENTED,\n                    details: `Received a second request message for server streaming method ${handler.path}`,\n                    metadata: null,\n                });\n                return;\n            }\n            requestMessage = message;\n            call.startRead();\n        },\n        onReceiveHalfClose() {\n            if (!requestMessage) {\n                call.sendStatus({\n                    code: constants_1.Status.UNIMPLEMENTED,\n                    details: `Received no request message for server streaming method ${handler.path}`,\n                    metadata: null,\n                });\n                return;\n            }\n            stream = new server_call_1.ServerWritableStreamImpl(handler.path, call, requestMetadata, requestMessage);\n            try {\n                handler.func(stream, respond);\n            }\n            catch (err) {\n                call.sendStatus({\n                    code: constants_1.Status.UNKNOWN,\n                    details: `Server method handler threw error ${err.message}`,\n                    metadata: null,\n                });\n            }\n        },\n        onCancel() {\n            if (stream) {\n                stream.cancelled = true;\n                stream.emit('cancelled', 'cancelled');\n            }\n        },\n    });\n}\nfunction handleClientStreaming(call, handler) {\n    let stream;\n    function respond(err, value, trailer, flags) {\n        if (err) {\n            call.sendStatus((0, server_call_1.serverErrorToStatus)(err, trailer));\n            return;\n        }\n        call.sendMessage(value, () => {\n            call.sendStatus({\n                code: constants_1.Status.OK,\n                details: 'OK',\n                metadata: trailer !== null && trailer !== void 0 ? trailer : null,\n            });\n        });\n    }\n    call.start({\n        onReceiveMetadata(metadata) {\n            stream = new server_call_1.ServerDuplexStreamImpl(handler.path, call, metadata);\n            try {\n                handler.func(stream, respond);\n            }\n            catch (err) {\n                call.sendStatus({\n                    code: constants_1.Status.UNKNOWN,\n                    details: `Server method handler threw error ${err.message}`,\n                    metadata: null,\n                });\n            }\n        },\n        onReceiveMessage(message) {\n            stream.push(message);\n        },\n        onReceiveHalfClose() {\n            stream.push(null);\n        },\n        onCancel() {\n            if (stream) {\n                stream.cancelled = true;\n                stream.emit('cancelled', 'cancelled');\n                stream.destroy();\n            }\n        },\n    });\n}\nfunction handleServerStreaming(call, handler) {\n    let stream;\n    let requestMetadata;\n    let requestMessage = null;\n    call.start({\n        onReceiveMetadata(metadata) {\n            requestMetadata = metadata;\n            call.startRead();\n        },\n        onReceiveMessage(message) {\n            if (requestMessage) {\n                call.sendStatus({\n                    code: constants_1.Status.UNIMPLEMENTED,\n                    details: `Received a second request message for server streaming method ${handler.path}`,\n                    metadata: null,\n                });\n                return;\n            }\n            requestMessage = message;\n            call.startRead();\n        },\n        onReceiveHalfClose() {\n            if (!requestMessage) {\n                call.sendStatus({\n                    code: constants_1.Status.UNIMPLEMENTED,\n                    details: `Received no request message for server streaming method ${handler.path}`,\n                    metadata: null,\n                });\n                return;\n            }\n            stream = new server_call_1.ServerWritableStreamImpl(handler.path, call, requestMetadata, requestMessage);\n            try {\n                handler.func(stream);\n            }\n            catch (err) {\n                call.sendStatus({\n                    code: constants_1.Status.UNKNOWN,\n                    details: `Server method handler threw error ${err.message}`,\n                    metadata: null,\n                });\n            }\n        },\n        onCancel() {\n            if (stream) {\n                stream.cancelled = true;\n                stream.emit('cancelled', 'cancelled');\n                stream.destroy();\n            }\n        },\n    });\n}\nfunction handleBidiStreaming(call, handler) {\n    let stream;\n    call.start({\n        onReceiveMetadata(metadata) {\n            stream = new server_call_1.ServerDuplexStreamImpl(handler.path, call, metadata);\n            try {\n                handler.func(stream);\n            }\n            catch (err) {\n                call.sendStatus({\n                    code: constants_1.Status.UNKNOWN,\n                    details: `Server method handler threw error ${err.message}`,\n                    metadata: null,\n                });\n            }\n        },\n        onReceiveMessage(message) {\n            stream.push(message);\n        },\n        onReceiveHalfClose() {\n            stream.push(null);\n        },\n        onCancel() {\n            if (stream) {\n                stream.cancelled = true;\n                stream.emit('cancelled', 'cancelled');\n                stream.destroy();\n            }\n        },\n    });\n}\n//# sourceMappingURL=server.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/google-gax/node_modules/@grpc/grpc-js/build/src/server.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/google-gax/node_modules/@grpc/grpc-js/build/src/service-config.js":
/*!****************************************************************************************!*\
  !*** ./node_modules/google-gax/node_modules/@grpc/grpc-js/build/src/service-config.js ***!
  \****************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\n/*\n * Copyright 2019 gRPC authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n */\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.validateRetryThrottling = validateRetryThrottling;\nexports.validateServiceConfig = validateServiceConfig;\nexports.extractAndSelectServiceConfig = extractAndSelectServiceConfig;\n/* This file implements gRFC A2 and the service config spec:\n * https://github.com/grpc/proposal/blob/master/A2-service-configs-in-dns.md\n * https://github.com/grpc/grpc/blob/master/doc/service_config.md. Each\n * function here takes an object with unknown structure and returns its\n * specific object type if the input has the right structure, and throws an\n * error otherwise. */\n/* The any type is purposely used here. All functions validate their input at\n * runtime */\n/* eslint-disable @typescript-eslint/no-explicit-any */\nconst os = __webpack_require__(/*! os */ \"os\");\nconst constants_1 = __webpack_require__(/*! ./constants */ \"(rsc)/./node_modules/google-gax/node_modules/@grpc/grpc-js/build/src/constants.js\");\n/**\n * Recognizes a number with up to 9 digits after the decimal point, followed by\n * an \"s\", representing a number of seconds.\n */\nconst DURATION_REGEX = /^\\d+(\\.\\d{1,9})?s$/;\n/**\n * Client language name used for determining whether this client matches a\n * `ServiceConfigCanaryConfig`'s `clientLanguage` list.\n */\nconst CLIENT_LANGUAGE_STRING = 'node';\nfunction validateName(obj) {\n    // In this context, and unset field and '' are considered the same\n    if ('service' in obj && obj.service !== '') {\n        if (typeof obj.service !== 'string') {\n            throw new Error(`Invalid method config name: invalid service: expected type string, got ${typeof obj.service}`);\n        }\n        if ('method' in obj && obj.method !== '') {\n            if (typeof obj.method !== 'string') {\n                throw new Error(`Invalid method config name: invalid method: expected type string, got ${typeof obj.service}`);\n            }\n            return {\n                service: obj.service,\n                method: obj.method,\n            };\n        }\n        else {\n            return {\n                service: obj.service,\n            };\n        }\n    }\n    else {\n        if ('method' in obj && obj.method !== undefined) {\n            throw new Error(`Invalid method config name: method set with empty or unset service`);\n        }\n        return {};\n    }\n}\nfunction validateRetryPolicy(obj) {\n    if (!('maxAttempts' in obj) ||\n        !Number.isInteger(obj.maxAttempts) ||\n        obj.maxAttempts < 2) {\n        throw new Error('Invalid method config retry policy: maxAttempts must be an integer at least 2');\n    }\n    if (!('initialBackoff' in obj) ||\n        typeof obj.initialBackoff !== 'string' ||\n        !DURATION_REGEX.test(obj.initialBackoff)) {\n        throw new Error('Invalid method config retry policy: initialBackoff must be a string consisting of a positive integer or decimal followed by s');\n    }\n    if (!('maxBackoff' in obj) ||\n        typeof obj.maxBackoff !== 'string' ||\n        !DURATION_REGEX.test(obj.maxBackoff)) {\n        throw new Error('Invalid method config retry policy: maxBackoff must be a string consisting of a positive integer or decimal followed by s');\n    }\n    if (!('backoffMultiplier' in obj) ||\n        typeof obj.backoffMultiplier !== 'number' ||\n        obj.backoffMultiplier <= 0) {\n        throw new Error('Invalid method config retry policy: backoffMultiplier must be a number greater than 0');\n    }\n    if (!('retryableStatusCodes' in obj && Array.isArray(obj.retryableStatusCodes))) {\n        throw new Error('Invalid method config retry policy: retryableStatusCodes is required');\n    }\n    if (obj.retryableStatusCodes.length === 0) {\n        throw new Error('Invalid method config retry policy: retryableStatusCodes must be non-empty');\n    }\n    for (const value of obj.retryableStatusCodes) {\n        if (typeof value === 'number') {\n            if (!Object.values(constants_1.Status).includes(value)) {\n                throw new Error('Invalid method config retry policy: retryableStatusCodes value not in status code range');\n            }\n        }\n        else if (typeof value === 'string') {\n            if (!Object.values(constants_1.Status).includes(value.toUpperCase())) {\n                throw new Error('Invalid method config retry policy: retryableStatusCodes value not a status code name');\n            }\n        }\n        else {\n            throw new Error('Invalid method config retry policy: retryableStatusCodes value must be a string or number');\n        }\n    }\n    return {\n        maxAttempts: obj.maxAttempts,\n        initialBackoff: obj.initialBackoff,\n        maxBackoff: obj.maxBackoff,\n        backoffMultiplier: obj.backoffMultiplier,\n        retryableStatusCodes: obj.retryableStatusCodes,\n    };\n}\nfunction validateHedgingPolicy(obj) {\n    if (!('maxAttempts' in obj) ||\n        !Number.isInteger(obj.maxAttempts) ||\n        obj.maxAttempts < 2) {\n        throw new Error('Invalid method config hedging policy: maxAttempts must be an integer at least 2');\n    }\n    if ('hedgingDelay' in obj &&\n        (typeof obj.hedgingDelay !== 'string' ||\n            !DURATION_REGEX.test(obj.hedgingDelay))) {\n        throw new Error('Invalid method config hedging policy: hedgingDelay must be a string consisting of a positive integer followed by s');\n    }\n    if ('nonFatalStatusCodes' in obj && Array.isArray(obj.nonFatalStatusCodes)) {\n        for (const value of obj.nonFatalStatusCodes) {\n            if (typeof value === 'number') {\n                if (!Object.values(constants_1.Status).includes(value)) {\n                    throw new Error('Invalid method config hedging policy: nonFatalStatusCodes value not in status code range');\n                }\n            }\n            else if (typeof value === 'string') {\n                if (!Object.values(constants_1.Status).includes(value.toUpperCase())) {\n                    throw new Error('Invalid method config hedging policy: nonFatalStatusCodes value not a status code name');\n                }\n            }\n            else {\n                throw new Error('Invalid method config hedging policy: nonFatalStatusCodes value must be a string or number');\n            }\n        }\n    }\n    const result = {\n        maxAttempts: obj.maxAttempts,\n    };\n    if (obj.hedgingDelay) {\n        result.hedgingDelay = obj.hedgingDelay;\n    }\n    if (obj.nonFatalStatusCodes) {\n        result.nonFatalStatusCodes = obj.nonFatalStatusCodes;\n    }\n    return result;\n}\nfunction validateMethodConfig(obj) {\n    var _a;\n    const result = {\n        name: [],\n    };\n    if (!('name' in obj) || !Array.isArray(obj.name)) {\n        throw new Error('Invalid method config: invalid name array');\n    }\n    for (const name of obj.name) {\n        result.name.push(validateName(name));\n    }\n    if ('waitForReady' in obj) {\n        if (typeof obj.waitForReady !== 'boolean') {\n            throw new Error('Invalid method config: invalid waitForReady');\n        }\n        result.waitForReady = obj.waitForReady;\n    }\n    if ('timeout' in obj) {\n        if (typeof obj.timeout === 'object') {\n            if (!('seconds' in obj.timeout) ||\n                !(typeof obj.timeout.seconds === 'number')) {\n                throw new Error('Invalid method config: invalid timeout.seconds');\n            }\n            if (!('nanos' in obj.timeout) ||\n                !(typeof obj.timeout.nanos === 'number')) {\n                throw new Error('Invalid method config: invalid timeout.nanos');\n            }\n            result.timeout = obj.timeout;\n        }\n        else if (typeof obj.timeout === 'string' &&\n            DURATION_REGEX.test(obj.timeout)) {\n            const timeoutParts = obj.timeout\n                .substring(0, obj.timeout.length - 1)\n                .split('.');\n            result.timeout = {\n                seconds: timeoutParts[0] | 0,\n                nanos: ((_a = timeoutParts[1]) !== null && _a !== void 0 ? _a : 0) | 0,\n            };\n        }\n        else {\n            throw new Error('Invalid method config: invalid timeout');\n        }\n    }\n    if ('maxRequestBytes' in obj) {\n        if (typeof obj.maxRequestBytes !== 'number') {\n            throw new Error('Invalid method config: invalid maxRequestBytes');\n        }\n        result.maxRequestBytes = obj.maxRequestBytes;\n    }\n    if ('maxResponseBytes' in obj) {\n        if (typeof obj.maxResponseBytes !== 'number') {\n            throw new Error('Invalid method config: invalid maxRequestBytes');\n        }\n        result.maxResponseBytes = obj.maxResponseBytes;\n    }\n    if ('retryPolicy' in obj) {\n        if ('hedgingPolicy' in obj) {\n            throw new Error('Invalid method config: retryPolicy and hedgingPolicy cannot both be specified');\n        }\n        else {\n            result.retryPolicy = validateRetryPolicy(obj.retryPolicy);\n        }\n    }\n    else if ('hedgingPolicy' in obj) {\n        result.hedgingPolicy = validateHedgingPolicy(obj.hedgingPolicy);\n    }\n    return result;\n}\nfunction validateRetryThrottling(obj) {\n    if (!('maxTokens' in obj) ||\n        typeof obj.maxTokens !== 'number' ||\n        obj.maxTokens <= 0 ||\n        obj.maxTokens > 1000) {\n        throw new Error('Invalid retryThrottling: maxTokens must be a number in (0, 1000]');\n    }\n    if (!('tokenRatio' in obj) ||\n        typeof obj.tokenRatio !== 'number' ||\n        obj.tokenRatio <= 0) {\n        throw new Error('Invalid retryThrottling: tokenRatio must be a number greater than 0');\n    }\n    return {\n        maxTokens: +obj.maxTokens.toFixed(3),\n        tokenRatio: +obj.tokenRatio.toFixed(3),\n    };\n}\nfunction validateLoadBalancingConfig(obj) {\n    if (!(typeof obj === 'object' && obj !== null)) {\n        throw new Error(`Invalid loadBalancingConfig: unexpected type ${typeof obj}`);\n    }\n    const keys = Object.keys(obj);\n    if (keys.length > 1) {\n        throw new Error(`Invalid loadBalancingConfig: unexpected multiple keys ${keys}`);\n    }\n    if (keys.length === 0) {\n        throw new Error('Invalid loadBalancingConfig: load balancing policy name required');\n    }\n    return {\n        [keys[0]]: obj[keys[0]],\n    };\n}\nfunction validateServiceConfig(obj) {\n    const result = {\n        loadBalancingConfig: [],\n        methodConfig: [],\n    };\n    if ('loadBalancingPolicy' in obj) {\n        if (typeof obj.loadBalancingPolicy === 'string') {\n            result.loadBalancingPolicy = obj.loadBalancingPolicy;\n        }\n        else {\n            throw new Error('Invalid service config: invalid loadBalancingPolicy');\n        }\n    }\n    if ('loadBalancingConfig' in obj) {\n        if (Array.isArray(obj.loadBalancingConfig)) {\n            for (const config of obj.loadBalancingConfig) {\n                result.loadBalancingConfig.push(validateLoadBalancingConfig(config));\n            }\n        }\n        else {\n            throw new Error('Invalid service config: invalid loadBalancingConfig');\n        }\n    }\n    if ('methodConfig' in obj) {\n        if (Array.isArray(obj.methodConfig)) {\n            for (const methodConfig of obj.methodConfig) {\n                result.methodConfig.push(validateMethodConfig(methodConfig));\n            }\n        }\n    }\n    if ('retryThrottling' in obj) {\n        result.retryThrottling = validateRetryThrottling(obj.retryThrottling);\n    }\n    // Validate method name uniqueness\n    const seenMethodNames = [];\n    for (const methodConfig of result.methodConfig) {\n        for (const name of methodConfig.name) {\n            for (const seenName of seenMethodNames) {\n                if (name.service === seenName.service &&\n                    name.method === seenName.method) {\n                    throw new Error(`Invalid service config: duplicate name ${name.service}/${name.method}`);\n                }\n            }\n            seenMethodNames.push(name);\n        }\n    }\n    return result;\n}\nfunction validateCanaryConfig(obj) {\n    if (!('serviceConfig' in obj)) {\n        throw new Error('Invalid service config choice: missing service config');\n    }\n    const result = {\n        serviceConfig: validateServiceConfig(obj.serviceConfig),\n    };\n    if ('clientLanguage' in obj) {\n        if (Array.isArray(obj.clientLanguage)) {\n            result.clientLanguage = [];\n            for (const lang of obj.clientLanguage) {\n                if (typeof lang === 'string') {\n                    result.clientLanguage.push(lang);\n                }\n                else {\n                    throw new Error('Invalid service config choice: invalid clientLanguage');\n                }\n            }\n        }\n        else {\n            throw new Error('Invalid service config choice: invalid clientLanguage');\n        }\n    }\n    if ('clientHostname' in obj) {\n        if (Array.isArray(obj.clientHostname)) {\n            result.clientHostname = [];\n            for (const lang of obj.clientHostname) {\n                if (typeof lang === 'string') {\n                    result.clientHostname.push(lang);\n                }\n                else {\n                    throw new Error('Invalid service config choice: invalid clientHostname');\n                }\n            }\n        }\n        else {\n            throw new Error('Invalid service config choice: invalid clientHostname');\n        }\n    }\n    if ('percentage' in obj) {\n        if (typeof obj.percentage === 'number' &&\n            0 <= obj.percentage &&\n            obj.percentage <= 100) {\n            result.percentage = obj.percentage;\n        }\n        else {\n            throw new Error('Invalid service config choice: invalid percentage');\n        }\n    }\n    // Validate that no unexpected fields are present\n    const allowedFields = [\n        'clientLanguage',\n        'percentage',\n        'clientHostname',\n        'serviceConfig',\n    ];\n    for (const field in obj) {\n        if (!allowedFields.includes(field)) {\n            throw new Error(`Invalid service config choice: unexpected field ${field}`);\n        }\n    }\n    return result;\n}\nfunction validateAndSelectCanaryConfig(obj, percentage) {\n    if (!Array.isArray(obj)) {\n        throw new Error('Invalid service config list');\n    }\n    for (const config of obj) {\n        const validatedConfig = validateCanaryConfig(config);\n        /* For each field, we check if it is present, then only discard the\n         * config if the field value does not match the current client */\n        if (typeof validatedConfig.percentage === 'number' &&\n            percentage > validatedConfig.percentage) {\n            continue;\n        }\n        if (Array.isArray(validatedConfig.clientHostname)) {\n            let hostnameMatched = false;\n            for (const hostname of validatedConfig.clientHostname) {\n                if (hostname === os.hostname()) {\n                    hostnameMatched = true;\n                }\n            }\n            if (!hostnameMatched) {\n                continue;\n            }\n        }\n        if (Array.isArray(validatedConfig.clientLanguage)) {\n            let languageMatched = false;\n            for (const language of validatedConfig.clientLanguage) {\n                if (language === CLIENT_LANGUAGE_STRING) {\n                    languageMatched = true;\n                }\n            }\n            if (!languageMatched) {\n                continue;\n            }\n        }\n        return validatedConfig.serviceConfig;\n    }\n    throw new Error('No matching service config found');\n}\n/**\n * Find the \"grpc_config\" record among the TXT records, parse its value as JSON, validate its contents,\n * and select a service config with selection fields that all match this client. Most of these steps\n * can fail with an error; the caller must handle any errors thrown this way.\n * @param txtRecord The TXT record array that is output from a successful call to dns.resolveTxt\n * @param percentage A number chosen from the range [0, 100) that is used to select which config to use\n * @return The service configuration to use, given the percentage value, or null if the service config\n *     data has a valid format but none of the options match the current client.\n */\nfunction extractAndSelectServiceConfig(txtRecord, percentage) {\n    for (const record of txtRecord) {\n        if (record.length > 0 && record[0].startsWith('grpc_config=')) {\n            /* Treat the list of strings in this record as a single string and remove\n             * \"grpc_config=\" from the beginning. The rest should be a JSON string */\n            const recordString = record.join('').substring('grpc_config='.length);\n            const recordJson = JSON.parse(recordString);\n            return validateAndSelectCanaryConfig(recordJson, percentage);\n        }\n    }\n    return null;\n}\n//# sourceMappingURL=service-config.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/google-gax/node_modules/@grpc/grpc-js/build/src/service-config.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/google-gax/node_modules/@grpc/grpc-js/build/src/status-builder.js":
/*!****************************************************************************************!*\
  !*** ./node_modules/google-gax/node_modules/@grpc/grpc-js/build/src/status-builder.js ***!
  \****************************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";
eval("\n/*\n * Copyright 2019 gRPC authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n */\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.StatusBuilder = void 0;\n/**\n * A builder for gRPC status objects.\n */\nclass StatusBuilder {\n    constructor() {\n        this.code = null;\n        this.details = null;\n        this.metadata = null;\n    }\n    /**\n     * Adds a status code to the builder.\n     */\n    withCode(code) {\n        this.code = code;\n        return this;\n    }\n    /**\n     * Adds details to the builder.\n     */\n    withDetails(details) {\n        this.details = details;\n        return this;\n    }\n    /**\n     * Adds metadata to the builder.\n     */\n    withMetadata(metadata) {\n        this.metadata = metadata;\n        return this;\n    }\n    /**\n     * Builds the status object.\n     */\n    build() {\n        const status = {};\n        if (this.code !== null) {\n            status.code = this.code;\n        }\n        if (this.details !== null) {\n            status.details = this.details;\n        }\n        if (this.metadata !== null) {\n            status.metadata = this.metadata;\n        }\n        return status;\n    }\n}\nexports.StatusBuilder = StatusBuilder;\n//# sourceMappingURL=status-builder.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvZ29vZ2xlLWdheC9ub2RlX21vZHVsZXMvQGdycGMvZ3JwYy1qcy9idWlsZC9zcmMvc3RhdHVzLWJ1aWxkZXIuanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDhDQUE2QyxFQUFFLGFBQWEsRUFBQztBQUM3RCxxQkFBcUI7QUFDckI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHFCQUFxQjtBQUNyQiIsInNvdXJjZXMiOlsiL1VzZXJzL2JhZy15b3NlYi9EZXNrdG9wL+GEkeGFqeGEh+GFteGEi+GFoS9oYWNrYXRob25fdGVhbS9teS1hcHAvbm9kZV9tb2R1bGVzL2dvb2dsZS1nYXgvbm9kZV9tb2R1bGVzL0BncnBjL2dycGMtanMvYnVpbGQvc3JjL3N0YXR1cy1idWlsZGVyLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuLypcbiAqIENvcHlyaWdodCAyMDE5IGdSUEMgYXV0aG9ycy5cbiAqXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4gKlxuICogICAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuICpcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4gKlxuICovXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLlN0YXR1c0J1aWxkZXIgPSB2b2lkIDA7XG4vKipcbiAqIEEgYnVpbGRlciBmb3IgZ1JQQyBzdGF0dXMgb2JqZWN0cy5cbiAqL1xuY2xhc3MgU3RhdHVzQnVpbGRlciB7XG4gICAgY29uc3RydWN0b3IoKSB7XG4gICAgICAgIHRoaXMuY29kZSA9IG51bGw7XG4gICAgICAgIHRoaXMuZGV0YWlscyA9IG51bGw7XG4gICAgICAgIHRoaXMubWV0YWRhdGEgPSBudWxsO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBBZGRzIGEgc3RhdHVzIGNvZGUgdG8gdGhlIGJ1aWxkZXIuXG4gICAgICovXG4gICAgd2l0aENvZGUoY29kZSkge1xuICAgICAgICB0aGlzLmNvZGUgPSBjb2RlO1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9XG4gICAgLyoqXG4gICAgICogQWRkcyBkZXRhaWxzIHRvIHRoZSBidWlsZGVyLlxuICAgICAqL1xuICAgIHdpdGhEZXRhaWxzKGRldGFpbHMpIHtcbiAgICAgICAgdGhpcy5kZXRhaWxzID0gZGV0YWlscztcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIEFkZHMgbWV0YWRhdGEgdG8gdGhlIGJ1aWxkZXIuXG4gICAgICovXG4gICAgd2l0aE1ldGFkYXRhKG1ldGFkYXRhKSB7XG4gICAgICAgIHRoaXMubWV0YWRhdGEgPSBtZXRhZGF0YTtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIEJ1aWxkcyB0aGUgc3RhdHVzIG9iamVjdC5cbiAgICAgKi9cbiAgICBidWlsZCgpIHtcbiAgICAgICAgY29uc3Qgc3RhdHVzID0ge307XG4gICAgICAgIGlmICh0aGlzLmNvZGUgIT09IG51bGwpIHtcbiAgICAgICAgICAgIHN0YXR1cy5jb2RlID0gdGhpcy5jb2RlO1xuICAgICAgICB9XG4gICAgICAgIGlmICh0aGlzLmRldGFpbHMgIT09IG51bGwpIHtcbiAgICAgICAgICAgIHN0YXR1cy5kZXRhaWxzID0gdGhpcy5kZXRhaWxzO1xuICAgICAgICB9XG4gICAgICAgIGlmICh0aGlzLm1ldGFkYXRhICE9PSBudWxsKSB7XG4gICAgICAgICAgICBzdGF0dXMubWV0YWRhdGEgPSB0aGlzLm1ldGFkYXRhO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBzdGF0dXM7XG4gICAgfVxufVxuZXhwb3J0cy5TdGF0dXNCdWlsZGVyID0gU3RhdHVzQnVpbGRlcjtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXN0YXR1cy1idWlsZGVyLmpzLm1hcCJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/google-gax/node_modules/@grpc/grpc-js/build/src/status-builder.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/google-gax/node_modules/@grpc/grpc-js/build/src/stream-decoder.js":
/*!****************************************************************************************!*\
  !*** ./node_modules/google-gax/node_modules/@grpc/grpc-js/build/src/stream-decoder.js ***!
  \****************************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";
eval("\n/*\n * Copyright 2019 gRPC authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n */\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.StreamDecoder = void 0;\nvar ReadState;\n(function (ReadState) {\n    ReadState[ReadState[\"NO_DATA\"] = 0] = \"NO_DATA\";\n    ReadState[ReadState[\"READING_SIZE\"] = 1] = \"READING_SIZE\";\n    ReadState[ReadState[\"READING_MESSAGE\"] = 2] = \"READING_MESSAGE\";\n})(ReadState || (ReadState = {}));\nclass StreamDecoder {\n    constructor(maxReadMessageLength) {\n        this.maxReadMessageLength = maxReadMessageLength;\n        this.readState = ReadState.NO_DATA;\n        this.readCompressFlag = Buffer.alloc(1);\n        this.readPartialSize = Buffer.alloc(4);\n        this.readSizeRemaining = 4;\n        this.readMessageSize = 0;\n        this.readPartialMessage = [];\n        this.readMessageRemaining = 0;\n    }\n    write(data) {\n        let readHead = 0;\n        let toRead;\n        const result = [];\n        while (readHead < data.length) {\n            switch (this.readState) {\n                case ReadState.NO_DATA:\n                    this.readCompressFlag = data.slice(readHead, readHead + 1);\n                    readHead += 1;\n                    this.readState = ReadState.READING_SIZE;\n                    this.readPartialSize.fill(0);\n                    this.readSizeRemaining = 4;\n                    this.readMessageSize = 0;\n                    this.readMessageRemaining = 0;\n                    this.readPartialMessage = [];\n                    break;\n                case ReadState.READING_SIZE:\n                    toRead = Math.min(data.length - readHead, this.readSizeRemaining);\n                    data.copy(this.readPartialSize, 4 - this.readSizeRemaining, readHead, readHead + toRead);\n                    this.readSizeRemaining -= toRead;\n                    readHead += toRead;\n                    // readSizeRemaining >=0 here\n                    if (this.readSizeRemaining === 0) {\n                        this.readMessageSize = this.readPartialSize.readUInt32BE(0);\n                        if (this.maxReadMessageLength !== -1 && this.readMessageSize > this.maxReadMessageLength) {\n                            throw new Error(`Received message larger than max (${this.readMessageSize} vs ${this.maxReadMessageLength})`);\n                        }\n                        this.readMessageRemaining = this.readMessageSize;\n                        if (this.readMessageRemaining > 0) {\n                            this.readState = ReadState.READING_MESSAGE;\n                        }\n                        else {\n                            const message = Buffer.concat([this.readCompressFlag, this.readPartialSize], 5);\n                            this.readState = ReadState.NO_DATA;\n                            result.push(message);\n                        }\n                    }\n                    break;\n                case ReadState.READING_MESSAGE:\n                    toRead = Math.min(data.length - readHead, this.readMessageRemaining);\n                    this.readPartialMessage.push(data.slice(readHead, readHead + toRead));\n                    this.readMessageRemaining -= toRead;\n                    readHead += toRead;\n                    // readMessageRemaining >=0 here\n                    if (this.readMessageRemaining === 0) {\n                        // At this point, we have read a full message\n                        const framedMessageBuffers = [\n                            this.readCompressFlag,\n                            this.readPartialSize,\n                        ].concat(this.readPartialMessage);\n                        const framedMessage = Buffer.concat(framedMessageBuffers, this.readMessageSize + 5);\n                        this.readState = ReadState.NO_DATA;\n                        result.push(framedMessage);\n                    }\n                    break;\n                default:\n                    throw new Error('Unexpected read state');\n            }\n        }\n        return result;\n    }\n}\nexports.StreamDecoder = StreamDecoder;\n//# sourceMappingURL=stream-decoder.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvZ29vZ2xlLWdheC9ub2RlX21vZHVsZXMvQGdycGMvZ3JwYy1qcy9idWlsZC9zcmMvc3RyZWFtLWRlY29kZXIuanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDhDQUE2QyxFQUFFLGFBQWEsRUFBQztBQUM3RCxxQkFBcUI7QUFDckI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLENBQUMsOEJBQThCO0FBQy9CO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGlGQUFpRixzQkFBc0IsS0FBSywwQkFBMEI7QUFDdEk7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EscUJBQXFCO0FBQ3JCIiwic291cmNlcyI6WyIvVXNlcnMvYmFnLXlvc2ViL0Rlc2t0b3Av4YSR4YWp4YSH4YW14YSL4YWhL2hhY2thdGhvbl90ZWFtL215LWFwcC9ub2RlX21vZHVsZXMvZ29vZ2xlLWdheC9ub2RlX21vZHVsZXMvQGdycGMvZ3JwYy1qcy9idWlsZC9zcmMvc3RyZWFtLWRlY29kZXIuanMiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG4vKlxuICogQ29weXJpZ2h0IDIwMTkgZ1JQQyBhdXRob3JzLlxuICpcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbiAqXG4gKiAgICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4gKlxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbiAqXG4gKi9cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuU3RyZWFtRGVjb2RlciA9IHZvaWQgMDtcbnZhciBSZWFkU3RhdGU7XG4oZnVuY3Rpb24gKFJlYWRTdGF0ZSkge1xuICAgIFJlYWRTdGF0ZVtSZWFkU3RhdGVbXCJOT19EQVRBXCJdID0gMF0gPSBcIk5PX0RBVEFcIjtcbiAgICBSZWFkU3RhdGVbUmVhZFN0YXRlW1wiUkVBRElOR19TSVpFXCJdID0gMV0gPSBcIlJFQURJTkdfU0laRVwiO1xuICAgIFJlYWRTdGF0ZVtSZWFkU3RhdGVbXCJSRUFESU5HX01FU1NBR0VcIl0gPSAyXSA9IFwiUkVBRElOR19NRVNTQUdFXCI7XG59KShSZWFkU3RhdGUgfHwgKFJlYWRTdGF0ZSA9IHt9KSk7XG5jbGFzcyBTdHJlYW1EZWNvZGVyIHtcbiAgICBjb25zdHJ1Y3RvcihtYXhSZWFkTWVzc2FnZUxlbmd0aCkge1xuICAgICAgICB0aGlzLm1heFJlYWRNZXNzYWdlTGVuZ3RoID0gbWF4UmVhZE1lc3NhZ2VMZW5ndGg7XG4gICAgICAgIHRoaXMucmVhZFN0YXRlID0gUmVhZFN0YXRlLk5PX0RBVEE7XG4gICAgICAgIHRoaXMucmVhZENvbXByZXNzRmxhZyA9IEJ1ZmZlci5hbGxvYygxKTtcbiAgICAgICAgdGhpcy5yZWFkUGFydGlhbFNpemUgPSBCdWZmZXIuYWxsb2MoNCk7XG4gICAgICAgIHRoaXMucmVhZFNpemVSZW1haW5pbmcgPSA0O1xuICAgICAgICB0aGlzLnJlYWRNZXNzYWdlU2l6ZSA9IDA7XG4gICAgICAgIHRoaXMucmVhZFBhcnRpYWxNZXNzYWdlID0gW107XG4gICAgICAgIHRoaXMucmVhZE1lc3NhZ2VSZW1haW5pbmcgPSAwO1xuICAgIH1cbiAgICB3cml0ZShkYXRhKSB7XG4gICAgICAgIGxldCByZWFkSGVhZCA9IDA7XG4gICAgICAgIGxldCB0b1JlYWQ7XG4gICAgICAgIGNvbnN0IHJlc3VsdCA9IFtdO1xuICAgICAgICB3aGlsZSAocmVhZEhlYWQgPCBkYXRhLmxlbmd0aCkge1xuICAgICAgICAgICAgc3dpdGNoICh0aGlzLnJlYWRTdGF0ZSkge1xuICAgICAgICAgICAgICAgIGNhc2UgUmVhZFN0YXRlLk5PX0RBVEE6XG4gICAgICAgICAgICAgICAgICAgIHRoaXMucmVhZENvbXByZXNzRmxhZyA9IGRhdGEuc2xpY2UocmVhZEhlYWQsIHJlYWRIZWFkICsgMSk7XG4gICAgICAgICAgICAgICAgICAgIHJlYWRIZWFkICs9IDE7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMucmVhZFN0YXRlID0gUmVhZFN0YXRlLlJFQURJTkdfU0laRTtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5yZWFkUGFydGlhbFNpemUuZmlsbCgwKTtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5yZWFkU2l6ZVJlbWFpbmluZyA9IDQ7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMucmVhZE1lc3NhZ2VTaXplID0gMDtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5yZWFkTWVzc2FnZVJlbWFpbmluZyA9IDA7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMucmVhZFBhcnRpYWxNZXNzYWdlID0gW107XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIGNhc2UgUmVhZFN0YXRlLlJFQURJTkdfU0laRTpcbiAgICAgICAgICAgICAgICAgICAgdG9SZWFkID0gTWF0aC5taW4oZGF0YS5sZW5ndGggLSByZWFkSGVhZCwgdGhpcy5yZWFkU2l6ZVJlbWFpbmluZyk7XG4gICAgICAgICAgICAgICAgICAgIGRhdGEuY29weSh0aGlzLnJlYWRQYXJ0aWFsU2l6ZSwgNCAtIHRoaXMucmVhZFNpemVSZW1haW5pbmcsIHJlYWRIZWFkLCByZWFkSGVhZCArIHRvUmVhZCk7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMucmVhZFNpemVSZW1haW5pbmcgLT0gdG9SZWFkO1xuICAgICAgICAgICAgICAgICAgICByZWFkSGVhZCArPSB0b1JlYWQ7XG4gICAgICAgICAgICAgICAgICAgIC8vIHJlYWRTaXplUmVtYWluaW5nID49MCBoZXJlXG4gICAgICAgICAgICAgICAgICAgIGlmICh0aGlzLnJlYWRTaXplUmVtYWluaW5nID09PSAwKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnJlYWRNZXNzYWdlU2l6ZSA9IHRoaXMucmVhZFBhcnRpYWxTaXplLnJlYWRVSW50MzJCRSgwKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICh0aGlzLm1heFJlYWRNZXNzYWdlTGVuZ3RoICE9PSAtMSAmJiB0aGlzLnJlYWRNZXNzYWdlU2l6ZSA+IHRoaXMubWF4UmVhZE1lc3NhZ2VMZW5ndGgpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYFJlY2VpdmVkIG1lc3NhZ2UgbGFyZ2VyIHRoYW4gbWF4ICgke3RoaXMucmVhZE1lc3NhZ2VTaXplfSB2cyAke3RoaXMubWF4UmVhZE1lc3NhZ2VMZW5ndGh9KWApO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5yZWFkTWVzc2FnZVJlbWFpbmluZyA9IHRoaXMucmVhZE1lc3NhZ2VTaXplO1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHRoaXMucmVhZE1lc3NhZ2VSZW1haW5pbmcgPiAwKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5yZWFkU3RhdGUgPSBSZWFkU3RhdGUuUkVBRElOR19NRVNTQUdFO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgbWVzc2FnZSA9IEJ1ZmZlci5jb25jYXQoW3RoaXMucmVhZENvbXByZXNzRmxhZywgdGhpcy5yZWFkUGFydGlhbFNpemVdLCA1KTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnJlYWRTdGF0ZSA9IFJlYWRTdGF0ZS5OT19EQVRBO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlc3VsdC5wdXNoKG1lc3NhZ2UpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIGNhc2UgUmVhZFN0YXRlLlJFQURJTkdfTUVTU0FHRTpcbiAgICAgICAgICAgICAgICAgICAgdG9SZWFkID0gTWF0aC5taW4oZGF0YS5sZW5ndGggLSByZWFkSGVhZCwgdGhpcy5yZWFkTWVzc2FnZVJlbWFpbmluZyk7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMucmVhZFBhcnRpYWxNZXNzYWdlLnB1c2goZGF0YS5zbGljZShyZWFkSGVhZCwgcmVhZEhlYWQgKyB0b1JlYWQpKTtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5yZWFkTWVzc2FnZVJlbWFpbmluZyAtPSB0b1JlYWQ7XG4gICAgICAgICAgICAgICAgICAgIHJlYWRIZWFkICs9IHRvUmVhZDtcbiAgICAgICAgICAgICAgICAgICAgLy8gcmVhZE1lc3NhZ2VSZW1haW5pbmcgPj0wIGhlcmVcbiAgICAgICAgICAgICAgICAgICAgaWYgKHRoaXMucmVhZE1lc3NhZ2VSZW1haW5pbmcgPT09IDApIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIEF0IHRoaXMgcG9pbnQsIHdlIGhhdmUgcmVhZCBhIGZ1bGwgbWVzc2FnZVxuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgZnJhbWVkTWVzc2FnZUJ1ZmZlcnMgPSBbXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5yZWFkQ29tcHJlc3NGbGFnLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMucmVhZFBhcnRpYWxTaXplLFxuICAgICAgICAgICAgICAgICAgICAgICAgXS5jb25jYXQodGhpcy5yZWFkUGFydGlhbE1lc3NhZ2UpO1xuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgZnJhbWVkTWVzc2FnZSA9IEJ1ZmZlci5jb25jYXQoZnJhbWVkTWVzc2FnZUJ1ZmZlcnMsIHRoaXMucmVhZE1lc3NhZ2VTaXplICsgNSk7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnJlYWRTdGF0ZSA9IFJlYWRTdGF0ZS5OT19EQVRBO1xuICAgICAgICAgICAgICAgICAgICAgICAgcmVzdWx0LnB1c2goZnJhbWVkTWVzc2FnZSk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdVbmV4cGVjdGVkIHJlYWQgc3RhdGUnKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH1cbn1cbmV4cG9ydHMuU3RyZWFtRGVjb2RlciA9IFN0cmVhbURlY29kZXI7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1zdHJlYW0tZGVjb2Rlci5qcy5tYXAiXSwibmFtZXMiOltdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/google-gax/node_modules/@grpc/grpc-js/build/src/stream-decoder.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/google-gax/node_modules/@grpc/grpc-js/build/src/subchannel-address.js":
/*!********************************************************************************************!*\
  !*** ./node_modules/google-gax/node_modules/@grpc/grpc-js/build/src/subchannel-address.js ***!
  \********************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\n/*\n * Copyright 2021 gRPC authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n */\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.EndpointMap = void 0;\nexports.isTcpSubchannelAddress = isTcpSubchannelAddress;\nexports.subchannelAddressEqual = subchannelAddressEqual;\nexports.subchannelAddressToString = subchannelAddressToString;\nexports.stringToSubchannelAddress = stringToSubchannelAddress;\nexports.endpointEqual = endpointEqual;\nexports.endpointToString = endpointToString;\nexports.endpointHasAddress = endpointHasAddress;\nconst net_1 = __webpack_require__(/*! net */ \"net\");\nfunction isTcpSubchannelAddress(address) {\n    return 'port' in address;\n}\nfunction subchannelAddressEqual(address1, address2) {\n    if (!address1 && !address2) {\n        return true;\n    }\n    if (!address1 || !address2) {\n        return false;\n    }\n    if (isTcpSubchannelAddress(address1)) {\n        return (isTcpSubchannelAddress(address2) &&\n            address1.host === address2.host &&\n            address1.port === address2.port);\n    }\n    else {\n        return !isTcpSubchannelAddress(address2) && address1.path === address2.path;\n    }\n}\nfunction subchannelAddressToString(address) {\n    if (isTcpSubchannelAddress(address)) {\n        if ((0, net_1.isIPv6)(address.host)) {\n            return '[' + address.host + ']:' + address.port;\n        }\n        else {\n            return address.host + ':' + address.port;\n        }\n    }\n    else {\n        return address.path;\n    }\n}\nconst DEFAULT_PORT = 443;\nfunction stringToSubchannelAddress(addressString, port) {\n    if ((0, net_1.isIP)(addressString)) {\n        return {\n            host: addressString,\n            port: port !== null && port !== void 0 ? port : DEFAULT_PORT,\n        };\n    }\n    else {\n        return {\n            path: addressString,\n        };\n    }\n}\nfunction endpointEqual(endpoint1, endpoint2) {\n    if (endpoint1.addresses.length !== endpoint2.addresses.length) {\n        return false;\n    }\n    for (let i = 0; i < endpoint1.addresses.length; i++) {\n        if (!subchannelAddressEqual(endpoint1.addresses[i], endpoint2.addresses[i])) {\n            return false;\n        }\n    }\n    return true;\n}\nfunction endpointToString(endpoint) {\n    return ('[' + endpoint.addresses.map(subchannelAddressToString).join(', ') + ']');\n}\nfunction endpointHasAddress(endpoint, expectedAddress) {\n    for (const address of endpoint.addresses) {\n        if (subchannelAddressEqual(address, expectedAddress)) {\n            return true;\n        }\n    }\n    return false;\n}\nfunction endpointEqualUnordered(endpoint1, endpoint2) {\n    if (endpoint1.addresses.length !== endpoint2.addresses.length) {\n        return false;\n    }\n    for (const address1 of endpoint1.addresses) {\n        let matchFound = false;\n        for (const address2 of endpoint2.addresses) {\n            if (subchannelAddressEqual(address1, address2)) {\n                matchFound = true;\n                break;\n            }\n        }\n        if (!matchFound) {\n            return false;\n        }\n    }\n    return true;\n}\nclass EndpointMap {\n    constructor() {\n        this.map = new Set();\n    }\n    get size() {\n        return this.map.size;\n    }\n    getForSubchannelAddress(address) {\n        for (const entry of this.map) {\n            if (endpointHasAddress(entry.key, address)) {\n                return entry.value;\n            }\n        }\n        return undefined;\n    }\n    /**\n     * Delete any entries in this map with keys that are not in endpoints\n     * @param endpoints\n     */\n    deleteMissing(endpoints) {\n        const removedValues = [];\n        for (const entry of this.map) {\n            let foundEntry = false;\n            for (const endpoint of endpoints) {\n                if (endpointEqualUnordered(endpoint, entry.key)) {\n                    foundEntry = true;\n                }\n            }\n            if (!foundEntry) {\n                removedValues.push(entry.value);\n                this.map.delete(entry);\n            }\n        }\n        return removedValues;\n    }\n    get(endpoint) {\n        for (const entry of this.map) {\n            if (endpointEqualUnordered(endpoint, entry.key)) {\n                return entry.value;\n            }\n        }\n        return undefined;\n    }\n    set(endpoint, mapEntry) {\n        for (const entry of this.map) {\n            if (endpointEqualUnordered(endpoint, entry.key)) {\n                entry.value = mapEntry;\n                return;\n            }\n        }\n        this.map.add({ key: endpoint, value: mapEntry });\n    }\n    delete(endpoint) {\n        for (const entry of this.map) {\n            if (endpointEqualUnordered(endpoint, entry.key)) {\n                this.map.delete(entry);\n                return;\n            }\n        }\n    }\n    has(endpoint) {\n        for (const entry of this.map) {\n            if (endpointEqualUnordered(endpoint, entry.key)) {\n                return true;\n            }\n        }\n        return false;\n    }\n    clear() {\n        this.map.clear();\n    }\n    *keys() {\n        for (const entry of this.map) {\n            yield entry.key;\n        }\n    }\n    *values() {\n        for (const entry of this.map) {\n            yield entry.value;\n        }\n    }\n    *entries() {\n        for (const entry of this.map) {\n            yield [entry.key, entry.value];\n        }\n    }\n}\nexports.EndpointMap = EndpointMap;\n//# sourceMappingURL=subchannel-address.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/google-gax/node_modules/@grpc/grpc-js/build/src/subchannel-address.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/google-gax/node_modules/@grpc/grpc-js/build/src/subchannel-call.js":
/*!*****************************************************************************************!*\
  !*** ./node_modules/google-gax/node_modules/@grpc/grpc-js/build/src/subchannel-call.js ***!
  \*****************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\n/*\n * Copyright 2019 gRPC authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n */\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.Http2SubchannelCall = void 0;\nconst http2 = __webpack_require__(/*! http2 */ \"http2\");\nconst os = __webpack_require__(/*! os */ \"os\");\nconst constants_1 = __webpack_require__(/*! ./constants */ \"(rsc)/./node_modules/google-gax/node_modules/@grpc/grpc-js/build/src/constants.js\");\nconst metadata_1 = __webpack_require__(/*! ./metadata */ \"(rsc)/./node_modules/google-gax/node_modules/@grpc/grpc-js/build/src/metadata.js\");\nconst stream_decoder_1 = __webpack_require__(/*! ./stream-decoder */ \"(rsc)/./node_modules/google-gax/node_modules/@grpc/grpc-js/build/src/stream-decoder.js\");\nconst logging = __webpack_require__(/*! ./logging */ \"(rsc)/./node_modules/google-gax/node_modules/@grpc/grpc-js/build/src/logging.js\");\nconst constants_2 = __webpack_require__(/*! ./constants */ \"(rsc)/./node_modules/google-gax/node_modules/@grpc/grpc-js/build/src/constants.js\");\nconst TRACER_NAME = 'subchannel_call';\n/**\n * Should do approximately the same thing as util.getSystemErrorName but the\n * TypeScript types don't have that function for some reason so I just made my\n * own.\n * @param errno\n */\nfunction getSystemErrorName(errno) {\n    for (const [name, num] of Object.entries(os.constants.errno)) {\n        if (num === errno) {\n            return name;\n        }\n    }\n    return 'Unknown system error ' + errno;\n}\nfunction mapHttpStatusCode(code) {\n    const details = `Received HTTP status code ${code}`;\n    let mappedStatusCode;\n    switch (code) {\n        // TODO(murgatroid99): handle 100 and 101\n        case 400:\n            mappedStatusCode = constants_1.Status.INTERNAL;\n            break;\n        case 401:\n            mappedStatusCode = constants_1.Status.UNAUTHENTICATED;\n            break;\n        case 403:\n            mappedStatusCode = constants_1.Status.PERMISSION_DENIED;\n            break;\n        case 404:\n            mappedStatusCode = constants_1.Status.UNIMPLEMENTED;\n            break;\n        case 429:\n        case 502:\n        case 503:\n        case 504:\n            mappedStatusCode = constants_1.Status.UNAVAILABLE;\n            break;\n        default:\n            mappedStatusCode = constants_1.Status.UNKNOWN;\n    }\n    return {\n        code: mappedStatusCode,\n        details: details,\n        metadata: new metadata_1.Metadata()\n    };\n}\nclass Http2SubchannelCall {\n    constructor(http2Stream, callEventTracker, listener, transport, callId) {\n        var _a;\n        this.http2Stream = http2Stream;\n        this.callEventTracker = callEventTracker;\n        this.listener = listener;\n        this.transport = transport;\n        this.callId = callId;\n        this.isReadFilterPending = false;\n        this.isPushPending = false;\n        this.canPush = false;\n        /**\n         * Indicates that an 'end' event has come from the http2 stream, so there\n         * will be no more data events.\n         */\n        this.readsClosed = false;\n        this.statusOutput = false;\n        this.unpushedReadMessages = [];\n        // This is populated (non-null) if and only if the call has ended\n        this.finalStatus = null;\n        this.internalError = null;\n        this.serverEndedCall = false;\n        this.connectionDropped = false;\n        const maxReceiveMessageLength = (_a = transport.getOptions()['grpc.max_receive_message_length']) !== null && _a !== void 0 ? _a : constants_1.DEFAULT_MAX_RECEIVE_MESSAGE_LENGTH;\n        this.decoder = new stream_decoder_1.StreamDecoder(maxReceiveMessageLength);\n        http2Stream.on('response', (headers, flags) => {\n            let headersString = '';\n            for (const header of Object.keys(headers)) {\n                headersString += '\\t\\t' + header + ': ' + headers[header] + '\\n';\n            }\n            this.trace('Received server headers:\\n' + headersString);\n            this.httpStatusCode = headers[':status'];\n            if (flags & http2.constants.NGHTTP2_FLAG_END_STREAM) {\n                this.handleTrailers(headers);\n            }\n            else {\n                let metadata;\n                try {\n                    metadata = metadata_1.Metadata.fromHttp2Headers(headers);\n                }\n                catch (error) {\n                    this.endCall({\n                        code: constants_1.Status.UNKNOWN,\n                        details: error.message,\n                        metadata: new metadata_1.Metadata(),\n                    });\n                    return;\n                }\n                this.listener.onReceiveMetadata(metadata);\n            }\n        });\n        http2Stream.on('trailers', (headers) => {\n            this.handleTrailers(headers);\n        });\n        http2Stream.on('data', (data) => {\n            /* If the status has already been output, allow the http2 stream to\n             * drain without processing the data. */\n            if (this.statusOutput) {\n                return;\n            }\n            this.trace('receive HTTP/2 data frame of length ' + data.length);\n            let messages;\n            try {\n                messages = this.decoder.write(data);\n            }\n            catch (e) {\n                /* Some servers send HTML error pages along with HTTP status codes.\n                 * When the client attempts to parse this as a length-delimited\n                 * message, the parsed message size is greater than the default limit,\n                 * resulting in a message decoding error. In that situation, the HTTP\n                 * error code information is more useful to the user than the\n                 * RESOURCE_EXHAUSTED error is, so we report that instead. Normally,\n                 * we delay processing the HTTP status until after the stream ends, to\n                 * prioritize reporting the gRPC status from trailers if it is present,\n                 * but when there is a message parsing error we end the stream early\n                 * before processing trailers. */\n                if (this.httpStatusCode !== undefined && this.httpStatusCode !== 200) {\n                    const mappedStatus = mapHttpStatusCode(this.httpStatusCode);\n                    this.cancelWithStatus(mappedStatus.code, mappedStatus.details);\n                }\n                else {\n                    this.cancelWithStatus(constants_1.Status.RESOURCE_EXHAUSTED, e.message);\n                }\n                return;\n            }\n            for (const message of messages) {\n                this.trace('parsed message of length ' + message.length);\n                this.callEventTracker.addMessageReceived();\n                this.tryPush(message);\n            }\n        });\n        http2Stream.on('end', () => {\n            this.readsClosed = true;\n            this.maybeOutputStatus();\n        });\n        http2Stream.on('close', () => {\n            this.serverEndedCall = true;\n            /* Use process.next tick to ensure that this code happens after any\n             * \"error\" event that may be emitted at about the same time, so that\n             * we can bubble up the error message from that event. */\n            process.nextTick(() => {\n                var _a;\n                this.trace('HTTP/2 stream closed with code ' + http2Stream.rstCode);\n                /* If we have a final status with an OK status code, that means that\n                 * we have received all of the messages and we have processed the\n                 * trailers and the call completed successfully, so it doesn't matter\n                 * how the stream ends after that */\n                if (((_a = this.finalStatus) === null || _a === void 0 ? void 0 : _a.code) === constants_1.Status.OK) {\n                    return;\n                }\n                let code;\n                let details = '';\n                switch (http2Stream.rstCode) {\n                    case http2.constants.NGHTTP2_NO_ERROR:\n                        /* If we get a NO_ERROR code and we already have a status, the\n                         * stream completed properly and we just haven't fully processed\n                         * it yet */\n                        if (this.finalStatus !== null) {\n                            return;\n                        }\n                        if (this.httpStatusCode && this.httpStatusCode !== 200) {\n                            const mappedStatus = mapHttpStatusCode(this.httpStatusCode);\n                            code = mappedStatus.code;\n                            details = mappedStatus.details;\n                        }\n                        else {\n                            code = constants_1.Status.INTERNAL;\n                            details = `Received RST_STREAM with code ${http2Stream.rstCode} (Call ended without gRPC status)`;\n                        }\n                        break;\n                    case http2.constants.NGHTTP2_REFUSED_STREAM:\n                        code = constants_1.Status.UNAVAILABLE;\n                        details = 'Stream refused by server';\n                        break;\n                    case http2.constants.NGHTTP2_CANCEL:\n                        /* Bug reports indicate that Node synthesizes a NGHTTP2_CANCEL\n                         * code from connection drops. We want to prioritize reporting\n                         * an unavailable status when that happens. */\n                        if (this.connectionDropped) {\n                            code = constants_1.Status.UNAVAILABLE;\n                            details = 'Connection dropped';\n                        }\n                        else {\n                            code = constants_1.Status.CANCELLED;\n                            details = 'Call cancelled';\n                        }\n                        break;\n                    case http2.constants.NGHTTP2_ENHANCE_YOUR_CALM:\n                        code = constants_1.Status.RESOURCE_EXHAUSTED;\n                        details = 'Bandwidth exhausted or memory limit exceeded';\n                        break;\n                    case http2.constants.NGHTTP2_INADEQUATE_SECURITY:\n                        code = constants_1.Status.PERMISSION_DENIED;\n                        details = 'Protocol not secure enough';\n                        break;\n                    case http2.constants.NGHTTP2_INTERNAL_ERROR:\n                        code = constants_1.Status.INTERNAL;\n                        if (this.internalError === null) {\n                            /* This error code was previously handled in the default case, and\n                             * there are several instances of it online, so I wanted to\n                             * preserve the original error message so that people find existing\n                             * information in searches, but also include the more recognizable\n                             * \"Internal server error\" message. */\n                            details = `Received RST_STREAM with code ${http2Stream.rstCode} (Internal server error)`;\n                        }\n                        else {\n                            if (this.internalError.code === 'ECONNRESET' ||\n                                this.internalError.code === 'ETIMEDOUT') {\n                                code = constants_1.Status.UNAVAILABLE;\n                                details = this.internalError.message;\n                            }\n                            else {\n                                /* The \"Received RST_STREAM with code ...\" error is preserved\n                                 * here for continuity with errors reported online, but the\n                                 * error message at the end will probably be more relevant in\n                                 * most cases. */\n                                details = `Received RST_STREAM with code ${http2Stream.rstCode} triggered by internal client error: ${this.internalError.message}`;\n                            }\n                        }\n                        break;\n                    default:\n                        code = constants_1.Status.INTERNAL;\n                        details = `Received RST_STREAM with code ${http2Stream.rstCode}`;\n                }\n                // This is a no-op if trailers were received at all.\n                // This is OK, because status codes emitted here correspond to more\n                // catastrophic issues that prevent us from receiving trailers in the\n                // first place.\n                this.endCall({\n                    code,\n                    details,\n                    metadata: new metadata_1.Metadata(),\n                    rstCode: http2Stream.rstCode,\n                });\n            });\n        });\n        http2Stream.on('error', (err) => {\n            /* We need an error handler here to stop \"Uncaught Error\" exceptions\n             * from bubbling up. However, errors here should all correspond to\n             * \"close\" events, where we will handle the error more granularly */\n            /* Specifically looking for stream errors that were *not* constructed\n             * from a RST_STREAM response here:\n             * https://github.com/nodejs/node/blob/8b8620d580314050175983402dfddf2674e8e22a/lib/internal/http2/core.js#L2267\n             */\n            if (err.code !== 'ERR_HTTP2_STREAM_ERROR') {\n                this.trace('Node error event: message=' +\n                    err.message +\n                    ' code=' +\n                    err.code +\n                    ' errno=' +\n                    getSystemErrorName(err.errno) +\n                    ' syscall=' +\n                    err.syscall);\n                this.internalError = err;\n            }\n            this.callEventTracker.onStreamEnd(false);\n        });\n    }\n    getDeadlineInfo() {\n        return [`remote_addr=${this.getPeer()}`];\n    }\n    onDisconnect() {\n        this.connectionDropped = true;\n        /* Give the call an event loop cycle to finish naturally before reporting\n         * the disconnection as an error. */\n        setImmediate(() => {\n            this.endCall({\n                code: constants_1.Status.UNAVAILABLE,\n                details: 'Connection dropped',\n                metadata: new metadata_1.Metadata(),\n            });\n        });\n    }\n    outputStatus() {\n        /* Precondition: this.finalStatus !== null */\n        if (!this.statusOutput) {\n            this.statusOutput = true;\n            this.trace('ended with status: code=' +\n                this.finalStatus.code +\n                ' details=\"' +\n                this.finalStatus.details +\n                '\"');\n            this.callEventTracker.onCallEnd(this.finalStatus);\n            /* We delay the actual action of bubbling up the status to insulate the\n             * cleanup code in this class from any errors that may be thrown in the\n             * upper layers as a result of bubbling up the status. In particular,\n             * if the status is not OK, the \"error\" event may be emitted\n             * synchronously at the top level, which will result in a thrown error if\n             * the user does not handle that event. */\n            process.nextTick(() => {\n                this.listener.onReceiveStatus(this.finalStatus);\n            });\n            /* Leave the http2 stream in flowing state to drain incoming messages, to\n             * ensure that the stream closure completes. The call stream already does\n             * not push more messages after the status is output, so the messages go\n             * nowhere either way. */\n            this.http2Stream.resume();\n        }\n    }\n    trace(text) {\n        logging.trace(constants_2.LogVerbosity.DEBUG, TRACER_NAME, '[' + this.callId + '] ' + text);\n    }\n    /**\n     * On first call, emits a 'status' event with the given StatusObject.\n     * Subsequent calls are no-ops.\n     * @param status The status of the call.\n     */\n    endCall(status) {\n        /* If the status is OK and a new status comes in (e.g. from a\n         * deserialization failure), that new status takes priority */\n        if (this.finalStatus === null || this.finalStatus.code === constants_1.Status.OK) {\n            this.finalStatus = status;\n            this.maybeOutputStatus();\n        }\n        this.destroyHttp2Stream();\n    }\n    maybeOutputStatus() {\n        if (this.finalStatus !== null) {\n            /* The combination check of readsClosed and that the two message buffer\n             * arrays are empty checks that there all incoming data has been fully\n             * processed */\n            if (this.finalStatus.code !== constants_1.Status.OK ||\n                (this.readsClosed &&\n                    this.unpushedReadMessages.length === 0 &&\n                    !this.isReadFilterPending &&\n                    !this.isPushPending)) {\n                this.outputStatus();\n            }\n        }\n    }\n    push(message) {\n        this.trace('pushing to reader message of length ' +\n            (message instanceof Buffer ? message.length : null));\n        this.canPush = false;\n        this.isPushPending = true;\n        process.nextTick(() => {\n            this.isPushPending = false;\n            /* If we have already output the status any later messages should be\n             * ignored, and can cause out-of-order operation errors higher up in the\n             * stack. Checking as late as possible here to avoid any race conditions.\n             */\n            if (this.statusOutput) {\n                return;\n            }\n            this.listener.onReceiveMessage(message);\n            this.maybeOutputStatus();\n        });\n    }\n    tryPush(messageBytes) {\n        if (this.canPush) {\n            this.http2Stream.pause();\n            this.push(messageBytes);\n        }\n        else {\n            this.trace('unpushedReadMessages.push message of length ' + messageBytes.length);\n            this.unpushedReadMessages.push(messageBytes);\n        }\n    }\n    handleTrailers(headers) {\n        this.serverEndedCall = true;\n        this.callEventTracker.onStreamEnd(true);\n        let headersString = '';\n        for (const header of Object.keys(headers)) {\n            headersString += '\\t\\t' + header + ': ' + headers[header] + '\\n';\n        }\n        this.trace('Received server trailers:\\n' + headersString);\n        let metadata;\n        try {\n            metadata = metadata_1.Metadata.fromHttp2Headers(headers);\n        }\n        catch (e) {\n            metadata = new metadata_1.Metadata();\n        }\n        const metadataMap = metadata.getMap();\n        let status;\n        if (typeof metadataMap['grpc-status'] === 'string') {\n            const receivedStatus = Number(metadataMap['grpc-status']);\n            this.trace('received status code ' + receivedStatus + ' from server');\n            metadata.remove('grpc-status');\n            let details = '';\n            if (typeof metadataMap['grpc-message'] === 'string') {\n                try {\n                    details = decodeURI(metadataMap['grpc-message']);\n                }\n                catch (e) {\n                    details = metadataMap['grpc-message'];\n                }\n                metadata.remove('grpc-message');\n                this.trace('received status details string \"' + details + '\" from server');\n            }\n            status = {\n                code: receivedStatus,\n                details: details,\n                metadata: metadata\n            };\n        }\n        else if (this.httpStatusCode) {\n            status = mapHttpStatusCode(this.httpStatusCode);\n            status.metadata = metadata;\n        }\n        else {\n            status = {\n                code: constants_1.Status.UNKNOWN,\n                details: 'No status information received',\n                metadata: metadata\n            };\n        }\n        // This is a no-op if the call was already ended when handling headers.\n        this.endCall(status);\n    }\n    destroyHttp2Stream() {\n        var _a;\n        // The http2 stream could already have been destroyed if cancelWithStatus\n        // is called in response to an internal http2 error.\n        if (this.http2Stream.destroyed) {\n            return;\n        }\n        /* If the server ended the call, sending an RST_STREAM is redundant, so we\n         * just half close on the client side instead to finish closing the stream.\n         */\n        if (this.serverEndedCall) {\n            this.http2Stream.end();\n        }\n        else {\n            /* If the call has ended with an OK status, communicate that when closing\n             * the stream, partly to avoid a situation in which we detect an error\n             * RST_STREAM as a result after we have the status */\n            let code;\n            if (((_a = this.finalStatus) === null || _a === void 0 ? void 0 : _a.code) === constants_1.Status.OK) {\n                code = http2.constants.NGHTTP2_NO_ERROR;\n            }\n            else {\n                code = http2.constants.NGHTTP2_CANCEL;\n            }\n            this.trace('close http2 stream with code ' + code);\n            this.http2Stream.close(code);\n        }\n    }\n    cancelWithStatus(status, details) {\n        this.trace('cancelWithStatus code: ' + status + ' details: \"' + details + '\"');\n        this.endCall({ code: status, details, metadata: new metadata_1.Metadata() });\n    }\n    getStatus() {\n        return this.finalStatus;\n    }\n    getPeer() {\n        return this.transport.getPeerName();\n    }\n    getCallNumber() {\n        return this.callId;\n    }\n    startRead() {\n        /* If the stream has ended with an error, we should not emit any more\n         * messages and we should communicate that the stream has ended */\n        if (this.finalStatus !== null && this.finalStatus.code !== constants_1.Status.OK) {\n            this.readsClosed = true;\n            this.maybeOutputStatus();\n            return;\n        }\n        this.canPush = true;\n        if (this.unpushedReadMessages.length > 0) {\n            const nextMessage = this.unpushedReadMessages.shift();\n            this.push(nextMessage);\n            return;\n        }\n        /* Only resume reading from the http2Stream if we don't have any pending\n         * messages to emit */\n        this.http2Stream.resume();\n    }\n    sendMessageWithContext(context, message) {\n        this.trace('write() called with message of length ' + message.length);\n        const cb = (error) => {\n            /* nextTick here ensures that no stream action can be taken in the call\n             * stack of the write callback, in order to hopefully work around\n             * https://github.com/nodejs/node/issues/49147 */\n            process.nextTick(() => {\n                var _a;\n                let code = constants_1.Status.UNAVAILABLE;\n                if ((error === null || error === void 0 ? void 0 : error.code) ===\n                    'ERR_STREAM_WRITE_AFTER_END') {\n                    code = constants_1.Status.INTERNAL;\n                }\n                if (error) {\n                    this.cancelWithStatus(code, `Write error: ${error.message}`);\n                }\n                (_a = context.callback) === null || _a === void 0 ? void 0 : _a.call(context);\n            });\n        };\n        this.trace('sending data chunk of length ' + message.length);\n        this.callEventTracker.addMessageSent();\n        try {\n            this.http2Stream.write(message, cb);\n        }\n        catch (error) {\n            this.endCall({\n                code: constants_1.Status.UNAVAILABLE,\n                details: `Write failed with error ${error.message}`,\n                metadata: new metadata_1.Metadata(),\n            });\n        }\n    }\n    halfClose() {\n        this.trace('end() called');\n        this.trace('calling end() on HTTP/2 stream');\n        this.http2Stream.end();\n    }\n}\nexports.Http2SubchannelCall = Http2SubchannelCall;\n//# sourceMappingURL=subchannel-call.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/google-gax/node_modules/@grpc/grpc-js/build/src/subchannel-call.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/google-gax/node_modules/@grpc/grpc-js/build/src/subchannel-interface.js":
/*!**********************************************************************************************!*\
  !*** ./node_modules/google-gax/node_modules/@grpc/grpc-js/build/src/subchannel-interface.js ***!
  \**********************************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";
eval("\n/*\n * Copyright 2022 gRPC authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n */\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.BaseSubchannelWrapper = void 0;\nclass BaseSubchannelWrapper {\n    constructor(child) {\n        this.child = child;\n        this.healthy = true;\n        this.healthListeners = new Set();\n        child.addHealthStateWatcher(childHealthy => {\n            /* A change to the child health state only affects this wrapper's overall\n             * health state if this wrapper is reporting healthy. */\n            if (this.healthy) {\n                this.updateHealthListeners();\n            }\n        });\n    }\n    updateHealthListeners() {\n        for (const listener of this.healthListeners) {\n            listener(this.isHealthy());\n        }\n    }\n    getConnectivityState() {\n        return this.child.getConnectivityState();\n    }\n    addConnectivityStateListener(listener) {\n        this.child.addConnectivityStateListener(listener);\n    }\n    removeConnectivityStateListener(listener) {\n        this.child.removeConnectivityStateListener(listener);\n    }\n    startConnecting() {\n        this.child.startConnecting();\n    }\n    getAddress() {\n        return this.child.getAddress();\n    }\n    throttleKeepalive(newKeepaliveTime) {\n        this.child.throttleKeepalive(newKeepaliveTime);\n    }\n    ref() {\n        this.child.ref();\n    }\n    unref() {\n        this.child.unref();\n    }\n    getChannelzRef() {\n        return this.child.getChannelzRef();\n    }\n    isHealthy() {\n        return this.healthy && this.child.isHealthy();\n    }\n    addHealthStateWatcher(listener) {\n        this.healthListeners.add(listener);\n    }\n    removeHealthStateWatcher(listener) {\n        this.healthListeners.delete(listener);\n    }\n    setHealthy(healthy) {\n        if (healthy !== this.healthy) {\n            this.healthy = healthy;\n            /* A change to this wrapper's health state only affects the overall\n             * reported health state if the child is healthy. */\n            if (this.child.isHealthy()) {\n                this.updateHealthListeners();\n            }\n        }\n    }\n    getRealSubchannel() {\n        return this.child.getRealSubchannel();\n    }\n    realSubchannelEquals(other) {\n        return this.getRealSubchannel() === other.getRealSubchannel();\n    }\n    getCallCredentials() {\n        return this.child.getCallCredentials();\n    }\n}\nexports.BaseSubchannelWrapper = BaseSubchannelWrapper;\n//# sourceMappingURL=subchannel-interface.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvZ29vZ2xlLWdheC9ub2RlX21vZHVsZXMvQGdycGMvZ3JwYy1qcy9idWlsZC9zcmMvc3ViY2hhbm5lbC1pbnRlcmZhY2UuanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDhDQUE2QyxFQUFFLGFBQWEsRUFBQztBQUM3RCw2QkFBNkI7QUFDN0I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsNkJBQTZCO0FBQzdCIiwic291cmNlcyI6WyIvVXNlcnMvYmFnLXlvc2ViL0Rlc2t0b3Av4YSR4YWp4YSH4YW14YSL4YWhL2hhY2thdGhvbl90ZWFtL215LWFwcC9ub2RlX21vZHVsZXMvZ29vZ2xlLWdheC9ub2RlX21vZHVsZXMvQGdycGMvZ3JwYy1qcy9idWlsZC9zcmMvc3ViY2hhbm5lbC1pbnRlcmZhY2UuanMiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG4vKlxuICogQ29weXJpZ2h0IDIwMjIgZ1JQQyBhdXRob3JzLlxuICpcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbiAqXG4gKiAgICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4gKlxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbiAqXG4gKi9cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuQmFzZVN1YmNoYW5uZWxXcmFwcGVyID0gdm9pZCAwO1xuY2xhc3MgQmFzZVN1YmNoYW5uZWxXcmFwcGVyIHtcbiAgICBjb25zdHJ1Y3RvcihjaGlsZCkge1xuICAgICAgICB0aGlzLmNoaWxkID0gY2hpbGQ7XG4gICAgICAgIHRoaXMuaGVhbHRoeSA9IHRydWU7XG4gICAgICAgIHRoaXMuaGVhbHRoTGlzdGVuZXJzID0gbmV3IFNldCgpO1xuICAgICAgICBjaGlsZC5hZGRIZWFsdGhTdGF0ZVdhdGNoZXIoY2hpbGRIZWFsdGh5ID0+IHtcbiAgICAgICAgICAgIC8qIEEgY2hhbmdlIHRvIHRoZSBjaGlsZCBoZWFsdGggc3RhdGUgb25seSBhZmZlY3RzIHRoaXMgd3JhcHBlcidzIG92ZXJhbGxcbiAgICAgICAgICAgICAqIGhlYWx0aCBzdGF0ZSBpZiB0aGlzIHdyYXBwZXIgaXMgcmVwb3J0aW5nIGhlYWx0aHkuICovXG4gICAgICAgICAgICBpZiAodGhpcy5oZWFsdGh5KSB7XG4gICAgICAgICAgICAgICAgdGhpcy51cGRhdGVIZWFsdGhMaXN0ZW5lcnMoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgfVxuICAgIHVwZGF0ZUhlYWx0aExpc3RlbmVycygpIHtcbiAgICAgICAgZm9yIChjb25zdCBsaXN0ZW5lciBvZiB0aGlzLmhlYWx0aExpc3RlbmVycykge1xuICAgICAgICAgICAgbGlzdGVuZXIodGhpcy5pc0hlYWx0aHkoKSk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgZ2V0Q29ubmVjdGl2aXR5U3RhdGUoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmNoaWxkLmdldENvbm5lY3Rpdml0eVN0YXRlKCk7XG4gICAgfVxuICAgIGFkZENvbm5lY3Rpdml0eVN0YXRlTGlzdGVuZXIobGlzdGVuZXIpIHtcbiAgICAgICAgdGhpcy5jaGlsZC5hZGRDb25uZWN0aXZpdHlTdGF0ZUxpc3RlbmVyKGxpc3RlbmVyKTtcbiAgICB9XG4gICAgcmVtb3ZlQ29ubmVjdGl2aXR5U3RhdGVMaXN0ZW5lcihsaXN0ZW5lcikge1xuICAgICAgICB0aGlzLmNoaWxkLnJlbW92ZUNvbm5lY3Rpdml0eVN0YXRlTGlzdGVuZXIobGlzdGVuZXIpO1xuICAgIH1cbiAgICBzdGFydENvbm5lY3RpbmcoKSB7XG4gICAgICAgIHRoaXMuY2hpbGQuc3RhcnRDb25uZWN0aW5nKCk7XG4gICAgfVxuICAgIGdldEFkZHJlc3MoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmNoaWxkLmdldEFkZHJlc3MoKTtcbiAgICB9XG4gICAgdGhyb3R0bGVLZWVwYWxpdmUobmV3S2VlcGFsaXZlVGltZSkge1xuICAgICAgICB0aGlzLmNoaWxkLnRocm90dGxlS2VlcGFsaXZlKG5ld0tlZXBhbGl2ZVRpbWUpO1xuICAgIH1cbiAgICByZWYoKSB7XG4gICAgICAgIHRoaXMuY2hpbGQucmVmKCk7XG4gICAgfVxuICAgIHVucmVmKCkge1xuICAgICAgICB0aGlzLmNoaWxkLnVucmVmKCk7XG4gICAgfVxuICAgIGdldENoYW5uZWx6UmVmKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5jaGlsZC5nZXRDaGFubmVselJlZigpO1xuICAgIH1cbiAgICBpc0hlYWx0aHkoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmhlYWx0aHkgJiYgdGhpcy5jaGlsZC5pc0hlYWx0aHkoKTtcbiAgICB9XG4gICAgYWRkSGVhbHRoU3RhdGVXYXRjaGVyKGxpc3RlbmVyKSB7XG4gICAgICAgIHRoaXMuaGVhbHRoTGlzdGVuZXJzLmFkZChsaXN0ZW5lcik7XG4gICAgfVxuICAgIHJlbW92ZUhlYWx0aFN0YXRlV2F0Y2hlcihsaXN0ZW5lcikge1xuICAgICAgICB0aGlzLmhlYWx0aExpc3RlbmVycy5kZWxldGUobGlzdGVuZXIpO1xuICAgIH1cbiAgICBzZXRIZWFsdGh5KGhlYWx0aHkpIHtcbiAgICAgICAgaWYgKGhlYWx0aHkgIT09IHRoaXMuaGVhbHRoeSkge1xuICAgICAgICAgICAgdGhpcy5oZWFsdGh5ID0gaGVhbHRoeTtcbiAgICAgICAgICAgIC8qIEEgY2hhbmdlIHRvIHRoaXMgd3JhcHBlcidzIGhlYWx0aCBzdGF0ZSBvbmx5IGFmZmVjdHMgdGhlIG92ZXJhbGxcbiAgICAgICAgICAgICAqIHJlcG9ydGVkIGhlYWx0aCBzdGF0ZSBpZiB0aGUgY2hpbGQgaXMgaGVhbHRoeS4gKi9cbiAgICAgICAgICAgIGlmICh0aGlzLmNoaWxkLmlzSGVhbHRoeSgpKSB7XG4gICAgICAgICAgICAgICAgdGhpcy51cGRhdGVIZWFsdGhMaXN0ZW5lcnMoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cbiAgICBnZXRSZWFsU3ViY2hhbm5lbCgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuY2hpbGQuZ2V0UmVhbFN1YmNoYW5uZWwoKTtcbiAgICB9XG4gICAgcmVhbFN1YmNoYW5uZWxFcXVhbHMob3RoZXIpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuZ2V0UmVhbFN1YmNoYW5uZWwoKSA9PT0gb3RoZXIuZ2V0UmVhbFN1YmNoYW5uZWwoKTtcbiAgICB9XG4gICAgZ2V0Q2FsbENyZWRlbnRpYWxzKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5jaGlsZC5nZXRDYWxsQ3JlZGVudGlhbHMoKTtcbiAgICB9XG59XG5leHBvcnRzLkJhc2VTdWJjaGFubmVsV3JhcHBlciA9IEJhc2VTdWJjaGFubmVsV3JhcHBlcjtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXN1YmNoYW5uZWwtaW50ZXJmYWNlLmpzLm1hcCJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/google-gax/node_modules/@grpc/grpc-js/build/src/subchannel-interface.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/google-gax/node_modules/@grpc/grpc-js/build/src/subchannel-pool.js":
/*!*****************************************************************************************!*\
  !*** ./node_modules/google-gax/node_modules/@grpc/grpc-js/build/src/subchannel-pool.js ***!
  \*****************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\n/*\n * Copyright 2019 gRPC authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n */\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.SubchannelPool = void 0;\nexports.getSubchannelPool = getSubchannelPool;\nconst channel_options_1 = __webpack_require__(/*! ./channel-options */ \"(rsc)/./node_modules/google-gax/node_modules/@grpc/grpc-js/build/src/channel-options.js\");\nconst subchannel_1 = __webpack_require__(/*! ./subchannel */ \"(rsc)/./node_modules/google-gax/node_modules/@grpc/grpc-js/build/src/subchannel.js\");\nconst subchannel_address_1 = __webpack_require__(/*! ./subchannel-address */ \"(rsc)/./node_modules/google-gax/node_modules/@grpc/grpc-js/build/src/subchannel-address.js\");\nconst uri_parser_1 = __webpack_require__(/*! ./uri-parser */ \"(rsc)/./node_modules/google-gax/node_modules/@grpc/grpc-js/build/src/uri-parser.js\");\nconst transport_1 = __webpack_require__(/*! ./transport */ \"(rsc)/./node_modules/google-gax/node_modules/@grpc/grpc-js/build/src/transport.js\");\n// 10 seconds in milliseconds. This value is arbitrary.\n/**\n * The amount of time in between checks for dropping subchannels that have no\n * other references\n */\nconst REF_CHECK_INTERVAL = 10000;\nclass SubchannelPool {\n    /**\n     * A pool of subchannels use for making connections. Subchannels with the\n     * exact same parameters will be reused.\n     */\n    constructor() {\n        this.pool = Object.create(null);\n        /**\n         * A timer of a task performing a periodic subchannel cleanup.\n         */\n        this.cleanupTimer = null;\n    }\n    /**\n     * Unrefs all unused subchannels and cancels the cleanup task if all\n     * subchannels have been unrefed.\n     */\n    unrefUnusedSubchannels() {\n        let allSubchannelsUnrefed = true;\n        /* These objects are created with Object.create(null), so they do not\n         * have a prototype, which means that for (... in ...) loops over them\n         * do not need to be filtered */\n        // eslint-disable-disable-next-line:forin\n        for (const channelTarget in this.pool) {\n            const subchannelObjArray = this.pool[channelTarget];\n            const refedSubchannels = subchannelObjArray.filter(value => !value.subchannel.unrefIfOneRef());\n            if (refedSubchannels.length > 0) {\n                allSubchannelsUnrefed = false;\n            }\n            /* For each subchannel in the pool, try to unref it if it has\n             * exactly one ref (which is the ref from the pool itself). If that\n             * does happen, remove the subchannel from the pool */\n            this.pool[channelTarget] = refedSubchannels;\n        }\n        /* Currently we do not delete keys with empty values. If that results\n         * in significant memory usage we should change it. */\n        // Cancel the cleanup task if all subchannels have been unrefed.\n        if (allSubchannelsUnrefed && this.cleanupTimer !== null) {\n            clearInterval(this.cleanupTimer);\n            this.cleanupTimer = null;\n        }\n    }\n    /**\n     * Ensures that the cleanup task is spawned.\n     */\n    ensureCleanupTask() {\n        var _a, _b;\n        if (this.cleanupTimer === null) {\n            this.cleanupTimer = setInterval(() => {\n                this.unrefUnusedSubchannels();\n            }, REF_CHECK_INTERVAL);\n            // Unref because this timer should not keep the event loop running.\n            // Call unref only if it exists to address electron/electron#21162\n            (_b = (_a = this.cleanupTimer).unref) === null || _b === void 0 ? void 0 : _b.call(_a);\n        }\n    }\n    /**\n     * Get a subchannel if one already exists with exactly matching parameters.\n     * Otherwise, create and save a subchannel with those parameters.\n     * @param channelTarget\n     * @param subchannelTarget\n     * @param channelArguments\n     * @param channelCredentials\n     */\n    getOrCreateSubchannel(channelTargetUri, subchannelTarget, channelArguments, channelCredentials) {\n        this.ensureCleanupTask();\n        const channelTarget = (0, uri_parser_1.uriToString)(channelTargetUri);\n        if (channelTarget in this.pool) {\n            const subchannelObjArray = this.pool[channelTarget];\n            for (const subchannelObj of subchannelObjArray) {\n                if ((0, subchannel_address_1.subchannelAddressEqual)(subchannelTarget, subchannelObj.subchannelAddress) &&\n                    (0, channel_options_1.channelOptionsEqual)(channelArguments, subchannelObj.channelArguments) &&\n                    channelCredentials._equals(subchannelObj.channelCredentials)) {\n                    return subchannelObj.subchannel;\n                }\n            }\n        }\n        // If we get here, no matching subchannel was found\n        const subchannel = new subchannel_1.Subchannel(channelTargetUri, subchannelTarget, channelArguments, channelCredentials, new transport_1.Http2SubchannelConnector(channelTargetUri));\n        if (!(channelTarget in this.pool)) {\n            this.pool[channelTarget] = [];\n        }\n        this.pool[channelTarget].push({\n            subchannelAddress: subchannelTarget,\n            channelArguments,\n            channelCredentials,\n            subchannel,\n        });\n        subchannel.ref();\n        return subchannel;\n    }\n}\nexports.SubchannelPool = SubchannelPool;\nconst globalSubchannelPool = new SubchannelPool();\n/**\n * Get either the global subchannel pool, or a new subchannel pool.\n * @param global\n */\nfunction getSubchannelPool(global) {\n    if (global) {\n        return globalSubchannelPool;\n    }\n    else {\n        return new SubchannelPool();\n    }\n}\n//# sourceMappingURL=subchannel-pool.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/google-gax/node_modules/@grpc/grpc-js/build/src/subchannel-pool.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/google-gax/node_modules/@grpc/grpc-js/build/src/subchannel.js":
/*!************************************************************************************!*\
  !*** ./node_modules/google-gax/node_modules/@grpc/grpc-js/build/src/subchannel.js ***!
  \************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\n/*\n * Copyright 2019 gRPC authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n */\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.Subchannel = void 0;\nconst connectivity_state_1 = __webpack_require__(/*! ./connectivity-state */ \"(rsc)/./node_modules/google-gax/node_modules/@grpc/grpc-js/build/src/connectivity-state.js\");\nconst backoff_timeout_1 = __webpack_require__(/*! ./backoff-timeout */ \"(rsc)/./node_modules/google-gax/node_modules/@grpc/grpc-js/build/src/backoff-timeout.js\");\nconst logging = __webpack_require__(/*! ./logging */ \"(rsc)/./node_modules/google-gax/node_modules/@grpc/grpc-js/build/src/logging.js\");\nconst constants_1 = __webpack_require__(/*! ./constants */ \"(rsc)/./node_modules/google-gax/node_modules/@grpc/grpc-js/build/src/constants.js\");\nconst uri_parser_1 = __webpack_require__(/*! ./uri-parser */ \"(rsc)/./node_modules/google-gax/node_modules/@grpc/grpc-js/build/src/uri-parser.js\");\nconst subchannel_address_1 = __webpack_require__(/*! ./subchannel-address */ \"(rsc)/./node_modules/google-gax/node_modules/@grpc/grpc-js/build/src/subchannel-address.js\");\nconst channelz_1 = __webpack_require__(/*! ./channelz */ \"(rsc)/./node_modules/google-gax/node_modules/@grpc/grpc-js/build/src/channelz.js\");\nconst TRACER_NAME = 'subchannel';\n/* setInterval and setTimeout only accept signed 32 bit integers. JS doesn't\n * have a constant for the max signed 32 bit integer, so this is a simple way\n * to calculate it */\nconst KEEPALIVE_MAX_TIME_MS = ~(1 << 31);\nclass Subchannel {\n    /**\n     * A class representing a connection to a single backend.\n     * @param channelTarget The target string for the channel as a whole\n     * @param subchannelAddress The address for the backend that this subchannel\n     *     will connect to\n     * @param options The channel options, plus any specific subchannel options\n     *     for this subchannel\n     * @param credentials The channel credentials used to establish this\n     *     connection\n     */\n    constructor(channelTarget, subchannelAddress, options, credentials, connector) {\n        var _a;\n        this.channelTarget = channelTarget;\n        this.subchannelAddress = subchannelAddress;\n        this.options = options;\n        this.connector = connector;\n        /**\n         * The subchannel's current connectivity state. Invariant: `session` === `null`\n         * if and only if `connectivityState` is IDLE or TRANSIENT_FAILURE.\n         */\n        this.connectivityState = connectivity_state_1.ConnectivityState.IDLE;\n        /**\n         * The underlying http2 session used to make requests.\n         */\n        this.transport = null;\n        /**\n         * Indicates that the subchannel should transition from TRANSIENT_FAILURE to\n         * CONNECTING instead of IDLE when the backoff timeout ends.\n         */\n        this.continueConnecting = false;\n        /**\n         * A list of listener functions that will be called whenever the connectivity\n         * state changes. Will be modified by `addConnectivityStateListener` and\n         * `removeConnectivityStateListener`\n         */\n        this.stateListeners = new Set();\n        /**\n         * Tracks channels and subchannel pools with references to this subchannel\n         */\n        this.refcount = 0;\n        // Channelz info\n        this.channelzEnabled = true;\n        const backoffOptions = {\n            initialDelay: options['grpc.initial_reconnect_backoff_ms'],\n            maxDelay: options['grpc.max_reconnect_backoff_ms'],\n        };\n        this.backoffTimeout = new backoff_timeout_1.BackoffTimeout(() => {\n            this.handleBackoffTimer();\n        }, backoffOptions);\n        this.backoffTimeout.unref();\n        this.subchannelAddressString = (0, subchannel_address_1.subchannelAddressToString)(subchannelAddress);\n        this.keepaliveTime = (_a = options['grpc.keepalive_time_ms']) !== null && _a !== void 0 ? _a : -1;\n        if (options['grpc.enable_channelz'] === 0) {\n            this.channelzEnabled = false;\n            this.channelzTrace = new channelz_1.ChannelzTraceStub();\n            this.callTracker = new channelz_1.ChannelzCallTrackerStub();\n            this.childrenTracker = new channelz_1.ChannelzChildrenTrackerStub();\n            this.streamTracker = new channelz_1.ChannelzCallTrackerStub();\n        }\n        else {\n            this.channelzTrace = new channelz_1.ChannelzTrace();\n            this.callTracker = new channelz_1.ChannelzCallTracker();\n            this.childrenTracker = new channelz_1.ChannelzChildrenTracker();\n            this.streamTracker = new channelz_1.ChannelzCallTracker();\n        }\n        this.channelzRef = (0, channelz_1.registerChannelzSubchannel)(this.subchannelAddressString, () => this.getChannelzInfo(), this.channelzEnabled);\n        this.channelzTrace.addTrace('CT_INFO', 'Subchannel created');\n        this.trace('Subchannel constructed with options ' +\n            JSON.stringify(options, undefined, 2));\n        this.secureConnector = credentials._createSecureConnector(channelTarget, options);\n    }\n    getChannelzInfo() {\n        return {\n            state: this.connectivityState,\n            trace: this.channelzTrace,\n            callTracker: this.callTracker,\n            children: this.childrenTracker.getChildLists(),\n            target: this.subchannelAddressString,\n        };\n    }\n    trace(text) {\n        logging.trace(constants_1.LogVerbosity.DEBUG, TRACER_NAME, '(' +\n            this.channelzRef.id +\n            ') ' +\n            this.subchannelAddressString +\n            ' ' +\n            text);\n    }\n    refTrace(text) {\n        logging.trace(constants_1.LogVerbosity.DEBUG, 'subchannel_refcount', '(' +\n            this.channelzRef.id +\n            ') ' +\n            this.subchannelAddressString +\n            ' ' +\n            text);\n    }\n    handleBackoffTimer() {\n        if (this.continueConnecting) {\n            this.transitionToState([connectivity_state_1.ConnectivityState.TRANSIENT_FAILURE], connectivity_state_1.ConnectivityState.CONNECTING);\n        }\n        else {\n            this.transitionToState([connectivity_state_1.ConnectivityState.TRANSIENT_FAILURE], connectivity_state_1.ConnectivityState.IDLE);\n        }\n    }\n    /**\n     * Start a backoff timer with the current nextBackoff timeout\n     */\n    startBackoff() {\n        this.backoffTimeout.runOnce();\n    }\n    stopBackoff() {\n        this.backoffTimeout.stop();\n        this.backoffTimeout.reset();\n    }\n    startConnectingInternal() {\n        let options = this.options;\n        if (options['grpc.keepalive_time_ms']) {\n            const adjustedKeepaliveTime = Math.min(this.keepaliveTime, KEEPALIVE_MAX_TIME_MS);\n            options = Object.assign(Object.assign({}, options), { 'grpc.keepalive_time_ms': adjustedKeepaliveTime });\n        }\n        this.connector\n            .connect(this.subchannelAddress, this.secureConnector, options)\n            .then(transport => {\n            if (this.transitionToState([connectivity_state_1.ConnectivityState.CONNECTING], connectivity_state_1.ConnectivityState.READY)) {\n                this.transport = transport;\n                if (this.channelzEnabled) {\n                    this.childrenTracker.refChild(transport.getChannelzRef());\n                }\n                transport.addDisconnectListener(tooManyPings => {\n                    this.transitionToState([connectivity_state_1.ConnectivityState.READY], connectivity_state_1.ConnectivityState.IDLE);\n                    if (tooManyPings && this.keepaliveTime > 0) {\n                        this.keepaliveTime *= 2;\n                        logging.log(constants_1.LogVerbosity.ERROR, `Connection to ${(0, uri_parser_1.uriToString)(this.channelTarget)} at ${this.subchannelAddressString} rejected by server because of excess pings. Increasing ping interval to ${this.keepaliveTime} ms`);\n                    }\n                });\n            }\n            else {\n                /* If we can't transition from CONNECTING to READY here, we will\n                 * not be using this transport, so release its resources. */\n                transport.shutdown();\n            }\n        }, error => {\n            this.transitionToState([connectivity_state_1.ConnectivityState.CONNECTING], connectivity_state_1.ConnectivityState.TRANSIENT_FAILURE, `${error}`);\n        });\n    }\n    /**\n     * Initiate a state transition from any element of oldStates to the new\n     * state. If the current connectivityState is not in oldStates, do nothing.\n     * @param oldStates The set of states to transition from\n     * @param newState The state to transition to\n     * @returns True if the state changed, false otherwise\n     */\n    transitionToState(oldStates, newState, errorMessage) {\n        var _a, _b;\n        if (oldStates.indexOf(this.connectivityState) === -1) {\n            return false;\n        }\n        if (errorMessage) {\n            this.trace(connectivity_state_1.ConnectivityState[this.connectivityState] +\n                ' -> ' +\n                connectivity_state_1.ConnectivityState[newState] +\n                ' with error \"' + errorMessage + '\"');\n        }\n        else {\n            this.trace(connectivity_state_1.ConnectivityState[this.connectivityState] +\n                ' -> ' +\n                connectivity_state_1.ConnectivityState[newState]);\n        }\n        if (this.channelzEnabled) {\n            this.channelzTrace.addTrace('CT_INFO', 'Connectivity state change to ' + connectivity_state_1.ConnectivityState[newState]);\n        }\n        const previousState = this.connectivityState;\n        this.connectivityState = newState;\n        switch (newState) {\n            case connectivity_state_1.ConnectivityState.READY:\n                this.stopBackoff();\n                break;\n            case connectivity_state_1.ConnectivityState.CONNECTING:\n                this.startBackoff();\n                this.startConnectingInternal();\n                this.continueConnecting = false;\n                break;\n            case connectivity_state_1.ConnectivityState.TRANSIENT_FAILURE:\n                if (this.channelzEnabled && this.transport) {\n                    this.childrenTracker.unrefChild(this.transport.getChannelzRef());\n                }\n                (_a = this.transport) === null || _a === void 0 ? void 0 : _a.shutdown();\n                this.transport = null;\n                /* If the backoff timer has already ended by the time we get to the\n                 * TRANSIENT_FAILURE state, we want to immediately transition out of\n                 * TRANSIENT_FAILURE as though the backoff timer is ending right now */\n                if (!this.backoffTimeout.isRunning()) {\n                    process.nextTick(() => {\n                        this.handleBackoffTimer();\n                    });\n                }\n                break;\n            case connectivity_state_1.ConnectivityState.IDLE:\n                if (this.channelzEnabled && this.transport) {\n                    this.childrenTracker.unrefChild(this.transport.getChannelzRef());\n                }\n                (_b = this.transport) === null || _b === void 0 ? void 0 : _b.shutdown();\n                this.transport = null;\n                break;\n            default:\n                throw new Error(`Invalid state: unknown ConnectivityState ${newState}`);\n        }\n        for (const listener of this.stateListeners) {\n            listener(this, previousState, newState, this.keepaliveTime, errorMessage);\n        }\n        return true;\n    }\n    ref() {\n        this.refTrace('refcount ' + this.refcount + ' -> ' + (this.refcount + 1));\n        this.refcount += 1;\n    }\n    unref() {\n        this.refTrace('refcount ' + this.refcount + ' -> ' + (this.refcount - 1));\n        this.refcount -= 1;\n        if (this.refcount === 0) {\n            this.channelzTrace.addTrace('CT_INFO', 'Shutting down');\n            (0, channelz_1.unregisterChannelzRef)(this.channelzRef);\n            this.secureConnector.destroy();\n            process.nextTick(() => {\n                this.transitionToState([connectivity_state_1.ConnectivityState.CONNECTING, connectivity_state_1.ConnectivityState.READY], connectivity_state_1.ConnectivityState.IDLE);\n            });\n        }\n    }\n    unrefIfOneRef() {\n        if (this.refcount === 1) {\n            this.unref();\n            return true;\n        }\n        return false;\n    }\n    createCall(metadata, host, method, listener) {\n        if (!this.transport) {\n            throw new Error('Cannot create call, subchannel not READY');\n        }\n        let statsTracker;\n        if (this.channelzEnabled) {\n            this.callTracker.addCallStarted();\n            this.streamTracker.addCallStarted();\n            statsTracker = {\n                onCallEnd: status => {\n                    if (status.code === constants_1.Status.OK) {\n                        this.callTracker.addCallSucceeded();\n                    }\n                    else {\n                        this.callTracker.addCallFailed();\n                    }\n                },\n            };\n        }\n        else {\n            statsTracker = {};\n        }\n        return this.transport.createCall(metadata, host, method, listener, statsTracker);\n    }\n    /**\n     * If the subchannel is currently IDLE, start connecting and switch to the\n     * CONNECTING state. If the subchannel is current in TRANSIENT_FAILURE,\n     * the next time it would transition to IDLE, start connecting again instead.\n     * Otherwise, do nothing.\n     */\n    startConnecting() {\n        process.nextTick(() => {\n            /* First, try to transition from IDLE to connecting. If that doesn't happen\n             * because the state is not currently IDLE, check if it is\n             * TRANSIENT_FAILURE, and if so indicate that it should go back to\n             * connecting after the backoff timer ends. Otherwise do nothing */\n            if (!this.transitionToState([connectivity_state_1.ConnectivityState.IDLE], connectivity_state_1.ConnectivityState.CONNECTING)) {\n                if (this.connectivityState === connectivity_state_1.ConnectivityState.TRANSIENT_FAILURE) {\n                    this.continueConnecting = true;\n                }\n            }\n        });\n    }\n    /**\n     * Get the subchannel's current connectivity state.\n     */\n    getConnectivityState() {\n        return this.connectivityState;\n    }\n    /**\n     * Add a listener function to be called whenever the subchannel's\n     * connectivity state changes.\n     * @param listener\n     */\n    addConnectivityStateListener(listener) {\n        this.stateListeners.add(listener);\n    }\n    /**\n     * Remove a listener previously added with `addConnectivityStateListener`\n     * @param listener A reference to a function previously passed to\n     *     `addConnectivityStateListener`\n     */\n    removeConnectivityStateListener(listener) {\n        this.stateListeners.delete(listener);\n    }\n    /**\n     * Reset the backoff timeout, and immediately start connecting if in backoff.\n     */\n    resetBackoff() {\n        process.nextTick(() => {\n            this.backoffTimeout.reset();\n            this.transitionToState([connectivity_state_1.ConnectivityState.TRANSIENT_FAILURE], connectivity_state_1.ConnectivityState.CONNECTING);\n        });\n    }\n    getAddress() {\n        return this.subchannelAddressString;\n    }\n    getChannelzRef() {\n        return this.channelzRef;\n    }\n    isHealthy() {\n        return true;\n    }\n    addHealthStateWatcher(listener) {\n        // Do nothing with the listener\n    }\n    removeHealthStateWatcher(listener) {\n        // Do nothing with the listener\n    }\n    getRealSubchannel() {\n        return this;\n    }\n    realSubchannelEquals(other) {\n        return other.getRealSubchannel() === this;\n    }\n    throttleKeepalive(newKeepaliveTime) {\n        if (newKeepaliveTime > this.keepaliveTime) {\n            this.keepaliveTime = newKeepaliveTime;\n        }\n    }\n    getCallCredentials() {\n        return this.secureConnector.getCallCredentials();\n    }\n}\nexports.Subchannel = Subchannel;\n//# sourceMappingURL=subchannel.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/google-gax/node_modules/@grpc/grpc-js/build/src/subchannel.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/google-gax/node_modules/@grpc/grpc-js/build/src/tls-helpers.js":
/*!*************************************************************************************!*\
  !*** ./node_modules/google-gax/node_modules/@grpc/grpc-js/build/src/tls-helpers.js ***!
  \*************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\n/*\n * Copyright 2019 gRPC authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n */\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.CIPHER_SUITES = void 0;\nexports.getDefaultRootsData = getDefaultRootsData;\nconst fs = __webpack_require__(/*! fs */ \"fs\");\nexports.CIPHER_SUITES = process.env.GRPC_SSL_CIPHER_SUITES;\nconst DEFAULT_ROOTS_FILE_PATH = process.env.GRPC_DEFAULT_SSL_ROOTS_FILE_PATH;\nlet defaultRootsData = null;\nfunction getDefaultRootsData() {\n    if (DEFAULT_ROOTS_FILE_PATH) {\n        if (defaultRootsData === null) {\n            defaultRootsData = fs.readFileSync(DEFAULT_ROOTS_FILE_PATH);\n        }\n        return defaultRootsData;\n    }\n    return null;\n}\n//# sourceMappingURL=tls-helpers.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvZ29vZ2xlLWdheC9ub2RlX21vZHVsZXMvQGdycGMvZ3JwYy1qcy9idWlsZC9zcmMvdGxzLWhlbHBlcnMuanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDhDQUE2QyxFQUFFLGFBQWEsRUFBQztBQUM3RCxxQkFBcUI7QUFDckIsMkJBQTJCO0FBQzNCLFdBQVcsbUJBQU8sQ0FBQyxjQUFJO0FBQ3ZCLHFCQUFxQjtBQUNyQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJzb3VyY2VzIjpbIi9Vc2Vycy9iYWcteW9zZWIvRGVza3RvcC/hhJHhhanhhIfhhbXhhIvhhaEvaGFja2F0aG9uX3RlYW0vbXktYXBwL25vZGVfbW9kdWxlcy9nb29nbGUtZ2F4L25vZGVfbW9kdWxlcy9AZ3JwYy9ncnBjLWpzL2J1aWxkL3NyYy90bHMtaGVscGVycy5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbi8qXG4gKiBDb3B5cmlnaHQgMjAxOSBnUlBDIGF1dGhvcnMuXG4gKlxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuICpcbiAqICAgICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbiAqXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuICpcbiAqL1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5DSVBIRVJfU1VJVEVTID0gdm9pZCAwO1xuZXhwb3J0cy5nZXREZWZhdWx0Um9vdHNEYXRhID0gZ2V0RGVmYXVsdFJvb3RzRGF0YTtcbmNvbnN0IGZzID0gcmVxdWlyZShcImZzXCIpO1xuZXhwb3J0cy5DSVBIRVJfU1VJVEVTID0gcHJvY2Vzcy5lbnYuR1JQQ19TU0xfQ0lQSEVSX1NVSVRFUztcbmNvbnN0IERFRkFVTFRfUk9PVFNfRklMRV9QQVRIID0gcHJvY2Vzcy5lbnYuR1JQQ19ERUZBVUxUX1NTTF9ST09UU19GSUxFX1BBVEg7XG5sZXQgZGVmYXVsdFJvb3RzRGF0YSA9IG51bGw7XG5mdW5jdGlvbiBnZXREZWZhdWx0Um9vdHNEYXRhKCkge1xuICAgIGlmIChERUZBVUxUX1JPT1RTX0ZJTEVfUEFUSCkge1xuICAgICAgICBpZiAoZGVmYXVsdFJvb3RzRGF0YSA9PT0gbnVsbCkge1xuICAgICAgICAgICAgZGVmYXVsdFJvb3RzRGF0YSA9IGZzLnJlYWRGaWxlU3luYyhERUZBVUxUX1JPT1RTX0ZJTEVfUEFUSCk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGRlZmF1bHRSb290c0RhdGE7XG4gICAgfVxuICAgIHJldHVybiBudWxsO1xufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9dGxzLWhlbHBlcnMuanMubWFwIl0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/google-gax/node_modules/@grpc/grpc-js/build/src/tls-helpers.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/google-gax/node_modules/@grpc/grpc-js/build/src/transport.js":
/*!***********************************************************************************!*\
  !*** ./node_modules/google-gax/node_modules/@grpc/grpc-js/build/src/transport.js ***!
  \***********************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\n/*\n * Copyright 2023 gRPC authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n */\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.Http2SubchannelConnector = void 0;\nconst http2 = __webpack_require__(/*! http2 */ \"http2\");\nconst channelz_1 = __webpack_require__(/*! ./channelz */ \"(rsc)/./node_modules/google-gax/node_modules/@grpc/grpc-js/build/src/channelz.js\");\nconst constants_1 = __webpack_require__(/*! ./constants */ \"(rsc)/./node_modules/google-gax/node_modules/@grpc/grpc-js/build/src/constants.js\");\nconst http_proxy_1 = __webpack_require__(/*! ./http_proxy */ \"(rsc)/./node_modules/google-gax/node_modules/@grpc/grpc-js/build/src/http_proxy.js\");\nconst logging = __webpack_require__(/*! ./logging */ \"(rsc)/./node_modules/google-gax/node_modules/@grpc/grpc-js/build/src/logging.js\");\nconst resolver_1 = __webpack_require__(/*! ./resolver */ \"(rsc)/./node_modules/google-gax/node_modules/@grpc/grpc-js/build/src/resolver.js\");\nconst subchannel_address_1 = __webpack_require__(/*! ./subchannel-address */ \"(rsc)/./node_modules/google-gax/node_modules/@grpc/grpc-js/build/src/subchannel-address.js\");\nconst uri_parser_1 = __webpack_require__(/*! ./uri-parser */ \"(rsc)/./node_modules/google-gax/node_modules/@grpc/grpc-js/build/src/uri-parser.js\");\nconst net = __webpack_require__(/*! net */ \"net\");\nconst subchannel_call_1 = __webpack_require__(/*! ./subchannel-call */ \"(rsc)/./node_modules/google-gax/node_modules/@grpc/grpc-js/build/src/subchannel-call.js\");\nconst call_number_1 = __webpack_require__(/*! ./call-number */ \"(rsc)/./node_modules/google-gax/node_modules/@grpc/grpc-js/build/src/call-number.js\");\nconst TRACER_NAME = 'transport';\nconst FLOW_CONTROL_TRACER_NAME = 'transport_flowctrl';\nconst clientVersion = (__webpack_require__(/*! ../../package.json */ \"(rsc)/./node_modules/google-gax/node_modules/@grpc/grpc-js/package.json\").version);\nconst { HTTP2_HEADER_AUTHORITY, HTTP2_HEADER_CONTENT_TYPE, HTTP2_HEADER_METHOD, HTTP2_HEADER_PATH, HTTP2_HEADER_TE, HTTP2_HEADER_USER_AGENT, } = http2.constants;\nconst KEEPALIVE_TIMEOUT_MS = 20000;\nconst tooManyPingsData = Buffer.from('too_many_pings', 'ascii');\nclass Http2Transport {\n    constructor(session, subchannelAddress, options, \n    /**\n     * Name of the remote server, if it is not the same as the subchannel\n     * address, i.e. if connecting through an HTTP CONNECT proxy.\n     */\n    remoteName) {\n        this.session = session;\n        this.options = options;\n        this.remoteName = remoteName;\n        /**\n         * Timer reference indicating when to send the next ping or when the most recent ping will be considered lost.\n         */\n        this.keepaliveTimer = null;\n        /**\n         * Indicates that the keepalive timer ran out while there were no active\n         * calls, and a ping should be sent the next time a call starts.\n         */\n        this.pendingSendKeepalivePing = false;\n        this.activeCalls = new Set();\n        this.disconnectListeners = [];\n        this.disconnectHandled = false;\n        this.channelzEnabled = true;\n        this.keepalivesSent = 0;\n        this.messagesSent = 0;\n        this.messagesReceived = 0;\n        this.lastMessageSentTimestamp = null;\n        this.lastMessageReceivedTimestamp = null;\n        /* Populate subchannelAddressString and channelzRef before doing anything\n         * else, because they are used in the trace methods. */\n        this.subchannelAddressString = (0, subchannel_address_1.subchannelAddressToString)(subchannelAddress);\n        if (options['grpc.enable_channelz'] === 0) {\n            this.channelzEnabled = false;\n            this.streamTracker = new channelz_1.ChannelzCallTrackerStub();\n        }\n        else {\n            this.streamTracker = new channelz_1.ChannelzCallTracker();\n        }\n        this.channelzRef = (0, channelz_1.registerChannelzSocket)(this.subchannelAddressString, () => this.getChannelzInfo(), this.channelzEnabled);\n        // Build user-agent string.\n        this.userAgent = [\n            options['grpc.primary_user_agent'],\n            `grpc-node-js/${clientVersion}`,\n            options['grpc.secondary_user_agent'],\n        ]\n            .filter(e => e)\n            .join(' '); // remove falsey values first\n        if ('grpc.keepalive_time_ms' in options) {\n            this.keepaliveTimeMs = options['grpc.keepalive_time_ms'];\n        }\n        else {\n            this.keepaliveTimeMs = -1;\n        }\n        if ('grpc.keepalive_timeout_ms' in options) {\n            this.keepaliveTimeoutMs = options['grpc.keepalive_timeout_ms'];\n        }\n        else {\n            this.keepaliveTimeoutMs = KEEPALIVE_TIMEOUT_MS;\n        }\n        if ('grpc.keepalive_permit_without_calls' in options) {\n            this.keepaliveWithoutCalls =\n                options['grpc.keepalive_permit_without_calls'] === 1;\n        }\n        else {\n            this.keepaliveWithoutCalls = false;\n        }\n        session.once('close', () => {\n            this.trace('session closed');\n            this.handleDisconnect();\n        });\n        session.once('goaway', (errorCode, lastStreamID, opaqueData) => {\n            let tooManyPings = false;\n            /* See the last paragraph of\n             * https://github.com/grpc/proposal/blob/master/A8-client-side-keepalive.md#basic-keepalive */\n            if (errorCode === http2.constants.NGHTTP2_ENHANCE_YOUR_CALM &&\n                opaqueData &&\n                opaqueData.equals(tooManyPingsData)) {\n                tooManyPings = true;\n            }\n            this.trace('connection closed by GOAWAY with code ' +\n                errorCode +\n                ' and data ' +\n                (opaqueData === null || opaqueData === void 0 ? void 0 : opaqueData.toString()));\n            this.reportDisconnectToOwner(tooManyPings);\n        });\n        session.once('error', error => {\n            this.trace('connection closed with error ' + error.message);\n            this.handleDisconnect();\n        });\n        session.socket.once('close', (hadError) => {\n            this.trace('connection closed. hadError=' + hadError);\n            this.handleDisconnect();\n        });\n        if (logging.isTracerEnabled(TRACER_NAME)) {\n            session.on('remoteSettings', (settings) => {\n                this.trace('new settings received' +\n                    (this.session !== session ? ' on the old connection' : '') +\n                    ': ' +\n                    JSON.stringify(settings));\n            });\n            session.on('localSettings', (settings) => {\n                this.trace('local settings acknowledged by remote' +\n                    (this.session !== session ? ' on the old connection' : '') +\n                    ': ' +\n                    JSON.stringify(settings));\n            });\n        }\n        /* Start the keepalive timer last, because this can trigger trace logs,\n         * which should only happen after everything else is set up. */\n        if (this.keepaliveWithoutCalls) {\n            this.maybeStartKeepalivePingTimer();\n        }\n    }\n    getChannelzInfo() {\n        var _a, _b, _c;\n        const sessionSocket = this.session.socket;\n        const remoteAddress = sessionSocket.remoteAddress\n            ? (0, subchannel_address_1.stringToSubchannelAddress)(sessionSocket.remoteAddress, sessionSocket.remotePort)\n            : null;\n        const localAddress = sessionSocket.localAddress\n            ? (0, subchannel_address_1.stringToSubchannelAddress)(sessionSocket.localAddress, sessionSocket.localPort)\n            : null;\n        let tlsInfo;\n        if (this.session.encrypted) {\n            const tlsSocket = sessionSocket;\n            const cipherInfo = tlsSocket.getCipher();\n            const certificate = tlsSocket.getCertificate();\n            const peerCertificate = tlsSocket.getPeerCertificate();\n            tlsInfo = {\n                cipherSuiteStandardName: (_a = cipherInfo.standardName) !== null && _a !== void 0 ? _a : null,\n                cipherSuiteOtherName: cipherInfo.standardName ? null : cipherInfo.name,\n                localCertificate: certificate && 'raw' in certificate ? certificate.raw : null,\n                remoteCertificate: peerCertificate && 'raw' in peerCertificate\n                    ? peerCertificate.raw\n                    : null,\n            };\n        }\n        else {\n            tlsInfo = null;\n        }\n        const socketInfo = {\n            remoteAddress: remoteAddress,\n            localAddress: localAddress,\n            security: tlsInfo,\n            remoteName: this.remoteName,\n            streamsStarted: this.streamTracker.callsStarted,\n            streamsSucceeded: this.streamTracker.callsSucceeded,\n            streamsFailed: this.streamTracker.callsFailed,\n            messagesSent: this.messagesSent,\n            messagesReceived: this.messagesReceived,\n            keepAlivesSent: this.keepalivesSent,\n            lastLocalStreamCreatedTimestamp: this.streamTracker.lastCallStartedTimestamp,\n            lastRemoteStreamCreatedTimestamp: null,\n            lastMessageSentTimestamp: this.lastMessageSentTimestamp,\n            lastMessageReceivedTimestamp: this.lastMessageReceivedTimestamp,\n            localFlowControlWindow: (_b = this.session.state.localWindowSize) !== null && _b !== void 0 ? _b : null,\n            remoteFlowControlWindow: (_c = this.session.state.remoteWindowSize) !== null && _c !== void 0 ? _c : null,\n        };\n        return socketInfo;\n    }\n    trace(text) {\n        logging.trace(constants_1.LogVerbosity.DEBUG, TRACER_NAME, '(' +\n            this.channelzRef.id +\n            ') ' +\n            this.subchannelAddressString +\n            ' ' +\n            text);\n    }\n    keepaliveTrace(text) {\n        logging.trace(constants_1.LogVerbosity.DEBUG, 'keepalive', '(' +\n            this.channelzRef.id +\n            ') ' +\n            this.subchannelAddressString +\n            ' ' +\n            text);\n    }\n    flowControlTrace(text) {\n        logging.trace(constants_1.LogVerbosity.DEBUG, FLOW_CONTROL_TRACER_NAME, '(' +\n            this.channelzRef.id +\n            ') ' +\n            this.subchannelAddressString +\n            ' ' +\n            text);\n    }\n    internalsTrace(text) {\n        logging.trace(constants_1.LogVerbosity.DEBUG, 'transport_internals', '(' +\n            this.channelzRef.id +\n            ') ' +\n            this.subchannelAddressString +\n            ' ' +\n            text);\n    }\n    /**\n     * Indicate to the owner of this object that this transport should no longer\n     * be used. That happens if the connection drops, or if the server sends a\n     * GOAWAY.\n     * @param tooManyPings If true, this was triggered by a GOAWAY with data\n     * indicating that the session was closed becaues the client sent too many\n     * pings.\n     * @returns\n     */\n    reportDisconnectToOwner(tooManyPings) {\n        if (this.disconnectHandled) {\n            return;\n        }\n        this.disconnectHandled = true;\n        this.disconnectListeners.forEach(listener => listener(tooManyPings));\n    }\n    /**\n     * Handle connection drops, but not GOAWAYs.\n     */\n    handleDisconnect() {\n        this.clearKeepaliveTimeout();\n        this.reportDisconnectToOwner(false);\n        for (const call of this.activeCalls) {\n            call.onDisconnect();\n        }\n        // Wait an event loop cycle before destroying the connection\n        setImmediate(() => {\n            this.session.destroy();\n        });\n    }\n    addDisconnectListener(listener) {\n        this.disconnectListeners.push(listener);\n    }\n    canSendPing() {\n        return (!this.session.destroyed &&\n            this.keepaliveTimeMs > 0 &&\n            (this.keepaliveWithoutCalls || this.activeCalls.size > 0));\n    }\n    maybeSendPing() {\n        var _a, _b;\n        if (!this.canSendPing()) {\n            this.pendingSendKeepalivePing = true;\n            return;\n        }\n        if (this.keepaliveTimer) {\n            console.error('keepaliveTimeout is not null');\n            return;\n        }\n        if (this.channelzEnabled) {\n            this.keepalivesSent += 1;\n        }\n        this.keepaliveTrace('Sending ping with timeout ' + this.keepaliveTimeoutMs + 'ms');\n        this.keepaliveTimer = setTimeout(() => {\n            this.keepaliveTimer = null;\n            this.keepaliveTrace('Ping timeout passed without response');\n            this.handleDisconnect();\n        }, this.keepaliveTimeoutMs);\n        (_b = (_a = this.keepaliveTimer).unref) === null || _b === void 0 ? void 0 : _b.call(_a);\n        let pingSendError = '';\n        try {\n            const pingSentSuccessfully = this.session.ping((err, duration, payload) => {\n                this.clearKeepaliveTimeout();\n                if (err) {\n                    this.keepaliveTrace('Ping failed with error ' + err.message);\n                    this.handleDisconnect();\n                }\n                else {\n                    this.keepaliveTrace('Received ping response');\n                    this.maybeStartKeepalivePingTimer();\n                }\n            });\n            if (!pingSentSuccessfully) {\n                pingSendError = 'Ping returned false';\n            }\n        }\n        catch (e) {\n            // grpc/grpc-node#2139\n            pingSendError = (e instanceof Error ? e.message : '') || 'Unknown error';\n        }\n        if (pingSendError) {\n            this.keepaliveTrace('Ping send failed: ' + pingSendError);\n            this.handleDisconnect();\n        }\n    }\n    /**\n     * Starts the keepalive ping timer if appropriate. If the timer already ran\n     * out while there were no active requests, instead send a ping immediately.\n     * If the ping timer is already running or a ping is currently in flight,\n     * instead do nothing and wait for them to resolve.\n     */\n    maybeStartKeepalivePingTimer() {\n        var _a, _b;\n        if (!this.canSendPing()) {\n            return;\n        }\n        if (this.pendingSendKeepalivePing) {\n            this.pendingSendKeepalivePing = false;\n            this.maybeSendPing();\n        }\n        else if (!this.keepaliveTimer) {\n            this.keepaliveTrace('Starting keepalive timer for ' + this.keepaliveTimeMs + 'ms');\n            this.keepaliveTimer = setTimeout(() => {\n                this.keepaliveTimer = null;\n                this.maybeSendPing();\n            }, this.keepaliveTimeMs);\n            (_b = (_a = this.keepaliveTimer).unref) === null || _b === void 0 ? void 0 : _b.call(_a);\n        }\n        /* Otherwise, there is already either a keepalive timer or a ping pending,\n         * wait for those to resolve. */\n    }\n    /**\n     * Clears whichever keepalive timeout is currently active, if any.\n     */\n    clearKeepaliveTimeout() {\n        if (this.keepaliveTimer) {\n            clearTimeout(this.keepaliveTimer);\n            this.keepaliveTimer = null;\n        }\n    }\n    removeActiveCall(call) {\n        this.activeCalls.delete(call);\n        if (this.activeCalls.size === 0) {\n            this.session.unref();\n        }\n    }\n    addActiveCall(call) {\n        this.activeCalls.add(call);\n        if (this.activeCalls.size === 1) {\n            this.session.ref();\n            if (!this.keepaliveWithoutCalls) {\n                this.maybeStartKeepalivePingTimer();\n            }\n        }\n    }\n    createCall(metadata, host, method, listener, subchannelCallStatsTracker) {\n        const headers = metadata.toHttp2Headers();\n        headers[HTTP2_HEADER_AUTHORITY] = host;\n        headers[HTTP2_HEADER_USER_AGENT] = this.userAgent;\n        headers[HTTP2_HEADER_CONTENT_TYPE] = 'application/grpc';\n        headers[HTTP2_HEADER_METHOD] = 'POST';\n        headers[HTTP2_HEADER_PATH] = method;\n        headers[HTTP2_HEADER_TE] = 'trailers';\n        let http2Stream;\n        /* In theory, if an error is thrown by session.request because session has\n         * become unusable (e.g. because it has received a goaway), this subchannel\n         * should soon see the corresponding close or goaway event anyway and leave\n         * READY. But we have seen reports that this does not happen\n         * (https://github.com/googleapis/nodejs-firestore/issues/1023#issuecomment-653204096)\n         * so for defense in depth, we just discard the session when we see an\n         * error here.\n         */\n        try {\n            http2Stream = this.session.request(headers);\n        }\n        catch (e) {\n            this.handleDisconnect();\n            throw e;\n        }\n        this.flowControlTrace('local window size: ' +\n            this.session.state.localWindowSize +\n            ' remote window size: ' +\n            this.session.state.remoteWindowSize);\n        this.internalsTrace('session.closed=' +\n            this.session.closed +\n            ' session.destroyed=' +\n            this.session.destroyed +\n            ' session.socket.destroyed=' +\n            this.session.socket.destroyed);\n        let eventTracker;\n        // eslint-disable-next-line prefer-const\n        let call;\n        if (this.channelzEnabled) {\n            this.streamTracker.addCallStarted();\n            eventTracker = {\n                addMessageSent: () => {\n                    var _a;\n                    this.messagesSent += 1;\n                    this.lastMessageSentTimestamp = new Date();\n                    (_a = subchannelCallStatsTracker.addMessageSent) === null || _a === void 0 ? void 0 : _a.call(subchannelCallStatsTracker);\n                },\n                addMessageReceived: () => {\n                    var _a;\n                    this.messagesReceived += 1;\n                    this.lastMessageReceivedTimestamp = new Date();\n                    (_a = subchannelCallStatsTracker.addMessageReceived) === null || _a === void 0 ? void 0 : _a.call(subchannelCallStatsTracker);\n                },\n                onCallEnd: status => {\n                    var _a;\n                    (_a = subchannelCallStatsTracker.onCallEnd) === null || _a === void 0 ? void 0 : _a.call(subchannelCallStatsTracker, status);\n                    this.removeActiveCall(call);\n                },\n                onStreamEnd: success => {\n                    var _a;\n                    if (success) {\n                        this.streamTracker.addCallSucceeded();\n                    }\n                    else {\n                        this.streamTracker.addCallFailed();\n                    }\n                    (_a = subchannelCallStatsTracker.onStreamEnd) === null || _a === void 0 ? void 0 : _a.call(subchannelCallStatsTracker, success);\n                },\n            };\n        }\n        else {\n            eventTracker = {\n                addMessageSent: () => {\n                    var _a;\n                    (_a = subchannelCallStatsTracker.addMessageSent) === null || _a === void 0 ? void 0 : _a.call(subchannelCallStatsTracker);\n                },\n                addMessageReceived: () => {\n                    var _a;\n                    (_a = subchannelCallStatsTracker.addMessageReceived) === null || _a === void 0 ? void 0 : _a.call(subchannelCallStatsTracker);\n                },\n                onCallEnd: status => {\n                    var _a;\n                    (_a = subchannelCallStatsTracker.onCallEnd) === null || _a === void 0 ? void 0 : _a.call(subchannelCallStatsTracker, status);\n                    this.removeActiveCall(call);\n                },\n                onStreamEnd: success => {\n                    var _a;\n                    (_a = subchannelCallStatsTracker.onStreamEnd) === null || _a === void 0 ? void 0 : _a.call(subchannelCallStatsTracker, success);\n                },\n            };\n        }\n        call = new subchannel_call_1.Http2SubchannelCall(http2Stream, eventTracker, listener, this, (0, call_number_1.getNextCallNumber)());\n        this.addActiveCall(call);\n        return call;\n    }\n    getChannelzRef() {\n        return this.channelzRef;\n    }\n    getPeerName() {\n        return this.subchannelAddressString;\n    }\n    getOptions() {\n        return this.options;\n    }\n    shutdown() {\n        this.session.close();\n        (0, channelz_1.unregisterChannelzRef)(this.channelzRef);\n    }\n}\nclass Http2SubchannelConnector {\n    constructor(channelTarget) {\n        this.channelTarget = channelTarget;\n        this.session = null;\n        this.isShutdown = false;\n    }\n    trace(text) {\n        logging.trace(constants_1.LogVerbosity.DEBUG, TRACER_NAME, (0, uri_parser_1.uriToString)(this.channelTarget) + ' ' + text);\n    }\n    createSession(secureConnectResult, address, options) {\n        if (this.isShutdown) {\n            return Promise.reject();\n        }\n        if (secureConnectResult.socket.closed) {\n            return Promise.reject('Connection closed before starting HTTP/2 handshake');\n        }\n        return new Promise((resolve, reject) => {\n            let remoteName = null;\n            let realTarget = this.channelTarget;\n            if ('grpc.http_connect_target' in options) {\n                const parsedTarget = (0, uri_parser_1.parseUri)(options['grpc.http_connect_target']);\n                if (parsedTarget) {\n                    realTarget = parsedTarget;\n                    remoteName = (0, uri_parser_1.uriToString)(parsedTarget);\n                }\n            }\n            const scheme = secureConnectResult.secure ? 'https' : 'http';\n            const targetPath = (0, resolver_1.getDefaultAuthority)(realTarget);\n            const closeHandler = () => {\n                var _a;\n                (_a = this.session) === null || _a === void 0 ? void 0 : _a.destroy();\n                this.session = null;\n                // Leave time for error event to happen before rejecting\n                setImmediate(() => {\n                    if (!reportedError) {\n                        reportedError = true;\n                        reject(`${errorMessage.trim()} (${new Date().toISOString()})`);\n                    }\n                });\n            };\n            const errorHandler = (error) => {\n                var _a;\n                (_a = this.session) === null || _a === void 0 ? void 0 : _a.destroy();\n                errorMessage = error.message;\n                this.trace('connection failed with error ' + errorMessage);\n                if (!reportedError) {\n                    reportedError = true;\n                    reject(`${errorMessage} (${new Date().toISOString()})`);\n                }\n            };\n            const sessionOptions = {\n                createConnection: (authority, option) => {\n                    return secureConnectResult.socket;\n                }\n            };\n            if (options['grpc-node.flow_control_window'] !== undefined) {\n                sessionOptions.settings = {\n                    initialWindowSize: options['grpc-node.flow_control_window']\n                };\n            }\n            const session = http2.connect(`${scheme}://${targetPath}`, sessionOptions);\n            this.session = session;\n            let errorMessage = 'Failed to connect';\n            let reportedError = false;\n            session.unref();\n            session.once('remoteSettings', () => {\n                session.removeAllListeners();\n                secureConnectResult.socket.removeListener('close', closeHandler);\n                secureConnectResult.socket.removeListener('error', errorHandler);\n                resolve(new Http2Transport(session, address, options, remoteName));\n                this.session = null;\n            });\n            session.once('close', closeHandler);\n            session.once('error', errorHandler);\n            secureConnectResult.socket.once('close', closeHandler);\n            secureConnectResult.socket.once('error', errorHandler);\n        });\n    }\n    tcpConnect(address, options) {\n        return (0, http_proxy_1.getProxiedConnection)(address, options).then(proxiedSocket => {\n            if (proxiedSocket) {\n                return proxiedSocket;\n            }\n            else {\n                return new Promise((resolve, reject) => {\n                    const closeCallback = () => {\n                        reject(new Error('Socket closed'));\n                    };\n                    const errorCallback = (error) => {\n                        reject(error);\n                    };\n                    const socket = net.connect(address, () => {\n                        socket.removeListener('close', closeCallback);\n                        socket.removeListener('error', errorCallback);\n                        resolve(socket);\n                    });\n                    socket.once('close', closeCallback);\n                    socket.once('error', errorCallback);\n                });\n            }\n        });\n    }\n    async connect(address, secureConnector, options) {\n        if (this.isShutdown) {\n            return Promise.reject();\n        }\n        let tcpConnection = null;\n        let secureConnectResult = null;\n        const addressString = (0, subchannel_address_1.subchannelAddressToString)(address);\n        try {\n            this.trace(addressString + ' Waiting for secureConnector to be ready');\n            await secureConnector.waitForReady();\n            this.trace(addressString + ' secureConnector is ready');\n            tcpConnection = await this.tcpConnect(address, options);\n            tcpConnection.setNoDelay();\n            this.trace(addressString + ' Established TCP connection');\n            secureConnectResult = await secureConnector.connect(tcpConnection);\n            this.trace(addressString + ' Established secure connection');\n            return this.createSession(secureConnectResult, address, options);\n        }\n        catch (e) {\n            tcpConnection === null || tcpConnection === void 0 ? void 0 : tcpConnection.destroy();\n            secureConnectResult === null || secureConnectResult === void 0 ? void 0 : secureConnectResult.socket.destroy();\n            throw e;\n        }\n    }\n    shutdown() {\n        var _a;\n        this.isShutdown = true;\n        (_a = this.session) === null || _a === void 0 ? void 0 : _a.close();\n        this.session = null;\n    }\n}\nexports.Http2SubchannelConnector = Http2SubchannelConnector;\n//# sourceMappingURL=transport.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/google-gax/node_modules/@grpc/grpc-js/build/src/transport.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/google-gax/node_modules/@grpc/grpc-js/build/src/uri-parser.js":
/*!************************************************************************************!*\
  !*** ./node_modules/google-gax/node_modules/@grpc/grpc-js/build/src/uri-parser.js ***!
  \************************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";
eval("\n/*\n * Copyright 2020 gRPC authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n */\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.parseUri = parseUri;\nexports.splitHostPort = splitHostPort;\nexports.combineHostPort = combineHostPort;\nexports.uriToString = uriToString;\n/*\n * The groups correspond to URI parts as follows:\n * 1. scheme\n * 2. authority\n * 3. path\n */\nconst URI_REGEX = /^(?:([A-Za-z0-9+.-]+):)?(?:\\/\\/([^/]*)\\/)?(.+)$/;\nfunction parseUri(uriString) {\n    const parsedUri = URI_REGEX.exec(uriString);\n    if (parsedUri === null) {\n        return null;\n    }\n    return {\n        scheme: parsedUri[1],\n        authority: parsedUri[2],\n        path: parsedUri[3],\n    };\n}\nconst NUMBER_REGEX = /^\\d+$/;\nfunction splitHostPort(path) {\n    if (path.startsWith('[')) {\n        const hostEnd = path.indexOf(']');\n        if (hostEnd === -1) {\n            return null;\n        }\n        const host = path.substring(1, hostEnd);\n        /* Only an IPv6 address should be in bracketed notation, and an IPv6\n         * address should have at least one colon */\n        if (host.indexOf(':') === -1) {\n            return null;\n        }\n        if (path.length > hostEnd + 1) {\n            if (path[hostEnd + 1] === ':') {\n                const portString = path.substring(hostEnd + 2);\n                if (NUMBER_REGEX.test(portString)) {\n                    return {\n                        host: host,\n                        port: +portString,\n                    };\n                }\n                else {\n                    return null;\n                }\n            }\n            else {\n                return null;\n            }\n        }\n        else {\n            return {\n                host,\n            };\n        }\n    }\n    else {\n        const splitPath = path.split(':');\n        /* Exactly one colon means that this is host:port. Zero colons means that\n         * there is no port. And multiple colons means that this is a bare IPv6\n         * address with no port */\n        if (splitPath.length === 2) {\n            if (NUMBER_REGEX.test(splitPath[1])) {\n                return {\n                    host: splitPath[0],\n                    port: +splitPath[1],\n                };\n            }\n            else {\n                return null;\n            }\n        }\n        else {\n            return {\n                host: path,\n            };\n        }\n    }\n}\nfunction combineHostPort(hostPort) {\n    if (hostPort.port === undefined) {\n        return hostPort.host;\n    }\n    else {\n        // Only an IPv6 host should include a colon\n        if (hostPort.host.includes(':')) {\n            return `[${hostPort.host}]:${hostPort.port}`;\n        }\n        else {\n            return `${hostPort.host}:${hostPort.port}`;\n        }\n    }\n}\nfunction uriToString(uri) {\n    let result = '';\n    if (uri.scheme !== undefined) {\n        result += uri.scheme + ':';\n    }\n    if (uri.authority !== undefined) {\n        result += '//' + uri.authority + '/';\n    }\n    result += uri.path;\n    return result;\n}\n//# sourceMappingURL=uri-parser.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvZ29vZ2xlLWdheC9ub2RlX21vZHVsZXMvQGdycGMvZ3JwYy1qcy9idWlsZC9zcmMvdXJpLXBhcnNlci5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsOENBQTZDLEVBQUUsYUFBYSxFQUFDO0FBQzdELGdCQUFnQjtBQUNoQixxQkFBcUI7QUFDckIsdUJBQXVCO0FBQ3ZCLG1CQUFtQjtBQUNuQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSx1QkFBdUIsY0FBYyxJQUFJLGNBQWM7QUFDdkQ7QUFDQTtBQUNBLHNCQUFzQixjQUFjLEdBQUcsY0FBYztBQUNyRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJzb3VyY2VzIjpbIi9Vc2Vycy9iYWcteW9zZWIvRGVza3RvcC/hhJHhhanhhIfhhbXhhIvhhaEvaGFja2F0aG9uX3RlYW0vbXktYXBwL25vZGVfbW9kdWxlcy9nb29nbGUtZ2F4L25vZGVfbW9kdWxlcy9AZ3JwYy9ncnBjLWpzL2J1aWxkL3NyYy91cmktcGFyc2VyLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuLypcbiAqIENvcHlyaWdodCAyMDIwIGdSUEMgYXV0aG9ycy5cbiAqXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4gKlxuICogICAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuICpcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4gKlxuICovXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLnBhcnNlVXJpID0gcGFyc2VVcmk7XG5leHBvcnRzLnNwbGl0SG9zdFBvcnQgPSBzcGxpdEhvc3RQb3J0O1xuZXhwb3J0cy5jb21iaW5lSG9zdFBvcnQgPSBjb21iaW5lSG9zdFBvcnQ7XG5leHBvcnRzLnVyaVRvU3RyaW5nID0gdXJpVG9TdHJpbmc7XG4vKlxuICogVGhlIGdyb3VwcyBjb3JyZXNwb25kIHRvIFVSSSBwYXJ0cyBhcyBmb2xsb3dzOlxuICogMS4gc2NoZW1lXG4gKiAyLiBhdXRob3JpdHlcbiAqIDMuIHBhdGhcbiAqL1xuY29uc3QgVVJJX1JFR0VYID0gL14oPzooW0EtWmEtejAtOSsuLV0rKTopPyg/OlxcL1xcLyhbXi9dKilcXC8pPyguKykkLztcbmZ1bmN0aW9uIHBhcnNlVXJpKHVyaVN0cmluZykge1xuICAgIGNvbnN0IHBhcnNlZFVyaSA9IFVSSV9SRUdFWC5leGVjKHVyaVN0cmluZyk7XG4gICAgaWYgKHBhcnNlZFVyaSA9PT0gbnVsbCkge1xuICAgICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG4gICAgcmV0dXJuIHtcbiAgICAgICAgc2NoZW1lOiBwYXJzZWRVcmlbMV0sXG4gICAgICAgIGF1dGhvcml0eTogcGFyc2VkVXJpWzJdLFxuICAgICAgICBwYXRoOiBwYXJzZWRVcmlbM10sXG4gICAgfTtcbn1cbmNvbnN0IE5VTUJFUl9SRUdFWCA9IC9eXFxkKyQvO1xuZnVuY3Rpb24gc3BsaXRIb3N0UG9ydChwYXRoKSB7XG4gICAgaWYgKHBhdGguc3RhcnRzV2l0aCgnWycpKSB7XG4gICAgICAgIGNvbnN0IGhvc3RFbmQgPSBwYXRoLmluZGV4T2YoJ10nKTtcbiAgICAgICAgaWYgKGhvc3RFbmQgPT09IC0xKSB7XG4gICAgICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBob3N0ID0gcGF0aC5zdWJzdHJpbmcoMSwgaG9zdEVuZCk7XG4gICAgICAgIC8qIE9ubHkgYW4gSVB2NiBhZGRyZXNzIHNob3VsZCBiZSBpbiBicmFja2V0ZWQgbm90YXRpb24sIGFuZCBhbiBJUHY2XG4gICAgICAgICAqIGFkZHJlc3Mgc2hvdWxkIGhhdmUgYXQgbGVhc3Qgb25lIGNvbG9uICovXG4gICAgICAgIGlmIChob3N0LmluZGV4T2YoJzonKSA9PT0gLTEpIHtcbiAgICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICB9XG4gICAgICAgIGlmIChwYXRoLmxlbmd0aCA+IGhvc3RFbmQgKyAxKSB7XG4gICAgICAgICAgICBpZiAocGF0aFtob3N0RW5kICsgMV0gPT09ICc6Jykge1xuICAgICAgICAgICAgICAgIGNvbnN0IHBvcnRTdHJpbmcgPSBwYXRoLnN1YnN0cmluZyhob3N0RW5kICsgMik7XG4gICAgICAgICAgICAgICAgaWYgKE5VTUJFUl9SRUdFWC50ZXN0KHBvcnRTdHJpbmcpKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgICAgICAgICAgICBob3N0OiBob3N0LFxuICAgICAgICAgICAgICAgICAgICAgICAgcG9ydDogK3BvcnRTdHJpbmcsXG4gICAgICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgICAgaG9zdCxcbiAgICAgICAgICAgIH07XG4gICAgICAgIH1cbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICAgIGNvbnN0IHNwbGl0UGF0aCA9IHBhdGguc3BsaXQoJzonKTtcbiAgICAgICAgLyogRXhhY3RseSBvbmUgY29sb24gbWVhbnMgdGhhdCB0aGlzIGlzIGhvc3Q6cG9ydC4gWmVybyBjb2xvbnMgbWVhbnMgdGhhdFxuICAgICAgICAgKiB0aGVyZSBpcyBubyBwb3J0LiBBbmQgbXVsdGlwbGUgY29sb25zIG1lYW5zIHRoYXQgdGhpcyBpcyBhIGJhcmUgSVB2NlxuICAgICAgICAgKiBhZGRyZXNzIHdpdGggbm8gcG9ydCAqL1xuICAgICAgICBpZiAoc3BsaXRQYXRoLmxlbmd0aCA9PT0gMikge1xuICAgICAgICAgICAgaWYgKE5VTUJFUl9SRUdFWC50ZXN0KHNwbGl0UGF0aFsxXSkpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgICAgICBob3N0OiBzcGxpdFBhdGhbMF0sXG4gICAgICAgICAgICAgICAgICAgIHBvcnQ6ICtzcGxpdFBhdGhbMV0sXG4gICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgICBob3N0OiBwYXRoLFxuICAgICAgICAgICAgfTtcbiAgICAgICAgfVxuICAgIH1cbn1cbmZ1bmN0aW9uIGNvbWJpbmVIb3N0UG9ydChob3N0UG9ydCkge1xuICAgIGlmIChob3N0UG9ydC5wb3J0ID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgcmV0dXJuIGhvc3RQb3J0Lmhvc3Q7XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgICAvLyBPbmx5IGFuIElQdjYgaG9zdCBzaG91bGQgaW5jbHVkZSBhIGNvbG9uXG4gICAgICAgIGlmIChob3N0UG9ydC5ob3N0LmluY2x1ZGVzKCc6JykpIHtcbiAgICAgICAgICAgIHJldHVybiBgWyR7aG9zdFBvcnQuaG9zdH1dOiR7aG9zdFBvcnQucG9ydH1gO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgcmV0dXJuIGAke2hvc3RQb3J0Lmhvc3R9OiR7aG9zdFBvcnQucG9ydH1gO1xuICAgICAgICB9XG4gICAgfVxufVxuZnVuY3Rpb24gdXJpVG9TdHJpbmcodXJpKSB7XG4gICAgbGV0IHJlc3VsdCA9ICcnO1xuICAgIGlmICh1cmkuc2NoZW1lICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgcmVzdWx0ICs9IHVyaS5zY2hlbWUgKyAnOic7XG4gICAgfVxuICAgIGlmICh1cmkuYXV0aG9yaXR5ICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgcmVzdWx0ICs9ICcvLycgKyB1cmkuYXV0aG9yaXR5ICsgJy8nO1xuICAgIH1cbiAgICByZXN1bHQgKz0gdXJpLnBhdGg7XG4gICAgcmV0dXJuIHJlc3VsdDtcbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXVyaS1wYXJzZXIuanMubWFwIl0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/google-gax/node_modules/@grpc/grpc-js/build/src/uri-parser.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/google-gax/node_modules/@grpc/grpc-js/package.json":
/*!*************************************************************************!*\
  !*** ./node_modules/google-gax/node_modules/@grpc/grpc-js/package.json ***!
  \*************************************************************************/
/***/ ((module) => {

"use strict";
module.exports = /*#__PURE__*/JSON.parse('{"name":"@grpc/grpc-js","version":"1.13.4","description":"gRPC Library for Node - pure JS implementation","homepage":"https://grpc.io/","repository":"https://github.com/grpc/grpc-node/tree/master/packages/grpc-js","main":"build/src/index.js","engines":{"node":">=12.10.0"},"keywords":[],"author":{"name":"Google Inc."},"types":"build/src/index.d.ts","license":"Apache-2.0","devDependencies":{"@grpc/proto-loader":"file:../proto-loader","@types/gulp":"^4.0.17","@types/gulp-mocha":"0.0.37","@types/lodash":"^4.14.202","@types/mocha":"^10.0.6","@types/ncp":"^2.0.8","@types/node":">=20.11.20","@types/pify":"^5.0.4","@types/semver":"^7.5.8","@typescript-eslint/eslint-plugin":"^7.1.0","@typescript-eslint/parser":"^7.1.0","@typescript-eslint/typescript-estree":"^7.1.0","clang-format":"^1.8.0","eslint":"^8.42.0","eslint-config-prettier":"^8.8.0","eslint-plugin-node":"^11.1.0","eslint-plugin-prettier":"^4.2.1","execa":"^2.0.3","gulp":"^4.0.2","gulp-mocha":"^6.0.0","lodash":"^4.17.21","madge":"^5.0.1","mocha-jenkins-reporter":"^0.4.1","ncp":"^2.0.0","pify":"^4.0.1","prettier":"^2.8.8","rimraf":"^3.0.2","semver":"^7.6.0","ts-node":"^10.9.2","typescript":"^5.3.3"},"contributors":[{"name":"Google Inc."}],"scripts":{"build":"npm run compile","clean":"rimraf ./build","compile":"tsc -p .","format":"clang-format -i -style=\\"{Language: JavaScript, BasedOnStyle: Google, ColumnLimit: 80}\\" src/*.ts test/*.ts","lint":"eslint src/*.ts test/*.ts","prepare":"npm run generate-types && npm run compile","test":"gulp test","check":"npm run lint","fix":"eslint --fix src/*.ts test/*.ts","pretest":"npm run generate-types && npm run generate-test-types && npm run compile","posttest":"npm run check && madge -c ./build/src","generate-types":"proto-loader-gen-types --keepCase --longs String --enums String --defaults --oneofs --includeComments --includeDirs proto/ --include-dirs test/fixtures/ -O src/generated/ --grpcLib ../index channelz.proto","generate-test-types":"proto-loader-gen-types --keepCase --longs String --enums String --defaults --oneofs --includeComments --include-dirs test/fixtures/ -O test/generated/ --grpcLib ../../src/index test_service.proto"},"dependencies":{"@grpc/proto-loader":"^0.7.13","@js-sdsl/ordered-map":"^4.4.2"},"files":["src/**/*.ts","build/src/**/*.{js,d.ts,js.map}","proto/*.proto","LICENSE","deps/envoy-api/envoy/api/v2/**/*.proto","deps/envoy-api/envoy/config/**/*.proto","deps/envoy-api/envoy/service/**/*.proto","deps/envoy-api/envoy/type/**/*.proto","deps/udpa/udpa/**/*.proto","deps/googleapis/google/api/*.proto","deps/googleapis/google/rpc/*.proto","deps/protoc-gen-validate/validate/**/*.proto"]}');

/***/ }),

/***/ "(rsc)/./node_modules/google-gax/package.json":
/*!**********************************************!*\
  !*** ./node_modules/google-gax/package.json ***!
  \**********************************************/
/***/ ((module) => {

"use strict";
module.exports = /*#__PURE__*/JSON.parse('{"name":"google-gax","version":"5.0.1-rc.1","description":"Google API Extensions","main":"build/src/index.js","types":"build/src/index.d.ts","files":["build/src","build/protos/","!build/src/**/*.map"],"dependencies":{"@grpc/grpc-js":"^1.12.6","@grpc/proto-loader":"^0.7.13","@types/long":"^5.0.0","abort-controller":"^3.0.0","duplexify":"^4.1.3","google-auth-library":"^10.0.0-rc.1","google-logging-utils":"^1.1.1","node-fetch":"^3.3.2","object-hash":"^3.0.0","proto3-json-serializer":"^3.0.0","protobufjs":"^7.5.0","retry-request":"^8.0.0"},"devDependencies":{"@babel/plugin-proposal-private-methods":"^7.18.6","@types/mocha":"^10.0.10","@types/ncp":"^2.0.8","@types/node":"^22.0.0","@types/object-hash":"^3.0.6","@types/proxyquire":"^1.3.31","@types/pumpify":"^1.4.4","@types/sinon":"^17.0.3","@types/uglify-js":"^3.17.5","c8":"^10.1.3","codecov":"^3.8.3","execa":"^5.0.0","glob":"10.4.5","google-proto-files":"^4.2.0","gts":"^6.0.2","jackspeak":"^3.0.2","jsdoc":"^4.0.4","jsdoc-fresh":"^3.0.0","jsdoc-region-tag":"^3.0.0","linkinator":"^6.1.2","long":"^5.2.4","lru-cache":"^10.0.0","mkdirp":"^3.0.1","mocha":"^11.1.0","ncp":"^2.0.0","null-loader":"^4.0.1","pdfmake":"^0.2.18","proxyquire":"^2.1.3","pumpify":"^2.0.1","sinon":"^20.0.0","stream-events":"^1.0.5","ts-loader":"^8.0.0","typescript":"^5.7.3","uglify-js":"^3.19.3","walkdir":"^0.4.1","webpack":"^5.97.1","webpack-cli":"^6.0.1"},"scripts":{"docs":"jsdoc -c .jsdoc.js","pretest":"npm run prepare","test":"c8 mocha build/test/unit","lint":"gts check src samples test","clean":"gts clean","compile":"tsc -p . && cp src/*.json build/src && cp -r test/fixtures build/test && cp -r protos build/","compile-operation-protos":"pbjs -t json google/longrunning/operations.proto -p ./protos > protos/operations.json && pbjs -t static-module -r operations_protos google/longrunning/operations.proto -p ./protos > protos/operations.js && pbts protos/operations.js -o protos/operations.d.ts","compile-compute-operations-protos":"pbjs -t json google/longrunning/compute_operations.proto -p ./protos > protos/compute_operations.json && pbjs -t static-module -r compute_operations_protos google/longrunning/compute_operations.proto -p ./protos > protos/compute_operations.js && pbts protos/compute_operations.js -o protos/compute_operations.d.ts","compile-iam-protos":"pbjs -t json google/iam/v1/iam_policy.proto google/iam/v1/options.proto google/iam/v1/policy.proto google/iam/v1/logging/audit_data.proto -p ./protos > protos/iam_service.json && pbjs -t static-module -r iam_protos google/iam/v1/iam_policy.proto google/iam/v1/options.proto google/iam/v1/policy.proto google/iam/v1/logging/audit_data.proto -p ./protos > protos/iam_service.js && pbts protos/iam_service.js -o protos/iam_service.d.ts","compile-location-protos":"pbjs -t json google/cloud/location/locations.proto -p ./protos > protos/locations.json && pbjs -t static-module -r locations_protos google/cloud/location/locations.proto -p ./protos > protos/locations.js && pbts protos/locations.js -o protos/locations.d.ts","compile-status-protos":"pbjs -t json google/rpc/status.proto google/rpc/error_details.proto -p ./protos > protos/status.json","compile-http-protos":"pbjs -t static-module -r http_proto --keep-case google/api/http.proto -p ./protos > protos/http.js && pbts protos/http.js -o protos/http.d.ts","fix":"gts fix","prepare":"npm run compile && cd ../tools && npm i && npm run compile && cd ../gax && pwd && node ../tools/build/src/prepublish.js . && mkdirp build/protos && cp -r protos/* build/protos/ && npm run minify-proto-json","system-test":"c8 mocha build/test/system-test --timeout 600000 && npm run test-application","samples-test":"cd samples/ && npm link ../ && npm test && cd ../","docs-test":"linkinator docs","predocs-test":"npm run docs","browser-test":"cd test/browser-test && npm run prefetch && npm install && npm test","test-application":"cd test/test-application && npm run prefetch && npm install && npm start","prelint":"cd samples; npm link ../; npm install","precompile":"gts clean","update-protos":"cd ../tools && npm i && npm run compile && cd ../gax && node ../tools/build/src/listProtos.js .","minify-proto-json":"cd ../tools && npm i && npm run compile && cd ../gax && node ../tools/build/src/minify.js"},"keywords":["grpc"],"exports":{".":"./build/src/index.js","./fallback":"./build/src/fallback.js","./gax":"./build/src/gax.js","./build/src/protobuf":"./build/src/protobuf.js","./build/src/index.js":"./build/src/index.js"},"repository":{"type":"git","url":"https://github.com/googleapis/gax-nodejs.git","directory":"gax"},"author":"Google API Authors","license":"Apache-2.0","bugs":{"url":"https://github.com/googleapis/gax-nodejs/issues"},"homepage":"https://github.com/googleapis/gax-nodejs#readme","engines":{"node":">=18"},"browser":"build/src/fallback.js"}');

/***/ })

};
;